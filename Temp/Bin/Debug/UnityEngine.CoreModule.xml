<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<doc>
  <members>
    <assembly>
      <name>UnityEngine.CoreModule</name>
    </assembly>
    <member name="T:UnityEngine.AddComponentMenu">
      <summary>
        <para>The AddComponentMenu attribute allows you to place a script anywhere in the "Component" menu, instead of just the "Component-&gt;Scripts" menu.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AddComponentMenu.componentOrder">
      <summary>
        <para>The order of the component in the component menu (lower is higher to the top).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AddComponentMenu.#ctor(System.String)">
      <summary>
        <para>Add an item in the Component menu.</para>
      </summary>
      <param name="menuName">The path to the component.</param>
      <param name="order">Where in the component menu to add the new item.</param>
    </member>
    <member name="M:UnityEngine.AddComponentMenu.#ctor(System.String,System.Int32)">
      <summary>
        <para>Add an item in the Component menu.</para>
      </summary>
      <param name="menuName">The path to the component.</param>
      <param name="order">Where in the component menu to add the new item.</param>
    </member>
    <member name="T:UnityEngine.AndroidActivityIndicatorStyle">
      <summary>
        <para>ActivityIndicator Style (Android Specific).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AndroidActivityIndicatorStyle.DontShow">
      <summary>
        <para>Do not show ActivityIndicator.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AndroidActivityIndicatorStyle.InversedLarge">
      <summary>
        <para>Large Inversed (android.R.attr.progressBarStyleLargeInverse).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AndroidActivityIndicatorStyle.InversedSmall">
      <summary>
        <para>Small Inversed (android.R.attr.progressBarStyleSmallInverse).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AndroidActivityIndicatorStyle.Large">
      <summary>
        <para>Large (android.R.attr.progressBarStyleLarge).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AndroidActivityIndicatorStyle.Small">
      <summary>
        <para>Small (android.R.attr.progressBarStyleSmall).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AnimationCurve">
      <summary>
        <para>Store a collection of Keyframes that can be evaluated over time.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationCurve.keys">
      <summary>
        <para>All keys defined in the animation curve.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationCurve.length">
      <summary>
        <para>The number of keys in the curve. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationCurve.postWrapMode">
      <summary>
        <para>The behaviour of the animation after the last keyframe.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationCurve.preWrapMode">
      <summary>
        <para>The behaviour of the animation before the first keyframe.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimationCurve.AddKey(System.Single,System.Single)">
      <summary>
        <para>Add a new key to the curve.</para>
      </summary>
      <param name="time">The time at which to add the key (horizontal axis in the curve graph).</param>
      <param name="value">The value for the key (vertical axis in the curve graph).</param>
      <returns>
        <para>The index of the added key, or -1 if the key could not be added.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.AnimationCurve.AddKey(UnityEngine.Keyframe)">
      <summary>
        <para>Add a new key to the curve.</para>
      </summary>
      <param name="key">The key to add to the curve.</param>
      <returns>
        <para>The index of the added key, or -1 if the key could not be added.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.AnimationCurve.Constant(System.Single,System.Single,System.Single)">
      <summary>
        <para>Creates a constant "curve" starting at timeStart, ending at timeEnd and with the value value.</para>
      </summary>
      <param name="timeStart">The start time for the constant curve.</param>
      <param name="timeEnd">The start time for the constant curve.</param>
      <param name="value">The value for the constant curve.</param>
      <returns>
        <para>The constant curve created from the specified values.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.AnimationCurve.#ctor(UnityEngine.Keyframe[])">
      <summary>
        <para>Creates an animation curve from an arbitrary number of keyframes.</para>
      </summary>
      <param name="keys">An array of Keyframes used to define the curve.</param>
    </member>
    <member name="M:UnityEngine.AnimationCurve.#ctor">
      <summary>
        <para>Creates an empty animation curve.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimationCurve.EaseInOut(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Creates an ease-in and out curve starting at timeStart, valueStart and ending at timeEnd, valueEnd.</para>
      </summary>
      <param name="timeStart">The start time for the ease curve.</param>
      <param name="valueStart">The start value for the ease curve.</param>
      <param name="timeEnd">The end time for the ease curve.</param>
      <param name="valueEnd">The end value for the ease curve.</param>
      <returns>
        <para>The ease-in and out curve generated from the specified values.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.AnimationCurve.Evaluate(System.Single)">
      <summary>
        <para>Evaluate the curve at time.</para>
      </summary>
      <param name="time">The time within the curve you want to evaluate (the horizontal axis in the curve graph).</param>
      <returns>
        <para>The value of the curve, at the point in time specified.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.AnimationCurve.Linear(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>A straight Line starting at timeStart, valueStart and ending at timeEnd, valueEnd.</para>
      </summary>
      <param name="timeStart">The start time for the linear curve.</param>
      <param name="valueStart">The start value for the linear curve.</param>
      <param name="timeEnd">The end time for the linear curve.</param>
      <param name="valueEnd">The end value for the linear curve.</param>
      <returns>
        <para>The linear curve created from the specified values.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.AnimationCurve.MoveKey(System.Int32,UnityEngine.Keyframe)">
      <summary>
        <para>Removes the keyframe at index and inserts key.</para>
      </summary>
      <param name="index">The index of the key to move.</param>
      <param name="key">The key (with its new time) to insert.</param>
      <returns>
        <para>The index of the keyframe after moving it.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.AnimationCurve.RemoveKey(System.Int32)">
      <summary>
        <para>Removes a key.</para>
      </summary>
      <param name="index">The index of the key to remove.</param>
    </member>
    <member name="M:UnityEngine.AnimationCurve.SmoothTangents(System.Int32,System.Single)">
      <summary>
        <para>Smooth the in and out tangents of the keyframe at index.</para>
      </summary>
      <param name="index">The index of the keyframe to be smoothed.</param>
      <param name="weight">The smoothing weight to apply to the keyframe's tangents.</param>
    </member>
    <member name="P:UnityEngine.AnimationCurve.this">
      <summary>
        <para>Retrieves the key at index. (Read Only)</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AnisotropicFiltering">
      <summary>
        <para>Anisotropic filtering mode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnisotropicFiltering.Disable">
      <summary>
        <para>Disable anisotropic filtering for all textures.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnisotropicFiltering.Enable">
      <summary>
        <para>Enable anisotropic filtering, as set for each texture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnisotropicFiltering.ForceEnable">
      <summary>
        <para>Enable anisotropic filtering for all textures.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Apple.FrameCapture">
      <summary>
        <para>Interface to control XCode Frame Capture.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Apple.FrameCapture.BeginCaptureToFile(System.String)">
      <summary>
        <para>Begin Capture to the specified file.</para>
      </summary>
      <param name="path"></param>
    </member>
    <member name="M:UnityEngine.Apple.FrameCapture.BeginCaptureToXcode">
      <summary>
        <para>Begin Capture in XCode frame debugger.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Apple.FrameCapture.CaptureNextFrameToFile(System.String)">
      <summary>
        <para>Begin capture to the specified file at the beginning of the next frame, and end it at the end of the next frame.</para>
      </summary>
      <param name="path"></param>
    </member>
    <member name="M:UnityEngine.Apple.FrameCapture.CaptureNextFrameToXcode">
      <summary>
        <para>Begin capture to Xcode at the beginning of the next frame, and end it at the end of the next frame.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Apple.FrameCapture.EndCapture">
      <summary>
        <para>End Capture.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Apple.FrameCapture.IsDestinationSupported(UnityEngine.Apple.FrameCaptureDestination)">
      <summary>
        <para>Is Capture destination supported.</para>
      </summary>
      <param name="dest"></param>
    </member>
    <member name="T:UnityEngine.Apple.FrameCaptureDestination">
      <summary>
        <para>Destination of Frame Capture
This is a wrapper for MTLCaptureDestination.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Apple.FrameCaptureDestination.DevTools">
      <summary>
        <para>Capture in XCode itself.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Apple.FrameCaptureDestination.GPUTraceDocument">
      <summary>
        <para>Capture to a GPU Trace document.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Apple.ReplayKit.ReplayKit">
      <summary>
        <para>ReplayKit is only available on certain iPhone, iPad and iPod Touch devices running iOS 9.0 or later.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Apple.ReplayKit.ReplayKit.broadcastingAPIAvailable">
      <summary>
        <para>A Boolean that indicates whether ReplayKit broadcasting API is available (true means available) (Read Only).
Check the value of this property before making ReplayKit broadcasting API calls. On iOS versions prior to iOS 10, this property will have a value of false.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Apple.ReplayKit.ReplayKit.broadcastURL">
      <summary>
        <para>A string property that contains an URL used to redirect the user to an on-going or completed broadcast (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Apple.ReplayKit.ReplayKit.cameraEnabled">
      <summary>
        <para>Camera enabled status. True, if camera enabled; false otherwise.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Apple.ReplayKit.ReplayKit.isBroadcasting">
      <summary>
        <para>Boolean property that indicates whether a broadcast is currently in progress (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Apple.ReplayKit.ReplayKit.isBroadcastingPaused">
      <summary>
        <para>Boolean property that indicates whether a broadcast is currently paused (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Apple.ReplayKit.ReplayKit.isPreviewControllerActive">
      <summary>
        <para>A boolean that indicates whether ReplayKit is currently displaying a preview controller. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Apple.ReplayKit.ReplayKit.isRecording">
      <summary>
        <para>A boolean that indicates whether ReplayKit is making a recording (where True means a recording is in progress). (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Apple.ReplayKit.ReplayKit.lastError">
      <summary>
        <para>A string value of the last error incurred by the ReplayKit: Either 'Failed to get Screen Recorder' or 'No recording available'. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Apple.ReplayKit.ReplayKit.microphoneEnabled">
      <summary>
        <para>Microphone enabled status. True, if microphone enabled; false otherwise.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Apple.ReplayKit.ReplayKit.recordingAvailable">
      <summary>
        <para>A boolean value that indicates that a new recording is available for preview (where True means available). (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Apple.ReplayKit.ReplayKit.APIAvailable">
      <summary>
        <para>A boolean that indicates whether the ReplayKit API is available (where True means available). (Read Only)</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Apple.ReplayKit.ReplayKit.BroadcastStatusCallback">
      <summary>
        <para>Function called at the completion of broadcast startup.</para>
      </summary>
      <param name="hasStarted">This parameter will be true if the broadcast started successfully and false in the event of an error.</param>
      <param name="errorMessage">In the event of failure to start a broadcast, this parameter contains the associated error message.</param>
    </member>
    <member name="M:UnityEngine.Apple.ReplayKit.ReplayKit.Discard">
      <summary>
        <para>Discard the current recording.</para>
      </summary>
      <returns>
        <para>A boolean value of True if the recording was discarded successfully or False if an error occurred.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Apple.ReplayKit.ReplayKit.HideCameraPreview">
      <summary>
        <para>Hide the camera preview view.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Apple.ReplayKit.ReplayKit.PauseBroadcasting">
      <summary>
        <para>Pauses current broadcast.
Will pause currently on-going broadcast. If no broadcast is in progress, does nothing.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Apple.ReplayKit.ReplayKit.Preview">
      <summary>
        <para>Preview the current recording</para>
      </summary>
      <returns>
        <para>A boolean value of True if the video preview window opened successfully or False if an error occurred.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Apple.ReplayKit.ReplayKit.ResumeBroadcasting">
      <summary>
        <para>Resumes current broadcast.
Will resume currently on-going broadcast. If no broadcast is in progress, does nothing.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Apple.ReplayKit.ReplayKit.ShowCameraPreviewAt(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Shows camera preview at coordinates posX and posY. The preview is width by height in size.</para>
      </summary>
      <param name="posX"></param>
      <param name="posY"></param>
      <param name="width"></param>
      <param name="height"></param>
    </member>
    <member name="M:UnityEngine.Apple.ReplayKit.ReplayKit.StartBroadcasting">
      <summary>
        <para>Initiates and starts a new broadcast
When StartBroadcast is called, user is presented with a broadcast provider selection screen, and then a broadcast setup screen. Once it is finished, a broadcast will be started, and the callback will be invoked.
It will also be invoked in case of any error.
        </para>
      </summary>
      <param name="callback">A callback for getting the status of broadcast initiation.</param>
      <param name="enableMicrophone">Enable or disable the microphone while broadcasting. Enabling the microphone allows you to include user commentary while broadcasting. The default value is false.</param>
      <param name="enableCamera">Enable or disable the camera while broadcasting. Enabling camera allows you to include user camera footage while broadcasting. The default value is false. To actually include camera footage in your broadcast, you also have to call ShowCameraPreviewAt as well to position the preview view.</param>
    </member>
    <member name="M:UnityEngine.Apple.ReplayKit.ReplayKit.StartRecording(System.Boolean,System.Boolean)">
      <summary>
        <para>Start a new recording.</para>
      </summary>
      <param name="enableMicrophone">Enable or disable the microphone while making a recording. Enabling the microphone allows you to include user commentary while recording. The default value is false.</param>
      <param name="enableCamera">Enable or disable the camera while making a recording. Enabling camera allows you to include user camera footage while recording. The default value is false. To actually include camera footage in your recording, you also have to call ShowCameraPreviewAt as well to position the preview view.</param>
      <returns>
        <para>A boolean value of True if recording started successfully or False if an error occurred.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Apple.ReplayKit.ReplayKit.StopBroadcasting">
      <summary>
        <para>Stops current broadcast.
Will terminate currently on-going broadcast. If no broadcast is in progress, does nothing.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Apple.ReplayKit.ReplayKit.StopRecording">
      <summary>
        <para>Stop the current recording.</para>
      </summary>
      <returns>
        <para>A boolean value of True if recording stopped successfully or False if an error occurred.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Application">
      <summary>
        <para>Access to application run-time data.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.absoluteURL">
      <summary>
        <para>The URL of the document. For WebGL, this a web URL. For Android, iOS, or Universal Windows Platform (UWP) this is a deep link URL. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.backgroundLoadingPriority">
      <summary>
        <para>Priority of background loading thread.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.buildGUID">
      <summary>
        <para>Returns a GUID for this build (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.cloudProjectId">
      <summary>
        <para>A unique cloud project identifier. It is unique for every project (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.companyName">
      <summary>
        <para>Return application company name (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.consoleLogPath">
      <summary>
        <para>Returns the path to the console log file, or an empty string if the current platform does not support log files.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.dataPath">
      <summary>
        <para>Contains the path to the game data folder on the target device (Read Only).</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Application.deepLinkActivated(System.Action`1&lt;System.String&gt;)">
      <summary>
        <para>This event is raised when an application running on Android, iOS, or the Universal Windows Platform (UWP) is activated using a deep link URL.</para>
      </summary>
      <param name="value">The deep link URL that activated the application.</param>
    </member>
    <member name="?:UnityEngine.Application.focusChanged(System.Action`1&lt;System.Boolean&gt;)">
      <summary>
        <para>Defines the delegate to use to register for events in which the focus gained or lost.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="P:UnityEngine.Application.genuine">
      <summary>
        <para>Returns false if application is altered in any way after it was built.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.genuineCheckAvailable">
      <summary>
        <para>Returns true if application integrity can be confirmed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.identifier">
      <summary>
        <para>Returns application identifier at runtime. On Apple platforms this is the 'bundleIdentifier' saved in the info.plist file, on Android it's the 'package' from the AndroidManifest.xml. </para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.installerName">
      <summary>
        <para>Returns the name of the store or package that installed the application (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.installMode">
      <summary>
        <para>Returns application install mode (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.internetReachability">
      <summary>
        <para>Returns the type of Internet reachability currently possible on the device.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.isBatchMode">
      <summary>
        <para>Returns true when Unity is launched with the -batchmode flag from the command line (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.isConsolePlatform">
      <summary>
        <para>Is the current Runtime platform a known console platform.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.isEditor">
      <summary>
        <para>Are we running inside the Unity editor? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.isFocused">
      <summary>
        <para>Whether the player currently has focus. Read-only.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.isLoadingLevel">
      <summary>
        <para>Is some level being loaded? (Read Only) (Obsolete).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.isMobilePlatform">
      <summary>
        <para>Is the current Runtime platform a known mobile platform.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.isPlaying">
      <summary>
        <para>Returns true when called in any kind of built Player, or when called in the Editor in Play Mode (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.isShowingSplashScreen">
      <summary>
        <para>Checks whether splash screen is being shown.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.levelCount">
      <summary>
        <para>The total number of levels available (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.loadedLevel">
      <summary>
        <para>Note: This is now obsolete. Use SceneManager.GetActiveScene instead. (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.loadedLevelName">
      <summary>
        <para>The name of the level that was last loaded (Read Only).</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Application.logMessageReceived(UnityEngine.Application/LogCallback)">
      <summary>
        <para>Event that is fired if a log message is received.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="?:UnityEngine.Application.logMessageReceivedThreaded(UnityEngine.Application/LogCallback)">
      <summary>
        <para>Event that is fired if a log message is received.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="?:UnityEngine.Application.lowMemory(UnityEngine.Application/LowMemoryCallback)">
      <summary>
        <para>This event occurs when your app receives a low-memory notification from the device it is running on. This only occurs when your app is running in the foreground. You can release non-critical assets from memory (such as, textures or audio clips) in response to this in order to avoid the app being terminated. You can also load smaller versions of such assets.  Furthermore, you should serialize any transient data to permanent storage to avoid data loss if the app is terminated.

This event is supported on iOS, Android, and Universal Windows Platform (UWP).

This event corresponds to the following callbacks on the different platforms:

- iOS: [UIApplicationDelegate applicationDidReceiveMemoryWarning]

- Android: onLowMemory() and onTrimMemory(level == TRIM_MEMORY_RUNNING_CRITICAL)

- UWP: MemoryManager.AppMemoryUsageIncreased (AppMemoryUsageLevel == OverLimit)

Note: For UWP, this event will not occur on Desktop and only works on memory constrained devices, such as HoloLens and Xbox One. The OverLimit threshold specified by the OS in this case is so high it is not reasonably possible to reach it and trigger the event.

Here is an example of handling the callback:</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="?:UnityEngine.Application.onBeforeRender(UnityEngine.Events.UnityAction)">
      <summary>
        <para>Delegate method used to register for "Just Before Render" input updates for VR devices.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="P:UnityEngine.Application.persistentDataPath">
      <summary>
        <para>(Read Only) Contains the path to a persistent data directory.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.platform">
      <summary>
        <para>Returns the platform the game is running on (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.productName">
      <summary>
        <para>Returns application product name (Read Only).</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Application.quitting(System.Action)">
      <summary>
        <para>Unity raises this event when the player application is qutting.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="P:UnityEngine.Application.runInBackground">
      <summary>
        <para>Should the player be running when the application is in the background?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.sandboxType">
      <summary>
        <para>Returns application running in sandbox (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.stackTraceLogType">
      <summary>
        <para>Obsolete. Use Application.SetStackTraceLogType.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.streamedBytes">
      <summary>
        <para>How many bytes have we downloaded from the main unity web stream (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.streamingAssetsPath">
      <summary>
        <para>The path to the StreamingAssets folder (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.systemLanguage">
      <summary>
        <para>The language the user's operating system is running in.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.targetFrameRate">
      <summary>
        <para>Instructs the game to try to render at a specified frame rate.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.temporaryCachePath">
      <summary>
        <para>Contains the path to a temporary data / cache directory (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.unityVersion">
      <summary>
        <para>The version of the Unity runtime used to play the content.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Application.unloading(System.Action)">
      <summary>
        <para>Unity raises this event when Player is unloading.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="P:UnityEngine.Application.version">
      <summary>
        <para>Returns application version number  (Read Only).</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Application.wantsToQuit(System.Func`1&lt;System.Boolean&gt;)">
      <summary>
        <para>Unity raises this event when the player application wants to quit.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="P:UnityEngine.Application.webSecurityEnabled">
      <summary>
        <para>Indicates whether Unity's webplayer security model is enabled.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Application.AdvertisingIdentifierCallback">
      <summary>
        <para>Delegate method for fetching advertising ID.</para>
      </summary>
      <param name="advertisingId">Advertising ID.</param>
      <param name="trackingEnabled">Indicates whether user has chosen to limit ad tracking.</param>
      <param name="errorMsg">Error message.</param>
    </member>
    <member name="M:UnityEngine.Application.CancelQuit">
      <summary>
        <para>Cancels quitting the application. This is useful for showing a splash screen at the end of a game.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Application.CanStreamedLevelBeLoaded(System.Int32)">
      <summary>
        <para>Can the streamed level be loaded?</para>
      </summary>
      <param name="levelIndex"></param>
    </member>
    <member name="M:UnityEngine.Application.CanStreamedLevelBeLoaded(System.String)">
      <summary>
        <para>Can the streamed level be loaded?</para>
      </summary>
      <param name="levelName"></param>
    </member>
    <member name="M:UnityEngine.Application.CaptureScreenshot(System.String)">
      <summary>
        <para>Captures a screenshot at path filename as a PNG file.</para>
      </summary>
      <param name="filename">Pathname to save the screenshot file to.</param>
      <param name="superSize">Factor by which to increase resolution.</param>
    </member>
    <member name="M:UnityEngine.Application.CaptureScreenshot(System.String,System.Int32)">
      <summary>
        <para>Captures a screenshot at path filename as a PNG file.</para>
      </summary>
      <param name="filename">Pathname to save the screenshot file to.</param>
      <param name="superSize">Factor by which to increase resolution.</param>
    </member>
    <member name="M:UnityEngine.Application.ExternalCall(System.String,System.Object[])">
      <summary>
        <para>Calls a function in the web page that contains the WebGL Player.</para>
      </summary>
      <param name="functionName">Name of the function to call.</param>
      <param name="args">Array of arguments passed in the call.</param>
    </member>
    <member name="M:UnityEngine.Application.ExternalEval(System.String)">
      <summary>
        <para>Execution of a script function in the contained web page.</para>
      </summary>
      <param name="script">The Javascript function to call.</param>
    </member>
    <member name="M:UnityEngine.Application.GetBuildTags">
      <summary>
        <para>Returns an array of feature tags in use for this build.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Application.GetStackTraceLogType(UnityEngine.LogType)">
      <summary>
        <para>Get stack trace logging options. The default value is StackTraceLogType.ScriptOnly.</para>
      </summary>
      <param name="logType"></param>
    </member>
    <member name="M:UnityEngine.Application.GetStreamProgressForLevel(System.Int32)">
      <summary>
        <para>How far has the download progressed? [0...1].</para>
      </summary>
      <param name="levelIndex"></param>
    </member>
    <member name="M:UnityEngine.Application.GetStreamProgressForLevel(System.String)">
      <summary>
        <para>How far has the download progressed? [0...1].</para>
      </summary>
      <param name="levelName"></param>
    </member>
    <member name="M:UnityEngine.Application.HasProLicense">
      <summary>
        <para>Is Unity activated with the Pro license?</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Application.HasUserAuthorization(UnityEngine.UserAuthorization)">
      <summary>
        <para>Check if the user has authorized use of the webcam or microphone in the Web Player.</para>
      </summary>
      <param name="mode"></param>
    </member>
    <member name="M:UnityEngine.Application.IsPlaying(UnityEngine.Object)">
      <summary>
        <para>Returns true if the given object is part of the playing world either in any kind of built Player or in Play Mode.</para>
      </summary>
      <param name="obj">The object to test.</param>
      <returns>
        <para>True if the object is part of the playing world.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Application.LoadLevel(System.Int32)">
      <summary>
        <para>Note: This is now obsolete. Use SceneManager.LoadScene instead.</para>
      </summary>
      <param name="index">The level to load.</param>
      <param name="name">The name of the level to load.</param>
    </member>
    <member name="M:UnityEngine.Application.LoadLevel(System.String)">
      <summary>
        <para>Note: This is now obsolete. Use SceneManager.LoadScene instead.</para>
      </summary>
      <param name="index">The level to load.</param>
      <param name="name">The name of the level to load.</param>
    </member>
    <member name="M:UnityEngine.Application.LoadLevelAdditive(System.Int32)">
      <summary>
        <para>Loads a level additively.</para>
      </summary>
      <param name="index"></param>
      <param name="name"></param>
    </member>
    <member name="M:UnityEngine.Application.LoadLevelAdditive(System.String)">
      <summary>
        <para>Loads a level additively.</para>
      </summary>
      <param name="index"></param>
      <param name="name"></param>
    </member>
    <member name="M:UnityEngine.Application.LoadLevelAdditiveAsync(System.Int32)">
      <summary>
        <para>Loads the level additively and asynchronously in the background.</para>
      </summary>
      <param name="index"></param>
      <param name="levelName"></param>
    </member>
    <member name="M:UnityEngine.Application.LoadLevelAdditiveAsync(System.String)">
      <summary>
        <para>Loads the level additively and asynchronously in the background.</para>
      </summary>
      <param name="index"></param>
      <param name="levelName"></param>
    </member>
    <member name="M:UnityEngine.Application.LoadLevelAsync(System.Int32)">
      <summary>
        <para>Loads the level asynchronously in the background.</para>
      </summary>
      <param name="index"></param>
      <param name="levelName"></param>
    </member>
    <member name="M:UnityEngine.Application.LoadLevelAsync(System.String)">
      <summary>
        <para>Loads the level asynchronously in the background.</para>
      </summary>
      <param name="index"></param>
      <param name="levelName"></param>
    </member>
    <member name="T:UnityEngine.Application.LogCallback">
      <summary>
        <para>Use this delegate type with Application.logMessageReceived or Application.logMessageReceivedThreaded to monitor what gets logged.</para>
      </summary>
      <param name="condition"></param>
      <param name="stackTrace"></param>
      <param name="type"></param>
    </member>
    <member name="T:UnityEngine.Application.LowMemoryCallback">
      <summary>
        <para>This is the delegate function when a mobile device notifies of low memory.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Application.OpenURL(System.String)">
      <summary>
        <para>Opens the URL specified, subject to the permissions and limitations of your app’s current platform and environment. This is handled in different ways depending on the nature of the URL, and with different security restrictions, depending on the runtime platform.</para>
      </summary>
      <param name="url">The URL to open.</param>
    </member>
    <member name="M:UnityEngine.Application.Quit">
      <summary>
        <para>Quits the player application.</para>
      </summary>
      <param name="exitCode">An optional exit code to return when the player application terminates on Windows, Mac and Linux. Defaults to 0.</param>
    </member>
    <member name="M:UnityEngine.Application.RequestAdvertisingIdentifierAsync(UnityEngine.Application/AdvertisingIdentifierCallback)">
      <summary>
        <para>Request advertising ID for iOS and Windows Store.</para>
      </summary>
      <param name="delegateMethod">Delegate method.</param>
      <returns>
        <para>Returns true if successful, or false for platforms which do not support Advertising Identifiers. In this case, the delegate method is not invoked.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Application.RequestUserAuthorization(UnityEngine.UserAuthorization)">
      <summary>
        <para>Request authorization to use the webcam or microphone on iOS.</para>
      </summary>
      <param name="mode"></param>
    </member>
    <member name="M:UnityEngine.Application.SetBuildTags(System.String[])">
      <summary>
        <para>Set an array of feature tags for this build.</para>
      </summary>
      <param name="buildTags"></param>
    </member>
    <member name="M:UnityEngine.Application.SetStackTraceLogType(UnityEngine.LogType,UnityEngine.StackTraceLogType)">
      <summary>
        <para>Set stack trace logging options. The default value is StackTraceLogType.ScriptOnly.</para>
      </summary>
      <param name="logType"></param>
      <param name="stackTraceType"></param>
    </member>
    <member name="M:UnityEngine.Application.Unload">
      <summary>
        <para>Unloads the Unity Player.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Application.UnloadLevel(System.Int32)">
      <summary>
        <para>Unloads all GameObject associated with the given Scene. Note that assets are currently not unloaded, in order to free up asset memory call Resources.UnloadAllUnusedAssets.</para>
      </summary>
      <param name="index">Index of the Scene in the PlayerSettings to unload.</param>
      <param name="scenePath">Name of the Scene to Unload.</param>
      <returns>
        <para>Return true if the Scene is unloaded.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Application.UnloadLevel(System.String)">
      <summary>
        <para>Unloads all GameObject associated with the given Scene. Note that assets are currently not unloaded, in order to free up asset memory call Resources.UnloadAllUnusedAssets.</para>
      </summary>
      <param name="index">Index of the Scene in the PlayerSettings to unload.</param>
      <param name="scenePath">Name of the Scene to Unload.</param>
      <returns>
        <para>Return true if the Scene is unloaded.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.ApplicationInstallMode">
      <summary>
        <para>Application installation mode (Read Only).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ApplicationInstallMode.Adhoc">
      <summary>
        <para>Application installed via ad hoc distribution.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ApplicationInstallMode.DeveloperBuild">
      <summary>
        <para>Application installed via developer build.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ApplicationInstallMode.Editor">
      <summary>
        <para>Application running in editor.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ApplicationInstallMode.Enterprise">
      <summary>
        <para>Application installed via enterprise distribution.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ApplicationInstallMode.Store">
      <summary>
        <para>Application installed via online store.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ApplicationInstallMode.Unknown">
      <summary>
        <para>Application install mode unknown.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ApplicationSandboxType">
      <summary>
        <para>Application sandbox type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ApplicationSandboxType.NotSandboxed">
      <summary>
        <para>Application not running in a sandbox.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ApplicationSandboxType.SandboxBroken">
      <summary>
        <para>Application is running in broken sandbox.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ApplicationSandboxType.Sandboxed">
      <summary>
        <para>Application is running in a sandbox.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ApplicationSandboxType.Unknown">
      <summary>
        <para>Application sandbox type is unknown.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AssemblyIsEditorAssembly">
      <summary>
        <para>Assembly level attribute. Any classes in an assembly with this attribute will be considered to be Editor Classes.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AssemblyIsEditorAssembly.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Assertions.Assert">
      <summary>
        <para>The Assert class contains assertion methods for setting invariants in the code.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Assertions.Assert.raiseExceptions">
      <summary>
        <para>Set to true to throw an exception when assertion methods fail and false if otherwise. This value defaults to true.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreApproximatelyEqual(System.Single,System.Single)">
      <summary>
        <para>Assert the values are approximately equal.</para>
      </summary>
      <param name="tolerance">Tolerance of approximation.</param>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreApproximatelyEqual(System.Single,System.Single,System.String)">
      <summary>
        <para>Assert the values are approximately equal.</para>
      </summary>
      <param name="tolerance">Tolerance of approximation.</param>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreApproximatelyEqual(System.Single,System.Single,System.Single)">
      <summary>
        <para>Assert the values are approximately equal.</para>
      </summary>
      <param name="tolerance">Tolerance of approximation.</param>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreApproximatelyEqual(System.Single,System.Single,System.Single,System.String)">
      <summary>
        <para>Assert the values are approximately equal.</para>
      </summary>
      <param name="tolerance">Tolerance of approximation.</param>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreEqual(UnityEngine.Object,UnityEngine.Object,System.String)">
      <summary>
        <para>Assert that the values are equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreEqual(System.SByte,System.SByte,System.String)">
      <summary>
        <para>Assert that the values are equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreEqual(System.Byte,System.Byte,System.String)">
      <summary>
        <para>Assert that the values are equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreEqual(System.Char,System.Char,System.String)">
      <summary>
        <para>Assert that the values are equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreEqual(System.Int16,System.Int16,System.String)">
      <summary>
        <para>Assert that the values are equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreEqual(System.UInt16,System.UInt16)">
      <summary>
        <para>Assert that the values are equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreEqual(System.SByte,System.SByte)">
      <summary>
        <para>Assert that the values are equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreEqual(System.Byte,System.Byte)">
      <summary>
        <para>Assert that the values are equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreEqual(System.Char,System.Char)">
      <summary>
        <para>Assert that the values are equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreEqual(System.Int16,System.Int16)">
      <summary>
        <para>Assert that the values are equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreEqual(System.UInt16,System.UInt16,System.String)">
      <summary>
        <para>Assert that the values are equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreEqual(System.Int32,System.Int32,System.String)">
      <summary>
        <para>Assert that the values are equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreEqual(System.UInt32,System.UInt32)">
      <summary>
        <para>Assert that the values are equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreEqual(System.Int32,System.Int32)">
      <summary>
        <para>Assert that the values are equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreEqual(System.UInt32,System.UInt32,System.String)">
      <summary>
        <para>Assert that the values are equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreEqual(System.Int64,System.Int64)">
      <summary>
        <para>Assert that the values are equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreEqual(System.Int64,System.Int64,System.String)">
      <summary>
        <para>Assert that the values are equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreEqual(System.UInt64,System.UInt64)">
      <summary>
        <para>Assert that the values are equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreEqual(System.UInt64,System.UInt64,System.String)">
      <summary>
        <para>Assert that the values are equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreEqual(T,T)">
      <summary>
        <para>Assert that the values are equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreEqual(T,T,System.String)">
      <summary>
        <para>Assert that the values are equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreEqual(T,T,System.String,System.Collections.Generic.IEqualityComparer`1&lt;T&gt;)">
      <summary>
        <para>Assert that the values are equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreNotApproximatelyEqual(System.Single,System.Single)">
      <summary>
        <para>Asserts that the values are approximately not equal.</para>
      </summary>
      <param name="tolerance">Tolerance of approximation.</param>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreNotApproximatelyEqual(System.Single,System.Single,System.String)">
      <summary>
        <para>Asserts that the values are approximately not equal.</para>
      </summary>
      <param name="tolerance">Tolerance of approximation.</param>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreNotApproximatelyEqual(System.Single,System.Single,System.Single)">
      <summary>
        <para>Asserts that the values are approximately not equal.</para>
      </summary>
      <param name="tolerance">Tolerance of approximation.</param>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreNotApproximatelyEqual(System.Single,System.Single,System.Single,System.String)">
      <summary>
        <para>Asserts that the values are approximately not equal.</para>
      </summary>
      <param name="tolerance">Tolerance of approximation.</param>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreNotEqual(UnityEngine.Object,UnityEngine.Object,System.String)">
      <summary>
        <para>Assert that the values are not equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreNotEqual(System.SByte,System.SByte)">
      <summary>
        <para>Assert that the values are not equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreNotEqual(System.SByte,System.SByte,System.String)">
      <summary>
        <para>Assert that the values are not equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreNotEqual(System.Byte,System.Byte)">
      <summary>
        <para>Assert that the values are not equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreNotEqual(System.Byte,System.Byte,System.String)">
      <summary>
        <para>Assert that the values are not equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreNotEqual(System.Char,System.Char)">
      <summary>
        <para>Assert that the values are not equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreNotEqual(System.Char,System.Char,System.String)">
      <summary>
        <para>Assert that the values are not equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreNotEqual(System.Int16,System.Int16)">
      <summary>
        <para>Assert that the values are not equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreNotEqual(System.Int16,System.Int16,System.String)">
      <summary>
        <para>Assert that the values are not equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreNotEqual(System.UInt16,System.UInt16)">
      <summary>
        <para>Assert that the values are not equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreNotEqual(System.UInt16,System.UInt16,System.String)">
      <summary>
        <para>Assert that the values are not equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreNotEqual(System.Int32,System.Int32)">
      <summary>
        <para>Assert that the values are not equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreNotEqual(System.Int32,System.Int32,System.String)">
      <summary>
        <para>Assert that the values are not equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreNotEqual(System.UInt32,System.UInt32)">
      <summary>
        <para>Assert that the values are not equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreNotEqual(System.UInt32,System.UInt32,System.String)">
      <summary>
        <para>Assert that the values are not equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreNotEqual(System.Int64,System.Int64)">
      <summary>
        <para>Assert that the values are not equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreNotEqual(System.Int64,System.Int64,System.String)">
      <summary>
        <para>Assert that the values are not equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreNotEqual(System.UInt64,System.UInt64)">
      <summary>
        <para>Assert that the values are not equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreNotEqual(System.UInt64,System.UInt64,System.String)">
      <summary>
        <para>Assert that the values are not equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreNotEqual(T,T)">
      <summary>
        <para>Assert that the values are not equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreNotEqual(T,T,System.String)">
      <summary>
        <para>Assert that the values are not equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.AreNotEqual(T,T,System.String,System.Collections.Generic.IEqualityComparer`1&lt;T&gt;)">
      <summary>
        <para>Assert that the values are not equal.</para>
      </summary>
      <param name="expected">The assumed Assert value.</param>
      <param name="actual">The exact Assert value.</param>
      <param name="message">The string used to describe the Assert.</param>
      <param name="comparer">Method to compare expected and actual arguments have the same value.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.IsFalse(System.Boolean)">
      <summary>
        <para>Return true when the condition is false.  Otherwise return false.</para>
      </summary>
      <param name="condition">true or false.</param>
      <param name="message">The string used to describe the result of the Assert.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.IsFalse(System.Boolean,System.String)">
      <summary>
        <para>Return true when the condition is false.  Otherwise return false.</para>
      </summary>
      <param name="condition">true or false.</param>
      <param name="message">The string used to describe the result of the Assert.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.IsNotNull(UnityEngine.Object,System.String)">
      <summary>
        <para>Assert that the value is not null.</para>
      </summary>
      <param name="value">The Object or type being checked for.</param>
      <param name="message">The string used to describe the Assert.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.IsNotNull(T)">
      <summary>
        <para>Assert that the value is not null.</para>
      </summary>
      <param name="value">The Object or type being checked for.</param>
      <param name="message">The string used to describe the Assert.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.IsNotNull(T,System.String)">
      <summary>
        <para>Assert that the value is not null.</para>
      </summary>
      <param name="value">The Object or type being checked for.</param>
      <param name="message">The string used to describe the Assert.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.IsNull(UnityEngine.Object,System.String)">
      <summary>
        <para>Assert the value is null.</para>
      </summary>
      <param name="value">The Object or type being checked for.</param>
      <param name="message">The string used to describe the Assert.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.IsNull(T)">
      <summary>
        <para>Assert the value is null.</para>
      </summary>
      <param name="value">The Object or type being checked for.</param>
      <param name="message">The string used to describe the Assert.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.IsNull(T,System.String)">
      <summary>
        <para>Assert the value is null.</para>
      </summary>
      <param name="value">The Object or type being checked for.</param>
      <param name="message">The string used to describe the Assert.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.IsTrue(System.Boolean)">
      <summary>
        <para>Asserts that the condition is true.</para>
      </summary>
      <param name="message">The string used to describe the Assert.</param>
      <param name="condition">true or false.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Assert.IsTrue(System.Boolean,System.String)">
      <summary>
        <para>Asserts that the condition is true.</para>
      </summary>
      <param name="message">The string used to describe the Assert.</param>
      <param name="condition">true or false.</param>
    </member>
    <member name="T:UnityEngine.Assertions.AssertionException">
      <summary>
        <para>An exception that is thrown on a failure. Assertions.Assert._raiseExceptions needs to be set to true.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Assertions.Comparers.FloatComparer">
      <summary>
        <para>A float comparer used by Assertions.Assert performing approximate comparison.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Assertions.Comparers.FloatComparer.kEpsilon">
      <summary>
        <para>Default epsilon used by the comparer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Assertions.Comparers.FloatComparer.s_ComparerWithDefaultTolerance">
      <summary>
        <para>Default instance of a comparer class with deafult error epsilon and absolute error check.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Assertions.Comparers.FloatComparer.AreEqual(System.Single,System.Single,System.Single)">
      <summary>
        <para>Performs equality check with absolute error check.</para>
      </summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Actual value.</param>
      <param name="error">Comparison error.</param>
      <returns>
        <para>Result of the comparison.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Assertions.Comparers.FloatComparer.AreEqualRelative(System.Single,System.Single,System.Single)">
      <summary>
        <para>Performs equality check with relative error check.</para>
      </summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Actual value.</param>
      <param name="error">Comparison error.</param>
      <returns>
        <para>Result of the comparison.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Assertions.Comparers.FloatComparer.#ctor">
      <summary>
        <para>Creates an instance of the comparer.</para>
      </summary>
      <param name="relative">Should a relative check be used when comparing values? By default, an absolute check will be used.</param>
      <param name="error">Allowed comparison error. By default, the FloatComparer.kEpsilon is used.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Comparers.FloatComparer.#ctor(System.Boolean)">
      <summary>
        <para>Creates an instance of the comparer.</para>
      </summary>
      <param name="relative">Should a relative check be used when comparing values? By default, an absolute check will be used.</param>
      <param name="error">Allowed comparison error. By default, the FloatComparer.kEpsilon is used.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Comparers.FloatComparer.#ctor(System.Single)">
      <summary>
        <para>Creates an instance of the comparer.</para>
      </summary>
      <param name="relative">Should a relative check be used when comparing values? By default, an absolute check will be used.</param>
      <param name="error">Allowed comparison error. By default, the FloatComparer.kEpsilon is used.</param>
    </member>
    <member name="M:UnityEngine.Assertions.Comparers.FloatComparer.#ctor(System.Single,System.Boolean)">
      <summary>
        <para>Creates an instance of the comparer.</para>
      </summary>
      <param name="relative">Should a relative check be used when comparing values? By default, an absolute check will be used.</param>
      <param name="error">Allowed comparison error. By default, the FloatComparer.kEpsilon is used.</param>
    </member>
    <member name="T:UnityEngine.Assertions.Must.MustExtensions">
      <summary>
        <para>An extension class that serves as a wrapper for the Assert class.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustBeApproximatelyEqual(System.Single,System.Single)">
      <summary>
        <para>An extension method for Assertions.Assert.AreApproximatelyEqual.</para>
      </summary>
      <param name="actual"></param>
      <param name="expected"></param>
      <param name="message"></param>
      <param name="tolerance"></param>
    </member>
    <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustBeApproximatelyEqual(System.Single,System.Single,System.String)">
      <summary>
        <para>An extension method for Assertions.Assert.AreApproximatelyEqual.</para>
      </summary>
      <param name="actual"></param>
      <param name="expected"></param>
      <param name="message"></param>
      <param name="tolerance"></param>
    </member>
    <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustBeApproximatelyEqual(System.Single,System.Single,System.Single)">
      <summary>
        <para>An extension method for Assertions.Assert.AreApproximatelyEqual.</para>
      </summary>
      <param name="actual"></param>
      <param name="expected"></param>
      <param name="message"></param>
      <param name="tolerance"></param>
    </member>
    <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustBeApproximatelyEqual(System.Single,System.Single,System.Single,System.String)">
      <summary>
        <para>An extension method for Assertions.Assert.AreApproximatelyEqual.</para>
      </summary>
      <param name="actual"></param>
      <param name="expected"></param>
      <param name="message"></param>
      <param name="tolerance"></param>
    </member>
    <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustBeEqual(T,T)">
      <summary>
        <para>An extension method for Assertions.Assert.AreEqual.</para>
      </summary>
      <param name="actual"></param>
      <param name="expected"></param>
      <param name="message"></param>
    </member>
    <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustBeEqual(T,T,System.String)">
      <summary>
        <para>An extension method for Assertions.Assert.AreEqual.</para>
      </summary>
      <param name="actual"></param>
      <param name="expected"></param>
      <param name="message"></param>
    </member>
    <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustBeFalse(System.Boolean)">
      <summary>
        <para>An extension method for Assertions.Assert.IsFalse.</para>
      </summary>
      <param name="value"></param>
      <param name="message"></param>
    </member>
    <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustBeFalse(System.Boolean,System.String)">
      <summary>
        <para>An extension method for Assertions.Assert.IsFalse.</para>
      </summary>
      <param name="value"></param>
      <param name="message"></param>
    </member>
    <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustBeNull(T)">
      <summary>
        <para>An extension method for Assertions.Assert.IsNull.</para>
      </summary>
      <param name="expected"></param>
      <param name="message"></param>
    </member>
    <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustBeNull(T,System.String)">
      <summary>
        <para>An extension method for Assertions.Assert.IsNull.</para>
      </summary>
      <param name="expected"></param>
      <param name="message"></param>
    </member>
    <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustBeTrue(System.Boolean)">
      <summary>
        <para>An extension method for Assertions.Assert.IsTrue.</para>
      </summary>
      <param name="value"></param>
      <param name="message"></param>
    </member>
    <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustBeTrue(System.Boolean,System.String)">
      <summary>
        <para>An extension method for Assertions.Assert.IsTrue.</para>
      </summary>
      <param name="value"></param>
      <param name="message"></param>
    </member>
    <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustNotBeApproximatelyEqual(System.Single,System.Single)">
      <summary>
        <para>An extension method for Assertions.Assert.AreNotApproximatelyEqual.</para>
      </summary>
      <param name="actual"></param>
      <param name="expected"></param>
      <param name="message"></param>
      <param name="tolerance"></param>
    </member>
    <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustNotBeApproximatelyEqual(System.Single,System.Single,System.String)">
      <summary>
        <para>An extension method for Assertions.Assert.AreNotApproximatelyEqual.</para>
      </summary>
      <param name="actual"></param>
      <param name="expected"></param>
      <param name="message"></param>
      <param name="tolerance"></param>
    </member>
    <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustNotBeApproximatelyEqual(System.Single,System.Single,System.Single)">
      <summary>
        <para>An extension method for Assertions.Assert.AreNotApproximatelyEqual.</para>
      </summary>
      <param name="actual"></param>
      <param name="expected"></param>
      <param name="message"></param>
      <param name="tolerance"></param>
    </member>
    <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustNotBeApproximatelyEqual(System.Single,System.Single,System.Single,System.String)">
      <summary>
        <para>An extension method for Assertions.Assert.AreNotApproximatelyEqual.</para>
      </summary>
      <param name="actual"></param>
      <param name="expected"></param>
      <param name="message"></param>
      <param name="tolerance"></param>
    </member>
    <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustNotBeEqual(T,T)">
      <summary>
        <para>An extension method for Assertions.Assert.AreNotEqual.</para>
      </summary>
      <param name="actual"></param>
      <param name="expected"></param>
      <param name="message"></param>
    </member>
    <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustNotBeEqual(T,T,System.String)">
      <summary>
        <para>An extension method for Assertions.Assert.AreNotEqual.</para>
      </summary>
      <param name="actual"></param>
      <param name="expected"></param>
      <param name="message"></param>
    </member>
    <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustNotBeNull(T)">
      <summary>
        <para>An extension method for Assertions.Assert.AreNotNull.</para>
      </summary>
      <param name="expected"></param>
      <param name="message"></param>
    </member>
    <member name="M:UnityEngine.Assertions.Must.MustExtensions.MustNotBeNull(T,System.String)">
      <summary>
        <para>An extension method for Assertions.Assert.AreNotNull.</para>
      </summary>
      <param name="expected"></param>
      <param name="message"></param>
    </member>
    <member name="T:UnityEngine.AsyncOperation">
      <summary>
        <para>Asynchronous operation coroutine.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AsyncOperation.allowSceneActivation">
      <summary>
        <para>Allow Scenes to be activated as soon as it is ready.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.AsyncOperation.completed(System.Action`1&lt;UnityEngine.AsyncOperation&gt;)">
      <summary>
        <para>Event that is invoked upon operation completion.  An event handler that is registered in the same frame as the call that creates it will be invoked next frame, even if the operation is able to complete synchronously.  If a handler is registered after the operation has completed and has already invoked the complete event, the handler will be called synchronously.</para>
      </summary>
      <param name="value">Action&lt;AsyncOperation&gt; handler - function signature for completion event handler.</param>
    </member>
    <member name="P:UnityEngine.AsyncOperation.isDone">
      <summary>
        <para>Has the operation finished? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AsyncOperation.priority">
      <summary>
        <para>Priority lets you tweak in which order async operation calls will be performed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AsyncOperation.progress">
      <summary>
        <para>What's the operation's progress. (Read Only)</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AudioType">
      <summary>
        <para>Type of the imported(native) data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioType.ACC">
      <summary>
        <para>Acc - not supported.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioType.AIFF">
      <summary>
        <para>Aiff.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioType.AUDIOQUEUE">
      <summary>
        <para>iPhone hardware decoder, supports AAC, ALAC and MP3. Extracodecdata is a pointer to an FMOD_AUDIOQUEUE_EXTRACODECDATA structure.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioType.IT">
      <summary>
        <para>Impulse tracker.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioType.MOD">
      <summary>
        <para>Protracker / Fasttracker MOD.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioType.MPEG">
      <summary>
        <para>MP2/MP3 MPEG.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioType.OGGVORBIS">
      <summary>
        <para>Ogg vorbis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioType.S3M">
      <summary>
        <para>ScreamTracker 3.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioType.UNKNOWN">
      <summary>
        <para>3rd party / unknown plugin format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioType.VAG">
      <summary>
        <para>VAG.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioType.WAV">
      <summary>
        <para>Microsoft WAV.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioType.XM">
      <summary>
        <para>FastTracker 2 XM.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioType.XMA">
      <summary>
        <para>Xbox360 XMA.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.BatteryStatus">
      <summary>
        <para>Enumeration for SystemInfo.batteryStatus which represents the current status of the device's battery.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.BatteryStatus.Charging">
      <summary>
        <para>Device is plugged in and charging.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.BatteryStatus.Discharging">
      <summary>
        <para>Device is unplugged and discharging.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.BatteryStatus.Full">
      <summary>
        <para>Device is plugged in and the battery is full.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.BatteryStatus.NotCharging">
      <summary>
        <para>Device is plugged in, but is not charging.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.BatteryStatus.Unknown">
      <summary>
        <para>The device's battery status cannot be determined. If battery status is not available on your target platform, SystemInfo.batteryStatus will return this value.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.BeforeRenderOrderAttribute">
      <summary>
        <para>Use this BeforeRenderOrderAttribute when you need to specify a custom callback order for Application.onBeforeRender.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BeforeRenderOrderAttribute.order">
      <summary>
        <para>The order, lowest to highest, that the Application.onBeforeRender event recievers will be called in.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.BeforeRenderOrderAttribute.#ctor(System.Int32)">
      <summary>
        <para>When applied to methods, specifies the order called during Application.onBeforeRender events.</para>
      </summary>
      <param name="order">The sorting order, sorted lowest to highest.</param>
    </member>
    <member name="T:UnityEngine.Behaviour">
      <summary>
        <para>Behaviours are Components that can be enabled or disabled.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Behaviour.enabled">
      <summary>
        <para>Enabled Behaviours are Updated, disabled Behaviours are not.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Behaviour.isActiveAndEnabled">
      <summary>
        <para>Has the Behaviour had active and enabled called?</para>
      </summary>
    </member>
    <member name="T:UnityEngine.BillboardAsset">
      <summary>
        <para>BillboardAsset describes how a billboard is rendered.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BillboardAsset.bottom">
      <summary>
        <para>Height of the billboard that is below ground.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BillboardAsset.height">
      <summary>
        <para>Height of the billboard.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BillboardAsset.imageCount">
      <summary>
        <para>Number of pre-rendered images that can be switched when the billboard is viewed from different angles.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BillboardAsset.indexCount">
      <summary>
        <para>Number of indices in the billboard mesh.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BillboardAsset.material">
      <summary>
        <para>The material used for rendering.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BillboardAsset.vertexCount">
      <summary>
        <para>Number of vertices in the billboard mesh.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BillboardAsset.width">
      <summary>
        <para>Width of the billboard.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.BillboardAsset.#ctor">
      <summary>
        <para>Constructs a new BillboardAsset.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.BillboardAsset.GetImageTexCoords">
      <summary>
        <para>Get the array of billboard image texture coordinate data.</para>
      </summary>
      <param name="imageTexCoords">The list that receives the array.</param>
    </member>
    <member name="M:UnityEngine.BillboardAsset.GetImageTexCoords(System.Collections.Generic.List`1&lt;UnityEngine.Vector4&gt;)">
      <summary>
        <para>Get the array of billboard image texture coordinate data.</para>
      </summary>
      <param name="imageTexCoords">The list that receives the array.</param>
    </member>
    <member name="M:UnityEngine.BillboardAsset.GetIndices">
      <summary>
        <para>Get the indices of the billboard mesh.</para>
      </summary>
      <param name="indices">The list that receives the array.</param>
    </member>
    <member name="M:UnityEngine.BillboardAsset.GetIndices(System.Collections.Generic.List`1&lt;System.UInt16&gt;)">
      <summary>
        <para>Get the indices of the billboard mesh.</para>
      </summary>
      <param name="indices">The list that receives the array.</param>
    </member>
    <member name="M:UnityEngine.BillboardAsset.GetVertices">
      <summary>
        <para>Get the vertices of the billboard mesh.</para>
      </summary>
      <param name="vertices">The list that receives the array.</param>
    </member>
    <member name="M:UnityEngine.BillboardAsset.GetVertices(System.Collections.Generic.List`1&lt;UnityEngine.Vector2&gt;)">
      <summary>
        <para>Get the vertices of the billboard mesh.</para>
      </summary>
      <param name="vertices">The list that receives the array.</param>
    </member>
    <member name="M:UnityEngine.BillboardAsset.SetImageTexCoords(UnityEngine.Vector4[])">
      <summary>
        <para>Set the array of billboard image texture coordinate data.</para>
      </summary>
      <param name="imageTexCoords">The array of data to set.</param>
    </member>
    <member name="M:UnityEngine.BillboardAsset.SetImageTexCoords(System.Collections.Generic.List`1&lt;UnityEngine.Vector4&gt;)">
      <summary>
        <para>Set the array of billboard image texture coordinate data.</para>
      </summary>
      <param name="imageTexCoords">The array of data to set.</param>
    </member>
    <member name="M:UnityEngine.BillboardAsset.SetIndices(System.UInt16[])">
      <summary>
        <para>Set the indices of the billboard mesh.</para>
      </summary>
      <param name="indices">The array of data to set.</param>
    </member>
    <member name="M:UnityEngine.BillboardAsset.SetIndices(System.Collections.Generic.List`1&lt;System.UInt16&gt;)">
      <summary>
        <para>Set the indices of the billboard mesh.</para>
      </summary>
      <param name="indices">The array of data to set.</param>
    </member>
    <member name="M:UnityEngine.BillboardAsset.SetVertices(UnityEngine.Vector2[])">
      <summary>
        <para>Set the vertices of the billboard mesh.</para>
      </summary>
      <param name="vertices">The array of data to set.</param>
    </member>
    <member name="M:UnityEngine.BillboardAsset.SetVertices(System.Collections.Generic.List`1&lt;UnityEngine.Vector2&gt;)">
      <summary>
        <para>Set the vertices of the billboard mesh.</para>
      </summary>
      <param name="vertices">The array of data to set.</param>
    </member>
    <member name="T:UnityEngine.BillboardRenderer">
      <summary>
        <para>Renders a billboard from a BillboardAsset.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BillboardRenderer.billboard">
      <summary>
        <para>The BillboardAsset to render.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.BillboardRenderer.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.BitStream">
      <summary>
        <para>The BitStream class represents seralized variables, packed into a stream.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BitStream.isReading">
      <summary>
        <para>Is the BitStream currently being read? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BitStream.isWriting">
      <summary>
        <para>Is the BitStream currently being written? (Read Only)</para>
      </summary>
    </member>
    <member name="M:UnityEngine.BitStream.Serialize(System.Boolean&amp;)">
      <summary>
        <para>Serializes different types of variables.</para>
      </summary>
      <param name="value"></param>
      <param name="maxDelta"></param>
      <param name="viewID"></param>
    </member>
    <member name="M:UnityEngine.BitStream.Serialize(System.Char&amp;)">
      <summary>
        <para>Serializes different types of variables.</para>
      </summary>
      <param name="value"></param>
      <param name="maxDelta"></param>
      <param name="viewID"></param>
    </member>
    <member name="M:UnityEngine.BitStream.Serialize(System.Int16&amp;)">
      <summary>
        <para>Serializes different types of variables.</para>
      </summary>
      <param name="value"></param>
      <param name="maxDelta"></param>
      <param name="viewID"></param>
    </member>
    <member name="M:UnityEngine.BitStream.Serialize(System.Int32&amp;)">
      <summary>
        <para>Serializes different types of variables.</para>
      </summary>
      <param name="value"></param>
      <param name="maxDelta"></param>
      <param name="viewID"></param>
    </member>
    <member name="M:UnityEngine.BitStream.Serialize(System.Single&amp;)">
      <summary>
        <para>Serializes different types of variables.</para>
      </summary>
      <param name="value"></param>
      <param name="maxDelta"></param>
      <param name="viewID"></param>
    </member>
    <member name="M:UnityEngine.BitStream.Serialize(UnityEngine.Vector3&amp;)">
      <summary>
        <para>Serializes different types of variables.</para>
      </summary>
      <param name="value"></param>
      <param name="maxDelta"></param>
      <param name="viewID"></param>
    </member>
    <member name="M:UnityEngine.BitStream.Serialize(UnityEngine.Quaternion&amp;)">
      <summary>
        <para>Serializes different types of variables.</para>
      </summary>
      <param name="value"></param>
      <param name="maxDelta"></param>
      <param name="viewID"></param>
    </member>
    <member name="M:UnityEngine.BitStream.Serialize(System.Single&amp;,System.Single)">
      <summary>
        <para>Serializes different types of variables.</para>
      </summary>
      <param name="value"></param>
      <param name="maxDelta"></param>
      <param name="viewID"></param>
    </member>
    <member name="M:UnityEngine.BitStream.Serialize(UnityEngine.Quaternion&amp;,System.Single)">
      <summary>
        <para>Serializes different types of variables.</para>
      </summary>
      <param name="value"></param>
      <param name="maxDelta"></param>
      <param name="viewID"></param>
    </member>
    <member name="M:UnityEngine.BitStream.Serialize(UnityEngine.Vector3&amp;,System.Single)">
      <summary>
        <para>Serializes different types of variables.</para>
      </summary>
      <param name="value"></param>
      <param name="maxDelta"></param>
      <param name="viewID"></param>
    </member>
    <member name="M:UnityEngine.BitStream.Serialize(UnityEngine.NetworkPlayer&amp;)">
      <summary>
        <para>Serializes different types of variables.</para>
      </summary>
      <param name="value"></param>
      <param name="maxDelta"></param>
      <param name="viewID"></param>
    </member>
    <member name="M:UnityEngine.BitStream.Serialize(UnityEngine.NetworkViewID&amp;)">
      <summary>
        <para>Serializes different types of variables.</para>
      </summary>
      <param name="value"></param>
      <param name="maxDelta"></param>
      <param name="viewID"></param>
    </member>
    <member name="T:UnityEngine.BoneWeight">
      <summary>
        <para>Describes 4 skinning bone weights that affect a vertex in a mesh.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoneWeight.boneIndex0">
      <summary>
        <para>Index of first bone.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoneWeight.boneIndex1">
      <summary>
        <para>Index of second bone.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoneWeight.boneIndex2">
      <summary>
        <para>Index of third bone.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoneWeight.boneIndex3">
      <summary>
        <para>Index of fourth bone.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoneWeight.weight0">
      <summary>
        <para>Skinning weight for first bone.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoneWeight.weight1">
      <summary>
        <para>Skinning weight for second bone.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoneWeight.weight2">
      <summary>
        <para>Skinning weight for third bone.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoneWeight.weight3">
      <summary>
        <para>Skinning weight for fourth bone.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.BoneWeight1">
      <summary>
        <para>Describes a bone weight that affects a vertex in a mesh.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoneWeight1.boneIndex">
      <summary>
        <para>Index of bone.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoneWeight1.weight">
      <summary>
        <para>Skinning weight for bone.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.BoundingSphere">
      <summary>
        <para>Describes a single bounding sphere for use by a CullingGroup.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.BoundingSphere.position">
      <summary>
        <para>The position of the center of the BoundingSphere.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.BoundingSphere.radius">
      <summary>
        <para>The radius of the BoundingSphere.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.BoundingSphere.#ctor(UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Initializes a BoundingSphere.</para>
      </summary>
      <param name="pos">The center of the sphere.</param>
      <param name="rad">The radius of the sphere.</param>
      <param name="packedSphere">A four-component vector containing the position (packed into the XYZ components) and radius (packed into the W component).</param>
    </member>
    <member name="M:UnityEngine.BoundingSphere.#ctor(UnityEngine.Vector4)">
      <summary>
        <para>Initializes a BoundingSphere.</para>
      </summary>
      <param name="pos">The center of the sphere.</param>
      <param name="rad">The radius of the sphere.</param>
      <param name="packedSphere">A four-component vector containing the position (packed into the XYZ components) and radius (packed into the W component).</param>
    </member>
    <member name="T:UnityEngine.Bounds">
      <summary>
        <para>Represents an axis aligned bounding box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Bounds.center">
      <summary>
        <para>The center of the bounding box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Bounds.extents">
      <summary>
        <para>The extents of the Bounding Box. This is always half of the size of the Bounds.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Bounds.max">
      <summary>
        <para>The maximal point of the box. This is always equal to center+extents.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Bounds.min">
      <summary>
        <para>The minimal point of the box. This is always equal to center-extents.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Bounds.size">
      <summary>
        <para>The total size of the box. This is always twice as large as the extents.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Bounds.ClosestPoint(UnityEngine.Vector3)">
      <summary>
        <para>The closest point on the bounding box.</para>
      </summary>
      <param name="point">Arbitrary point.</param>
      <returns>
        <para>The point on the bounding box or inside the bounding box.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Bounds.Contains(UnityEngine.Vector3)">
      <summary>
        <para>Is point contained in the bounding box?</para>
      </summary>
      <param name="point"></param>
    </member>
    <member name="M:UnityEngine.Bounds.#ctor(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Creates a new Bounds.</para>
      </summary>
      <param name="center">The location of the origin of the Bounds.</param>
      <param name="size">The dimensions of the Bounds.</param>
    </member>
    <member name="M:UnityEngine.Bounds.Encapsulate(UnityEngine.Vector3)">
      <summary>
        <para>Grows the Bounds to include the point.</para>
      </summary>
      <param name="point"></param>
    </member>
    <member name="M:UnityEngine.Bounds.Encapsulate(UnityEngine.Bounds)">
      <summary>
        <para>Grow the bounds to encapsulate the bounds.</para>
      </summary>
      <param name="bounds"></param>
    </member>
    <member name="M:UnityEngine.Bounds.Expand(System.Single)">
      <summary>
        <para>Expand the bounds by increasing its size by amount along each side.</para>
      </summary>
      <param name="amount"></param>
    </member>
    <member name="M:UnityEngine.Bounds.Expand(UnityEngine.Vector3)">
      <summary>
        <para>Expand the bounds by increasing its size by amount along each side.</para>
      </summary>
      <param name="amount"></param>
    </member>
    <member name="M:UnityEngine.Bounds.IntersectRay(UnityEngine.Ray)">
      <summary>
        <para>Does ray intersect this bounding box?</para>
      </summary>
      <param name="ray"></param>
    </member>
    <member name="M:UnityEngine.Bounds.IntersectRay(UnityEngine.Ray,System.Single&amp;)">
      <summary>
        <para>Does ray intersect this bounding box?</para>
      </summary>
      <param name="ray"></param>
      <param name="distance"></param>
    </member>
    <member name="M:UnityEngine.Bounds.Intersects(UnityEngine.Bounds)">
      <summary>
        <para>Does another bounding box intersect with this bounding box?</para>
      </summary>
      <param name="bounds"></param>
    </member>
    <member name="M:UnityEngine.Bounds.SetMinMax(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Sets the bounds to the min and max value of the box.</para>
      </summary>
      <param name="min"></param>
      <param name="max"></param>
    </member>
    <member name="M:UnityEngine.Bounds.SqrDistance(UnityEngine.Vector3)">
      <summary>
        <para>The smallest squared distance between the point and this bounding box.</para>
      </summary>
      <param name="point"></param>
    </member>
    <member name="M:UnityEngine.Bounds.ToString">
      <summary>
        <para>Returns a formatted string for the bounds.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="M:UnityEngine.Bounds.ToString(System.String)">
      <summary>
        <para>Returns a formatted string for the bounds.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="M:UnityEngine.Bounds.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Returns a formatted string for the bounds.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="T:UnityEngine.BoundsInt">
      <summary>
        <para>Represents an axis aligned bounding box with all values as integers.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoundsInt.allPositionsWithin">
      <summary>
        <para>A BoundsInt.PositionCollection that contains all positions within the BoundsInt.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoundsInt.center">
      <summary>
        <para>The center of the bounding box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoundsInt.max">
      <summary>
        <para>The maximal point of the box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoundsInt.min">
      <summary>
        <para>The minimal point of the box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoundsInt.position">
      <summary>
        <para>The position of the bounding box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoundsInt.size">
      <summary>
        <para>The total size of the box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoundsInt.x">
      <summary>
        <para>X value of the minimal point of the box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoundsInt.xMax">
      <summary>
        <para>The maximal x point of the box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoundsInt.xMin">
      <summary>
        <para>The minimal x point of the box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoundsInt.y">
      <summary>
        <para>Y value of the minimal point of the box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoundsInt.yMax">
      <summary>
        <para>The maximal y point of the box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoundsInt.yMin">
      <summary>
        <para>The minimal y point of the box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoundsInt.z">
      <summary>
        <para>Z value of the minimal point of the box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoundsInt.zMax">
      <summary>
        <para>The maximal z point of the box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoundsInt.zMin">
      <summary>
        <para>The minimal z point of the box.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.BoundsInt.ClampToBounds(UnityEngine.BoundsInt)">
      <summary>
        <para>Clamps the position and size of this bounding box to the given bounds.</para>
      </summary>
      <param name="bounds">Bounds to clamp to.</param>
    </member>
    <member name="M:UnityEngine.BoundsInt.Contains(UnityEngine.Vector3Int)">
      <summary>
        <para>Is point contained in the bounding box?</para>
      </summary>
      <param name="position">Point to check.</param>
      <param name="inclusive">Whether the max limits are included in the check.</param>
      <returns>
        <para>Is point contained in the bounding box?</para>
      </returns>
    </member>
    <member name="M:UnityEngine.BoundsInt.Contains">
      <summary>
        <para>Is point contained in the bounding box?</para>
      </summary>
      <param name="position">Point to check.</param>
      <param name="inclusive">Whether the max limits are included in the check.</param>
      <returns>
        <para>Is point contained in the bounding box?</para>
      </returns>
    </member>
    <member name="T:UnityEngine.BoundsInt.PositionEnumerator">
      <summary>
        <para>An iterator that allows you to iterate over all positions within the BoundsInt.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoundsInt.PositionEnumerator.Current">
      <summary>
        <para>Current position of the enumerator.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.BoundsInt.PositionEnumerator.GetEnumerator">
      <summary>
        <para>Returns this as an iterator that allows you to iterate over all positions within the BoundsInt.</para>
      </summary>
      <returns>
        <para>This BoundsInt.PositionEnumerator.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.BoundsInt.PositionEnumerator.MoveNext">
      <summary>
        <para>Moves the enumerator to the next position.</para>
      </summary>
      <returns>
        <para>Whether the enumerator has successfully moved to the next position.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.BoundsInt.PositionEnumerator.Reset">
      <summary>
        <para>Resets this enumerator to its starting state.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.BoundsInt.SetMinMax(UnityEngine.Vector3Int,UnityEngine.Vector3Int)">
      <summary>
        <para>Sets the bounds to the min and max value of the box.</para>
      </summary>
      <param name="minPosition"></param>
      <param name="maxPosition"></param>
    </member>
    <member name="M:UnityEngine.BoundsInt.ToString">
      <summary>
        <para>Returns a formatted string for the bounds.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="M:UnityEngine.BoundsInt.ToString(System.String)">
      <summary>
        <para>Returns a formatted string for the bounds.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="M:UnityEngine.BoundsInt.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Returns a formatted string for the bounds.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="T:UnityEngine.Cache">
      <summary>
        <para>Data structure for cache. Please refer to See Also:Caching.AddCache for more information.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cache.expirationDelay">
      <summary>
        <para>The number of seconds that an AssetBundle may remain unused in the cache before it is automatically deleted.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cache.index">
      <summary>
        <para>Returns the index of the cache in the cache list.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cache.maximumAvailableStorageSpace">
      <summary>
        <para>Allows you to specify the total number of bytes that can be allocated for the cache.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cache.path">
      <summary>
        <para>Returns the path of the cache.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cache.readOnly">
      <summary>
        <para>Returns true if the cache is readonly.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cache.ready">
      <summary>
        <para>Returns true if the cache is ready.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cache.spaceFree">
      <summary>
        <para>Returns the number of currently unused bytes in the cache.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cache.spaceOccupied">
      <summary>
        <para>Returns the used disk space in bytes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cache.valid">
      <summary>
        <para>Returns true if the cache is valid.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Cache.ClearCache">
      <summary>
        <para>Removes all cached content in the cache that has been cached by the current application.</para>
      </summary>
      <param name="expiration">The number of seconds that AssetBundles may remain unused in the cache.</param>
      <returns>
        <para>Returns True when cache clearing succeeded.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Cache.ClearCache(System.Int32)">
      <summary>
        <para>Removes all cached content in the cache that has been cached by the current application.</para>
      </summary>
      <param name="expiration">The number of seconds that AssetBundles may remain unused in the cache.</param>
      <returns>
        <para>Returns True when cache clearing succeeded.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.CachedAssetBundle">
      <summary>
        <para>Data structure for downloading AssetBundles to a customized cache path. See Also:UnityWebRequestAssetBundle.GetAssetBundle for more information.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CachedAssetBundle.hash">
      <summary>
        <para>Hash128 which is used as the version of the AssetBundle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CachedAssetBundle.name">
      <summary>
        <para>AssetBundle name which is used as the customized cache path.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Caching">
      <summary>
        <para>The Caching class lets you manage cached AssetBundles, downloaded using UnityWebRequestAssetBundle.GetAssetBundle().</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Caching.cacheCount">
      <summary>
        <para>Returns the cache count in the cache list.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Caching.compressionEnabled">
      <summary>
        <para>Controls compression of cache data. Enabled by default.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Caching.currentCacheForWriting">
      <summary>
        <para>Gets or sets the current cache in which AssetBundles should be cached.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Caching.defaultCache">
      <summary>
        <para>Returns the default cache which is added by Unity internally.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Caching.ready">
      <summary>
        <para>Returns true if Caching system is ready for use.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Caching.AddCache(System.String)">
      <summary>
        <para>Add a cache with the given path.</para>
      </summary>
      <param name="cachePath">Path to the cache folder.</param>
    </member>
    <member name="M:UnityEngine.Caching.ClearAllCachedVersions(System.String)">
      <summary>
        <para>Removes all the cached versions of the given AssetBundle from the cache.</para>
      </summary>
      <param name="assetBundleName">The AssetBundle name.</param>
      <returns>
        <para>Returns true when cache clearing succeeded.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Caching.ClearCache">
      <summary>
        <para>Removes all AssetBundle content that has been cached by the current application.</para>
      </summary>
      <param name="expiration">The number of seconds that AssetBundles may remain unused in the cache.</param>
      <returns>
        <para>True when cache clearing succeeded, false if cache was in use.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Caching.ClearCache(System.Int32)">
      <summary>
        <para>Removes all AssetBundle content that has been cached by the current application.</para>
      </summary>
      <param name="expiration">The number of seconds that AssetBundles may remain unused in the cache.</param>
      <returns>
        <para>True when cache clearing succeeded, false if cache was in use.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Caching.ClearCachedVersion(System.String,UnityEngine.Hash128)">
      <summary>
        <para>Removes the given version of the AssetBundle.</para>
      </summary>
      <param name="assetBundleName">The AssetBundle name.</param>
      <param name="hash">Version needs to be cleaned.</param>
      <returns>
        <para>Returns true when cache clearing succeeded.  Can return false if any cached bundle is in use.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Caching.ClearOtherCachedVersions(System.String,UnityEngine.Hash128)">
      <summary>
        <para>Removes all the cached versions of the AssetBundle from the cache, except for the specified version.</para>
      </summary>
      <param name="assetBundleName">The AssetBundle name.</param>
      <param name="hash">Version needs to be kept.</param>
      <returns>
        <para>Returns true when cache clearing succeeded.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Caching.GetAllCachePaths(System.Collections.Generic.List`1&lt;System.String&gt;)">
      <summary>
        <para>Returns all paths of the cache in the cache list.</para>
      </summary>
      <param name="cachePaths">List of all the cache paths.</param>
    </member>
    <member name="M:UnityEngine.Caching.GetCacheAt(System.Int32)">
      <summary>
        <para>Returns the Cache at the given position in the cache list.</para>
      </summary>
      <param name="cacheIndex">Index of the cache to get.</param>
      <returns>
        <para>A reference to the Cache at the index specified.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Caching.GetCacheByPath(System.String)">
      <summary>
        <para>Returns the Cache that has the given cache path.</para>
      </summary>
      <param name="cachePath">The cache path.</param>
      <returns>
        <para>A reference to the Cache with the given path.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Caching.GetCachedVersions(System.String,System.Collections.Generic.List`1&lt;UnityEngine.Hash128&gt;)">
      <summary>
        <para>Returns all cached versions of the given AssetBundle.</para>
      </summary>
      <param name="assetBundleName">The AssetBundle name.</param>
      <param name="outCachedVersions">List of all the cached version.</param>
    </member>
    <member name="M:UnityEngine.Caching.IsVersionCached(System.String,System.Int32)">
      <summary>
        <para>Checks if an AssetBundle is cached.</para>
      </summary>
      <param name="string">Url The filename of the AssetBundle. Domain and path information are stripped from this string automatically.</param>
      <param name="int">Version The version number of the AssetBundle to check for. Negative values are not allowed.</param>
      <param name="url"></param>
      <param name="version"></param>
      <returns>
        <para>True if an AssetBundle matching the url and version parameters has previously been loaded using UnityWebRequestAssetBundle.GetAssetBundle() and is currently stored in the cache. Returns false if the AssetBundle is not in cache, either because it has been flushed from the cache or was never loaded using the Caching API.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Caching.MarkAsUsed(System.String,System.Int32)">
      <summary>
        <para>Bumps the timestamp of a cached file to be the current time.</para>
      </summary>
      <param name="url"></param>
      <param name="version"></param>
    </member>
    <member name="M:UnityEngine.Caching.MoveCacheAfter(UnityEngine.Cache,UnityEngine.Cache)">
      <summary>
        <para>Moves the source Cache after the destination Cache in the cache list.</para>
      </summary>
      <param name="src">The Cache to move.</param>
      <param name="dst">The Cache which should come before the source Cache in the cache list.</param>
    </member>
    <member name="M:UnityEngine.Caching.MoveCacheBefore(UnityEngine.Cache,UnityEngine.Cache)">
      <summary>
        <para>Moves the source Cache before the destination Cache in the cache list.</para>
      </summary>
      <param name="src">The Cache to move.</param>
      <param name="dst">The Cache which should come after the source Cache in the cache list.</param>
    </member>
    <member name="M:UnityEngine.Caching.RemoveCache(UnityEngine.Cache)">
      <summary>
        <para>Removes the Cache from cache list.</para>
      </summary>
      <param name="cache">The Cache to be removed.</param>
      <returns>
        <para>Returns true if the Cache is removed.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Camera">
      <summary>
        <para>A Camera is a device through which the player views the world.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.activeTexture">
      <summary>
        <para>Gets the temporary RenderTexture target for this Camera.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.actualRenderingPath">
      <summary>
        <para>The rendering path that is currently being used (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.allCameras">
      <summary>
        <para>Returns all enabled cameras in the Scene.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.allCamerasCount">
      <summary>
        <para>The number of cameras in the current Scene.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.allowDynamicResolution">
      <summary>
        <para>Dynamic Resolution Scaling.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.allowHDR">
      <summary>
        <para>High dynamic range rendering.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.allowMSAA">
      <summary>
        <para>MSAA rendering.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.areVRStereoViewMatricesWithinSingleCullTolerance">
      <summary>
        <para>Determines whether the stereo view matrices are suitable to allow for a single pass cull.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.aspect">
      <summary>
        <para>The aspect ratio (width divided by height).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.backgroundColor">
      <summary>
        <para>The color with which the screen will be cleared.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.cameraToWorldMatrix">
      <summary>
        <para>Matrix that transforms from camera space to world space (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.cameraType">
      <summary>
        <para>Identifies what kind of camera this is, using the CameraType enum.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.clearFlags">
      <summary>
        <para>How the camera clears the background.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.clearStencilAfterLightingPass">
      <summary>
        <para>Should the camera clear the stencil buffer after the deferred light pass?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.commandBufferCount">
      <summary>
        <para>Number of command buffers set up on this camera (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.cullingMask">
      <summary>
        <para>This is used to render parts of the Scene selectively.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.cullingMatrix">
      <summary>
        <para>Sets a custom matrix for the camera to use for all culling queries.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.current">
      <summary>
        <para>The camera we are currently rendering with, for low-level render control only (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.depth">
      <summary>
        <para>Camera's depth in the camera rendering order.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.depthTextureMode">
      <summary>
        <para>How and if camera generates a depth texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.eventMask">
      <summary>
        <para>Mask to select which layers can trigger events on the camera.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.farClipPlane">
      <summary>
        <para>The distance of the far clipping plane from the Camera, in world units.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.fieldOfView">
      <summary>
        <para>The field of view of the camera in degrees.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.focalLength">
      <summary>
        <para>The camera focal length, expressed in millimeters. To use this property, enable UsePhysicalProperties.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.forceIntoRenderTexture">
      <summary>
        <para>Should camera rendering be forced into a RenderTexture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.gateFit">
      <summary>
        <para>There are two gates for a camera, the sensor gate and the resolution gate. The physical camera sensor gate is defined by the sensorSize property, the resolution gate is defined by the render target area.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.hdr">
      <summary>
        <para>High dynamic range rendering.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.layerCullDistances">
      <summary>
        <para>Per-layer culling distances.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.layerCullSpherical">
      <summary>
        <para>How to perform per-layer culling for a Camera.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.lensShift">
      <summary>
        <para>The lens offset of the camera. The lens shift is relative to the sensor size. For example, a lens shift of 0.5 offsets the sensor by half its horizontal size.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.main">
      <summary>
        <para>The first enabled Camera component that is tagged "MainCamera" (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.nearClipPlane">
      <summary>
        <para>The distance of the near clipping plane from the the Camera, in world units.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.nonJitteredProjectionMatrix">
      <summary>
        <para>Get or set the raw projection matrix with no camera offset (no jittering).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.onPostRender">
      <summary>
        <para>Delegate that you can use to execute custom code after a Camera renders the scene.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.onPreCull">
      <summary>
        <para>Delegate that you can use to execute custom code before a Camera culls the scene.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.onPreRender">
      <summary>
        <para>Delegate that you can use to execute custom code before a Camera renders the scene.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.opaqueSortMode">
      <summary>
        <para>Opaque object sorting mode.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.orthographic">
      <summary>
        <para>Is the camera orthographic (true) or perspective (false)?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.orthographicSize">
      <summary>
        <para>Camera's half-size when in orthographic mode.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.overrideSceneCullingMask">
      <summary>
        <para>Sets the culling maks used to determine which objects from which Scenes to draw.
See EditorSceneManager.SetSceneCullingMask.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.pixelHeight">
      <summary>
        <para>How tall is the camera in pixels (not accounting for dynamic resolution scaling) (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.pixelRect">
      <summary>
        <para>Where on the screen is the camera rendered in pixel coordinates.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.pixelWidth">
      <summary>
        <para>How wide is the camera in pixels (not accounting for dynamic resolution scaling) (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.previousViewProjectionMatrix">
      <summary>
        <para>Get the view projection matrix used on the last frame.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.projectionMatrix">
      <summary>
        <para>Set a custom projection matrix.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.rect">
      <summary>
        <para>Where on the screen is the camera rendered in normalized coordinates.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.renderingPath">
      <summary>
        <para>The rendering path that should be used, if possible.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.scaledPixelHeight">
      <summary>
        <para>How tall is the camera in pixels (accounting for dynamic resolution scaling) (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.scaledPixelWidth">
      <summary>
        <para>How wide is the camera in pixels (accounting for dynamic resolution scaling) (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.scene">
      <summary>
        <para>If not null, the camera will only render the contents of the specified Scene.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.sensorSize">
      <summary>
        <para>The size of the camera sensor, expressed in millimeters.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.stereoActiveEye">
      <summary>
        <para>Returns the eye that is currently rendering.
If called when stereo is not enabled it will return Camera.MonoOrStereoscopicEye.Mono.

If called during a camera rendering callback such as OnRenderImage it will return the currently rendering eye.

If called outside of a rendering callback and stereo is enabled, it will return the default eye which is Camera.MonoOrStereoscopicEye.Left.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.stereoConvergence">
      <summary>
        <para>Distance to a point where virtual eyes converge.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.stereoEnabled">
      <summary>
        <para>Stereoscopic rendering.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.stereoMirrorMode">
      <summary>
        <para>Render only once and use resulting image for both eyes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.stereoSeparation">
      <summary>
        <para>The distance between the virtual eyes. Use this to query or set the current eye separation. Note that most VR devices provide this value, in which case setting the value will have no effect.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.stereoTargetEye">
      <summary>
        <para>Defines which eye of a VR display the Camera renders into.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.targetDisplay">
      <summary>
        <para>Set the target display for this Camera.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.targetTexture">
      <summary>
        <para>Destination render texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.transparencySortAxis">
      <summary>
        <para>An axis that describes the direction along which the distances of objects are measured for the purpose of sorting.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.transparencySortMode">
      <summary>
        <para>Transparent object sorting mode.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.useJitteredProjectionMatrixForTransparentRendering">
      <summary>
        <para>Should the jittered matrix be used for transparency rendering?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.useOcclusionCulling">
      <summary>
        <para>Whether or not the Camera will use occlusion culling during rendering.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.usePhysicalProperties">
      <summary>
        <para>Enable [UsePhysicalProperties] to use physical camera properties to compute the field of view and the frustum.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.velocity">
      <summary>
        <para>Get the world-space speed of the camera (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.worldToCameraMatrix">
      <summary>
        <para>Matrix that transforms from world to camera space.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.AddCommandBuffer(UnityEngine.Rendering.CameraEvent,UnityEngine.Rendering.CommandBuffer)">
      <summary>
        <para>Add a command buffer to be executed at a specified place.</para>
      </summary>
      <param name="evt">When to execute the command buffer during rendering.</param>
      <param name="buffer">The buffer to execute.</param>
    </member>
    <member name="M:UnityEngine.Camera.AddCommandBufferAsync(UnityEngine.Rendering.CameraEvent,UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.ComputeQueueType)">
      <summary>
        <para>Adds a command buffer to the GPU's async compute queues and executes that command buffer when graphics processing reaches a given point.</para>
      </summary>
      <param name="evt">The point during the graphics processing at which this command buffer should commence on the GPU.</param>
      <param name="buffer">The buffer to execute.</param>
      <param name="queueType">The desired async compute queue type to execute the buffer on.</param>
    </member>
    <member name="M:UnityEngine.Camera.CalculateFrustumCorners(UnityEngine.Rect,System.Single,UnityEngine.Camera/MonoOrStereoscopicEye,UnityEngine.Vector3[])">
      <summary>
        <para>Given viewport coordinates, calculates the view space vectors pointing to the four frustum corners at the specified camera depth.</para>
      </summary>
      <param name="viewport">Normalized viewport coordinates to use for the frustum calculation.</param>
      <param name="z">Z-depth from the camera origin at which the corners will be calculated.</param>
      <param name="eye">Camera eye projection matrix to use.</param>
      <param name="outCorners">Output array for the frustum corner vectors. Cannot be null and length must be &gt;= 4.</param>
    </member>
    <member name="M:UnityEngine.Camera.CalculateObliqueMatrix(UnityEngine.Vector4)">
      <summary>
        <para>Calculates and returns oblique near-plane projection matrix.</para>
      </summary>
      <param name="clipPlane">Vector4 that describes a clip plane.</param>
      <returns>
        <para>Oblique near-plane projection matrix.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Camera.CalculateProjectionMatrixFromPhysicalProperties">
      <summary>
        <para>
                    Calculates the projection matrix from focal length, sensor size, lens shift, near plane distance, far plane distance, and Gate fit parameters.
                    To calculate the projection matrix without taking Gate fit into account, use  Camera.GateFitMode.None . See Also: Camera.GateFitParameters
                </para>
      </summary>
      <param name="output">The calculated matrix.</param>
      <param name="focalLength">Focal length in millimeters.</param>
      <param name="sensorSize">Sensor dimensions in Millimeters.</param>
      <param name="lensShift">Lens offset relative to the sensor size.</param>
      <param name="nearClip">Near plane distance.</param>
      <param name="farClip">Far plane distance.</param>
      <param name="gateFitParameters">Gate fit parameters to use. See Camera.GateFitParameters.</param>
    </member>
    <member name="T:UnityEngine.Camera.CameraCallback">
      <summary>
        <para>Delegate type for camera callbacks.</para>
      </summary>
      <param name="cam"></param>
    </member>
    <member name="M:UnityEngine.Camera.CopyFrom(UnityEngine.Camera)">
      <summary>
        <para>Makes this camera's settings match other camera.</para>
      </summary>
      <param name="other">Copy camera settings to the other camera.</param>
    </member>
    <member name="M:UnityEngine.Camera.CopyStereoDeviceProjectionMatrixToNonJittered(UnityEngine.Camera/StereoscopicEye)">
      <summary>
        <para>Sets the non-jittered projection matrix, sourced from the VR SDK.</para>
      </summary>
      <param name="eye">Specifies the stereoscopic eye whose non-jittered projection matrix will be sourced from the VR SDK.</param>
    </member>
    <member name="T:UnityEngine.Camera.FieldOfViewAxis">
      <summary>
        <para>
                Enumerates which axis to use when expressing the value for the field of view.
                The default value is Camera.FieldOfViewAxis.Vertical.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.FieldOfViewAxis.Horizontal">
      <summary>
        <para>Specifies the field of view as horizontal.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.FieldOfViewAxis.Vertical">
      <summary>
        <para>Specifies the field of view as vertical.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.FieldOfViewToFocalLength(System.Single,System.Single)">
      <summary>
        <para>Converts field of view to focal length. Use either sensor height and vertical field of view or sensor width and horizontal field of view.</para>
      </summary>
      <param name="fieldOfView">field of view in degrees.</param>
      <param name="sensorSize">Sensor size in millimeters.</param>
      <returns>
        <para>Focal length in millimeters.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Camera.FocalLengthToFieldOfView(System.Single,System.Single)">
      <summary>
        <para>Converts focal length to field of view.</para>
      </summary>
      <param name="focalLength">Focal length in millimeters.</param>
      <param name="sensorSize">Sensor size in millimeters. Use the sensor height to get the vertical field of view. Use the sensor width to get the horizontal field of view.</param>
      <returns>
        <para>field of view in degrees.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Camera.GateFitMode">
      <summary>
        <para>Enum used to specify how the sensor gate (sensor frame) defined by Camera.sensorSize fits into the resolution gate (render frame).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.GateFitMode.Fill">
      <summary>
        <para>
                    Automatically selects a horizontal or vertical fit so that the sensor gate fits completely inside the resolution gate.
                </para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.GateFitMode.Horizontal">
      <summary>
        <para>
                    Fit the resolution gate horizontally within the sensor gate.
                </para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.GateFitMode.None">
      <summary>
        <para>
                    Stretch the sensor gate to fit exactly into the resolution gate.
                </para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.GateFitMode.Overscan">
      <summary>
        <para>
                    Automatically selects a horizontal or vertical fit so that the render frame fits completely inside the resolution gate.
                </para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.GateFitMode.Vertical">
      <summary>
        <para>
                    Fit the resolution gate vertically within the sensor gate.
                </para>
      </summary>
    </member>
    <member name="T:UnityEngine.Camera.GateFitParameters">
      <summary>
        <para>Wrapper for gate fit parameters</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.GateFitParameters.aspect">
      <summary>
        <para>Aspect ratio of the resolution gate.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.GateFitParameters.mode">
      <summary>
        <para>GateFitMode to use. See Camera.GateFitMode.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.GateFitParameters.#ctor(UnityEngine.Camera/GateFitMode,System.Single)">
      <summary>
        <para>Wrapper for gate fit parameters.</para>
      </summary>
      <param name="mode"></param>
      <param name="aspect"></param>
    </member>
    <member name="M:UnityEngine.Camera.GetAllCameras(UnityEngine.Camera[])">
      <summary>
        <para>Fills an array of Camera with the current cameras in the Scene, without allocating a new array.</para>
      </summary>
      <param name="cameras">An array to be filled up with cameras currently in the Scene.</param>
    </member>
    <member name="M:UnityEngine.Camera.GetCommandBuffers(UnityEngine.Rendering.CameraEvent)">
      <summary>
        <para>Get command buffers to be executed at a specified place.</para>
      </summary>
      <param name="evt">When to execute the command buffer during rendering.</param>
      <returns>
        <para>Array of command buffers.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Camera.GetGateFittedFieldOfView">
      <summary>
        <para>
                    Retrieves the effective vertical field of view of the camera, including GateFit.
                    Fitting the sensor gate and the resolution gate has an impact on the final field of view. If the sensor gate aspect ratio is the same as the resolution gate aspect ratio or if the camera is not in physical mode, then this method returns the same value as the fieldofview property.
                </para>
      </summary>
      <returns>
        <para>Returns the effective vertical field of view.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Camera.GetGateFittedLensShift">
      <summary>
        <para>
                    Retrieves the effective lens offset of the camera, including GateFit.
                    Fitting the sensor gate and the resolution gate has an impact on the final obliqueness of the projection. If the sensor gate aspect ratio is the same as the resolution gate aspect ratio, then this method returns the same value as the lenshift property. If the camera is not in physical mode, then this methods returns Vector2.zero.
                </para>
      </summary>
      <returns>
        <para>Returns the effective lens shift value.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Camera.GetStereoNonJitteredProjectionMatrix(UnityEngine.Camera/StereoscopicEye)">
      <summary>
        <para>Gets the non-jittered projection matrix of a specific left or right stereoscopic eye.</para>
      </summary>
      <param name="eye">Specifies the stereoscopic eye whose non-jittered projection matrix needs to be returned.</param>
      <returns>
        <para>The non-jittered projection matrix of the specified stereoscopic eye.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Camera.GetStereoProjectionMatrix(UnityEngine.Camera/StereoscopicEye)">
      <summary>
        <para>Gets the projection matrix of a specific left or right stereoscopic eye.</para>
      </summary>
      <param name="eye">Specifies the stereoscopic eye whose projection matrix needs to be returned.</param>
      <returns>
        <para>The projection matrix of the specified stereoscopic eye.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Camera.GetStereoViewMatrix(UnityEngine.Camera/StereoscopicEye)">
      <summary>
        <para>Gets the left or right view matrix of a specific stereoscopic eye.</para>
      </summary>
      <param name="eye">Specifies the stereoscopic eye whose view matrix needs to be returned.</param>
      <returns>
        <para>The view matrix of the specified stereoscopic eye.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Camera.HorizontalToVerticalFieldOfView(System.Single,System.Single)">
      <summary>
        <para>Converts the horizontal field of view (FOV) to the vertical FOV, based on the value of the aspect ratio parameter.</para>
      </summary>
      <param name="horizontalFOV">The horizontal FOV value in degrees.</param>
      <param name="aspectRatio">The aspect ratio value used for the conversion</param>
      <param name="horizontalFieldOfView"></param>
    </member>
    <member name="T:UnityEngine.Camera.MonoOrStereoscopicEye">
      <summary>
        <para>A Camera eye corresponding to the left or right human eye for stereoscopic rendering, or neither for non-stereoscopic rendering.

A single Camera can render both left and right views in a single frame. Therefore, this enum describes which eye the Camera is currently rendering when returned by Camera.stereoActiveEye during a rendering callback (such as Camera.OnRenderImage), or which eye to act on when passed into a function.

The default value is Camera.MonoOrStereoscopicEye.Left, so Camera.MonoOrStereoscopicEye.Left may be returned by some methods or properties when called outside of rendering if stereoscopic rendering is enabled.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.MonoOrStereoscopicEye.Left">
      <summary>
        <para>Camera eye corresponding to stereoscopic rendering of the left eye.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.MonoOrStereoscopicEye.Mono">
      <summary>
        <para>Camera eye corresponding to non-stereoscopic rendering.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.MonoOrStereoscopicEye.Right">
      <summary>
        <para>Camera eye corresponding to stereoscopic rendering of the right eye.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.RemoveAllCommandBuffers">
      <summary>
        <para>Remove all command buffers set on this camera.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.RemoveCommandBuffer(UnityEngine.Rendering.CameraEvent,UnityEngine.Rendering.CommandBuffer)">
      <summary>
        <para>Remove command buffer from execution at a specified place.</para>
      </summary>
      <param name="evt">When to execute the command buffer during rendering.</param>
      <param name="buffer">The buffer to execute.</param>
    </member>
    <member name="M:UnityEngine.Camera.RemoveCommandBuffers(UnityEngine.Rendering.CameraEvent)">
      <summary>
        <para>Remove command buffers from execution at a specified place.</para>
      </summary>
      <param name="evt">When to execute the command buffer during rendering.</param>
    </member>
    <member name="M:UnityEngine.Camera.Render">
      <summary>
        <para>Render the camera manually.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Camera.RenderRequest">
      <summary>
        <para>A request that can be used for making specific rendering requests.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.RenderRequest.isValid">
      <summary>
        <para>Is this request properly formed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.RenderRequest.mode">
      <summary>
        <para>The type of request.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.RenderRequest.outputSpace">
      <summary>
        <para>Defines in which space render requests will be be outputted.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.RenderRequest.result">
      <summary>
        <para>The result of the request.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Camera.RenderRequestMode">
      <summary>
        <para>Modes available for submitting when making a render request.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.RenderRequestMode.BaseColor">
      <summary>
        <para>The render request outputs the materials albedo / base color.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.RenderRequestMode.Depth">
      <summary>
        <para>The render request outputs a depth value.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.RenderRequestMode.DiffuseColor">
      <summary>
        <para>The render request outputs the materials diffuse color.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.RenderRequestMode.Emission">
      <summary>
        <para>The render request outputs the materials emission value.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.RenderRequestMode.EntityId">
      <summary>
        <para>The render request outputs an entity id.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.RenderRequestMode.Metallic">
      <summary>
        <para>The render outputs the materials metal value.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.RenderRequestMode.None">
      <summary>
        <para>Default value for a request.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.RenderRequestMode.Normal">
      <summary>
        <para>The render request outputs the per pixel normal.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.RenderRequestMode.ObjectId">
      <summary>
        <para>The render request outputs an object InstanceID buffer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.RenderRequestMode.Occlusion">
      <summary>
        <para>The render request returns the material ambient occlusion buffer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.RenderRequestMode.Smoothness">
      <summary>
        <para>The render request returns the materials smoothness buffer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.RenderRequestMode.SpecularColor">
      <summary>
        <para>The render request returns the materials specular color buffer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.RenderRequestMode.VertexNormal">
      <summary>
        <para>The render request outputs the interpolated vertex normal.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.RenderRequestMode.WorldPosition">
      <summary>
        <para>The render request outputs a world position buffer.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Camera.RenderRequestOutputSpace">
      <summary>
        <para>Defines in which space render requests will be be outputted.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.RenderRequestOutputSpace.ScreenSpace">
      <summary>
        <para>RenderRequests will be rendered in screenspace from the perspective of the camera.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.RenderRequestOutputSpace.UV0">
      <summary>
        <para>RenderRequests will be outputted in UV 0 space of the rendered mesh.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.RenderRequestOutputSpace.UV1">
      <summary>
        <para>RenderRequests will be outputted in UV 1 space of the rendered mesh.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.RenderRequestOutputSpace.UV2">
      <summary>
        <para>RenderRequests will be outputted in UV 2 space of the rendered mesh.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.RenderRequestOutputSpace.UV3">
      <summary>
        <para>RenderRequests will be outputted in UV 3 space of the rendered mesh.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.RenderRequestOutputSpace.UV4">
      <summary>
        <para>RenderRequests will be outputted in UV 4 space of the rendered mesh.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.RenderRequestOutputSpace.UV5">
      <summary>
        <para>RenderRequests will be outputted in UV 5 space of the rendered mesh.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.RenderRequestOutputSpace.UV6">
      <summary>
        <para>RenderRequests will be outputted in UV 6 space of the rendered mesh.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.RenderRequestOutputSpace.UV7">
      <summary>
        <para>RenderRequests will be outputted in UV 7 space of the rendered mesh.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.RenderRequestOutputSpace.UV8">
      <summary>
        <para>RenderRequests will be outputted in UV 8 space of the rendered mesh.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.RenderToCubemap(UnityEngine.Cubemap,System.Int32)">
      <summary>
        <para>Render into a static cubemap from this camera.</para>
      </summary>
      <param name="cubemap">The cube map to render to.</param>
      <param name="faceMask">A bitmask which determines which of the six faces are rendered to.</param>
      <returns>
        <para>False if rendering fails, else true.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Camera.RenderToCubemap(UnityEngine.RenderTexture,System.Int32)">
      <summary>
        <para>Render into a cubemap from this camera.</para>
      </summary>
      <param name="faceMask">A bitfield indicating which cubemap faces should be rendered into.</param>
      <param name="cubemap">The texture to render to.</param>
      <returns>
        <para>False if rendering fails, else true.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Camera.RenderToCubemap(UnityEngine.RenderTexture,System.Int32,UnityEngine.Camera/MonoOrStereoscopicEye)">
      <summary>
        <para>Render one side of a stereoscopic 360-degree image into a cubemap from this camera.</para>
      </summary>
      <param name="cubemap">The texture to render to.</param>
      <param name="faceMask">A bitfield indicating which cubemap faces should be rendered into. Set to the integer value 63 to render all faces.</param>
      <param name="stereoEye">A Camera eye corresponding to the left or right eye for stereoscopic rendering, or neither for non-stereoscopic rendering.</param>
      <returns>
        <para>False if rendering fails, else true.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Camera.RenderWithShader(UnityEngine.Shader,System.String)">
      <summary>
        <para>Render the camera with shader replacement.</para>
      </summary>
      <param name="shader"></param>
      <param name="replacementTag"></param>
    </member>
    <member name="M:UnityEngine.Camera.Reset">
      <summary>
        <para>Revert all camera parameters to default.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.ResetAspect">
      <summary>
        <para>Revert the aspect ratio to the screen's aspect ratio.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.ResetCullingMatrix">
      <summary>
        <para>Make culling queries reflect the camera's built in parameters.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.ResetFieldOfView">
      <summary>
        <para>Reset to the default field of view.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.ResetProjectionMatrix">
      <summary>
        <para>Make the projection reflect normal camera's parameters.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.ResetReplacementShader">
      <summary>
        <para>Remove shader replacement from camera.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.ResetStereoProjectionMatrices">
      <summary>
        <para>Reset the camera to using the Unity computed projection matrices for all stereoscopic eyes.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.ResetStereoViewMatrices">
      <summary>
        <para>Reset the camera to using the Unity computed view matrices for all stereoscopic eyes.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.ResetTransparencySortSettings">
      <summary>
        <para>Resets this Camera's transparency sort settings to the default. Default transparency settings are taken from GraphicsSettings instead of directly from this Camera.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.ResetWorldToCameraMatrix">
      <summary>
        <para>Make the rendering position reflect the camera's position in the Scene.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.ScreenPointToRay(UnityEngine.Vector3)">
      <summary>
        <para>Returns a ray going from camera through a screen point.</para>
      </summary>
      <param name="eye">Optional argument that can be used to specify which eye transform to use. Default is Mono.</param>
      <param name="pos"></param>
    </member>
    <member name="M:UnityEngine.Camera.ScreenPointToRay(UnityEngine.Vector3,UnityEngine.Camera/MonoOrStereoscopicEye)">
      <summary>
        <para>Returns a ray going from camera through a screen point.</para>
      </summary>
      <param name="eye">Optional argument that can be used to specify which eye transform to use. Default is Mono.</param>
      <param name="pos"></param>
    </member>
    <member name="M:UnityEngine.Camera.ScreenToViewportPoint(UnityEngine.Vector3)">
      <summary>
        <para>Transforms position from screen space into viewport space.</para>
      </summary>
      <param name="position"></param>
    </member>
    <member name="M:UnityEngine.Camera.ScreenToWorldPoint(UnityEngine.Vector3)">
      <summary>
        <para>Transforms a point from screen space into world space, where world space is defined as the coordinate system at the very top of your game's hierarchy.</para>
      </summary>
      <param name="position">A screen space position (often mouse x, y), plus a z position for depth (for example, a camera clipping plane).</param>
      <param name="eye">By default, Camera.MonoOrStereoscopicEye.Mono. Can be set to Camera.MonoOrStereoscopicEye.Left or Camera.MonoOrStereoscopicEye.Right for use in stereoscopic rendering (e.g., for VR).</param>
      <returns>
        <para>The worldspace point created by converting the screen space point at the provided distance z from the camera plane.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Camera.ScreenToWorldPoint(UnityEngine.Vector3,UnityEngine.Camera/MonoOrStereoscopicEye)">
      <summary>
        <para>Transforms a point from screen space into world space, where world space is defined as the coordinate system at the very top of your game's hierarchy.</para>
      </summary>
      <param name="position">A screen space position (often mouse x, y), plus a z position for depth (for example, a camera clipping plane).</param>
      <param name="eye">By default, Camera.MonoOrStereoscopicEye.Mono. Can be set to Camera.MonoOrStereoscopicEye.Left or Camera.MonoOrStereoscopicEye.Right for use in stereoscopic rendering (e.g., for VR).</param>
      <returns>
        <para>The worldspace point created by converting the screen space point at the provided distance z from the camera plane.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Camera.SetReplacementShader(UnityEngine.Shader,System.String)">
      <summary>
        <para>Make the camera render with shader replacement.</para>
      </summary>
      <param name="shader"></param>
      <param name="replacementTag"></param>
    </member>
    <member name="M:UnityEngine.Camera.SetStereoProjectionMatrices(UnityEngine.Matrix4x4,UnityEngine.Matrix4x4)">
      <summary>
        <para>Sets custom projection matrices for both the left and right stereoscopic eyes.</para>
      </summary>
      <param name="leftMatrix">Projection matrix for the stereoscopic left eye.</param>
      <param name="rightMatrix">Projection matrix for the stereoscopic right eye.</param>
    </member>
    <member name="M:UnityEngine.Camera.SetStereoProjectionMatrix(UnityEngine.Camera/StereoscopicEye,UnityEngine.Matrix4x4)">
      <summary>
        <para>Sets a custom projection matrix for a specific stereoscopic eye.</para>
      </summary>
      <param name="eye">Specifies the stereoscopic eye whose projection matrix needs to be set.</param>
      <param name="matrix">The matrix to be set.</param>
    </member>
    <member name="M:UnityEngine.Camera.SetStereoViewMatrices(UnityEngine.Matrix4x4,UnityEngine.Matrix4x4)">
      <summary>
        <para>Set custom view matrices for both eyes.</para>
      </summary>
      <param name="leftMatrix">View matrix for the stereo left eye.</param>
      <param name="rightMatrix">View matrix for the stereo right eye.</param>
    </member>
    <member name="M:UnityEngine.Camera.SetStereoViewMatrix(UnityEngine.Camera/StereoscopicEye,UnityEngine.Matrix4x4)">
      <summary>
        <para>Sets a custom view matrix for a specific stereoscopic eye.</para>
      </summary>
      <param name="eye">Specifies the stereoscopic view matrix to set.</param>
      <param name="matrix">The matrix to be set.</param>
    </member>
    <member name="M:UnityEngine.Camera.SetTargetBuffers(UnityEngine.RenderBuffer,UnityEngine.RenderBuffer)">
      <summary>
        <para>Sets the Camera to render to the chosen buffers of one or more RenderTextures.</para>
      </summary>
      <param name="colorBuffer">The RenderBuffer(s) to which color information will be rendered.</param>
      <param name="depthBuffer">The RenderBuffer to which depth information will be rendered.</param>
    </member>
    <member name="M:UnityEngine.Camera.SetTargetBuffers(UnityEngine.RenderBuffer[],UnityEngine.RenderBuffer)">
      <summary>
        <para>Sets the Camera to render to the chosen buffers of one or more RenderTextures.</para>
      </summary>
      <param name="colorBuffer">The RenderBuffer(s) to which color information will be rendered.</param>
      <param name="depthBuffer">The RenderBuffer to which depth information will be rendered.</param>
    </member>
    <member name="T:UnityEngine.Camera.StereoscopicEye">
      <summary>
        <para>Enum used to specify either the left or the right eye of a stereoscopic camera.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.StereoscopicEye.Left">
      <summary>
        <para>Specifies the target to be the left eye.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Camera.StereoscopicEye.Right">
      <summary>
        <para>Specifies the target to be the right eye.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.SubmitRenderRequests(System.Collections.Generic.List`1&lt;UnityEngine.Camera/RenderRequest&gt;)">
      <summary>
        <para>Submit a number of Camera.RenderRequests.</para>
      </summary>
      <param name="renderRequests">Requests.</param>
    </member>
    <member name="M:UnityEngine.Camera.TryGetCullingParameters(UnityEngine.Rendering.ScriptableCullingParameters&amp;)">
      <summary>
        <para>Get culling parameters for a camera.</para>
      </summary>
      <param name="cullingParameters">Resultant culling parameters.</param>
      <param name="stereoAware">Generate single-pass stereo aware culling parameters.</param>
      <returns>
        <para>Flag indicating whether culling parameters are valid.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Camera.TryGetCullingParameters(System.Boolean,UnityEngine.Rendering.ScriptableCullingParameters&amp;)">
      <summary>
        <para>Get culling parameters for a camera.</para>
      </summary>
      <param name="cullingParameters">Resultant culling parameters.</param>
      <param name="stereoAware">Generate single-pass stereo aware culling parameters.</param>
      <returns>
        <para>Flag indicating whether culling parameters are valid.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Camera.VerticalToHorizontalFieldOfView(System.Single,System.Single)">
      <summary>
        <para>Converts the vertical field of view (FOV) to the horizontal FOV, based on the value of the aspect ratio parameter.</para>
      </summary>
      <param name="verticalFieldOfView">The vertical FOV value in degrees.</param>
      <param name="aspectRatio">The aspect ratio value used for the conversion</param>
    </member>
    <member name="M:UnityEngine.Camera.ViewportPointToRay(UnityEngine.Vector3)">
      <summary>
        <para>Returns a ray going from camera through a viewport point.</para>
      </summary>
      <param name="eye">Optional argument that can be used to specify which eye transform to use. Default is Mono.</param>
      <param name="pos"></param>
    </member>
    <member name="M:UnityEngine.Camera.ViewportPointToRay(UnityEngine.Vector3,UnityEngine.Camera/MonoOrStereoscopicEye)">
      <summary>
        <para>Returns a ray going from camera through a viewport point.</para>
      </summary>
      <param name="eye">Optional argument that can be used to specify which eye transform to use. Default is Mono.</param>
      <param name="pos"></param>
    </member>
    <member name="M:UnityEngine.Camera.ViewportToScreenPoint(UnityEngine.Vector3)">
      <summary>
        <para>Transforms position from viewport space into screen space.</para>
      </summary>
      <param name="position"></param>
    </member>
    <member name="M:UnityEngine.Camera.ViewportToWorldPoint(UnityEngine.Vector3)">
      <summary>
        <para>Transforms position from viewport space into world space.</para>
      </summary>
      <param name="position">The 3d vector in Viewport space.</param>
      <returns>
        <para>The 3d vector in World space.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Camera.WorldToScreenPoint(UnityEngine.Vector3)">
      <summary>
        <para>Transforms position from world space into screen space.</para>
      </summary>
      <param name="eye">Optional argument that can be used to specify which eye transform to use. Default is Mono.</param>
      <param name="position"></param>
    </member>
    <member name="M:UnityEngine.Camera.WorldToScreenPoint(UnityEngine.Vector3,UnityEngine.Camera/MonoOrStereoscopicEye)">
      <summary>
        <para>Transforms position from world space into screen space.</para>
      </summary>
      <param name="eye">Optional argument that can be used to specify which eye transform to use. Default is Mono.</param>
      <param name="position"></param>
    </member>
    <member name="M:UnityEngine.Camera.WorldToViewportPoint(UnityEngine.Vector3)">
      <summary>
        <para>Transforms position from world space into viewport space.</para>
      </summary>
      <param name="eye">Optional argument that can be used to specify which eye transform to use. Default is Mono.</param>
      <param name="position"></param>
    </member>
    <member name="M:UnityEngine.Camera.WorldToViewportPoint(UnityEngine.Vector3,UnityEngine.Camera/MonoOrStereoscopicEye)">
      <summary>
        <para>Transforms position from world space into viewport space.</para>
      </summary>
      <param name="eye">Optional argument that can be used to specify which eye transform to use. Default is Mono.</param>
      <param name="position"></param>
    </member>
    <member name="T:UnityEngine.CameraClearFlags">
      <summary>
        <para>Values for Camera.clearFlags, determining what to clear when rendering a Camera.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CameraClearFlags.Depth">
      <summary>
        <para>Clear only the depth buffer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CameraClearFlags.Nothing">
      <summary>
        <para>Don't clear anything.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CameraClearFlags.Skybox">
      <summary>
        <para>Clear with the skybox.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CameraClearFlags.SolidColor">
      <summary>
        <para>Clear with a background color.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.CameraType">
      <summary>
        <para>Describes different types of camera.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CameraType.Game">
      <summary>
        <para>Used to indicate a regular in-game camera.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CameraType.Preview">
      <summary>
        <para>Used to indicate a camera that is used for rendering previews in the Editor.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CameraType.Reflection">
      <summary>
        <para>Used to indicate a camera that is used for rendering reflection probes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CameraType.SceneView">
      <summary>
        <para>Used to indicate that a camera is used for rendering the Scene View in the Editor.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CameraType.VR">
      <summary>
        <para>Used to indicate that a camera is used for rendering VR (in edit mode) in the Editor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Color">
      <summary>
        <para>Representation of RGBA colors.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Color.a">
      <summary>
        <para>Alpha component of the color (0 is transparent, 1 is opaque).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Color.b">
      <summary>
        <para>Blue component of the color.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Color.black">
      <summary>
        <para>Solid black. RGBA is (0, 0, 0, 1).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Color.blue">
      <summary>
        <para>Solid blue. RGBA is (0, 0, 1, 1).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Color.clear">
      <summary>
        <para>Completely transparent. RGBA is (0, 0, 0, 0).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Color.cyan">
      <summary>
        <para>Cyan. RGBA is (0, 1, 1, 1).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Color.g">
      <summary>
        <para>Green component of the color.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Color.gamma">
      <summary>
        <para>A version of the color that has had the gamma curve applied.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Color.gray">
      <summary>
        <para>Gray. RGBA is (0.5, 0.5, 0.5, 1).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Color.grayscale">
      <summary>
        <para>The grayscale value of the color. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Color.green">
      <summary>
        <para>Solid green. RGBA is (0, 1, 0, 1).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Color.grey">
      <summary>
        <para>English spelling for gray. RGBA is the same (0.5, 0.5, 0.5, 1).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Color.linear">
      <summary>
        <para>A linear value of an sRGB color.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Color.magenta">
      <summary>
        <para>Magenta. RGBA is (1, 0, 1, 1).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Color.maxColorComponent">
      <summary>
        <para>Returns the maximum color component value: Max(r,g,b).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Color.r">
      <summary>
        <para>Red component of the color.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Color.red">
      <summary>
        <para>Solid red. RGBA is (1, 0, 0, 1).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Color.white">
      <summary>
        <para>Solid white. RGBA is (1, 1, 1, 1).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Color.yellow">
      <summary>
        <para>Yellow. RGBA is (1, 0.92, 0.016, 1), but the color is nice to look at!</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Constructs a new Color with given r,g,b,a components.</para>
      </summary>
      <param name="r">Red component.</param>
      <param name="g">Green component.</param>
      <param name="b">Blue component.</param>
      <param name="a">Alpha component.</param>
    </member>
    <member name="M:UnityEngine.Color.#ctor(System.Single,System.Single,System.Single)">
      <summary>
        <para>Constructs a new Color with given r,g,b components and sets a to 1.</para>
      </summary>
      <param name="r">Red component.</param>
      <param name="g">Green component.</param>
      <param name="b">Blue component.</param>
    </member>
    <member name="M:UnityEngine.Color.HSVToRGB(System.Single,System.Single,System.Single)">
      <summary>
        <para>Creates an RGB colour from HSV input.</para>
      </summary>
      <param name="H">Hue [0..1].</param>
      <param name="S">Saturation [0..1].</param>
      <param name="V">Brightness value [0..1].</param>
      <param name="hdr">Output HDR colours. If true, the returned colour will not be clamped to [0..1].</param>
      <returns>
        <para>An opaque colour with HSV matching the input.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Color.HSVToRGB(System.Single,System.Single,System.Single,System.Boolean)">
      <summary>
        <para>Creates an RGB colour from HSV input.</para>
      </summary>
      <param name="H">Hue [0..1].</param>
      <param name="S">Saturation [0..1].</param>
      <param name="V">Brightness value [0..1].</param>
      <param name="hdr">Output HDR colours. If true, the returned colour will not be clamped to [0..1].</param>
      <returns>
        <para>An opaque colour with HSV matching the input.</para>
      </returns>
    </member>
    <member name="?:UnityEngine.Color.implop_Color(Vector4)(UnityEngine.Vector4)">
      <summary>
        <para>Colors can be implicitly converted to and from Vector4.</para>
      </summary>
      <param name="v"></param>
    </member>
    <member name="?:UnityEngine.Color.implop_Vector4(Color)(UnityEngine.Color)">
      <summary>
        <para>Colors can be implicitly converted to and from Vector4.</para>
      </summary>
      <param name="c"></param>
    </member>
    <member name="M:UnityEngine.Color.Lerp(UnityEngine.Color,UnityEngine.Color,System.Single)">
      <summary>
        <para>Linearly interpolates between colors a and b by t.</para>
      </summary>
      <param name="a">Color a.</param>
      <param name="b">Color b.</param>
      <param name="t">Float for combining a and b.</param>
    </member>
    <member name="M:UnityEngine.Color.LerpUnclamped(UnityEngine.Color,UnityEngine.Color,System.Single)">
      <summary>
        <para>Linearly interpolates between colors a and b by t.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
      <param name="t"></param>
    </member>
    <member name="?:UnityEngine.Color.op_Divide(UnityEngine.Color,System.Single)">
      <summary>
        <para>Divides color a by the float b. Each color component is scaled separately.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="?:UnityEngine.Color.op_Minus(UnityEngine.Color,UnityEngine.Color)">
      <summary>
        <para>Subtracts color b from color a. Each component is subtracted separately.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="?:UnityEngine.Color.op_Multiply(UnityEngine.Color,UnityEngine.Color)">
      <summary>
        <para>Multiplies two colors together. Each component is multiplied separately.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="?:UnityEngine.Color.op_Multiply(UnityEngine.Color,System.Single)">
      <summary>
        <para>Multiplies color a by the float b. Each color component is scaled separately.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="?:UnityEngine.Color.op_Multiply(System.Single,UnityEngine.Color)">
      <summary>
        <para>Multiplies color a by the float b. Each color component is scaled separately.</para>
      </summary>
      <param name="b"></param>
      <param name="a"></param>
    </member>
    <member name="?:UnityEngine.Color.op_Plus(UnityEngine.Color,UnityEngine.Color)">
      <summary>
        <para>Adds two colors together. Each component is added separately.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="M:UnityEngine.Color.RGBToHSV(UnityEngine.Color,System.Single&amp;,System.Single&amp;,System.Single&amp;)">
      <summary>
        <para>Calculates the hue, saturation and value of an RGB input color.</para>
      </summary>
      <param name="rgbColor">An input color.</param>
      <param name="H">Output variable for hue.</param>
      <param name="S">Output variable for saturation.</param>
      <param name="V">Output variable for value.</param>
    </member>
    <member name="P:UnityEngine.Color.this">
      <summary>
        <para>Access the r, g, b,a components using [0], [1], [2], [3] respectively.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Color.ToString">
      <summary>
        <para>Returns a formatted string of this color.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="M:UnityEngine.Color.ToString(System.String)">
      <summary>
        <para>Returns a formatted string of this color.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="M:UnityEngine.Color.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Returns a formatted string of this color.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="T:UnityEngine.Color32">
      <summary>
        <para>Representation of RGBA colors in 32 bit format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Color32.a">
      <summary>
        <para>Alpha component of the color.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Color32.b">
      <summary>
        <para>Blue component of the color.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Color32.g">
      <summary>
        <para>Green component of the color.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Color32.r">
      <summary>
        <para>Red component of the color.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Color32.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
        <para>Constructs a new Color32 with given r, g, b, a components.</para>
      </summary>
      <param name="r"></param>
      <param name="g"></param>
      <param name="b"></param>
      <param name="a"></param>
    </member>
    <member name="?:UnityEngine.Color32.implop_Color(Color32)(UnityEngine.Color32)">
      <summary>
        <para>Color32 can be implicitly converted to and from Color.</para>
      </summary>
      <param name="c"></param>
    </member>
    <member name="?:UnityEngine.Color32.implop_Color32(Color)(UnityEngine.Color)">
      <summary>
        <para>Color32 can be implicitly converted to and from Color.</para>
      </summary>
      <param name="c"></param>
    </member>
    <member name="M:UnityEngine.Color32.Lerp(UnityEngine.Color32,UnityEngine.Color32,System.Single)">
      <summary>
        <para>Linearly interpolates between colors a and b by t.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
      <param name="t"></param>
    </member>
    <member name="M:UnityEngine.Color32.LerpUnclamped(UnityEngine.Color32,UnityEngine.Color32,System.Single)">
      <summary>
        <para>Linearly interpolates between colors a and b by t.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
      <param name="t"></param>
    </member>
    <member name="P:UnityEngine.Color32.this">
      <summary>
        <para>Access the red (r), green (g), blue (b), and alpha (a) color components using [0], [1], [2], [3] respectively.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Color32.ToString">
      <summary>
        <para>Returns a formatted string for this color.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="M:UnityEngine.Color32.ToString(System.String)">
      <summary>
        <para>Returns a formatted string for this color.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="M:UnityEngine.Color32.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Returns a formatted string for this color.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="T:UnityEngine.ColorGamut">
      <summary>
        <para>Represents a color gamut.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ColorGamut.sRGB">
      <summary>
        <para>sRGB color gamut.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ColorGamut.DisplayP3">
      <summary>
        <para>Display-P3 color gamut.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ColorGamut.DolbyHDR">
      <summary>
        <para>DolbyHDR high dynamic range color gamut.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ColorGamut.HDR10">
      <summary>
        <para>HDR10 high dynamic range color gamut.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ColorGamut.Rec2020">
      <summary>
        <para>Rec. 2020 color gamut.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ColorGamut.Rec709">
      <summary>
        <para>Rec. 709 color gamut.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ColorSpace">
      <summary>
        <para>Color space for player settings.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ColorSpace.Gamma">
      <summary>
        <para>Gamma color space.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ColorSpace.Linear">
      <summary>
        <para>Linear color space.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ColorSpace.Uninitialized">
      <summary>
        <para>Uninitialized color space.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ColorUsageAttribute">
      <summary>
        <para>Attribute used to configure the usage of the ColorField and Color Picker for a color.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ColorUsageAttribute.hdr">
      <summary>
        <para>If set to true the Color is treated as a HDR color.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ColorUsageAttribute.maxBrightness">
      <summary>
        <para>Maximum allowed HDR color component value when using the HDR Color Picker.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ColorUsageAttribute.maxExposureValue">
      <summary>
        <para>Maximum exposure value allowed in the HDR Color Picker.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ColorUsageAttribute.minBrightness">
      <summary>
        <para>Minimum allowed HDR color component value when using the Color Picker.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ColorUsageAttribute.minExposureValue">
      <summary>
        <para>Minimum exposure value allowed in the HDR Color Picker.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ColorUsageAttribute.showAlpha">
      <summary>
        <para>If false then the alpha bar is hidden in the ColorField and the alpha value is not shown in the Color Picker.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ColorUsageAttribute.#ctor(System.Boolean)">
      <summary>
        <para>Attribute for Color fields. Used for configuring the GUI for the color.</para>
      </summary>
      <param name="showAlpha">If false then the alpha channel info is hidden both in the ColorField and in the Color Picker.</param>
      <param name="hdr">Set to true if the color should be treated as a HDR color (default value: false).</param>
      <param name="minBrightness">Minimum allowed HDR color component value when using the HDR Color Picker (default value: 0).</param>
      <param name="maxBrightness">Maximum allowed HDR color component value when using the HDR Color Picker (default value: 8).</param>
      <param name="minExposureValue">Minimum exposure value allowed in the HDR Color Picker (default value: 1/8 = 0.125).</param>
      <param name="maxExposureValue">Maximum exposure value allowed in the HDR Color Picker (default value: 3).</param>
    </member>
    <member name="M:UnityEngine.ColorUsageAttribute.#ctor(System.Boolean,System.Boolean)">
      <summary>
        <para>Attribute for Color fields. Used for configuring the GUI for the color.</para>
      </summary>
      <param name="showAlpha">If false then the alpha channel info is hidden both in the ColorField and in the Color Picker.</param>
      <param name="hdr">Set to true if the color should be treated as a HDR color (default value: false).</param>
      <param name="minBrightness">Minimum allowed HDR color component value when using the HDR Color Picker (default value: 0).</param>
      <param name="maxBrightness">Maximum allowed HDR color component value when using the HDR Color Picker (default value: 8).</param>
      <param name="minExposureValue">Minimum exposure value allowed in the HDR Color Picker (default value: 1/8 = 0.125).</param>
      <param name="maxExposureValue">Maximum exposure value allowed in the HDR Color Picker (default value: 3).</param>
    </member>
    <member name="M:UnityEngine.ColorUsageAttribute.#ctor(System.Boolean,System.Boolean,System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Attribute for Color fields. Used for configuring the GUI for the color.</para>
      </summary>
      <param name="showAlpha">If false then the alpha channel info is hidden both in the ColorField and in the Color Picker.</param>
      <param name="hdr">Set to true if the color should be treated as a HDR color (default value: false).</param>
      <param name="minBrightness">Minimum allowed HDR color component value when using the HDR Color Picker (default value: 0).</param>
      <param name="maxBrightness">Maximum allowed HDR color component value when using the HDR Color Picker (default value: 8).</param>
      <param name="minExposureValue">Minimum exposure value allowed in the HDR Color Picker (default value: 1/8 = 0.125).</param>
      <param name="maxExposureValue">Maximum exposure value allowed in the HDR Color Picker (default value: 3).</param>
    </member>
    <member name="T:UnityEngine.ColorUtility">
      <summary>
        <para>A collection of common color functions.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ColorUtility.ToHtmlStringRGB(UnityEngine.Color)">
      <summary>
        <para>Returns the color as a hexadecimal string in the format "RRGGBB".</para>
      </summary>
      <param name="color">The color to be converted.</param>
      <returns>
        <para>Hexadecimal string representing the color.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.ColorUtility.ToHtmlStringRGBA(UnityEngine.Color)">
      <summary>
        <para>Returns the color as a hexadecimal string in the format "RRGGBBAA".</para>
      </summary>
      <param name="color">The color to be converted.</param>
      <returns>
        <para>Hexadecimal string representing the color.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.ColorUtility.TryParseHtmlString(System.String,UnityEngine.Color&amp;)">
      <summary>
        <para>Attempts to convert a html color string.</para>
      </summary>
      <param name="htmlString">Case insensitive html string to be converted into a color.</param>
      <param name="color">The converted color.</param>
      <returns>
        <para>True if the string was successfully converted else false.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.CombineInstance">
      <summary>
        <para>Struct used to describe meshes to be combined using Mesh.CombineMeshes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CombineInstance.lightmapScaleOffset">
      <summary>
        <para>The baked lightmap UV scale and offset applied to the Mesh.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CombineInstance.mesh">
      <summary>
        <para>Mesh to combine.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CombineInstance.realtimeLightmapScaleOffset">
      <summary>
        <para>The realtime lightmap UV scale and offset applied to the Mesh.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CombineInstance.subMeshIndex">
      <summary>
        <para>Sub-Mesh index of the Mesh.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CombineInstance.transform">
      <summary>
        <para>Matrix to transform the Mesh with before combining.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Component">
      <summary>
        <para>Base class for everything attached to GameObjects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Component.animation">
      <summary>
        <para>The Animation attached to this GameObject. (Null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Component.audio">
      <summary>
        <para>The AudioSource attached to this GameObject. (Null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Component.camera">
      <summary>
        <para>The Camera attached to this GameObject. (Null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Component.collider">
      <summary>
        <para>The Collider attached to this GameObject. (Null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Component.collider2D">
      <summary>
        <para>The Collider2D component attached to the object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Component.constantForce">
      <summary>
        <para>The ConstantForce attached to this GameObject. (Null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Component.gameObject">
      <summary>
        <para>The game object this component is attached to. A component is always attached to a game object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Component.hingeJoint">
      <summary>
        <para>The HingeJoint attached to this GameObject. (Null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Component.light">
      <summary>
        <para>The Light attached to this GameObject. (Null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Component.networkView">
      <summary>
        <para>The NetworkView attached to this GameObject (Read Only). (null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Component.particleSystem">
      <summary>
        <para>The ParticleSystem attached to this GameObject. (Null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Component.renderer">
      <summary>
        <para>The Renderer attached to this GameObject. (Null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Component.rigidbody">
      <summary>
        <para>The Rigidbody attached to this GameObject. (Null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Component.rigidbody2D">
      <summary>
        <para>The Rigidbody2D that is attached to the Component's GameObject.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Component.tag">
      <summary>
        <para>The tag of this game object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Component.transform">
      <summary>
        <para>The Transform attached to this GameObject.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Component.BroadcastMessage(System.String)">
      <summary>
        <para>Calls the method named methodName on every MonoBehaviour in this game object or any of its children.</para>
      </summary>
      <param name="methodName">Name of the method to call.</param>
      <param name="parameter">Optional parameter to pass to the method (can be any value).</param>
      <param name="options">Should an error be raised if the method does not exist for a given target object?</param>
    </member>
    <member name="M:UnityEngine.Component.BroadcastMessage(System.String,System.Object)">
      <summary>
        <para>Calls the method named methodName on every MonoBehaviour in this game object or any of its children.</para>
      </summary>
      <param name="methodName">Name of the method to call.</param>
      <param name="parameter">Optional parameter to pass to the method (can be any value).</param>
      <param name="options">Should an error be raised if the method does not exist for a given target object?</param>
    </member>
    <member name="M:UnityEngine.Component.BroadcastMessage(System.String,System.Object,UnityEngine.SendMessageOptions)">
      <summary>
        <para>Calls the method named methodName on every MonoBehaviour in this game object or any of its children.</para>
      </summary>
      <param name="methodName">Name of the method to call.</param>
      <param name="parameter">Optional parameter to pass to the method (can be any value).</param>
      <param name="options">Should an error be raised if the method does not exist for a given target object?</param>
    </member>
    <member name="M:UnityEngine.Component.BroadcastMessage(System.String,UnityEngine.SendMessageOptions)">
      <summary>
        <para>Calls the method named methodName on every MonoBehaviour in this game object or any of its children.</para>
      </summary>
      <param name="methodName">Name of the method to call.</param>
      <param name="parameter">Optional parameter to pass to the method (can be any value).</param>
      <param name="options">Should an error be raised if the method does not exist for a given target object?</param>
    </member>
    <member name="M:UnityEngine.Component.CompareTag(System.String)">
      <summary>
        <para>Is this game object tagged with tag ?</para>
      </summary>
      <param name="tag">The tag to compare.</param>
    </member>
    <member name="M:UnityEngine.Component.GetComponent(System.Type)">
      <summary>
        <para>Returns the component of Type type if the GameObject has one attached, null if it doesn't. Will also return disabled components.</para>
      </summary>
      <param name="type">The type of Component to retrieve.</param>
    </member>
    <member name="M:UnityEngine.Component.GetComponent">
      <summary>
        <para>Generic version of this method.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Component.GetComponent(System.String)">
      <summary>
        <para>Returns the component with name type if the GameObject has one attached, null if it doesn't.</para>
      </summary>
      <param name="type"></param>
    </member>
    <member name="M:UnityEngine.Component.GetComponentInChildren(System.Type)">
      <summary>
        <para>Returns the component of Type type in the GameObject or any of its children using depth first search.</para>
      </summary>
      <param name="t">The type of Component to retrieve.</param>
      <returns>
        <para>A component of the matching type, if found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Component.GetComponentInChildren()">
      <summary>
        <para>Generic version of this method.</para>
      </summary>
      <param name="includeInactive"></param>
      <returns>
        <para>A component of the matching type, if found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Component.GetComponentInParent(System.Type)">
      <summary>
        <para>Returns the component of Type type in the GameObject or any of its parents.</para>
      </summary>
      <param name="t">The type of Component to retrieve.</param>
      <returns>
        <para>A component of the matching type, if found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Component.GetComponentInParent">
      <summary>
        <para>Generic version of this method.</para>
      </summary>
      <returns>
        <para>A component of the matching type, if found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Component.GetComponents(System.Type)">
      <summary>
        <para>Returns all components of Type type in the GameObject.</para>
      </summary>
      <param name="type">The type of Component to retrieve.</param>
    </member>
    <member name="M:UnityEngine.Component.GetComponents">
      <summary>
        <para>Generic version of this method.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Component.GetComponentsInChildren">
      <summary>
        <para>Returns all components of Type type in the GameObject or any of its children. Works recursively.</para>
      </summary>
      <param name="t">The type of Component to retrieve.</param>
      <param name="includeInactive">Should Components on inactive GameObjects be included in the found set? includeInactive decides which children of the GameObject will be searched.  The GameObject that you call GetComponentsInChildren on is always searched regardless. Default is false.</param>
    </member>
    <member name="M:UnityEngine.Component.GetComponentsInChildren(System.Type,System.Boolean)">
      <summary>
        <para>Returns all components of Type type in the GameObject or any of its children. Works recursively.</para>
      </summary>
      <param name="t">The type of Component to retrieve.</param>
      <param name="includeInactive">Should Components on inactive GameObjects be included in the found set? includeInactive decides which children of the GameObject will be searched.  The GameObject that you call GetComponentsInChildren on is always searched regardless. Default is false.</param>
    </member>
    <member name="M:UnityEngine.Component.GetComponentsInChildren(System.Boolean)">
      <summary>
        <para>Generic version of this method.</para>
      </summary>
      <param name="includeInactive">Should Components on inactive GameObjects be included in the found set? includeInactive decides which children of the GameObject will be searched.  The GameObject that you call GetComponentsInChildren on is always searched regardless.</param>
      <returns>
        <para>A list of all found components matching the specified type.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Component.GetComponentsInChildren">
      <summary>
        <para>Generic version of this method.</para>
      </summary>
      <returns>
        <para>A list of all found components matching the specified type.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Component.GetComponentsInParent(System.Type,System.Boolean)">
      <summary>
        <para>Returns all components of Type type in the GameObject or any of its parents.</para>
      </summary>
      <param name="t">The type of Component to retrieve.</param>
      <param name="includeInactive">Should inactive Components be included in the found set?</param>
    </member>
    <member name="M:UnityEngine.Component.GetComponentsInParent(System.Boolean)">
      <summary>
        <para>Generic version of this method.</para>
      </summary>
      <param name="includeInactive">Should inactive Components be included in the found set?</param>
    </member>
    <member name="M:UnityEngine.Component.GetComponentsInParent">
      <summary>
        <para>Generic version of this method.</para>
      </summary>
      <param name="includeInactive">Should inactive Components be included in the found set?</param>
    </member>
    <member name="M:UnityEngine.Component.SendMessage(System.String)">
      <summary>
        <para>Calls the method named methodName on every MonoBehaviour in this game object.</para>
      </summary>
      <param name="methodName">Name of the method to call.</param>
      <param name="value">Optional parameter for the method.</param>
      <param name="options">Should an error be raised if the target object doesn't implement the method for the message?</param>
    </member>
    <member name="M:UnityEngine.Component.SendMessage(System.String,System.Object)">
      <summary>
        <para>Calls the method named methodName on every MonoBehaviour in this game object.</para>
      </summary>
      <param name="methodName">Name of the method to call.</param>
      <param name="value">Optional parameter for the method.</param>
      <param name="options">Should an error be raised if the target object doesn't implement the method for the message?</param>
    </member>
    <member name="M:UnityEngine.Component.SendMessage(System.String,System.Object,UnityEngine.SendMessageOptions)">
      <summary>
        <para>Calls the method named methodName on every MonoBehaviour in this game object.</para>
      </summary>
      <param name="methodName">Name of the method to call.</param>
      <param name="value">Optional parameter for the method.</param>
      <param name="options">Should an error be raised if the target object doesn't implement the method for the message?</param>
    </member>
    <member name="M:UnityEngine.Component.SendMessage(System.String,UnityEngine.SendMessageOptions)">
      <summary>
        <para>Calls the method named methodName on every MonoBehaviour in this game object.</para>
      </summary>
      <param name="methodName">Name of the method to call.</param>
      <param name="value">Optional parameter for the method.</param>
      <param name="options">Should an error be raised if the target object doesn't implement the method for the message?</param>
    </member>
    <member name="M:UnityEngine.Component.SendMessageUpwards(System.String)">
      <summary>
        <para>Calls the method named methodName on every MonoBehaviour in this game object and on every ancestor of the behaviour.</para>
      </summary>
      <param name="methodName">Name of method to call.</param>
      <param name="value">Optional parameter value for the method.</param>
      <param name="options">Should an error be raised if the method does not exist on the target object?</param>
    </member>
    <member name="M:UnityEngine.Component.SendMessageUpwards(System.String,System.Object)">
      <summary>
        <para>Calls the method named methodName on every MonoBehaviour in this game object and on every ancestor of the behaviour.</para>
      </summary>
      <param name="methodName">Name of method to call.</param>
      <param name="value">Optional parameter value for the method.</param>
      <param name="options">Should an error be raised if the method does not exist on the target object?</param>
    </member>
    <member name="M:UnityEngine.Component.SendMessageUpwards(System.String,UnityEngine.SendMessageOptions)">
      <summary>
        <para>Calls the method named methodName on every MonoBehaviour in this game object and on every ancestor of the behaviour.</para>
      </summary>
      <param name="methodName">Name of method to call.</param>
      <param name="value">Optional parameter value for the method.</param>
      <param name="options">Should an error be raised if the method does not exist on the target object?</param>
    </member>
    <member name="M:UnityEngine.Component.SendMessageUpwards(System.String,System.Object,UnityEngine.SendMessageOptions)">
      <summary>
        <para>Calls the method named methodName on every MonoBehaviour in this game object and on every ancestor of the behaviour.</para>
      </summary>
      <param name="methodName">Name of method to call.</param>
      <param name="value">Optional parameter value for the method.</param>
      <param name="options">Should an error be raised if the method does not exist on the target object?</param>
    </member>
    <member name="M:UnityEngine.Component.TryGetComponent(System.Type,UnityEngine.Component&amp;)">
      <summary>
        <para>Gets the component of the specified type, if it exists.</para>
      </summary>
      <param name="type">The type of the component to retrieve.</param>
      <param name="component">The output argument that will contain the component or null.</param>
      <returns>
        <para>Returns true if the component is found, false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Component.TryGetComponent(T&amp;)">
      <summary>
        <para>Gets the component of the specified type, if it exists.</para>
      </summary>
      <param name="type">The type of the component to retrieve.</param>
      <param name="component">The output argument that will contain the component or null.</param>
      <returns>
        <para>Returns true if the component is found, false otherwise.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.ComputeBuffer">
      <summary>
        <para>GPU data buffer, mostly for use with compute shaders.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ComputeBuffer.count">
      <summary>
        <para>Number of elements in the buffer (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ComputeBuffer.name">
      <summary>
        <para>The debug label for the ComputeBuffer. This name shows up in profiling and frame debugger tools, wherever supported.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ComputeBuffer.stride">
      <summary>
        <para>Size of one element in the buffer (Read Only).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ComputeBuffer.BeginWrite(System.Int32,System.Int32)">
      <summary>
        <para>Begins a write operation to the buffer</para>
      </summary>
      <param name="computeBufferStartIndex">Offset in number of elements to which the write operation will occur</param>
      <param name="count">Maximum number of elements which will be written</param>
      <returns>
        <para>A NativeArray of size count</para>
      </returns>
    </member>
    <member name="M:UnityEngine.ComputeBuffer.CopyCount(UnityEngine.ComputeBuffer,UnityEngine.ComputeBuffer,System.Int32)">
      <summary>
        <para>Copy counter value of append/consume buffer into another buffer.</para>
      </summary>
      <param name="src">Append/consume buffer to copy the counter from.</param>
      <param name="dst">A buffer to copy the counter to.</param>
      <param name="dstOffsetBytes">Target byte offset in dst.</param>
    </member>
    <member name="M:UnityEngine.ComputeBuffer.#ctor(System.Int32,System.Int32)">
      <summary>
        <para>Create a Compute Buffer.</para>
      </summary>
      <param name="count">Number of elements in the buffer.</param>
      <param name="stride">Size of one element in the buffer. Has to match size of buffer type in the shader. See for cross-platform compatibility information.</param>
      <param name="type">Type of the buffer, default is ComputeBufferType.Default (structured buffer).</param>
    </member>
    <member name="M:UnityEngine.ComputeBuffer.#ctor(System.Int32,System.Int32,UnityEngine.ComputeBufferType)">
      <summary>
        <para>Create a Compute Buffer.</para>
      </summary>
      <param name="count">Number of elements in the buffer.</param>
      <param name="stride">Size of one element in the buffer. Has to match size of buffer type in the shader. See for cross-platform compatibility information.</param>
      <param name="type">Type of the buffer, default is ComputeBufferType.Default (structured buffer).</param>
    </member>
    <member name="M:UnityEngine.ComputeBuffer.EndWrite(System.Int32)">
      <summary>
        <para>Ends a write operation to the buffer</para>
      </summary>
      <param name="countWritten">Number of elements written to the buffer. Counted from the first element.</param>
    </member>
    <member name="M:UnityEngine.ComputeBuffer.GetData(System.Array)">
      <summary>
        <para>Read data values from the buffer into an array. The array can only use &lt;a href="https:docs.microsoft.comen-usdotnetframeworkinteropblittable-and-non-blittable-types"&gt;blittable&lt;a&gt; types.</para>
      </summary>
      <param name="data">An array to receive the data.</param>
    </member>
    <member name="M:UnityEngine.ComputeBuffer.GetData(System.Array,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Partial read of data values from the buffer into an array.</para>
      </summary>
      <param name="data">An array to receive the data.</param>
      <param name="managedBufferStartIndex">The first element index in data where retrieved elements are copied.</param>
      <param name="computeBufferStartIndex">The first element index of the compute buffer from which elements are read.</param>
      <param name="count">The number of elements to retrieve.</param>
    </member>
    <member name="M:UnityEngine.ComputeBuffer.GetNativeBufferPtr">
      <summary>
        <para>Retrieve a native (underlying graphics API) pointer to the buffer.</para>
      </summary>
      <returns>
        <para>Pointer to the underlying graphics API buffer.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.ComputeBuffer.IsValid">
      <summary>
        <para>Returns true if this compute buffer is valid and false otherwise.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ComputeBuffer.Release">
      <summary>
        <para>Release a Compute Buffer.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ComputeBuffer.SetCounterValue(System.UInt32)">
      <summary>
        <para>Sets counter value of append/consume buffer.</para>
      </summary>
      <param name="counterValue">Value of the append/consume counter.</param>
    </member>
    <member name="M:UnityEngine.ComputeBuffer.SetData(System.Array)">
      <summary>
        <para>Set the buffer with values from an array.</para>
      </summary>
      <param name="data">Array of values to fill the buffer.</param>
    </member>
    <member name="M:UnityEngine.ComputeBuffer.SetData(System.Collections.Generic.List`1&lt;T&gt;)">
      <summary>
        <para>Set the buffer with values from an array.</para>
      </summary>
      <param name="data">Array of values to fill the buffer.</param>
    </member>
    <member name="M:UnityEngine.ComputeBuffer.SetData(Unity.Collections.NativeArray`1&lt;T&gt;)">
      <summary>
        <para>Set the buffer with values from an array.</para>
      </summary>
      <param name="data">Array of values to fill the buffer.</param>
    </member>
    <member name="M:UnityEngine.ComputeBuffer.SetData(System.Array,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Partial copy of data values from an array into the buffer.</para>
      </summary>
      <param name="data">Array of values to fill the buffer.</param>
      <param name="managedBufferStartIndex">The first element index in data to copy to the compute buffer.</param>
      <param name="computeBufferStartIndex">The first element index in compute buffer to receive the data.</param>
      <param name="count">The number of elements to copy.</param>
      <param name="nativeBufferStartIndex"></param>
    </member>
    <member name="M:UnityEngine.ComputeBuffer.SetData(System.Collections.Generic.List`1&lt;T&gt;,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Partial copy of data values from an array into the buffer.</para>
      </summary>
      <param name="data">Array of values to fill the buffer.</param>
      <param name="managedBufferStartIndex">The first element index in data to copy to the compute buffer.</param>
      <param name="computeBufferStartIndex">The first element index in compute buffer to receive the data.</param>
      <param name="count">The number of elements to copy.</param>
      <param name="nativeBufferStartIndex"></param>
    </member>
    <member name="M:UnityEngine.ComputeBuffer.SetData(Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Partial copy of data values from an array into the buffer.</para>
      </summary>
      <param name="data">Array of values to fill the buffer.</param>
      <param name="managedBufferStartIndex">The first element index in data to copy to the compute buffer.</param>
      <param name="computeBufferStartIndex">The first element index in compute buffer to receive the data.</param>
      <param name="count">The number of elements to copy.</param>
      <param name="nativeBufferStartIndex"></param>
    </member>
    <member name="T:UnityEngine.ComputeBufferMode">
      <summary>
        <para>Intended usage of the buffer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ComputeBufferMode.Circular">
      <summary>
        <para>Legacy mode, do not use.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ComputeBufferMode.Dynamic">
      <summary>
        <para>Dynamic buffer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ComputeBufferMode.Immutable">
      <summary>
        <para>Static buffer, only initial upload allowed by the CPU</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ComputeBufferMode.StreamOut">
      <summary>
        <para>Stream Out / Transform Feedback output buffer. Internal use only.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ComputeBufferMode.SubUpdates">
      <summary>
        <para>Dynamic, unsynchronized access to the buffer.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ComputeBufferType">
      <summary>
        <para>ComputeBuffer type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ComputeBufferType.Append">
      <summary>
        <para>Append-consume ComputeBuffer type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ComputeBufferType.Constant">
      <summary>
        <para>ComputeBuffer that you can use as a constant buffer (uniform buffer).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ComputeBufferType.Counter">
      <summary>
        <para>ComputeBuffer with a counter.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ComputeBufferType.Default">
      <summary>
        <para>Default ComputeBuffer type (structured buffer).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ComputeBufferType.IndirectArguments">
      <summary>
        <para>ComputeBuffer used for Graphics.DrawProceduralIndirect, ComputeShader.DispatchIndirect or Graphics.DrawMeshInstancedIndirect arguments.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ComputeBufferType.Raw">
      <summary>
        <para>Raw ComputeBuffer type (byte address buffer).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ComputeBufferType.Structured">
      <summary>
        <para>ComputeBuffer that you can use as a structured buffer.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ComputeShader">
      <summary>
        <para>Compute Shader asset.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ComputeShader.shaderKeywords">
      <summary>
        <para>Array of locally enabled shader keywords.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ComputeShader.DisableKeyword(System.String)">
      <summary>
        <para>Disables a locally set Shader keyword.</para>
      </summary>
      <param name="keyword"></param>
    </member>
    <member name="M:UnityEngine.ComputeShader.Dispatch(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Execute a compute shader.</para>
      </summary>
      <param name="kernelIndex">Which kernel to execute. A single compute shader asset can have multiple kernel entry points.</param>
      <param name="threadGroupsX">Number of work groups in the X dimension.</param>
      <param name="threadGroupsY">Number of work groups in the Y dimension.</param>
      <param name="threadGroupsZ">Number of work groups in the Z dimension.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.DispatchIndirect(System.Int32,UnityEngine.ComputeBuffer,System.UInt32)">
      <summary>
        <para>Execute a compute shader.</para>
      </summary>
      <param name="kernelIndex">Which kernel to execute. A single compute shader asset can have multiple kernel entry points.</param>
      <param name="argsBuffer">Buffer with dispatch arguments.</param>
      <param name="argsOffset">The byte offset into the buffer, where the draw arguments start.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.DispatchIndirect(System.Int32,UnityEngine.GraphicsBuffer,System.UInt32)">
      <summary>
        <para>Execute a compute shader.</para>
      </summary>
      <param name="kernelIndex">Which kernel to execute. A single compute shader asset can have multiple kernel entry points.</param>
      <param name="argsBuffer">Buffer with dispatch arguments.</param>
      <param name="argsOffset">The byte offset into the buffer, where the draw arguments start.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.EnableKeyword(System.String)">
      <summary>
        <para>Sets a Shader keyword locally for this Compute Shader.</para>
      </summary>
      <param name="keyword"></param>
    </member>
    <member name="M:UnityEngine.ComputeShader.FindKernel(System.String)">
      <summary>
        <para>Find ComputeShader kernel index.</para>
      </summary>
      <param name="name">Name of kernel function.</param>
      <returns>
        <para>The Kernel index, or logs a "FindKernel failed" error message if the kernel is not found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.ComputeShader.GetKernelThreadGroupSizes(System.Int32,System.UInt32&amp;,System.UInt32&amp;,System.UInt32&amp;)">
      <summary>
        <para>Get kernel thread group sizes.</para>
      </summary>
      <param name="kernelIndex">Which kernel to query. A single compute shader asset can have multiple kernel entry points.</param>
      <param name="x">Thread group size in the X dimension.</param>
      <param name="y">Thread group size in the Y dimension.</param>
      <param name="z">Thread group size in the Z dimension.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.HasKernel(System.String)">
      <summary>
        <para>Checks whether a shader contains a given kernel.</para>
      </summary>
      <param name="name">The name of the kernel to look for.</param>
      <returns>
        <para>True if the kernel is found, false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.ComputeShader.IsKeywordEnabled(System.String)">
      <summary>
        <para>Specifies whether the Shader keyword is enabled in this Compute Shader.</para>
      </summary>
      <param name="keyword"></param>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetBool(System.String,System.Boolean)">
      <summary>
        <para>Set a bool parameter.</para>
      </summary>
      <param name="name">Variable name in shader code.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="val">Value to set.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetBool(System.Int32,System.Boolean)">
      <summary>
        <para>Set a bool parameter.</para>
      </summary>
      <param name="name">Variable name in shader code.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="val">Value to set.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetBuffer(System.Int32,System.String,UnityEngine.ComputeBuffer)">
      <summary>
        <para>Sets an input or output compute buffer.</para>
      </summary>
      <param name="kernelIndex">For which kernel the buffer is being set. See FindKernel.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="name">Name of the buffer variable in shader code.</param>
      <param name="buffer">Buffer to set.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetBuffer(System.Int32,System.Int32,UnityEngine.ComputeBuffer)">
      <summary>
        <para>Sets an input or output compute buffer.</para>
      </summary>
      <param name="kernelIndex">For which kernel the buffer is being set. See FindKernel.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="name">Name of the buffer variable in shader code.</param>
      <param name="buffer">Buffer to set.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetBuffer(System.Int32,System.String,UnityEngine.GraphicsBuffer)">
      <summary>
        <para>Sets an input or output compute buffer.</para>
      </summary>
      <param name="kernelIndex">For which kernel the buffer is being set. See FindKernel.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="name">Name of the buffer variable in shader code.</param>
      <param name="buffer">Buffer to set.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetBuffer(System.Int32,System.Int32,UnityEngine.GraphicsBuffer)">
      <summary>
        <para>Sets an input or output compute buffer.</para>
      </summary>
      <param name="kernelIndex">For which kernel the buffer is being set. See FindKernel.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="name">Name of the buffer variable in shader code.</param>
      <param name="buffer">Buffer to set.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetConstantBuffer(System.Int32,UnityEngine.ComputeBuffer,System.Int32,System.Int32)">
      <summary>
        <para>Sets a ComputeBuffer or a GraphicsBuffer as a named constant buffer for the ComputeShader.</para>
      </summary>
      <param name="nameID">The ID of the property name for the constant buffer in shader code. Use Shader.PropertyToID to get this ID.</param>
      <param name="name">The name of the buffer to bind as constant buffer.</param>
      <param name="buffer">The buffer to bind as constant buffer.</param>
      <param name="offset">The offset in bytes from the beginning of the ComputeBuffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.</param>
      <param name="size">The number of bytes to bind.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetConstantBuffer(System.String,UnityEngine.ComputeBuffer,System.Int32,System.Int32)">
      <summary>
        <para>Sets a ComputeBuffer or a GraphicsBuffer as a named constant buffer for the ComputeShader.</para>
      </summary>
      <param name="nameID">The ID of the property name for the constant buffer in shader code. Use Shader.PropertyToID to get this ID.</param>
      <param name="name">The name of the buffer to bind as constant buffer.</param>
      <param name="buffer">The buffer to bind as constant buffer.</param>
      <param name="offset">The offset in bytes from the beginning of the ComputeBuffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.</param>
      <param name="size">The number of bytes to bind.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetConstantBuffer(System.Int32,UnityEngine.GraphicsBuffer,System.Int32,System.Int32)">
      <summary>
        <para>Sets a ComputeBuffer or a GraphicsBuffer as a named constant buffer for the ComputeShader.</para>
      </summary>
      <param name="nameID">The ID of the property name for the constant buffer in shader code. Use Shader.PropertyToID to get this ID.</param>
      <param name="name">The name of the buffer to bind as constant buffer.</param>
      <param name="buffer">The buffer to bind as constant buffer.</param>
      <param name="offset">The offset in bytes from the beginning of the ComputeBuffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.</param>
      <param name="size">The number of bytes to bind.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetConstantBuffer(System.String,UnityEngine.GraphicsBuffer,System.Int32,System.Int32)">
      <summary>
        <para>Sets a ComputeBuffer or a GraphicsBuffer as a named constant buffer for the ComputeShader.</para>
      </summary>
      <param name="nameID">The ID of the property name for the constant buffer in shader code. Use Shader.PropertyToID to get this ID.</param>
      <param name="name">The name of the buffer to bind as constant buffer.</param>
      <param name="buffer">The buffer to bind as constant buffer.</param>
      <param name="offset">The offset in bytes from the beginning of the ComputeBuffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.</param>
      <param name="size">The number of bytes to bind.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetFloat(System.String,System.Single)">
      <summary>
        <para>Set a float parameter.</para>
      </summary>
      <param name="name">Variable name in shader code.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="val">Value to set.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetFloat(System.Int32,System.Single)">
      <summary>
        <para>Set a float parameter.</para>
      </summary>
      <param name="name">Variable name in shader code.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="val">Value to set.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetFloats(System.String,System.Single[])">
      <summary>
        <para>Set multiple consecutive float parameters at once.</para>
      </summary>
      <param name="name">Array variable name in the shader code.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="values">Value array to set.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetFloats(System.Int32,System.Single[])">
      <summary>
        <para>Set multiple consecutive float parameters at once.</para>
      </summary>
      <param name="name">Array variable name in the shader code.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="values">Value array to set.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetInt(System.String,System.Int32)">
      <summary>
        <para>Set an integer parameter.</para>
      </summary>
      <param name="name">Variable name in shader code.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="val">Value to set.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetInt(System.Int32,System.Int32)">
      <summary>
        <para>Set an integer parameter.</para>
      </summary>
      <param name="name">Variable name in shader code.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="val">Value to set.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetInts(System.String,System.Int32[])">
      <summary>
        <para>Set multiple consecutive integer parameters at once.</para>
      </summary>
      <param name="name">Array variable name in the shader code.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="values">Value array to set.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetInts(System.Int32,System.Int32[])">
      <summary>
        <para>Set multiple consecutive integer parameters at once.</para>
      </summary>
      <param name="name">Array variable name in the shader code.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="values">Value array to set.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetMatrix(System.String,UnityEngine.Matrix4x4)">
      <summary>
        <para>Set a Matrix parameter.</para>
      </summary>
      <param name="name">Variable name in shader code.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="val">Value to set.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetMatrix(System.Int32,UnityEngine.Matrix4x4)">
      <summary>
        <para>Set a Matrix parameter.</para>
      </summary>
      <param name="name">Variable name in shader code.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="val">Value to set.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetMatrixArray(System.String,UnityEngine.Matrix4x4[])">
      <summary>
        <para>Set a Matrix array parameter.</para>
      </summary>
      <param name="name">Variable name in shader code.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="values">Value to set.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetMatrixArray(System.Int32,UnityEngine.Matrix4x4[])">
      <summary>
        <para>Set a Matrix array parameter.</para>
      </summary>
      <param name="name">Variable name in shader code.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="values">Value to set.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetTexture(System.Int32,System.String,UnityEngine.Texture)">
      <summary>
        <para>Set a texture parameter.</para>
      </summary>
      <param name="kernelIndex">For which kernel the texture is being set. See FindKernel.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="name">Name of the buffer variable in shader code.</param>
      <param name="texture">Texture to set.</param>
      <param name="mipLevel">Optional mipmap level of the read-write texture.</param>
      <param name="element">Optional parameter that specifies the type of data to set from the RenderTexture.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetTexture(System.Int32,System.Int32,UnityEngine.Texture)">
      <summary>
        <para>Set a texture parameter.</para>
      </summary>
      <param name="kernelIndex">For which kernel the texture is being set. See FindKernel.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="name">Name of the buffer variable in shader code.</param>
      <param name="texture">Texture to set.</param>
      <param name="mipLevel">Optional mipmap level of the read-write texture.</param>
      <param name="element">Optional parameter that specifies the type of data to set from the RenderTexture.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetTexture(System.Int32,System.String,UnityEngine.Texture,System.Int32)">
      <summary>
        <para>Set a texture parameter.</para>
      </summary>
      <param name="kernelIndex">For which kernel the texture is being set. See FindKernel.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="name">Name of the buffer variable in shader code.</param>
      <param name="texture">Texture to set.</param>
      <param name="mipLevel">Optional mipmap level of the read-write texture.</param>
      <param name="element">Optional parameter that specifies the type of data to set from the RenderTexture.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetTexture(System.Int32,System.Int32,UnityEngine.Texture,System.Int32)">
      <summary>
        <para>Set a texture parameter.</para>
      </summary>
      <param name="kernelIndex">For which kernel the texture is being set. See FindKernel.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="name">Name of the buffer variable in shader code.</param>
      <param name="texture">Texture to set.</param>
      <param name="mipLevel">Optional mipmap level of the read-write texture.</param>
      <param name="element">Optional parameter that specifies the type of data to set from the RenderTexture.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetTexture(System.Int32,System.String,UnityEngine.RenderTexture,System.Int32,UnityEngine.Rendering.RenderTextureSubElement)">
      <summary>
        <para>Set a texture parameter.</para>
      </summary>
      <param name="kernelIndex">For which kernel the texture is being set. See FindKernel.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="name">Name of the buffer variable in shader code.</param>
      <param name="texture">Texture to set.</param>
      <param name="mipLevel">Optional mipmap level of the read-write texture.</param>
      <param name="element">Optional parameter that specifies the type of data to set from the RenderTexture.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetTexture(System.Int32,System.Int32,UnityEngine.RenderTexture,System.Int32,UnityEngine.Rendering.RenderTextureSubElement)">
      <summary>
        <para>Set a texture parameter.</para>
      </summary>
      <param name="kernelIndex">For which kernel the texture is being set. See FindKernel.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="name">Name of the buffer variable in shader code.</param>
      <param name="texture">Texture to set.</param>
      <param name="mipLevel">Optional mipmap level of the read-write texture.</param>
      <param name="element">Optional parameter that specifies the type of data to set from the RenderTexture.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetTextureFromGlobal(System.Int32,System.String,System.String)">
      <summary>
        <para>Set a texture parameter from a global texture property.</para>
      </summary>
      <param name="kernelIndex">For which kernel the texture is being set. See FindKernel.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="name">Name of the buffer variable in shader code.</param>
      <param name="globalTextureName">Global texture property to assign to shader.</param>
      <param name="globalTextureNameID">Property name ID, use Shader.PropertyToID to get it.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetTextureFromGlobal(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Set a texture parameter from a global texture property.</para>
      </summary>
      <param name="kernelIndex">For which kernel the texture is being set. See FindKernel.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="name">Name of the buffer variable in shader code.</param>
      <param name="globalTextureName">Global texture property to assign to shader.</param>
      <param name="globalTextureNameID">Property name ID, use Shader.PropertyToID to get it.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetVector(System.String,UnityEngine.Vector4)">
      <summary>
        <para>Set a vector parameter.</para>
      </summary>
      <param name="name">Variable name in shader code.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="val">Value to set.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetVector(System.Int32,UnityEngine.Vector4)">
      <summary>
        <para>Set a vector parameter.</para>
      </summary>
      <param name="name">Variable name in shader code.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="val">Value to set.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetVectorArray(System.String,UnityEngine.Vector4[])">
      <summary>
        <para>Set a vector array parameter.</para>
      </summary>
      <param name="name">Variable name in shader code.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="values">Value to set.</param>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetVectorArray(System.Int32,UnityEngine.Vector4[])">
      <summary>
        <para>Set a vector array parameter.</para>
      </summary>
      <param name="name">Variable name in shader code.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="values">Value to set.</param>
    </member>
    <member name="T:UnityEngine.ConnectionTesterStatus">
      <summary>
        <para>The various test results the connection tester may return with.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ContextMenu">
      <summary>
        <para>The ContextMenu attribute allows you to add commands to the context menu.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ContextMenu.#ctor(System.String)">
      <summary>
        <para>Adds the function to the context menu of the component.</para>
      </summary>
      <param name="itemName">The name of the context menu item.</param>
      <param name="isValidateFunction">Whether this is a validate function (defaults to false).</param>
      <param name="priority">Priority used to override the ordering of the menu items (defaults to 1000000). The lower the number the earlier in the menu it will appear.</param>
    </member>
    <member name="M:UnityEngine.ContextMenu.#ctor(System.String,System.Boolean)">
      <summary>
        <para>Adds the function to the context menu of the component.</para>
      </summary>
      <param name="itemName">The name of the context menu item.</param>
      <param name="isValidateFunction">Whether this is a validate function (defaults to false).</param>
      <param name="priority">Priority used to override the ordering of the menu items (defaults to 1000000). The lower the number the earlier in the menu it will appear.</param>
    </member>
    <member name="M:UnityEngine.ContextMenu.#ctor(System.String,System.Boolean,System.Int32)">
      <summary>
        <para>Adds the function to the context menu of the component.</para>
      </summary>
      <param name="itemName">The name of the context menu item.</param>
      <param name="isValidateFunction">Whether this is a validate function (defaults to false).</param>
      <param name="priority">Priority used to override the ordering of the menu items (defaults to 1000000). The lower the number the earlier in the menu it will appear.</param>
    </member>
    <member name="T:UnityEngine.ContextMenuItemAttribute">
      <summary>
        <para>Use this attribute to add a context menu to a field that calls a  named method.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ContextMenuItemAttribute.function">
      <summary>
        <para>The name of the function that should be called.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ContextMenuItemAttribute.name">
      <summary>
        <para>The name of the context menu item.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ContextMenuItemAttribute.#ctor(System.String,System.String)">
      <summary>
        <para>Use this attribute to add a context menu to a field that calls a  named method.</para>
      </summary>
      <param name="name">The name of the context menu item.</param>
      <param name="function">The name of the function that should be called.</param>
    </member>
    <member name="T:UnityEngine.Coroutine">
      <summary>
        <para>MonoBehaviour.StartCoroutine returns a Coroutine. Instances of this class are only used to reference these coroutines, and do not hold any exposed properties or functions.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.CrashReport">
      <summary>
        <para>Holds data for a single application crash event and provides access to all gathered crash reports.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CrashReport.lastReport">
      <summary>
        <para>Returns last crash report, or null if no reports are available.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CrashReport.reports">
      <summary>
        <para>Returns all currently available reports in a new array.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CrashReport.text">
      <summary>
        <para>Crash report data as formatted text.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CrashReport.time">
      <summary>
        <para>Time, when the crash occured.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.CrashReport.Remove">
      <summary>
        <para>Remove report from available reports list.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.CrashReport.RemoveAll">
      <summary>
        <para>Remove all reports from available reports list.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.CreateAssetMenuAttribute">
      <summary>
        <para>Mark a ScriptableObject-derived type to be automatically listed in the Assets/Create submenu, so that instances of the type can be easily created and stored in the project as ".asset" files.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CreateAssetMenuAttribute.fileName">
      <summary>
        <para>The default file name used by newly created instances of this type.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CreateAssetMenuAttribute.menuName">
      <summary>
        <para>The display name for this type shown in the Assets/Create menu.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CreateAssetMenuAttribute.order">
      <summary>
        <para>The position of the menu item within the Assets/Create menu.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Cubemap">
      <summary>
        <para>Class for handling cube maps, Use this to create or modify existing.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cubemap.desiredMipmapLevel">
      <summary>
        <para>The mipmap level that the streaming system would load before memory budgets are applied.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cubemap.format">
      <summary>
        <para>The format of the pixel data in the texture (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cubemap.loadedMipmapLevel">
      <summary>
        <para>The mipmap level that is currently loaded by the streaming system.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cubemap.loadingMipmapLevel">
      <summary>
        <para>The mipmap level that the mipmap streaming system is in the process of loading.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cubemap.requestedMipmapLevel">
      <summary>
        <para>The mipmap level to load.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cubemap.streamingMipmaps">
      <summary>
        <para>Determines whether mipmap streaming is enabled for this Texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cubemap.streamingMipmapsPriority">
      <summary>
        <para>Sets the relative priority for this Texture when reducing memory size to fit within the memory budget.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Cubemap.Apply(System.Boolean,System.Boolean)">
      <summary>
        <para>Actually apply all previous SetPixel and SetPixels changes.</para>
      </summary>
      <param name="updateMipmaps">When set to true, mipmap levels are recalculated.</param>
      <param name="makeNoLongerReadable">When set to true, system memory copy of a texture is released.</param>
    </member>
    <member name="M:UnityEngine.Cubemap.ClearRequestedMipmapLevel">
      <summary>
        <para>Resets the requestedMipmapLevel field.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Cubemap.CreateExternalTexture(System.Int32,UnityEngine.TextureFormat,System.Boolean,System.IntPtr)">
      <summary>
        <para>Creates a Unity cubemap out of externally created native cubemap object.</para>
      </summary>
      <param name="size">The width and height of each face of the cubemap should be the same.</param>
      <param name="format">Format of underlying cubemap object.</param>
      <param name="mipmap">Does the cubemap have mipmaps?</param>
      <param name="nativeTex">Native cubemap texture object.</param>
      <param name="width"></param>
    </member>
    <member name="M:UnityEngine.Cubemap.#ctor(System.Int32,UnityEngine.TextureFormat,System.Boolean)">
      <summary>
        <para>Create a new empty cubemap texture.</para>
      </summary>
      <param name="size">Width/height of a cube face in pixels.</param>
      <param name="format">Pixel data format to be used for the Cubemap.</param>
      <param name="mipmap">Should mipmaps be created?</param>
      <param name="width"></param>
      <param name="textureFormat"></param>
      <param name="mipChain"></param>
    </member>
    <member name="M:UnityEngine.Cubemap.GetPixel(UnityEngine.CubemapFace,System.Int32,System.Int32)">
      <summary>
        <para>Returns pixel color at coordinates (face, x, y).</para>
      </summary>
      <param name="face"></param>
      <param name="x"></param>
      <param name="y"></param>
    </member>
    <member name="M:UnityEngine.Cubemap.GetPixelData(System.Int32,UnityEngine.CubemapFace)">
      <summary>
        <para>Gets raw data from a Texture for reading or writing.</para>
      </summary>
      <param name="mipLevel">The mip level to reference.</param>
      <param name="face">The Cubemap face to reference.</param>
    </member>
    <member name="M:UnityEngine.Cubemap.GetPixels(UnityEngine.CubemapFace,System.Int32)">
      <summary>
        <para>Returns pixel colors of a cubemap face.</para>
      </summary>
      <param name="face">The face from which pixel data is taken.</param>
      <param name="miplevel">Mipmap level for the chosen face.</param>
    </member>
    <member name="M:UnityEngine.Cubemap.IsRequestedMipmapLevelLoaded">
      <summary>
        <para>Checks to see whether the mipmap level set by requestedMipmapLevel has finished loading.</para>
      </summary>
      <returns>
        <para>True if the mipmap level requested by requestedMipmapLevel has finished loading.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Cubemap.SetPixel(UnityEngine.CubemapFace,System.Int32,System.Int32,UnityEngine.Color)">
      <summary>
        <para>Sets pixel color at coordinates (face, x, y).</para>
      </summary>
      <param name="face"></param>
      <param name="x"></param>
      <param name="y"></param>
      <param name="color"></param>
    </member>
    <member name="M:UnityEngine.Cubemap.SetPixelData(T[],System.Int32,UnityEngine.CubemapFace,System.Int32)">
      <summary>
        <para>Set pixel values from raw preformatted data.</para>
      </summary>
      <param name="mipLevel">Mip level to fill.</param>
      <param name="face">Cubemap face to fill.</param>
      <param name="sourceDataStartIndex">Index in the source array to start copying from (default 0).</param>
      <param name="data">Data array to initialize texture pixels with.</param>
    </member>
    <member name="M:UnityEngine.Cubemap.SetPixelData(Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32,UnityEngine.CubemapFace,System.Int32)">
      <summary>
        <para>Set pixel values from raw preformatted data.</para>
      </summary>
      <param name="mipLevel">Mip level to fill.</param>
      <param name="face">Cubemap face to fill.</param>
      <param name="sourceDataStartIndex">Index in the source array to start copying from (default 0).</param>
      <param name="data">Data array to initialize texture pixels with.</param>
    </member>
    <member name="M:UnityEngine.Cubemap.SetPixels(UnityEngine.Color[],UnityEngine.CubemapFace,System.Int32)">
      <summary>
        <para>Sets pixel colors of a cubemap face.</para>
      </summary>
      <param name="colors">Pixel data for the Cubemap face.</param>
      <param name="face">The face to which the new data should be applied.</param>
      <param name="miplevel">The mipmap level for the face.</param>
    </member>
    <member name="M:UnityEngine.Cubemap.SmoothEdges(System.Int32)">
      <summary>
        <para>Performs smoothing of near edge regions.</para>
      </summary>
      <param name="smoothRegionWidthInPixels">Pixel distance at edges over which to apply smoothing.</param>
    </member>
    <member name="M:UnityEngine.Cubemap.UpdateExternalTexture(System.IntPtr)">
      <summary>
        <para>Updates Unity cubemap to use different native cubemap texture object.</para>
      </summary>
      <param name="nativeTexture">Native cubemap texture object.</param>
    </member>
    <member name="T:UnityEngine.CubemapArray">
      <summary>
        <para>Class for handling Cubemap arrays.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CubemapArray.cubemapCount">
      <summary>
        <para>Number of cubemaps in the array (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CubemapArray.format">
      <summary>
        <para>Texture format (Read Only).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.CubemapArray.Apply(System.Boolean,System.Boolean)">
      <summary>
        <para>Actually apply all previous SetPixels changes.</para>
      </summary>
      <param name="updateMipmaps">When set to true, mipmap levels are recalculated.</param>
      <param name="makeNoLongerReadable">When set to true, system memory copy of a texture is released.</param>
    </member>
    <member name="M:UnityEngine.CubemapArray.#ctor(System.Int32,System.Int32,UnityEngine.TextureFormat,System.Boolean)">
      <summary>
        <para>Create a new cubemap array.</para>
      </summary>
      <param name="faceSize">Cubemap face size in pixels.</param>
      <param name="cubemapCount">Number of elements in the cubemap array.</param>
      <param name="format">Format of the pixel data.</param>
      <param name="mipmap">Should mipmaps be created?</param>
      <param name="linear">Does the texture contain non-color data (i.e. don't do any color space conversions when sampling)? Default is false.</param>
      <param name="width"></param>
      <param name="textureFormat"></param>
      <param name="mipChain"></param>
    </member>
    <member name="M:UnityEngine.CubemapArray.#ctor(System.Int32,System.Int32,UnityEngine.TextureFormat,System.Boolean,System.Boolean)">
      <summary>
        <para>Create a new cubemap array.</para>
      </summary>
      <param name="faceSize">Cubemap face size in pixels.</param>
      <param name="cubemapCount">Number of elements in the cubemap array.</param>
      <param name="format">Format of the pixel data.</param>
      <param name="mipmap">Should mipmaps be created?</param>
      <param name="linear">Does the texture contain non-color data (i.e. don't do any color space conversions when sampling)? Default is false.</param>
      <param name="width"></param>
      <param name="textureFormat"></param>
      <param name="mipChain"></param>
    </member>
    <member name="M:UnityEngine.CubemapArray.GetPixelData(System.Int32,UnityEngine.CubemapFace,System.Int32)">
      <summary>
        <para>Gets raw data from a Texture for reading or writing.</para>
      </summary>
      <param name="mipLevel">The mip level to reference.</param>
      <param name="face">The Cubemap face to reference.</param>
      <param name="element">The array slice to reference.</param>
    </member>
    <member name="M:UnityEngine.CubemapArray.GetPixels(UnityEngine.CubemapFace,System.Int32,System.Int32)">
      <summary>
        <para>Returns pixel colors of a single array slice/face.</para>
      </summary>
      <param name="face">Cubemap face to read pixels from.</param>
      <param name="arrayElement">Array slice to read pixels from.</param>
      <param name="miplevel">Mipmap level to read pixels from.</param>
      <returns>
        <para>Array of pixel colors.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.CubemapArray.GetPixels32(UnityEngine.CubemapFace,System.Int32,System.Int32)">
      <summary>
        <para>Returns pixel colors of a single array slice/face.</para>
      </summary>
      <param name="face">Cubemap face to read pixels from.</param>
      <param name="arrayElement">Array slice to read pixels from.</param>
      <param name="miplevel">Mipmap level to read pixels from.</param>
      <returns>
        <para>Array of pixel colors in low precision (8 bits/channel) format.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.CubemapArray.SetPixelData(T[],System.Int32,UnityEngine.CubemapFace,System.Int32,System.Int32)">
      <summary>
        <para>Set pixel values from raw preformatted data.</para>
      </summary>
      <param name="mipLevel">Mip level to fill.</param>
      <param name="element">Array slice to copy pixels to.</param>
      <param name="sourceDataStartIndex">Index in the source array to start copying from (default 0).</param>
      <param name="face">Cubemap face to fill.</param>
      <param name="data">Data array to initialize texture pixels with.</param>
    </member>
    <member name="M:UnityEngine.CubemapArray.SetPixelData(Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32,UnityEngine.CubemapFace,System.Int32,System.Int32)">
      <summary>
        <para>Set pixel values from raw preformatted data.</para>
      </summary>
      <param name="mipLevel">Mip level to fill.</param>
      <param name="element">Array slice to copy pixels to.</param>
      <param name="sourceDataStartIndex">Index in the source array to start copying from (default 0).</param>
      <param name="face">Cubemap face to fill.</param>
      <param name="data">Data array to initialize texture pixels with.</param>
    </member>
    <member name="M:UnityEngine.CubemapArray.SetPixels(UnityEngine.Color[],UnityEngine.CubemapFace,System.Int32,System.Int32)">
      <summary>
        <para>Set pixel colors for a single array slice/face.</para>
      </summary>
      <param name="colors">An array of pixel colors.</param>
      <param name="face">Cubemap face to set pixels for.</param>
      <param name="arrayElement">Array element index to set pixels for.</param>
      <param name="miplevel">Mipmap level to set pixels for.</param>
    </member>
    <member name="M:UnityEngine.CubemapArray.SetPixels32(UnityEngine.Color32[],UnityEngine.CubemapFace,System.Int32,System.Int32)">
      <summary>
        <para>Set pixel colors for a single array slice/face.</para>
      </summary>
      <param name="colors">An array of pixel colors in low precision (8 bits/channel) format.</param>
      <param name="face">Cubemap face to set pixels for.</param>
      <param name="arrayElement">Array element index to set pixels for.</param>
      <param name="miplevel">Mipmap level to set pixels for.</param>
    </member>
    <member name="T:UnityEngine.CubemapFace">
      <summary>
        <para>Cubemap face.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CubemapFace.NegativeX">
      <summary>
        <para>Left facing side (-x).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CubemapFace.NegativeY">
      <summary>
        <para>Downward facing side (-y).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CubemapFace.NegativeZ">
      <summary>
        <para>Backward facing side (-z).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CubemapFace.PositiveX">
      <summary>
        <para>Right facing side (+x).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CubemapFace.PositiveY">
      <summary>
        <para>Upwards facing side (+y).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CubemapFace.PositiveZ">
      <summary>
        <para>Forward facing side (+z).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CubemapFace.Unknown">
      <summary>
        <para>Cubemap face is unknown or unspecified.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.CullingGroup">
      <summary>
        <para>Describes a set of bounding spheres that should have their visibility and distances maintained.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CullingGroup.enabled">
      <summary>
        <para>Pauses culling group execution.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CullingGroup.onStateChanged">
      <summary>
        <para>Sets the callback that will be called when a sphere's visibility and/or distance state has changed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CullingGroup.targetCamera">
      <summary>
        <para>Locks the CullingGroup to a specific camera.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.CullingGroup.#ctor">
      <summary>
        <para>Create a CullingGroup.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.CullingGroup.Dispose">
      <summary>
        <para>Clean up all memory used by the CullingGroup immediately.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.CullingGroup.EraseSwapBack(System.Int32)">
      <summary>
        <para>Erase a given bounding sphere by moving the final sphere on top of it.</para>
      </summary>
      <param name="index">The index of the entry to erase.</param>
    </member>
    <member name="M:UnityEngine.CullingGroup.EraseSwapBack(System.Int32,T[],System.Int32&amp;)">
      <summary>
        <para>Erase a given entry in an arbitrary array by copying the final entry on top of it, then decrementing the number of entries used by one.</para>
      </summary>
      <param name="index">The index of the entry to erase.</param>
      <param name="myArray">An array of entries.</param>
      <param name="size">The number of entries in the array that are actually used.</param>
    </member>
    <member name="M:UnityEngine.CullingGroup.GetDistance(System.Int32)">
      <summary>
        <para>Get the current distance band index of a given sphere.</para>
      </summary>
      <param name="index">The index of the sphere.</param>
      <returns>
        <para>The sphere's current distance band index.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.CullingGroup.IsVisible(System.Int32)">
      <summary>
        <para>Returns true if the bounding sphere at index is currently visible from any of the contributing cameras.</para>
      </summary>
      <param name="index">The index of the bounding sphere.</param>
      <returns>
        <para>True if the sphere is visible; false if it is invisible.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.CullingGroup.QueryIndices(System.Boolean,System.Int32[],System.Int32)">
      <summary>
        <para>Retrieve the indices of spheres that have particular visibility and/or distance states.</para>
      </summary>
      <param name="visible">True if only visible spheres should be retrieved; false if only invisible spheres should be retrieved.</param>
      <param name="distanceIndex">The distance band that retrieved spheres must be in.</param>
      <param name="result">An array that will be filled with the retrieved sphere indices.</param>
      <param name="firstIndex">The index of the sphere to begin searching at.</param>
      <returns>
        <para>The number of sphere indices found and written into the result array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.CullingGroup.QueryIndices(System.Int32,System.Int32[],System.Int32)">
      <summary>
        <para>Retrieve the indices of spheres that have particular visibility and/or distance states.</para>
      </summary>
      <param name="visible">True if only visible spheres should be retrieved; false if only invisible spheres should be retrieved.</param>
      <param name="distanceIndex">The distance band that retrieved spheres must be in.</param>
      <param name="result">An array that will be filled with the retrieved sphere indices.</param>
      <param name="firstIndex">The index of the sphere to begin searching at.</param>
      <returns>
        <para>The number of sphere indices found and written into the result array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.CullingGroup.QueryIndices(System.Boolean,System.Int32,System.Int32[],System.Int32)">
      <summary>
        <para>Retrieve the indices of spheres that have particular visibility and/or distance states.</para>
      </summary>
      <param name="visible">True if only visible spheres should be retrieved; false if only invisible spheres should be retrieved.</param>
      <param name="distanceIndex">The distance band that retrieved spheres must be in.</param>
      <param name="result">An array that will be filled with the retrieved sphere indices.</param>
      <param name="firstIndex">The index of the sphere to begin searching at.</param>
      <returns>
        <para>The number of sphere indices found and written into the result array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.CullingGroup.SetBoundingDistances(System.Single[])">
      <summary>
        <para>Set bounding distances for 'distance bands' the group should compute, as well as options for how spheres falling into each distance band should be treated.</para>
      </summary>
      <param name="distances">An array of bounding distances. The distances should be sorted in increasing order.</param>
    </member>
    <member name="M:UnityEngine.CullingGroup.SetBoundingSphereCount(System.Int32)">
      <summary>
        <para>Sets the number of bounding spheres in the bounding spheres array that are actually being used.</para>
      </summary>
      <param name="count">The number of bounding spheres being used.</param>
    </member>
    <member name="M:UnityEngine.CullingGroup.SetBoundingSpheres(UnityEngine.BoundingSphere[])">
      <summary>
        <para>Sets the array of bounding sphere definitions that the CullingGroup should compute culling for.</para>
      </summary>
      <param name="array">The BoundingSpheres to cull.</param>
    </member>
    <member name="M:UnityEngine.CullingGroup.SetDistanceReferencePoint(UnityEngine.Vector3)">
      <summary>
        <para>Set the reference point from which distance bands are measured.</para>
      </summary>
      <param name="point">A fixed point to measure the distance from.</param>
      <param name="transform">A transform to measure the distance from. The transform's position will be automatically tracked.</param>
    </member>
    <member name="M:UnityEngine.CullingGroup.SetDistanceReferencePoint(UnityEngine.Transform)">
      <summary>
        <para>Set the reference point from which distance bands are measured.</para>
      </summary>
      <param name="point">A fixed point to measure the distance from.</param>
      <param name="transform">A transform to measure the distance from. The transform's position will be automatically tracked.</param>
    </member>
    <member name="T:UnityEngine.CullingGroup.StateChanged">
      <summary>
        <para>This delegate is used for recieving a callback when a sphere's distance or visibility state has changed.</para>
      </summary>
      <param name="sphere">A CullingGroupEvent that provides information about the sphere that has changed.</param>
    </member>
    <member name="T:UnityEngine.CullingGroupEvent">
      <summary>
        <para>Provides information about the current and previous states of one sphere in a CullingGroup.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CullingGroupEvent.currentDistance">
      <summary>
        <para>The current distance band index of the sphere, after the most recent culling pass.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CullingGroupEvent.hasBecomeInvisible">
      <summary>
        <para>Did this sphere change from being visible to being invisible in the most recent culling pass?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CullingGroupEvent.hasBecomeVisible">
      <summary>
        <para>Did this sphere change from being invisible to being visible in the most recent culling pass?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CullingGroupEvent.index">
      <summary>
        <para>The index of the sphere that has changed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CullingGroupEvent.isVisible">
      <summary>
        <para>Was the sphere considered visible by the most recent culling pass?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CullingGroupEvent.previousDistance">
      <summary>
        <para>The distance band index of the sphere before the most recent culling pass.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CullingGroupEvent.wasVisible">
      <summary>
        <para>Was the sphere visible before the most recent culling pass?</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Cursor">
      <summary>
        <para>Cursor API for setting the cursor (mouse pointer).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cursor.lockState">
      <summary>
        <para>Determines whether the hardware pointer is locked to the center of the view, constrained to the window, or not constrained at all.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cursor.visible">
      <summary>
        <para>Determines whether the hardware pointer is visible or not.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Cursor.SetCursor">
      <summary>
        <para>Sets the mouse cursor to the given texture.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Cursor.SetCursor(UnityEngine.Texture2D,UnityEngine.Vector2,UnityEngine.CursorMode)">
      <summary>
        <para>Specify a custom cursor that you wish to use as a cursor.</para>
      </summary>
      <param name="texture">The texture to use for the cursor. To use a texture, you must first import it with `Read/Write`enabled. Alternatively, you can use the default cursor import setting. If you created your cursor texture from code, it must be in RGBA32 format, have alphaIsTransparency enabled, and have no mip chain. To use the default cursor, set the texture to `Null`.</param>
      <param name="hotspot">The offset from the top left of the texture to use as the target point (must be within the bounds of the cursor).</param>
      <param name="cursorMode">Allow this cursor to render as a hardware cursor on supported platforms, or force software cursor.</param>
    </member>
    <member name="T:UnityEngine.CursorLockMode">
      <summary>
        <para>How the cursor should behave.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CursorLockMode.Confined">
      <summary>
        <para>Confine cursor to the game window.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CursorLockMode.Locked">
      <summary>
        <para>Lock cursor to the center of the game window.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CursorLockMode.None">
      <summary>
        <para>Cursor behavior is unmodified.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.CursorMode">
      <summary>
        <para>Determines whether the mouse cursor is rendered using software rendering or, on supported platforms, hardware rendering.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CursorMode.Auto">
      <summary>
        <para>Use hardware cursors on supported platforms.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CursorMode.ForceSoftware">
      <summary>
        <para>Force the use of software cursors.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.CustomRenderTexture">
      <summary>
        <para>Custom Render Textures are an extension to Render Textures that allow you to render directly to the Texture using a Shader.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CustomRenderTexture.cubemapFaceMask">
      <summary>
        <para>The bit field that you can use to enable or disable update on each of the cubemap faces. The bit order from least to most significant bit is as follows: +X, -X, +Y, -Y, +Z, -Z.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CustomRenderTexture.doubleBuffered">
      <summary>
        <para>When this parameter is set to true, Unity double-buffers the Custom Render Texture so that you can access it during its own update.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CustomRenderTexture.initializationColor">
      <summary>
        <para>The color that Unity uses to initialize a Custom Render Texture. Unity ignores this parameter if an initializationMaterial is set.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CustomRenderTexture.initializationMaterial">
      <summary>
        <para>The Material that Unity uses to initialize a Custom Render Texture. Initialization texture and color are ignored if you have set this parameter.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CustomRenderTexture.initializationMode">
      <summary>
        <para>Determine how Unity initializes a texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CustomRenderTexture.initializationSource">
      <summary>
        <para>Determine if Unity initializes the Custom Render Texture with a Texture and a Color or a Material.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CustomRenderTexture.initializationTexture">
      <summary>
        <para>The Texture that Unity uses to initialize a Custom Render Texture, multiplied by the initialization color. Unity ignores this parameter if an initializationMaterial is set.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CustomRenderTexture.material">
      <summary>
        <para>The Material that Unity uses to initialize the content of a Custom Render Texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CustomRenderTexture.shaderPass">
      <summary>
        <para>The Shader Pass Unity uses to update the Custom Render Texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CustomRenderTexture.updateMode">
      <summary>
        <para>Determine how Unity updates the Custom Render Texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CustomRenderTexture.updatePeriod">
      <summary>
        <para>The period in seconds that Unity updates real-time Custom Render Textures. A value of 0.0 means Unity updates real-time Custom Render Textures every frame.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CustomRenderTexture.updateZoneSpace">
      <summary>
        <para>The space in which Unity expresses update zones. You can set this to Normalized or Pixel space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CustomRenderTexture.wrapUpdateZones">
      <summary>
        <para>When this parameter is set to true, Unity wraps Update zones around the border of the Custom Render Texture. Otherwise, Unity clamps Update zones at the border of the Custom Render Texture.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.CustomRenderTexture.ClearUpdateZones">
      <summary>
        <para>Clear all Update Zones.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.CustomRenderTexture.#ctor(System.Int32,System.Int32,UnityEngine.RenderTextureFormat,UnityEngine.RenderTextureReadWrite)">
      <summary>
        <para>Create a new Custom Render Texture.</para>
      </summary>
      <param name="width"></param>
      <param name="height"></param>
      <param name="format"></param>
      <param name="readWrite"></param>
    </member>
    <member name="M:UnityEngine.CustomRenderTexture.#ctor(System.Int32,System.Int32,UnityEngine.RenderTextureFormat)">
      <summary>
        <para>Create a new Custom Render Texture.</para>
      </summary>
      <param name="width"></param>
      <param name="height"></param>
      <param name="format"></param>
      <param name="readWrite"></param>
    </member>
    <member name="M:UnityEngine.CustomRenderTexture.#ctor(System.Int32,System.Int32)">
      <summary>
        <para>Create a new Custom Render Texture.</para>
      </summary>
      <param name="width"></param>
      <param name="height"></param>
      <param name="format"></param>
      <param name="readWrite"></param>
    </member>
    <member name="M:UnityEngine.CustomRenderTexture.EnsureDoubleBufferConsistency">
      <summary>
        <para>Updates the internal Render Texture that a Custom Render Texture uses for double buffering, so that it matches the size and format of the Custom Render Texture.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.CustomRenderTexture.GetDoubleBufferRenderTexture">
      <summary>
        <para>Gets the Render Texture that this Custom Render Texture uses for double buffering.</para>
      </summary>
      <returns>
        <para>If CustomRenderTexture. doubleBuffered is true, this returns the Render Texture that this Custom Render Texture uses for double buffering. If CustomRenderTexture. doubleBuffered is false, this returns null.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.CustomRenderTexture.GetUpdateZones(System.Collections.Generic.List`1&lt;UnityEngine.CustomRenderTextureUpdateZone&gt;)">
      <summary>
        <para>Returns the list of Update Zones.</para>
      </summary>
      <param name="updateZones">Output list of Update Zones.</param>
    </member>
    <member name="M:UnityEngine.CustomRenderTexture.Initialize">
      <summary>
        <para>Initializes the Custom Render Texture at the start of the next frame. Unity calls Initialise() before CustomRenderTexture.Update.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.CustomRenderTexture.SetUpdateZones(UnityEngine.CustomRenderTextureUpdateZone[])">
      <summary>
        <para>Setup the list of Update Zones for the Custom Render Texture.</para>
      </summary>
      <param name="updateZones"></param>
    </member>
    <member name="M:UnityEngine.CustomRenderTexture.Update(System.Int32)">
      <summary>
        <para>Triggers an update of the Custom Render Texture.</para>
      </summary>
      <param name="count">Number of upate pass to perform. The default value of this count parameter is 1.</param>
    </member>
    <member name="T:UnityEngine.CustomRenderTextureInitializationSource">
      <summary>
        <para>Specify the source of a Custom Render Texture initialization.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CustomRenderTextureInitializationSource.Material">
      <summary>
        <para>Custom Render Texture is initalized with a Material.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CustomRenderTextureInitializationSource.TextureAndColor">
      <summary>
        <para>Custom Render Texture is initialized by a Texture multiplied by a Color.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.CustomRenderTextureManager">
      <summary>
        <para>Custom Render Texture Manager.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.CustomRenderTextureManager.initializeTriggered(System.Action`1&lt;UnityEngine.CustomRenderTexture&gt;)">
      <summary>
        <para>Unity raises this event when CustomRenderTexture.Initialize is called.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="?:UnityEngine.CustomRenderTextureManager.textureLoaded(System.Action`1&lt;UnityEngine.CustomRenderTexture&gt;)">
      <summary>
        <para>Unity raises this event when it loads a CustomRenderTexture.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="?:UnityEngine.CustomRenderTextureManager.textureUnloaded(System.Action`1&lt;UnityEngine.CustomRenderTexture&gt;)">
      <summary>
        <para>Unity raises this event when it unloads a CustomRenderTexture.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="?:UnityEngine.CustomRenderTextureManager.updateTriggered(System.Action`2&lt;UnityEngine.CustomRenderTexture,System.Int32&gt;)">
      <summary>
        <para>Unity raises this event when CustomRenderTexture.Update is called.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.CustomRenderTextureManager.GetAllCustomRenderTextures(System.Collections.Generic.List`1&lt;UnityEngine.CustomRenderTexture&gt;)">
      <summary>
        <para>Populate the list in parameter with all currently loaded custom render textures.</para>
      </summary>
      <param name="currentCustomRenderTextures"></param>
    </member>
    <member name="T:UnityEngine.CustomRenderTextureUpdateMode">
      <summary>
        <para>Frequency of update or initialization of a Custom Render Texture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CustomRenderTextureUpdateMode.OnDemand">
      <summary>
        <para>Initialization/Update will only occur when triggered by the script.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CustomRenderTextureUpdateMode.OnLoad">
      <summary>
        <para>Initialization/Update will occur once at load time and then can be triggered again by script.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CustomRenderTextureUpdateMode.Realtime">
      <summary>
        <para>Initialization/Update will occur at every frame.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.CustomRenderTextureUpdateZone">
      <summary>
        <para>Structure describing an Update Zone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CustomRenderTextureUpdateZone.needSwap">
      <summary>
        <para>If true, and if the texture is double buffered, a request is made to swap the buffers before the next update. Otherwise, the buffers will not be swapped.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CustomRenderTextureUpdateZone.passIndex">
      <summary>
        <para>Shader Pass used to update the Custom Render Texture for this Update Zone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CustomRenderTextureUpdateZone.rotation">
      <summary>
        <para>Rotation of the Update Zone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CustomRenderTextureUpdateZone.updateZoneCenter">
      <summary>
        <para>Position of the center of the Update Zone within the Custom Render Texture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CustomRenderTextureUpdateZone.updateZoneSize">
      <summary>
        <para>Size of the Update Zone.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.CustomRenderTextureUpdateZoneSpace">
      <summary>
        <para>Space in which coordinates are provided for Update Zones.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CustomRenderTextureUpdateZoneSpace.Normalized">
      <summary>
        <para>Coordinates are normalized. (0, 0) is top left and (1, 1) is bottom right.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CustomRenderTextureUpdateZoneSpace.Pixel">
      <summary>
        <para>Coordinates are expressed in pixels. (0, 0) is top left (width, height) is bottom right.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.CustomYieldInstruction">
      <summary>
        <para>Base class for custom yield instructions to suspend coroutines.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CustomYieldInstruction.keepWaiting">
      <summary>
        <para>Indicates if coroutine should be kept suspended.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.D3DHDRDisplayBitDepth">
      <summary>
        <para>The type for the number of bits to be used when an HDR display is active in each color channel of swap chain buffers. The bit count also defines the method Unity uses to render content to the display.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.D3DHDRDisplayBitDepth.D3DHDRDisplayBitDepth10">
      <summary>
        <para>Unity will use R10G10B10A2 buffer format and Rec2020 primaries with ST2084 PQ encoding.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.D3DHDRDisplayBitDepth.D3DHDRDisplayBitDepth16">
      <summary>
        <para>Unity will use R16G16B16A16 buffer format and Rec709 primaries with linear color (no encoding).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Debug">
      <summary>
        <para>Class containing methods to ease debugging while developing a game.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Debug.developerConsoleVisible">
      <summary>
        <para>Reports whether the development console is visible. The development console cannot be made to appear using:</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Debug.isDebugBuild">
      <summary>
        <para>In the Build Settings dialog there is a check box called "Development Build".</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Debug.unityLogger">
      <summary>
        <para>Get default debug logger.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Debug.Assert(System.Boolean)">
      <summary>
        <para>Assert a condition and logs an error message to the Unity console on failure.</para>
      </summary>
      <param name="condition">Condition you expect to be true.</param>
      <param name="context">Object to which the message applies.</param>
      <param name="message">String or object to be converted to string representation for display.</param>
    </member>
    <member name="M:UnityEngine.Debug.Assert(System.Boolean,UnityEngine.Object)">
      <summary>
        <para>Assert a condition and logs an error message to the Unity console on failure.</para>
      </summary>
      <param name="condition">Condition you expect to be true.</param>
      <param name="context">Object to which the message applies.</param>
      <param name="message">String or object to be converted to string representation for display.</param>
    </member>
    <member name="M:UnityEngine.Debug.Assert(System.Boolean,System.Object)">
      <summary>
        <para>Assert a condition and logs an error message to the Unity console on failure.</para>
      </summary>
      <param name="condition">Condition you expect to be true.</param>
      <param name="context">Object to which the message applies.</param>
      <param name="message">String or object to be converted to string representation for display.</param>
    </member>
    <member name="M:UnityEngine.Debug.Assert(System.Boolean,System.Object,UnityEngine.Object)">
      <summary>
        <para>Assert a condition and logs an error message to the Unity console on failure.</para>
      </summary>
      <param name="condition">Condition you expect to be true.</param>
      <param name="context">Object to which the message applies.</param>
      <param name="message">String or object to be converted to string representation for display.</param>
    </member>
    <member name="M:UnityEngine.Debug.AssertFormat(System.Boolean,System.String,System.Object[])">
      <summary>
        <para>Assert a condition and logs a formatted error message to the Unity console on failure.</para>
      </summary>
      <param name="condition">Condition you expect to be true.</param>
      <param name="format">A composite format string.</param>
      <param name="args">Format arguments.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="M:UnityEngine.Debug.AssertFormat(System.Boolean,UnityEngine.Object,System.String,System.Object[])">
      <summary>
        <para>Assert a condition and logs a formatted error message to the Unity console on failure.</para>
      </summary>
      <param name="condition">Condition you expect to be true.</param>
      <param name="format">A composite format string.</param>
      <param name="args">Format arguments.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="M:UnityEngine.Debug.Break">
      <summary>
        <para>Pauses the editor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Debug.ClearDeveloperConsole">
      <summary>
        <para>Clears errors from the developer console.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Debug.DrawLine(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Draws a line between specified start and end points.</para>
      </summary>
      <param name="start">Point in world space where the line should start.</param>
      <param name="end">Point in world space where the line should end.</param>
      <param name="color">Color of the line.</param>
      <param name="duration">How long the line should be visible for.</param>
      <param name="depthTest">Should the line be obscured by objects closer to the camera?</param>
    </member>
    <member name="M:UnityEngine.Debug.DrawLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color)">
      <summary>
        <para>Draws a line between specified start and end points.</para>
      </summary>
      <param name="start">Point in world space where the line should start.</param>
      <param name="end">Point in world space where the line should end.</param>
      <param name="color">Color of the line.</param>
      <param name="duration">How long the line should be visible for.</param>
      <param name="depthTest">Should the line be obscured by objects closer to the camera?</param>
    </member>
    <member name="M:UnityEngine.Debug.DrawLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
      <summary>
        <para>Draws a line between specified start and end points.</para>
      </summary>
      <param name="start">Point in world space where the line should start.</param>
      <param name="end">Point in world space where the line should end.</param>
      <param name="color">Color of the line.</param>
      <param name="duration">How long the line should be visible for.</param>
      <param name="depthTest">Should the line be obscured by objects closer to the camera?</param>
    </member>
    <member name="M:UnityEngine.Debug.DrawLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single,System.Boolean)">
      <summary>
        <para>Draws a line between specified start and end points.</para>
      </summary>
      <param name="start">Point in world space where the line should start.</param>
      <param name="end">Point in world space where the line should end.</param>
      <param name="color">Color of the line.</param>
      <param name="duration">How long the line should be visible for.</param>
      <param name="depthTest">Should the line be obscured by objects closer to the camera?</param>
    </member>
    <member name="M:UnityEngine.Debug.DrawRay(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Draws a line from start to start + dir in world coordinates.</para>
      </summary>
      <param name="start">Point in world space where the ray should start.</param>
      <param name="dir">Direction and length of the ray.</param>
      <param name="color">Color of the drawn line.</param>
      <param name="duration">How long the line will be visible for (in seconds).</param>
      <param name="depthTest">Should the line be obscured by other objects closer to the camera?</param>
    </member>
    <member name="M:UnityEngine.Debug.DrawRay(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color)">
      <summary>
        <para>Draws a line from start to start + dir in world coordinates.</para>
      </summary>
      <param name="start">Point in world space where the ray should start.</param>
      <param name="dir">Direction and length of the ray.</param>
      <param name="color">Color of the drawn line.</param>
      <param name="duration">How long the line will be visible for (in seconds).</param>
      <param name="depthTest">Should the line be obscured by other objects closer to the camera?</param>
    </member>
    <member name="M:UnityEngine.Debug.DrawRay(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
      <summary>
        <para>Draws a line from start to start + dir in world coordinates.</para>
      </summary>
      <param name="start">Point in world space where the ray should start.</param>
      <param name="dir">Direction and length of the ray.</param>
      <param name="color">Color of the drawn line.</param>
      <param name="duration">How long the line will be visible for (in seconds).</param>
      <param name="depthTest">Should the line be obscured by other objects closer to the camera?</param>
    </member>
    <member name="M:UnityEngine.Debug.DrawRay(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single,System.Boolean)">
      <summary>
        <para>Draws a line from start to start + dir in world coordinates.</para>
      </summary>
      <param name="start">Point in world space where the ray should start.</param>
      <param name="dir">Direction and length of the ray.</param>
      <param name="color">Color of the drawn line.</param>
      <param name="duration">How long the line will be visible for (in seconds).</param>
      <param name="depthTest">Should the line be obscured by other objects closer to the camera?</param>
    </member>
    <member name="M:UnityEngine.Debug.ExtractStackTraceNoAlloc(System.Byte*,System.Int32,System.String)">
      <summary>
        <para>Populate an unmanaged buffer with the current managed call stack as a sequence of UTF-8 bytes, without allocating GC memory. Returns the number of bytes written into the buffer.</para>
      </summary>
      <param name="buffer">Target buffer to receive the callstack text</param>
      <param name="bufferMax">Max number of bytes to write</param>
      <param name="projectFolder">Project folder path, to clean up path names</param>
    </member>
    <member name="M:UnityEngine.Debug.Log(System.Object)">
      <summary>
        <para>Logs a message to the Unity Console.</para>
      </summary>
      <param name="message">String or object to be converted to string representation for display.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="M:UnityEngine.Debug.Log(System.Object,UnityEngine.Object)">
      <summary>
        <para>Logs a message to the Unity Console.</para>
      </summary>
      <param name="message">String or object to be converted to string representation for display.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="M:UnityEngine.Debug.LogAssertion(System.Object)">
      <summary>
        <para>A variant of Debug.Log that logs an assertion message to the console.</para>
      </summary>
      <param name="message">String or object to be converted to string representation for display.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="M:UnityEngine.Debug.LogAssertion(System.Object,UnityEngine.Object)">
      <summary>
        <para>A variant of Debug.Log that logs an assertion message to the console.</para>
      </summary>
      <param name="message">String or object to be converted to string representation for display.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="M:UnityEngine.Debug.LogAssertionFormat(System.String,System.Object[])">
      <summary>
        <para>Logs a formatted assertion message to the Unity console.</para>
      </summary>
      <param name="format">A composite format string.</param>
      <param name="args">Format arguments.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="M:UnityEngine.Debug.LogAssertionFormat(UnityEngine.Object,System.String,System.Object[])">
      <summary>
        <para>Logs a formatted assertion message to the Unity console.</para>
      </summary>
      <param name="format">A composite format string.</param>
      <param name="args">Format arguments.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="M:UnityEngine.Debug.LogError(System.Object)">
      <summary>
        <para>A variant of Debug.Log that logs an error message to the console.</para>
      </summary>
      <param name="message">String or object to be converted to string representation for display.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="M:UnityEngine.Debug.LogError(System.Object,UnityEngine.Object)">
      <summary>
        <para>A variant of Debug.Log that logs an error message to the console.</para>
      </summary>
      <param name="message">String or object to be converted to string representation for display.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="M:UnityEngine.Debug.LogErrorFormat(System.String,System.Object[])">
      <summary>
        <para>Logs a formatted error message to the Unity console.</para>
      </summary>
      <param name="format">A composite format string.</param>
      <param name="args">Format arguments.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="M:UnityEngine.Debug.LogErrorFormat(UnityEngine.Object,System.String,System.Object[])">
      <summary>
        <para>Logs a formatted error message to the Unity console.</para>
      </summary>
      <param name="format">A composite format string.</param>
      <param name="args">Format arguments.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="M:UnityEngine.Debug.LogException(System.Exception)">
      <summary>
        <para>A variant of Debug.Log that logs an error message to the console.</para>
      </summary>
      <param name="context">Object to which the message applies.</param>
      <param name="exception">Runtime Exception.</param>
    </member>
    <member name="M:UnityEngine.Debug.LogException(System.Exception,UnityEngine.Object)">
      <summary>
        <para>A variant of Debug.Log that logs an error message to the console.</para>
      </summary>
      <param name="context">Object to which the message applies.</param>
      <param name="exception">Runtime Exception.</param>
    </member>
    <member name="M:UnityEngine.Debug.LogFormat(System.String,System.Object[])">
      <summary>
        <para>Logs a formatted message to the Unity Console.</para>
      </summary>
      <param name="format">A composite format string.</param>
      <param name="args">Format arguments.</param>
      <param name="context">Object to which the message applies.</param>
      <param name="logType">Type of message e.g. warn or error etc.</param>
      <param name="logOptions">Option flags to treat the log message special.</param>
    </member>
    <member name="M:UnityEngine.Debug.LogFormat(UnityEngine.Object,System.String,System.Object[])">
      <summary>
        <para>Logs a formatted message to the Unity Console.</para>
      </summary>
      <param name="format">A composite format string.</param>
      <param name="args">Format arguments.</param>
      <param name="context">Object to which the message applies.</param>
      <param name="logType">Type of message e.g. warn or error etc.</param>
      <param name="logOptions">Option flags to treat the log message special.</param>
    </member>
    <member name="M:UnityEngine.Debug.LogFormat(UnityEngine.LogType,UnityEngine.LogOption,UnityEngine.Object,System.String,System.Object[])">
      <summary>
        <para>Logs a formatted message to the Unity Console.</para>
      </summary>
      <param name="format">A composite format string.</param>
      <param name="args">Format arguments.</param>
      <param name="context">Object to which the message applies.</param>
      <param name="logType">Type of message e.g. warn or error etc.</param>
      <param name="logOptions">Option flags to treat the log message special.</param>
    </member>
    <member name="M:UnityEngine.Debug.LogWarning(System.Object)">
      <summary>
        <para>A variant of Debug.Log that logs a warning message to the console.</para>
      </summary>
      <param name="message">String or object to be converted to string representation for display.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="M:UnityEngine.Debug.LogWarning(System.Object,UnityEngine.Object)">
      <summary>
        <para>A variant of Debug.Log that logs a warning message to the console.</para>
      </summary>
      <param name="message">String or object to be converted to string representation for display.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="M:UnityEngine.Debug.LogWarningFormat(System.String,System.Object[])">
      <summary>
        <para>Logs a formatted warning message to the Unity Console.</para>
      </summary>
      <param name="format">A composite format string.</param>
      <param name="args">Format arguments.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="M:UnityEngine.Debug.LogWarningFormat(UnityEngine.Object,System.String,System.Object[])">
      <summary>
        <para>Logs a formatted warning message to the Unity Console.</para>
      </summary>
      <param name="format">A composite format string.</param>
      <param name="args">Format arguments.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="T:UnityEngine.DelayedAttribute">
      <summary>
        <para>Attribute used to make a float, int, or string variable in a script be delayed.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.DelayedAttribute.#ctor">
      <summary>
        <para>Attribute used to make a float, int, or string variable in a script be delayed.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.DepthTextureMode">
      <summary>
        <para>Depth texture generation mode for Camera.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DepthTextureMode.Depth">
      <summary>
        <para>Generate a depth texture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DepthTextureMode.DepthNormals">
      <summary>
        <para>Generate a depth + normals texture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DepthTextureMode.MotionVectors">
      <summary>
        <para>Specifies whether motion vectors should be rendered (if possible).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DepthTextureMode.None">
      <summary>
        <para>Do not generate depth texture (Default).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.DeviceType">
      <summary>
        <para>Enumeration for SystemInfo.deviceType, denotes a coarse grouping of kinds of devices.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DeviceType.Console">
      <summary>
        <para>A stationary gaming console.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DeviceType.Desktop">
      <summary>
        <para>Desktop or laptop computer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DeviceType.Handheld">
      <summary>
        <para>A handheld device like mobile phone or a tablet.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DeviceType.Unknown">
      <summary>
        <para>Device type is unknown. You should never see this in practice.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Diagnostics.ForcedCrashCategory">
      <summary>
        <para>Specifies the category of crash to cause when calling ForceCrash().</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Diagnostics.ForcedCrashCategory.Abort">
      <summary>
        <para>Cause a crash by calling the abort() function.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Diagnostics.ForcedCrashCategory.AccessViolation">
      <summary>
        <para>Cause a crash by performing an invalid memory access.

The invalid memory access is performed on each platform as follows:</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Diagnostics.ForcedCrashCategory.FatalError">
      <summary>
        <para>Cause a crash using Unity's native fatal error implementation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Diagnostics.ForcedCrashCategory.MonoAbort">
      <summary>
        <para>Cause a crash by calling the abort() function within the Mono dynamic library.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Diagnostics.ForcedCrashCategory.PureVirtualFunction">
      <summary>
        <para>Cause a crash by calling a pure virtual function to raise an exception.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Diagnostics.Utils">
      <summary>
        <para>A utility class that you can use for diagnostic purposes.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Diagnostics.Utils.ForceCrash(UnityEngine.Diagnostics.ForcedCrashCategory)">
      <summary>
        <para>Manually causes an application crash in the specified category.</para>
      </summary>
      <param name="crashCategory"></param>
    </member>
    <member name="M:UnityEngine.Diagnostics.Utils.NativeAssert(System.String)">
      <summary>
        <para>Manually causes an assert that outputs the specified message to the log and registers an error.</para>
      </summary>
      <param name="message"></param>
    </member>
    <member name="M:UnityEngine.Diagnostics.Utils.NativeError(System.String)">
      <summary>
        <para>Manually causes a native error that outputs the specified message to the log and registers an error.</para>
      </summary>
      <param name="message"></param>
    </member>
    <member name="M:UnityEngine.Diagnostics.Utils.NativeWarning(System.String)">
      <summary>
        <para>Manually causes a warning that outputs the specified message to the log and registers an error.</para>
      </summary>
      <param name="message"></param>
    </member>
    <member name="T:UnityEngine.DisallowMultipleComponent">
      <summary>
        <para>Prevents MonoBehaviour of same type (or subtype) to be added more than once to a GameObject.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Display">
      <summary>
        <para>Provides access to a display / screen for rendering operations.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Display.active">
      <summary>
        <para>Gets the state of the display and returns true if the display is active and false if otherwise.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Display.colorBuffer">
      <summary>
        <para>Color RenderBuffer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Display.depthBuffer">
      <summary>
        <para>Depth RenderBuffer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Display.displays">
      <summary>
        <para>The list of currently connected displays.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Display.main">
      <summary>
        <para>Main Display.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Display.renderingHeight">
      <summary>
        <para>Vertical resolution that the display is rendering at.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Display.renderingWidth">
      <summary>
        <para>Horizontal resolution that the display is rendering at.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Display.requiresBlitToBackbuffer">
      <summary>
        <para>True when the back buffer requires an intermediate texture to render.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Display.requiresSrgbBlitToBackbuffer">
      <summary>
        <para>True when doing a blit to the back buffer requires manual color space conversion.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Display.systemHeight">
      <summary>
        <para>Vertical native display resolution.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Display.systemWidth">
      <summary>
        <para>Horizontal native display resolution.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Display.Activate">
      <summary>
        <para>Activate an external display. Eg. Secondary Monitors connected to the System.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Display.Activate(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>This overloaded function available for Windows allows specifying desired Window Width, Height and Refresh Rate.</para>
      </summary>
      <param name="width">Desired Width of the Window (for Windows only. On Linux and Mac uses Screen Width).</param>
      <param name="height">Desired Height of the Window (for Windows only. On Linux and Mac uses Screen Height).</param>
      <param name="refreshRate">Desired Refresh Rate.</param>
    </member>
    <member name="M:UnityEngine.Display.RelativeMouseAt(UnityEngine.Vector3)">
      <summary>
        <para>Query relative mouse coordinates.</para>
      </summary>
      <param name="inputMouseCoordinates">Mouse Input Position as Coordinates.</param>
    </member>
    <member name="M:UnityEngine.Display.SetParams(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Set rendering size and position on screen (Windows only).</para>
      </summary>
      <param name="width">Change Window Width (Windows Only).</param>
      <param name="height">Change Window Height (Windows Only).</param>
      <param name="x">Change Window Position X (Windows Only).</param>
      <param name="y">Change Window Position Y (Windows Only).</param>
    </member>
    <member name="M:UnityEngine.Display.SetRenderingResolution(System.Int32,System.Int32)">
      <summary>
        <para>Sets rendering resolution for the display.</para>
      </summary>
      <param name="w">Rendering width in pixels.</param>
      <param name="h">Rendering height in pixels.</param>
    </member>
    <member name="T:UnityEngine.DrivenRectTransformTracker">
      <summary>
        <para>A component can be designed to drive a RectTransform. The DrivenRectTransformTracker struct is used to specify which RectTransforms it is driving.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.DrivenRectTransformTracker.Add(UnityEngine.Object,UnityEngine.RectTransform,UnityEngine.DrivenTransformProperties)">
      <summary>
        <para>Add a RectTransform to be driven.</para>
      </summary>
      <param name="driver">The object to drive properties.</param>
      <param name="rectTransform">The RectTransform to be driven.</param>
      <param name="drivenProperties">The properties to be driven.</param>
    </member>
    <member name="M:UnityEngine.DrivenRectTransformTracker.Clear">
      <summary>
        <para>Clear the list of RectTransforms being driven.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.DrivenRectTransformTracker.StartRecordingUndo">
      <summary>
        <para>Resume recording undo of driven RectTransforms.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.DrivenRectTransformTracker.StopRecordingUndo">
      <summary>
        <para>Stop recording undo actions from driven RectTransforms.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.DrivenTransformProperties">
      <summary>
        <para>An enumeration of transform properties that can be driven on a RectTransform by an object.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.All">
      <summary>
        <para>Selects all driven properties.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.AnchoredPosition">
      <summary>
        <para>Selects driven property RectTransform.anchoredPosition.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.AnchoredPosition3D">
      <summary>
        <para>Selects driven property RectTransform.anchoredPosition3D.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.AnchoredPositionX">
      <summary>
        <para>Selects driven property RectTransform.anchoredPosition.x.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.AnchoredPositionY">
      <summary>
        <para>Selects driven property RectTransform.anchoredPosition.y.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.AnchoredPositionZ">
      <summary>
        <para>Selects driven property RectTransform.anchoredPosition3D.z.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.AnchorMax">
      <summary>
        <para>Selects driven property combining AnchorMaxX and AnchorMaxY.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.AnchorMaxX">
      <summary>
        <para>Selects driven property RectTransform.anchorMax.x.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.AnchorMaxY">
      <summary>
        <para>Selects driven property RectTransform.anchorMax.y.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.AnchorMin">
      <summary>
        <para>Selects driven property combining AnchorMinX and AnchorMinY.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.AnchorMinX">
      <summary>
        <para>Selects driven property RectTransform.anchorMin.x.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.AnchorMinY">
      <summary>
        <para>Selects driven property RectTransform.anchorMin.y.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.Anchors">
      <summary>
        <para>Selects driven property combining AnchorMinX, AnchorMinY, AnchorMaxX and AnchorMaxY.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.None">
      <summary>
        <para>Deselects all driven properties.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.Pivot">
      <summary>
        <para>Selects driven property combining PivotX and PivotY.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.PivotX">
      <summary>
        <para>Selects driven property RectTransform.pivot.x.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.PivotY">
      <summary>
        <para>Selects driven property RectTransform.pivot.y.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.Rotation">
      <summary>
        <para>Selects driven property Transform.localRotation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.Scale">
      <summary>
        <para>Selects driven property combining ScaleX, ScaleY &amp;&amp; ScaleZ.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.ScaleX">
      <summary>
        <para>Selects driven property Transform.localScale.x.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.ScaleY">
      <summary>
        <para>Selects driven property Transform.localScale.y.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.ScaleZ">
      <summary>
        <para>Selects driven property Transform.localScale.z.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.SizeDelta">
      <summary>
        <para>Selects driven property combining SizeDeltaX and SizeDeltaY.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.SizeDeltaX">
      <summary>
        <para>Selects driven property RectTransform.sizeDelta.x.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.SizeDeltaY">
      <summary>
        <para>Selects driven property RectTransform.sizeDelta.y.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.DynamicGI">
      <summary>
        <para>Allows to control the dynamic Global Illumination.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.DynamicGI.indirectScale">
      <summary>
        <para>Allows for scaling the contribution coming from realtime &amp; baked lightmaps.

Note: this value can be set in the Lighting Window UI and it is serialized, that is not the case for other properties in this class.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.DynamicGI.isConverged">
      <summary>
        <para>Is precomputed realtime Global Illumination output converged?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.DynamicGI.materialUpdateTimeSlice">
      <summary>
        <para>The number of milliseconds that can be spent on material updates.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.DynamicGI.synchronousMode">
      <summary>
        <para>When enabled, new dynamic Global Illumination output is shown in each frame.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.DynamicGI.updateThreshold">
      <summary>
        <para>Threshold for limiting updates of realtime GI. The unit of measurement is "percentage intensity change".</para>
      </summary>
    </member>
    <member name="M:UnityEngine.DynamicGI.SetEmissive(UnityEngine.Renderer,UnityEngine.Color)">
      <summary>
        <para>Allows to set an emissive color for a given renderer quickly, without the need to render the emissive input for the entire system.</para>
      </summary>
      <param name="renderer">The Renderer that should get a new color.</param>
      <param name="color">The emissive Color.</param>
    </member>
    <member name="M:UnityEngine.DynamicGI.SetEnvironmentData(System.Single[])">
      <summary>
        <para>Allows overriding the distant environment lighting for Realtime GI, without changing the Skybox Material.</para>
      </summary>
      <param name="input">Array of float values to be used for Realtime GI environment lighting.</param>
    </member>
    <member name="M:UnityEngine.DynamicGI.UpdateEnvironment">
      <summary>
        <para>Schedules an update of the environment texture.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.DynamicGI.UpdateMaterials(UnityEngine.Renderer)">
      <summary>
        <para>Schedules an update of the albedo and emissive textures of a system that contains the renderer or the terrain.</para>
      </summary>
      <param name="renderer">The Renderer to use when searching for a system to update.</param>
      <param name="terrain">The Terrain to use when searching for systems to update.</param>
    </member>
    <member name="M:UnityEngine.DynamicGI.UpdateMaterials">
      <summary>
        <para>Schedules an update of the albedo and emissive textures of a system that contains the renderer or the terrain.</para>
      </summary>
      <param name="renderer">The Renderer to use when searching for a system to update.</param>
      <param name="terrain">The Terrain to use when searching for systems to update.</param>
    </member>
    <member name="M:UnityEngine.DynamicGI.UpdateMaterials">
      <summary>
        <para>Schedules an update of the albedo and emissive textures of a system that contains the renderer or the terrain.</para>
      </summary>
      <param name="renderer">The Renderer to use when searching for a system to update.</param>
      <param name="terrain">The Terrain to use when searching for systems to update.</param>
    </member>
    <member name="T:UnityEngine.Events.PersistentListenerMode">
      <summary>
        <para>THe mode that a listener is operating in.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Events.PersistentListenerMode.Bool">
      <summary>
        <para>The listener will bind to one argument bool functions.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Events.PersistentListenerMode.EventDefined">
      <summary>
        <para>The listener will use the function binding specified by the even.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Events.PersistentListenerMode.Float">
      <summary>
        <para>The listener will bind to one argument float functions.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Events.PersistentListenerMode.Int">
      <summary>
        <para>The listener will bind to one argument int functions.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Events.PersistentListenerMode.Object">
      <summary>
        <para>The listener will bind to one argument Object functions.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Events.PersistentListenerMode.String">
      <summary>
        <para>The listener will bind to one argument string functions.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Events.PersistentListenerMode.Void">
      <summary>
        <para>The listener will bind to zero argument functions.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Events.UnityAction">
      <summary>
        <para>Zero argument delegate used by UnityEvents.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Events.UnityAction_1">
      <summary>
        <para>One argument delegate used by UnityEvents.</para>
      </summary>
      <param name="arg0"></param>
    </member>
    <member name="T:UnityEngine.Events.UnityAction_2">
      <summary>
        <para>Two argument delegate used by UnityEvents.</para>
      </summary>
      <param name="arg0"></param>
      <param name="arg1"></param>
    </member>
    <member name="T:UnityEngine.Events.UnityAction_3">
      <summary>
        <para>Three argument delegate used by UnityEvents.</para>
      </summary>
      <param name="arg0"></param>
      <param name="arg1"></param>
      <param name="arg2"></param>
    </member>
    <member name="T:UnityEngine.Events.UnityAction_4">
      <summary>
        <para>Four argument delegate used by UnityEvents.</para>
      </summary>
      <param name="arg0"></param>
      <param name="arg1"></param>
      <param name="arg2"></param>
      <param name="arg3"></param>
    </member>
    <member name="T:UnityEngine.Events.UnityEvent">
      <summary>
        <para>A zero argument persistent callback that can be saved with the Scene.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Events.UnityEvent.AddListener(UnityEngine.Events.UnityAction)">
      <summary>
        <para>Add a non persistent listener to the UnityEvent.</para>
      </summary>
      <param name="call">Callback function.</param>
    </member>
    <member name="M:UnityEngine.Events.UnityEvent.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Events.UnityEvent.Invoke">
      <summary>
        <para>Invoke all registered callbacks (runtime and persistent).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Events.UnityEvent.RemoveListener(UnityEngine.Events.UnityAction)">
      <summary>
        <para>Remove a non persistent listener from the UnityEvent.</para>
      </summary>
      <param name="call">Callback function.</param>
    </member>
    <member name="T:UnityEngine.Events.UnityEvent`1">
      <summary>
        <para>One argument version of UnityEvent.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Events.UnityEvent`2">
      <summary>
        <para>Two argument version of UnityEvent.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Events.UnityEvent`3">
      <summary>
        <para>Three argument version of UnityEvent.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Events.UnityEvent`4">
      <summary>
        <para>Four argument version of UnityEvent.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Events.UnityEventBase">
      <summary>
        <para>Abstract base class for UnityEvents.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Events.UnityEventBase.GetPersistentEventCount">
      <summary>
        <para>Get the number of registered persistent listeners.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Events.UnityEventBase.GetPersistentMethodName(System.Int32)">
      <summary>
        <para>Get the target method name of the listener at index index.</para>
      </summary>
      <param name="index">Index of the listener to query.</param>
    </member>
    <member name="M:UnityEngine.Events.UnityEventBase.GetPersistentTarget(System.Int32)">
      <summary>
        <para>Get the target component of the listener at index index.</para>
      </summary>
      <param name="index">Index of the listener to query.</param>
    </member>
    <member name="M:UnityEngine.Events.UnityEventBase.GetValidMethodInfo(System.Object,System.String,System.Type[])">
      <summary>
        <para>Given an object, function name, and a list of argument types; find the method that matches.</para>
      </summary>
      <param name="obj">Object to search for the method.</param>
      <param name="functionName">Function name to search for.</param>
      <param name="argumentTypes">Argument types for the function.</param>
    </member>
    <member name="M:UnityEngine.Events.UnityEventBase.GetValidMethodInfo(System.Type,System.String,System.Type[])">
      <summary>
        <para>Given an object type, function name, and a list of argument types; find the method that matches.</para>
      </summary>
      <param name="objectType">Object type to search for the method.</param>
      <param name="functionName">Function name to search for.</param>
      <param name="argumentTypes">Argument types for the function.</param>
    </member>
    <member name="M:UnityEngine.Events.UnityEventBase.RemoveAllListeners">
      <summary>
        <para>Remove all non-persisent (ie created from script) listeners  from the event.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Events.UnityEventBase.SetPersistentListenerState(System.Int32,UnityEngine.Events.UnityEventCallState)">
      <summary>
        <para>Modify the execution state of a persistent listener.</para>
      </summary>
      <param name="index">Index of the listener to query.</param>
      <param name="state">State to set.</param>
    </member>
    <member name="T:UnityEngine.Events.UnityEventCallState">
      <summary>
        <para>Controls the scope of UnityEvent callbacks.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Events.UnityEventCallState.EditorAndRuntime">
      <summary>
        <para>Callback is always issued.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Events.UnityEventCallState.Off">
      <summary>
        <para>Callback is not issued.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Events.UnityEventCallState.RuntimeOnly">
      <summary>
        <para>Callback is only issued in the Runtime and Editor playmode.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ExcludeFromObjectFactoryAttribute">
      <summary>
        <para>Add this attribute to a class to prevent the class and its inherited classes from being created with ObjectFactory methods.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ExcludeFromObjectFactoryAttribute.#ctor">
      <summary>
        <para>Default constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ExcludeFromPresetAttribute">
      <summary>
        <para>Add this attribute to a class to prevent creating a Preset from the instances of the class.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ExecuteAlways">
      <summary>
        <para>Makes instances of a script always execute, both as part of Play Mode and when editing.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ExecuteInEditMode">
      <summary>
        <para>Makes all instances of a script execute in Edit Mode.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.GlobalIllumination.AngularFalloffType">
      <summary>
        <para>Sets the method to use to compute the angular attenuation of spot lights.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.AngularFalloffType.AnalyticAndInnerAngle">
      <summary>
        <para>No falloff inside inner angle then compute falloff using analytic formula.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.AngularFalloffType.LUT">
      <summary>
        <para>Uses a lookup table to calculate falloff and does not support the inner angle.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.GlobalIllumination.Cookie">
      <summary>
        <para>A helper structure used to initialize a LightDataGI structure with cookie information.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.Cookie.instanceID">
      <summary>
        <para>The cookie texture's instance id projected by the light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.Cookie.scale">
      <summary>
        <para>The uniform scale factor for downscaling cookies during lightmapping. Can be used as an optimization when full resolution cookies are not needed for indirect lighting.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.Cookie.sizes">
      <summary>
        <para>The scale factors controlling how the directional light's cookie is projected into the scene. This parameter should be set to 1 for all other light types.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.GlobalIllumination.Cookie.Defaults">
      <summary>
        <para>Returns a default initialized cookie helper struct.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.GlobalIllumination.DirectionalLight">
      <summary>
        <para>A helper structure used to initialize a LightDataGI structure as a directional light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.DirectionalLight.color">
      <summary>
        <para>The direct light color.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.DirectionalLight.indirectColor">
      <summary>
        <para>The indirect light color.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.DirectionalLight.instanceID">
      <summary>
        <para>The light's instanceID.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.DirectionalLight.mode">
      <summary>
        <para>The lightmode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.DirectionalLight.orientation">
      <summary>
        <para>The light's orientation. Only relevant for cookie placement.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.DirectionalLight.penumbraWidthRadian">
      <summary>
        <para>The penumbra width for soft shadows in radians.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.DirectionalLight.position">
      <summary>
        <para>The light's position. Only relevant for cookie placement.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.DirectionalLight.shadow">
      <summary>
        <para>True if the light casts shadows, otherwise False.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.GlobalIllumination.DiscLight">
      <summary>
        <para>A helper structure used to initialize a LightDataGI structure as a disc light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.DiscLight.color">
      <summary>
        <para>The direct light color.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.DiscLight.falloff">
      <summary>
        <para>The falloff model to use for baking the disc light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.DiscLight.indirectColor">
      <summary>
        <para>The indirect light color.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.DiscLight.instanceID">
      <summary>
        <para>The light's instanceID.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.DiscLight.mode">
      <summary>
        <para>The lightmode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.DiscLight.orientation">
      <summary>
        <para>The light's orientation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.DiscLight.position">
      <summary>
        <para>The light's position.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.DiscLight.radius">
      <summary>
        <para>The radius of the disc light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.DiscLight.range">
      <summary>
        <para>The light's range.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.DiscLight.shadow">
      <summary>
        <para>True if the light casts shadows, otherwise False.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.GlobalIllumination.FalloffType">
      <summary>
        <para>Available falloff models for baking.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.FalloffType.InverseSquared">
      <summary>
        <para>Inverse squared distance falloff model.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.FalloffType.InverseSquaredNoRangeAttenuation">
      <summary>
        <para>Inverse squared distance falloff model (without smooth range attenuation).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.FalloffType.Legacy">
      <summary>
        <para>Quadratic falloff model.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.FalloffType.Linear">
      <summary>
        <para>Linear falloff model.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.FalloffType.Undefined">
      <summary>
        <para>Falloff model is undefined.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.GlobalIllumination.LightDataGI">
      <summary>
        <para>The interop structure to pass light information to the light baking backends. There are helper structures for Directional, Point, Spot and Rectangle lights to correctly initialize this structure.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.LightDataGI.color">
      <summary>
        <para>The color of the light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.LightDataGI.coneAngle">
      <summary>
        <para>The cone angle for spot lights.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.LightDataGI.cookieID">
      <summary>
        <para>The cookie texture's instance id projected by the light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.LightDataGI.cookieScale">
      <summary>
        <para>The uniform scale factor for downscaling cookies during lightmapping. Can be used as an optimization when full resolution cookies are not needed for indirect lighting.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.LightDataGI.falloff">
      <summary>
        <para>The falloff model to use for baking point and spot lights.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.LightDataGI.indirectColor">
      <summary>
        <para>The indirect color of the light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.LightDataGI.innerConeAngle">
      <summary>
        <para>The inner cone angle for spot lights.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.LightDataGI.instanceID">
      <summary>
        <para>The light's instanceID.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.LightDataGI.mode">
      <summary>
        <para>The lightmap mode for the light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.LightDataGI.orientation">
      <summary>
        <para>The orientation of the light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.LightDataGI.position">
      <summary>
        <para>The position of the light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.LightDataGI.range">
      <summary>
        <para>The range of the light. Unused for directional lights.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.LightDataGI.shadow">
      <summary>
        <para>Set to 1 for shadow casting lights, 0 otherwise.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.LightDataGI.shape0">
      <summary>
        <para>The light's sphere radius for point and spot lights, or the width for rectangle lights.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.LightDataGI.shape1">
      <summary>
        <para>The height for rectangle lights.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.LightDataGI.type">
      <summary>
        <para>The type of the light.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.GlobalIllumination.LightDataGI.Init(UnityEngine.Experimental.GlobalIllumination.DirectionalLight&amp;)">
      <summary>
        <para>Initialize the struct with the parameters from the given light type.</para>
      </summary>
      <param name="light"></param>
    </member>
    <member name="M:UnityEngine.Experimental.GlobalIllumination.LightDataGI.Init(UnityEngine.Experimental.GlobalIllumination.PointLight&amp;)">
      <summary>
        <para>Initialize the struct with the parameters from the given light type.</para>
      </summary>
      <param name="light"></param>
    </member>
    <member name="M:UnityEngine.Experimental.GlobalIllumination.LightDataGI.Init(UnityEngine.Experimental.GlobalIllumination.SpotLight&amp;)">
      <summary>
        <para>Initialize the struct with the parameters from the given light type.</para>
      </summary>
      <param name="light"></param>
    </member>
    <member name="M:UnityEngine.Experimental.GlobalIllumination.LightDataGI.Init(UnityEngine.Experimental.GlobalIllumination.RectangleLight&amp;)">
      <summary>
        <para>Initialize the struct with the parameters from the given light type.</para>
      </summary>
      <param name="light"></param>
    </member>
    <member name="M:UnityEngine.Experimental.GlobalIllumination.LightDataGI.Init(UnityEngine.Experimental.GlobalIllumination.SpotLightPyramidShape&amp;)">
      <summary>
        <para>Initialize the struct with the parameters from the given light type.</para>
      </summary>
      <param name="light"></param>
    </member>
    <member name="M:UnityEngine.Experimental.GlobalIllumination.LightDataGI.Init(UnityEngine.Experimental.GlobalIllumination.SpotLightBoxShape&amp;)">
      <summary>
        <para>Initialize the struct with the parameters from the given light type.</para>
      </summary>
      <param name="light"></param>
    </member>
    <member name="M:UnityEngine.Experimental.GlobalIllumination.LightDataGI.InitNoBake(System.Int32)">
      <summary>
        <para>Initialize a light so that the baking backends ignore it.</para>
      </summary>
      <param name="lightInstanceID"></param>
    </member>
    <member name="T:UnityEngine.Experimental.GlobalIllumination.LightmapperUtils">
      <summary>
        <para>Utility class for converting Unity Lights to light types recognized by the baking backends.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.GlobalIllumination.LightmapperUtils.Extract(UnityEngine.LightmapBakeType)">
      <summary>
        <para>Extracts informations from Lights.</para>
      </summary>
      <param name="baketype">The lights baketype.</param>
      <returns>
        <para>Returns the light's light mode.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.GlobalIllumination.LightmapperUtils.Extract(UnityEngine.Light,UnityEngine.Experimental.GlobalIllumination.DirectionalLight&amp;)">
      <summary>
        <para>Extract type specific information from Lights.</para>
      </summary>
      <param name="l">The input light.</param>
      <param name="dir">Extracts directional light information.</param>
      <param name="point">Extracts point light information.</param>
      <param name="spot">Extracts spot light information.</param>
      <param name="rect">Extracts rectangle light information.</param>
    </member>
    <member name="M:UnityEngine.Experimental.GlobalIllumination.LightmapperUtils.Extract(UnityEngine.Light,UnityEngine.Experimental.GlobalIllumination.PointLight&amp;)">
      <summary>
        <para>Extract type specific information from Lights.</para>
      </summary>
      <param name="l">The input light.</param>
      <param name="dir">Extracts directional light information.</param>
      <param name="point">Extracts point light information.</param>
      <param name="spot">Extracts spot light information.</param>
      <param name="rect">Extracts rectangle light information.</param>
    </member>
    <member name="M:UnityEngine.Experimental.GlobalIllumination.LightmapperUtils.Extract(UnityEngine.Light,UnityEngine.Experimental.GlobalIllumination.SpotLight&amp;)">
      <summary>
        <para>Extract type specific information from Lights.</para>
      </summary>
      <param name="l">The input light.</param>
      <param name="dir">Extracts directional light information.</param>
      <param name="point">Extracts point light information.</param>
      <param name="spot">Extracts spot light information.</param>
      <param name="rect">Extracts rectangle light information.</param>
    </member>
    <member name="M:UnityEngine.Experimental.GlobalIllumination.LightmapperUtils.Extract(UnityEngine.Light,UnityEngine.Experimental.GlobalIllumination.RectangleLight&amp;)">
      <summary>
        <para>Extract type specific information from Lights.</para>
      </summary>
      <param name="l">The input light.</param>
      <param name="dir">Extracts directional light information.</param>
      <param name="point">Extracts point light information.</param>
      <param name="spot">Extracts spot light information.</param>
      <param name="rect">Extracts rectangle light information.</param>
    </member>
    <member name="M:UnityEngine.Experimental.GlobalIllumination.LightmapperUtils.ExtractIndirect(UnityEngine.Light)">
      <summary>
        <para>Extracts the indirect color from a light.</para>
      </summary>
      <param name="l"></param>
    </member>
    <member name="M:UnityEngine.Experimental.GlobalIllumination.LightmapperUtils.ExtractInnerCone(UnityEngine.Light)">
      <summary>
        <para>Extracts the inner cone angle of spot lights.</para>
      </summary>
      <param name="l"></param>
    </member>
    <member name="T:UnityEngine.Experimental.GlobalIllumination.Lightmapping">
      <summary>
        <para>Interface to the light baking backends.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.GlobalIllumination.Lightmapping.GetDelegate">
      <summary>
        <para>Get the currently set conversion delegate.</para>
      </summary>
      <returns>
        <para>Returns the currently set conversion delegate.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Experimental.GlobalIllumination.Lightmapping.RequestLightsDelegate">
      <summary>
        <para>Delegate called when converting lights into a form that the baking backends understand.</para>
      </summary>
      <param name="requests">The list of lights to be converted.</param>
      <param name="lightsOutput">The output generated by the delegate function. Lights that should be skipped must be added to the output, initialized with InitNoBake on the LightDataGI structure.</param>
    </member>
    <member name="M:UnityEngine.Experimental.GlobalIllumination.Lightmapping.ResetDelegate">
      <summary>
        <para>Resets the light conversion delegate to Unity's default conversion function.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.GlobalIllumination.Lightmapping.SetDelegate(UnityEngine.Experimental.GlobalIllumination.Lightmapping/RequestLightsDelegate)">
      <summary>
        <para>Set a delegate that converts a list of lights to a list of LightDataGI structures that are passed to the baking backends. Must be reset by calling ResetDelegate again.</para>
      </summary>
      <param name="del"></param>
    </member>
    <member name="T:UnityEngine.Experimental.GlobalIllumination.LightMode">
      <summary>
        <para>The lightmode. A light can be realtime, mixed, baked or unknown. Unknown lights will be ignored by the baking backends.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.LightMode.Baked">
      <summary>
        <para>The light is fully baked and has no realtime component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.LightMode.Mixed">
      <summary>
        <para>The light is mixed. Mixed lights are interpreted based on the global light mode setting in the lighting window.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.LightMode.Realtime">
      <summary>
        <para>The light is realtime. No contribution will be baked in lightmaps or light probes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.LightMode.Unknown">
      <summary>
        <para>The light should be ignored by the baking backends.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.GlobalIllumination.LightType">
      <summary>
        <para>The light type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.LightType.Directional">
      <summary>
        <para>An infinite directional light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.LightType.Disc">
      <summary>
        <para>A light shaped like a disc emitting light into the hemisphere that it is facing.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.LightType.Point">
      <summary>
        <para>A point light emitting light in all directions.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.LightType.Rectangle">
      <summary>
        <para>A light shaped like a rectangle emitting light into the hemisphere that it is facing.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.LightType.Spot">
      <summary>
        <para>A spot light emitting light in a direction with a cone shaped opening angle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.LightType.SpotBoxShape">
      <summary>
        <para>A box-shaped spot light. This type is only compatible with Scriptable Render Pipelines; it is not compatible with the built-in render pipeline.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.LightType.SpotPyramidShape">
      <summary>
        <para>A pyramid-shaped spot light. This type is only compatible with Scriptable Render Pipelines; it is not compatible with the built-in render pipeline.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.GlobalIllumination.LinearColor">
      <summary>
        <para>Contains normalized linear color values for red, green, blue in the range of 0 to 1, and an additional intensity value.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.GlobalIllumination.LinearColor.blue">
      <summary>
        <para>The blue color value in the range of 0.0 to 1.0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.GlobalIllumination.LinearColor.green">
      <summary>
        <para>The green color value in the range of 0.0 to 1.0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.GlobalIllumination.LinearColor.intensity">
      <summary>
        <para>The intensity value used to scale the red, green and blue values.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.GlobalIllumination.LinearColor.red">
      <summary>
        <para>The red color value in the range of 0.0 to 1.0.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.GlobalIllumination.LinearColor.Black">
      <summary>
        <para>Returns a black color.</para>
      </summary>
      <returns>
        <para>Returns a black color.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.GlobalIllumination.LinearColor.Convert(UnityEngine.Color,System.Single)">
      <summary>
        <para>Converts a Light's color value to a normalized linear color value, automatically handling gamma conversion if necessary.</para>
      </summary>
      <param name="color">Light color.</param>
      <param name="intensity">Light intensity.</param>
      <returns>
        <para>Returns the normalized linear color value.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Experimental.GlobalIllumination.PointLight">
      <summary>
        <para>A helper structure used to initialize a LightDataGI structure as a point light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.PointLight.color">
      <summary>
        <para>The direct light color.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.PointLight.falloff">
      <summary>
        <para>The falloff model to use for baking the point light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.PointLight.indirectColor">
      <summary>
        <para>The indirect light color.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.PointLight.instanceID">
      <summary>
        <para>The light's instanceID.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.PointLight.mode">
      <summary>
        <para>The lightmode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.PointLight.position">
      <summary>
        <para>The light's position.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.PointLight.range">
      <summary>
        <para>The light's range.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.PointLight.shadow">
      <summary>
        <para>True if the light casts shadows, otherwise False.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.PointLight.sphereRadius">
      <summary>
        <para>The light's sphere radius, influencing soft shadows.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.GlobalIllumination.RectangleLight">
      <summary>
        <para>A helper structure used to initialize a LightDataGI structure as a rectangle light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.RectangleLight.color">
      <summary>
        <para>The direct light color.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.RectangleLight.falloff">
      <summary>
        <para>The falloff model to use for baking the rectangular light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.RectangleLight.height">
      <summary>
        <para>The height of the rectangle light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.RectangleLight.indirectColor">
      <summary>
        <para>The indirect light color.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.RectangleLight.instanceID">
      <summary>
        <para>The light's instanceID.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.RectangleLight.mode">
      <summary>
        <para>The lightmode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.RectangleLight.orientation">
      <summary>
        <para>The light's orientation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.RectangleLight.position">
      <summary>
        <para>The light's position.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.RectangleLight.range">
      <summary>
        <para>The light's range.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.RectangleLight.shadow">
      <summary>
        <para>True if the light casts shadows, otherwise False.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.RectangleLight.width">
      <summary>
        <para>The width of the rectangle light.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.GlobalIllumination.RenderSettings">
      <summary>
        <para>Experimental render settings features.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.GlobalIllumination.RenderSettings.useRadianceAmbientProbe">
      <summary>
        <para>If enabled, ambient trilight will be sampled using the old radiance sampling method.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.GlobalIllumination.SpotLight">
      <summary>
        <para>A helper structure used to initialize a LightDataGI structure as a spot light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.SpotLight.angularFalloff">
      <summary>
        <para>The angular falloff model to use for baking the spot light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.SpotLight.color">
      <summary>
        <para>The direct light color.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.SpotLight.coneAngle">
      <summary>
        <para>The outer angle for the spot light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.SpotLight.falloff">
      <summary>
        <para>The falloff model to use for baking the spot light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.SpotLight.indirectColor">
      <summary>
        <para>The indirect light color.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.SpotLight.innerConeAngle">
      <summary>
        <para>The inner angle for the spot light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.SpotLight.instanceID">
      <summary>
        <para>The light's instanceID.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.SpotLight.mode">
      <summary>
        <para>The lightmode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.SpotLight.orientation">
      <summary>
        <para>The light's orientation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.SpotLight.position">
      <summary>
        <para>The light's position.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.SpotLight.range">
      <summary>
        <para>The light's range.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.SpotLight.shadow">
      <summary>
        <para>True if the light casts shadows, otherwise False.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.SpotLight.sphereRadius">
      <summary>
        <para>The light's sphere radius, influencing soft shadows.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.GlobalIllumination.SpotLightBoxShape">
      <summary>
        <para>Use this Struct to help initialize a LightDataGI structure as a box-shaped spot light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.SpotLightBoxShape.color">
      <summary>
        <para>The direct light color.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.SpotLightBoxShape.height">
      <summary>
        <para>The height of the box light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.SpotLightBoxShape.indirectColor">
      <summary>
        <para>The indirect light color.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.SpotLightBoxShape.instanceID">
      <summary>
        <para>The light's instanceID.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.SpotLightBoxShape.mode">
      <summary>
        <para>The lightmode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.SpotLightBoxShape.orientation">
      <summary>
        <para>The light's orientation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.SpotLightBoxShape.position">
      <summary>
        <para>The light's position.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.SpotLightBoxShape.range">
      <summary>
        <para>The light's range.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.SpotLightBoxShape.shadow">
      <summary>
        <para>Specifies whether the light casts shadows or not. This is true if the light does cast shadows and false otherwise.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.SpotLightBoxShape.width">
      <summary>
        <para>The width of the box light.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.GlobalIllumination.SpotLightPyramidShape">
      <summary>
        <para>Use this Struct to help initialize a LightDataGI structure as a pyramid-shaped spot light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.SpotLightPyramidShape.angle">
      <summary>
        <para>The opening angle of the shorter side of the pyramid light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.SpotLightPyramidShape.aspectRatio">
      <summary>
        <para>The aspect ratio for the pyramid shape. Values larger than 1 extend the width and values between 0 and 1 extend the height.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.SpotLightPyramidShape.color">
      <summary>
        <para>The direct light color.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.SpotLightPyramidShape.falloff">
      <summary>
        <para>The falloff model to use for baking the pyramid light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.SpotLightPyramidShape.indirectColor">
      <summary>
        <para>The indirect light color.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.SpotLightPyramidShape.instanceID">
      <summary>
        <para>The light's instanceID.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.SpotLightPyramidShape.mode">
      <summary>
        <para>The lightmode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.SpotLightPyramidShape.orientation">
      <summary>
        <para>The light's orientation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.SpotLightPyramidShape.position">
      <summary>
        <para>The light's position.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.SpotLightPyramidShape.range">
      <summary>
        <para>The light's range.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.GlobalIllumination.SpotLightPyramidShape.shadow">
      <summary>
        <para>Specifies whether the light casts shadows or not. This is true if the light does cast shadows and false otherwise.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.Playables.CameraPlayable">
      <summary>
        <para>An implementation of IPlayable that produces a Camera texture.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.Playables.CameraPlayable.Create(UnityEngine.Playables.PlayableGraph,UnityEngine.Camera)">
      <summary>
        <para>Creates a CameraPlayable in the PlayableGraph.</para>
      </summary>
      <param name="graph">The PlayableGraph object that will own the CameraPlayable.</param>
      <param name="camera">Camera used to produce a texture in the PlayableGraph.</param>
      <returns>
        <para>A CameraPlayable linked to the PlayableGraph.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Experimental.Playables.MaterialEffectPlayable">
      <summary>
        <para>An implementation of IPlayable that allows application of a Material shader to one or many texture inputs to produce a texture output.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.Playables.MaterialEffectPlayable.Create(UnityEngine.Playables.PlayableGraph,UnityEngine.Material)">
      <summary>
        <para>Creates a MaterialEffectPlayable in the PlayableGraph.</para>
      </summary>
      <param name="graph">The PlayableGraph object that will own the MaterialEffectPlayable.</param>
      <param name="material">Material used to modify linked texture playable inputs.</param>
      <param name="pass">Shader pass index.(Note: -1 for all passes).</param>
      <returns>
        <para>A MaterialEffectPlayable linked to the PlayableGraph.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Experimental.Playables.TextureMixerPlayable">
      <summary>
        <para>An implementation of IPlayable that allows mixing two textures.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.Playables.TextureMixerPlayable.Create(UnityEngine.Playables.PlayableGraph)">
      <summary>
        <para>Creates a TextureMixerPlayable in the PlayableGraph.</para>
      </summary>
      <param name="graph">The PlayableGraph object that will own the TextureMixerPlayable.</param>
      <returns>
        <para>A TextureMixerPlayable linked to the PlayableGraph.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Experimental.Playables.TexturePlayableBinding">
      <summary>
        <para>A PlayableBinding that contains information representing a TexturePlayableOutput.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.Playables.TexturePlayableBinding.Create(System.String,UnityEngine.Object)">
      <summary>
        <para>Creates a PlayableBinding that contains information representing a TexturePlayableOutput.</para>
      </summary>
      <param name="key">A reference to a UnityEngine.Object that acts as a key for this binding.</param>
      <param name="name">The name of the TexturePlayableOutput.</param>
      <returns>
        <para>Returns a PlayableBinding that contains information that is used to create a TexturePlayableOutput.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Experimental.Playables.TexturePlayableOutput">
      <summary>
        <para>An IPlayableOutput implementation that will be used to manipulate textures.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.Playables.TexturePlayableOutput.Null">
      <summary>
        <para>Returns an invalid TexturePlayableOutput.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.Rendering.DefaultFormat">
      <summary>
        <para>
                Use a default format to create either Textures or RenderTextures from scripts based on platform specific capability.
            </para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.DefaultFormat.HDR">
      <summary>
        <para>Represents the default platform specific HDR format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.DefaultFormat.LDR">
      <summary>
        <para>Represents the default platform-specific LDR format. If the project uses the linear rendering mode, the actual format is sRGB. If the project uses the gamma rendering mode, the actual format is UNorm.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.Rendering.ExternalGPUProfiler">
      <summary>
        <para>The ExternalGPUProfiler API allows developers to programatically take GPU frame captures in conjunction with supported external GPU profilers.

GPU frame captures can be used to both analyze performance and debug graphics related issues.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.ExternalGPUProfiler.BeginGPUCapture">
      <summary>
        <para>Begins the current GPU frame capture in the external GPU profiler.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.ExternalGPUProfiler.EndGPUCapture">
      <summary>
        <para>Ends the current GPU frame capture in the external GPU profiler.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.ExternalGPUProfiler.IsAttached">
      <summary>
        <para>Returns true when a development build is launched by an external GPU profiler.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.Rendering.FormatUsage">
      <summary>
        <para>Use this format usages to figure out the capabilities of specific GraphicsFormat</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.FormatUsage.Blend">
      <summary>
        <para>Use this to blend on a rendertexture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.FormatUsage.GetPixels">
      <summary>
        <para>Use this to get pixel data from a texture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.FormatUsage.Linear">
      <summary>
        <para>Use this to sample textures with a linear filter</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.FormatUsage.LoadStore">
      <summary>
        <para>Use this to perform resource load and store on a texture</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.FormatUsage.MSAA2x">
      <summary>
        <para>Use this to create and render to a MSAA 2X rendertexture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.FormatUsage.MSAA4x">
      <summary>
        <para>Use this to create and render to a MSAA 4X rendertexture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.FormatUsage.MSAA8x">
      <summary>
        <para>Use this to create and render to a MSAA 8X rendertexture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.FormatUsage.ReadPixels">
      <summary>
        <para>Use this to read back pixels data from a rendertexture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.FormatUsage.Render">
      <summary>
        <para>Use this to create and render to a rendertexture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.FormatUsage.Sample">
      <summary>
        <para>Use this to create and sample textures.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.FormatUsage.SetPixels">
      <summary>
        <para>Use this to set pixel data to a texture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.FormatUsage.SetPixels32">
      <summary>
        <para>Use this to set pixel data to a texture using `SetPixels32`.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.FormatUsage.Sparse">
      <summary>
        <para>Use this to create sparse textures</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.FormatUsage.StencilSampling">
      <summary>
        <para>Use this enumeration to create and render to the Stencil sub element of a RenderTexture.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.Rendering.GraphicsFormat">
      <summary>
        <para>Use this format to create either Textures or RenderTextures from scripts.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.A10R10G10B10_XRSRGBPack32">
      <summary>
        <para>A four-component, 64-bit packed unsigned normalized format that has a 10-bit A component in bits 30..39, a 10-bit R component in bits 20..29, a 10-bit G component in bits 10..19, and a 10-bit B component in bits 0..9. The components are gamma encoded and their values range from -0.5271 to 1.66894. The alpha component is clamped to either 0.0 or 1.0 on sampling, rendering, and writing operations.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.A10R10G10B10_XRUNormPack32">
      <summary>
        <para>A four-component, 64-bit packed unsigned normalized format that has a 10-bit A component in bits 30..39, a 10-bit R component in bits 20..29, a 10-bit G component in bits 10..19, and a 10-bit B component in bits 0..9. The components are linearly encoded and their values range from -0.752941 to 1.25098 (pre-expansion). The alpha component is clamped to either 0.0 or 1.0 on sampling, rendering, and writing operations.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.A1R5G5B5_UNormPack16">
      <summary>
        <para>A four-component, 16-bit packed unsigned normalized format that has a 1-bit A component in bit 15, a 5-bit R component in bits 10..14, a 5-bit G component in bits 5..9, and a 5-bit B component in bits 0..4.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.A2B10G10R10_SIntPack32">
      <summary>
        <para>A four-component, 32-bit packed signed integer format that has a 2-bit A component in bits 30..31, a 10-bit B component in bits 20..29, a 10-bit G component in bits 10..19, and a 10-bit R component in bits 0..9.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.A2B10G10R10_UIntPack32">
      <summary>
        <para>A four-component, 32-bit packed unsigned integer format that has a 2-bit A component in bits 30..31, a 10-bit B component in bits 20..29, a 10-bit G component in bits 10..19, and a 10-bit R component in bits 0..9.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.A2B10G10R10_UNormPack32">
      <summary>
        <para>A four-component, 32-bit packed unsigned normalized format that has a 2-bit A component in bits 30..31, a 10-bit B component in bits 20..29, a 10-bit G component in bits 10..19, and a 10-bit R component in bits 0..9.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.A2R10G10B10_SIntPack32">
      <summary>
        <para>A four-component, 32-bit packed signed integer format that has a 2-bit A component in bits 30..31, a 10-bit R component in bits 20..29, a 10-bit G component in bits 10..19, and a 10-bit B component in bits 0..9.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.A2R10G10B10_UIntPack32">
      <summary>
        <para>A four-component, 32-bit packed unsigned integer format that has a 2-bit A component in bits 30..31, a 10-bit R component in bits 20..29, a 10-bit G component in bits 10..19, and a 10-bit B component in bits 0..9.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.A2R10G10B10_UNormPack32">
      <summary>
        <para>A four-component, 32-bit packed unsigned normalized format that has a 2-bit A component in bits 30..31, a 10-bit R component in bits 20..29, a 10-bit G component in bits 10..19, and a 10-bit B component in bits 0..9.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.A2R10G10B10_XRSRGBPack32">
      <summary>
        <para>A four-component, 32-bit packed unsigned normalized format that has a 2-bit A component in bits 30..31, a 10-bit R component in bits 20..29, a 10-bit G component in bits 10..19, and a 10-bit B component in bits 0..9. The components are gamma encoded and their values range from -0.5271 to 1.66894. The alpha component is clamped to either 0.0 or 1.0 on sampling, rendering, and writing operations.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.A2R10G10B10_XRUNormPack32">
      <summary>
        <para>A four-component, 32-bit packed unsigned normalized format that has a 2-bit A component in bits 30..31, a 10-bit R component in bits 20..29, a 10-bit G component in bits 10..19, and a 10-bit B component in bits 0..9. The components are linearly encoded and their values range from -0.752941 to 1.25098 (pre-expansion). The alpha component is clamped to either 0.0 or 1.0 on sampling, rendering, and writing operations.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.B10G11R11_UFloatPack32">
      <summary>
        <para>A three-component, 32-bit packed unsigned floating-point format that has a 10-bit B component in bits 22..31, an 11-bit G component in bits 11..21, an 11-bit R component in bits 0..10. </para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.B4G4R4A4_UNormPack16">
      <summary>
        <para>A four-component, 16-bit packed unsigned normalized format that has a 4-bit B component in bits 12..15, a 4-bit G component in bits 8..11, a 4-bit R component in bits 4..7, and a 4-bit A component in bits 0..3.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.B5G5R5A1_UNormPack16">
      <summary>
        <para>A four-component, 16-bit packed unsigned normalized format that has a 5-bit B component in bits 11..15, a 5-bit G component in bits 6..10, a 5-bit R component in bits 1..5, and a 1-bit A component in bit 0.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.B5G6R5_UNormPack16">
      <summary>
        <para>A three-component, 16-bit packed unsigned normalized format that has a 5-bit B component in bits 11..15, a 6-bit G component in bits 5..10, and a 5-bit R component in bits 0..4.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.B8G8R8_SInt">
      <summary>
        <para>A three-component, 24-bit signed integer format that has an 8-bit B component in byte 0, an 8-bit G component in byte 1, and an 8-bit R component in byte 2.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.B8G8R8_SNorm">
      <summary>
        <para>A three-component, 24-bit signed normalized format that has an 8-bit B component in byte 0, an 8-bit G component in byte 1, and an 8-bit R component in byte 2.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.B8G8R8_SRGB">
      <summary>
        <para>A three-component, 24-bit unsigned normalized format that has an 8-bit R component stored with sRGB nonlinear encoding in byte 0, an 8-bit G component stored with sRGB nonlinear encoding in byte 1, and an 8-bit B component stored with sRGB nonlinear encoding in byte 2.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.B8G8R8_UInt">
      <summary>
        <para>A three-component, 24-bit unsigned integer format that has an 8-bit B component in byte 0, an 8-bit G component in byte 1, and an 8-bit R component in byte 2</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.B8G8R8_UNorm">
      <summary>
        <para>A three-component, 24-bit unsigned normalized format that has an 8-bit B component in byte 0, an 8-bit G component in byte 1, and an 8-bit R component in byte 2.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.B8G8R8A8_SInt">
      <summary>
        <para>A four-component, 32-bit signed integer format that has an 8-bit B component in byte 0, an 8-bit G component in byte 1, an 8-bit R component in byte 2, and an 8-bit A component in byte 3.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.B8G8R8A8_SNorm">
      <summary>
        <para>A four-component, 32-bit signed normalized format that has an 8-bit B component in byte 0, an 8-bit G component in byte 1, an 8-bit R component in byte 2, and an 8-bit A component in byte 3.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.B8G8R8A8_SRGB">
      <summary>
        <para>A four-component, 32-bit unsigned normalized format that has an 8-bit B component stored with sRGB nonlinear encoding in byte 0, an 8-bit G component stored with sRGB nonlinear encoding in byte 1, an 8-bit R component stored with sRGB nonlinear encoding in byte 2, and an 8-bit A component in byte 3.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.B8G8R8A8_UInt">
      <summary>
        <para>A four-component, 32-bit unsigned integer format that has an 8-bit B component in byte 0, an 8-bit G component in byte 1, an 8-bit R component in byte 2, and an 8-bit A component in byte 3.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.B8G8R8A8_UNorm">
      <summary>
        <para>A four-component, 32-bit unsigned normalized format that has an 8-bit B component in byte 0, an 8-bit G component in byte 1, an 8-bit R component in byte 2, and an 8-bit A component in byte 3.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.E5B9G9R9_UFloatPack32">
      <summary>
        <para>A three-component, 32-bit packed unsigned floating-point format that has a 5-bit shared exponent in bits 27..31, a 9-bit B component mantissa in bits 18..26, a 9-bit G component mantissa in bits 9..17, and a 9-bit R component mantissa in bits 0..8.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.None">
      <summary>
        <para>The format is not specified.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R_BC4_SNorm">
      <summary>
        <para>A one-component, block-compressed format where each 64-bit compressed texel block encodes a 4×4 rectangle of signed normalized red texel data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R_BC4_UNorm">
      <summary>
        <para>A one-component, block-compressed format where each 64-bit compressed texel block encodes a 4×4 rectangle of unsigned normalized red texel data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R_EAC_SNorm">
      <summary>
        <para>A one-component, ETC2 compressed format where each 64-bit compressed texel block encodes a 4×4 rectangle of signed normalized red texel data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R_EAC_UNorm">
      <summary>
        <para>A one-component, ETC2 compressed format where each 64-bit compressed texel block encodes a 4×4 rectangle of unsigned normalized red texel data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R10G10B10_XRSRGBPack32">
      <summary>
        <para>A four-component, 32-bit packed unsigned normalized format that has a 10-bit R component in bits 20..29, a 10-bit G component in bits 10..19, and a 10-bit B component in bits 0..9. The components are gamma encoded and their values range from -0.5271 to 1.66894. The alpha component is clamped to either 0.0 or 1.0 on sampling, rendering, and writing operations.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R10G10B10_XRUNormPack32">
      <summary>
        <para>A four-component, 32-bit packed unsigned normalized format that has a 10-bit R component in bits 20..29, a 10-bit G component in bits 10..19, and a 10-bit B component in bits 0..9. The components are linearly encoded and their values range from -0.752941 to 1.25098 (pre-expansion).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R16_SFloat">
      <summary>
        <para>A one-component, 16-bit signed floating-point format that has a single 16-bit R component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R16_SInt">
      <summary>
        <para>A one-component, 16-bit signed integer format that has a single 16-bit R component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R16_SNorm">
      <summary>
        <para>A one-component, 16-bit signed normalized format that has a single 16-bit R component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R16_UInt">
      <summary>
        <para>A one-component, 16-bit unsigned integer format that has a single 16-bit R component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R16_UNorm">
      <summary>
        <para>A one-component, 16-bit unsigned normalized format that has a single 16-bit R component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R16G16_SFloat">
      <summary>
        <para>A two-component, 32-bit signed floating-point format that has a 16-bit R component in bytes 0..1, and a 16-bit G component in bytes 2..3.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R16G16_SInt">
      <summary>
        <para>A two-component, 32-bit signed integer format that has a 16-bit R component in bytes 0..1, and a 16-bit G component in bytes 2..3.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R16G16_SNorm">
      <summary>
        <para>A two-component, 32-bit signed normalized format that has a 16-bit R component in bytes 0..1, and a 16-bit G component in bytes 2..3.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R16G16_UInt">
      <summary>
        <para>A two-component, 32-bit unsigned integer format that has a 16-bit R component in bytes 0..1, and a 16-bit G component in bytes 2..3.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R16G16_UNorm">
      <summary>
        <para>A two-component, 32-bit unsigned normalized format that has a 16-bit R component in bytes 0..1, and a 16-bit G component in bytes 2..3.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R16G16B16_SFloat">
      <summary>
        <para>A three-component, 48-bit signed floating-point format that has a 16-bit R component in bytes 0..1, a 16-bit G component in bytes 2..3, and a 16-bit B component in bytes 4..5.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R16G16B16_SInt">
      <summary>
        <para>A three-component, 48-bit signed integer format that has a 16-bit R component in bytes 0..1, a 16-bit G component in bytes 2..3, and a 16-bit B component in bytes 4..5.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R16G16B16_SNorm">
      <summary>
        <para>A three-component, 48-bit signed normalized format that has a 16-bit R component in bytes 0..1, a 16-bit G component in bytes 2..3, and a 16-bit B component in bytes 4..5.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R16G16B16_UInt">
      <summary>
        <para>A three-component, 48-bit unsigned integer format that has a 16-bit R component in bytes 0..1, a 16-bit G component in bytes 2..3, and a 16-bit B component in bytes 4..5.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R16G16B16_UNorm">
      <summary>
        <para>A three-component, 48-bit unsigned normalized format that has a 16-bit R component in bytes 0..1, a 16-bit G component in bytes 2..3, and a 16-bit B component in bytes 4..5.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R16G16B16A16_SFloat">
      <summary>
        <para>A four-component, 64-bit signed floating-point format that has a 16-bit R component in bytes 0..1, a 16-bit G component in bytes 2..3, a 16-bit B component in bytes 4..5, and a 16-bit A component in bytes 6..7.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R16G16B16A16_SInt">
      <summary>
        <para>A four-component, 64-bit signed integer format that has a 16-bit R component in bytes 0..1, a 16-bit G component in bytes 2..3, a 16-bit B component in bytes 4..5, and a 16-bit A component in bytes 6..7.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R16G16B16A16_SNorm">
      <summary>
        <para>A four-component, 64-bit signed normalized format that has a 16-bit R component in bytes 0..1, a 16-bit G component in bytes 2..3, a 16-bit B component in bytes 4..5, and a 16-bit A component in bytes 6..7.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R16G16B16A16_UInt">
      <summary>
        <para>A four-component, 64-bit unsigned integer format that has a 16-bit R component in bytes 0..1, a 16-bit G component in bytes 2..3, a 16-bit B component in bytes 4..5, and a 16-bit A component in bytes 6..7.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R16G16B16A16_UNorm">
      <summary>
        <para>A four-component, 64-bit unsigned normalized format that has a 16-bit R component in bytes 0..1, a 16-bit G component in bytes 2..3, a 16-bit B component in bytes 4..5, and a 16-bit A component in bytes 6..7.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R32_SFloat">
      <summary>
        <para>A one-component, 32-bit signed floating-point format that has a single 32-bit R component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R32_SInt">
      <summary>
        <para>A one-component, 32-bit signed integer format that has a single 32-bit R component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R32_UInt">
      <summary>
        <para>A one-component, 32-bit unsigned integer format that has a single 32-bit R component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R32G32_SFloat">
      <summary>
        <para>A two-component, 64-bit signed floating-point format that has a 32-bit R component in bytes 0..3, and a 32-bit G component in bytes 4..7.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R32G32_SInt">
      <summary>
        <para>A two-component, 64-bit signed integer format that has a 32-bit R component in bytes 0..3, and a 32-bit G component in bytes 4..7.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R32G32_UInt">
      <summary>
        <para>A two-component, 64-bit unsigned integer format that has a 32-bit R component in bytes 0..3, and a 32-bit G component in bytes 4..7.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R32G32B32_SFloat">
      <summary>
        <para>A three-component, 96-bit signed floating-point format that has a 32-bit R component in bytes 0..3, a 32-bit G component in bytes 4..7, and a 32-bit B component in bytes 8..11.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R32G32B32_SInt">
      <summary>
        <para>A three-component, 96-bit signed integer format that has a 32-bit R component in bytes 0..3, a 32-bit G component in bytes 4..7, and a 32-bit B component in bytes 8..11.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R32G32B32_UInt">
      <summary>
        <para>A three-component, 96-bit unsigned integer format that has a 32-bit R component in bytes 0..3, a 32-bit G component in bytes 4..7, and a 32-bit B component in bytes 8..11.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R32G32B32A32_SFloat">
      <summary>
        <para>A four-component, 128-bit signed floating-point format that has a 32-bit R component in bytes 0..3, a 32-bit G component in bytes 4..7, a 32-bit B component in bytes 8..11, and a 32-bit A component in bytes 12..15.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R32G32B32A32_SInt">
      <summary>
        <para>A four-component, 128-bit signed integer format that has a 32-bit R component in bytes 0..3, a 32-bit G component in bytes 4..7, a 32-bit B component in bytes 8..11, and a 32-bit A component in bytes 12..15.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R32G32B32A32_UInt">
      <summary>
        <para>A four-component, 128-bit unsigned integer format that has a 32-bit R component in bytes 0..3, a 32-bit G component in bytes 4..7, a 32-bit B component in bytes 8..11, and a 32-bit A component in bytes 12..15.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R4G4B4A4_UNormPack16">
      <summary>
        <para>A four-component, 16-bit packed unsigned normalized format that has a 4-bit R component in bits 12..15, a 4-bit G component in bits 8..11, a 4-bit B component in bits 4..7, and a 4-bit A component in bits 0..3.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R5G5B5A1_UNormPack16">
      <summary>
        <para>A four-component, 16-bit packed unsigned normalized format that has a 5-bit R component in bits 11..15, a 5-bit G component in bits 6..10, a 5-bit B component in bits 1..5, and a 1-bit A component in bit 0.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R5G6B5_UNormPack16">
      <summary>
        <para>A three-component, 16-bit packed unsigned normalized format that has a 5-bit R component in bits 11..15, a 6-bit G component in bits 5..10, and a 5-bit B component in bits 0..4.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R8_SInt">
      <summary>
        <para>A one-component, 8-bit signed integer format that has a single 8-bit R component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R8_SNorm">
      <summary>
        <para>A one-component, 8-bit signed normalized format that has a single 8-bit R component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R8_SRGB">
      <summary>
        <para>A one-component, 8-bit unsigned normalized format that has a single 8-bit R component stored with sRGB nonlinear encoding.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R8_UInt">
      <summary>
        <para>A one-component, 8-bit unsigned integer format that has a single 8-bit R component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R8_UNorm">
      <summary>
        <para>A one-component, 8-bit unsigned normalized format that has a single 8-bit R component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R8G8_SInt">
      <summary>
        <para>A two-component, 16-bit signed integer format that has an 8-bit R component in byte 0, and an 8-bit G component in byte 1.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R8G8_SNorm">
      <summary>
        <para>A two-component, 16-bit signed normalized format that has an 8-bit R component stored with sRGB nonlinear encoding in byte 0, and an 8-bit G component stored with sRGB nonlinear encoding in byte 1.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R8G8_SRGB">
      <summary>
        <para>A two-component, 16-bit unsigned normalized format that has an 8-bit R component stored with sRGB nonlinear encoding in byte 0, and an 8-bit G component stored with sRGB nonlinear encoding in byte 1.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R8G8_UInt">
      <summary>
        <para>A two-component, 16-bit unsigned integer format that has an 8-bit R component in byte 0, and an 8-bit G component in byte 1.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R8G8_UNorm">
      <summary>
        <para>A two-component, 16-bit unsigned normalized format that has an 8-bit R component stored with sRGB nonlinear encoding in byte 0, and an 8-bit G component stored with sRGB nonlinear encoding in byte 1.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R8G8B8_SInt">
      <summary>
        <para>A three-component, 24-bit signed integer format that has an 8-bit R component in byte 0, an 8-bit G component in byte 1, and an 8-bit B component in byte 2.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R8G8B8_SNorm">
      <summary>
        <para>A three-component, 24-bit signed normalized format that has an 8-bit R component in byte 0, an 8-bit G component in byte 1, and an 8-bit B component in byte 2.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R8G8B8_SRGB">
      <summary>
        <para>A three-component, 24-bit unsigned normalized format that has an 8-bit R component stored with sRGB nonlinear encoding in byte 0, an 8-bit G component stored with sRGB nonlinear encoding in byte 1, and an 8-bit B component stored with sRGB nonlinear encoding in byte 2.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R8G8B8_UInt">
      <summary>
        <para>A three-component, 24-bit unsigned integer format that has an 8-bit R component in byte 0, an 8-bit G component in byte 1, and an 8-bit B component in byte 2.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R8G8B8_UNorm">
      <summary>
        <para>A three-component, 24-bit unsigned normalized format that has an 8-bit R component in byte 0, an 8-bit G component in byte 1, and an 8-bit B component in byte 2.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R8G8B8A8_SInt">
      <summary>
        <para>A four-component, 32-bit signed integer format that has an 8-bit R component in byte 0, an 8-bit G component in byte 1, an 8-bit B component in byte 2, and an 8-bit A component in byte 3.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R8G8B8A8_SNorm">
      <summary>
        <para>A four-component, 32-bit signed normalized format that has an 8-bit R component in byte 0, an 8-bit G component in byte 1, an 8-bit B component in byte 2, and an 8-bit A component in byte 3.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R8G8B8A8_SRGB">
      <summary>
        <para>A four-component, 32-bit unsigned normalized format that has an 8-bit R component stored with sRGB nonlinear encoding in byte 0, an 8-bit G component stored with sRGB nonlinear encoding in byte 1, an 8-bit B component stored with sRGB nonlinear encoding in byte 2, and an 8-bit A component in byte 3.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R8G8B8A8_UInt">
      <summary>
        <para>A four-component, 32-bit unsigned integer format that has an 8-bit R component in byte 0, an 8-bit G component in byte 1, an 8-bit B component in byte 2, and an 8-bit A component in byte 3.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.R8G8B8A8_UNorm">
      <summary>
        <para>A four-component, 32-bit unsigned normalized format that has an 8-bit R component in byte 0, an 8-bit G component in byte 1, an 8-bit B component in byte 2, and an 8-bit A component in byte 3.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RG_BC5_SNorm">
      <summary>
        <para>A two-component, block-compressed format where each 128-bit compressed texel block encodes a 4×4 rectangle of signed normalized RG texel data with the first 64 bits encoding red values followed by 64 bits encoding green values.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RG_BC5_UNorm">
      <summary>
        <para>A two-component, block-compressed format where each 128-bit compressed texel block encodes a 4×4 rectangle of unsigned normalized RG texel data with the first 64 bits encoding red values followed by 64 bits encoding green values.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RG_EAC_SNorm">
      <summary>
        <para>A two-component, ETC2 compressed format where each 128-bit compressed texel block encodes a 4×4 rectangle of signed normalized RG texel data with the first 64 bits encoding red values followed by 64 bits encoding green values.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RG_EAC_UNorm">
      <summary>
        <para>A two-component, ETC2 compressed format where each 128-bit compressed texel block encodes a 4×4 rectangle of unsigned normalized RG texel data with the first 64 bits encoding red values followed by 64 bits encoding green values.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGB_A1_ETC2_SRGB">
      <summary>
        <para>A four-component, ETC2 compressed format where each 64-bit compressed texel block encodes a 4×4 rectangle of unsigned normalized RGB texel data with sRGB nonlinear encoding, and provides 1 bit of alpha.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGB_A1_ETC2_UNorm">
      <summary>
        <para>A four-component, ETC2 compressed format where each 64-bit compressed texel block encodes a 4×4 rectangle of unsigned normalized RGB texel data, and provides 1 bit of alpha.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGB_BC6H_SFloat">
      <summary>
        <para>A three-component, block-compressed format where each 128-bit compressed texel block encodes a 4×4 rectangle of signed floating-point RGB texel data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGB_BC6H_UFloat">
      <summary>
        <para>A three-component, block-compressed format where each 128-bit compressed texel block encodes a 4×4 rectangle of unsigned floating-point RGB texel data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGB_ETC_UNorm">
      <summary>
        <para>A three-component, ETC compressed format where each 64-bit compressed texel block encodes a 4×4 rectangle of unsigned normalized RGB texel data. This format has no alpha and is considered opaque.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGB_ETC2_SRGB">
      <summary>
        <para>A three-component, ETC2 compressed format where each 64-bit compressed texel block encodes a 4×4 rectangle of unsigned normalized RGB texel data with sRGB nonlinear encoding. This format has no alpha and is considered opaque.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGB_ETC2_UNorm">
      <summary>
        <para>A three-component, ETC2 compressed format where each 64-bit compressed texel block encodes a 4×4 rectangle of unsigned normalized RGB texel data. This format has no alpha and is considered opaque.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGB_PVRTC_2Bpp_SRGB">
      <summary>
        <para>A three-component, PVRTC compressed format where each 64-bit compressed texel block encodes a 8×4 rectangle of unsigned normalized RGB texel data with sRGB nonlinear encoding. This format has no alpha and is considered opaque.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGB_PVRTC_2Bpp_UNorm">
      <summary>
        <para>A three-component, PVRTC compressed format where each 64-bit compressed texel block encodes a 8×4 rectangle of unsigned normalized RGB texel data. This format has no alpha and is considered opaque.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGB_PVRTC_4Bpp_SRGB">
      <summary>
        <para>A three-component, PVRTC compressed format where each 64-bit compressed texel block encodes a 4×4 rectangle of unsigned normalized RGB texel data with sRGB nonlinear encoding. This format has no alpha and is considered opaque.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGB_PVRTC_4Bpp_UNorm">
      <summary>
        <para>A three-component, PVRTC compressed format where each 64-bit compressed texel block encodes a 4×4 rectangle of unsigned normalized RGB texel data. This format has no alpha and is considered opaque.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGBA_ASTC10X10_SRGB">
      <summary>
        <para>A four-component, ASTC compressed format where each 128-bit compressed texel block encodes a 10×10 rectangle of unsigned normalized RGBA texel data with sRGB nonlinear encoding applied to the RGB components.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGBA_ASTC10X10_UFloat">
      <summary>
        <para>A four-component, ASTC compressed format where each 128-bit compressed texel block encodes a 10×10 rectangle of float RGBA texel data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGBA_ASTC10X10_UNorm">
      <summary>
        <para>A four-component, ASTC compressed format where each 128-bit compressed texel block encodes a 10×10 rectangle of unsigned normalized RGBA texel data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGBA_ASTC12X12_SRGB">
      <summary>
        <para>A four-component, ASTC compressed format where each 128-bit compressed texel block encodes a 12×12 rectangle of unsigned normalized RGBA texel data with sRGB nonlinear encoding applied to the RGB components.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGBA_ASTC12X12_UFloat">
      <summary>
        <para>A four-component, ASTC compressed format where each 128-bit compressed texel block encodes a 12×12 rectangle of float RGBA texel data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGBA_ASTC12X12_UNorm">
      <summary>
        <para>A four-component, ASTC compressed format where each 128-bit compressed texel block encodes a 12×12 rectangle of unsigned normalized RGBA texel data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGBA_ASTC4X4_SRGB">
      <summary>
        <para>A four-component, ASTC compressed format where each 128-bit compressed texel block encodes a 4×4 rectangle of unsigned normalized RGBA texel data with sRGB nonlinear encoding applied to the RGB components.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGBA_ASTC4X4_UFloat">
      <summary>
        <para>A four-component, ASTC compressed format where each 128-bit compressed texel block encodes a 4×4 rectangle of float RGBA texel data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGBA_ASTC4X4_UNorm">
      <summary>
        <para>A four-component, ASTC compressed format where each 128-bit compressed texel block encodes a 4×4 rectangle of unsigned normalized RGBA texel data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGBA_ASTC5X5_SRGB">
      <summary>
        <para>A four-component, ASTC compressed format where each 128-bit compressed texel block encodes a 5×5 rectangle of unsigned normalized RGBA texel data with sRGB nonlinear encoding applied to the RGB components.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGBA_ASTC5X5_UFloat">
      <summary>
        <para>A four-component, ASTC compressed format where each 128-bit compressed texel block encodes a 5×5 rectangle of float RGBA texel data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGBA_ASTC5X5_UNorm">
      <summary>
        <para>A four-component, ASTC compressed format where each 128-bit compressed texel block encodes a 5×5 rectangle of unsigned normalized RGBA texel data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGBA_ASTC6X6_SRGB">
      <summary>
        <para>A four-component, ASTC compressed format where each 128-bit compressed texel block encodes a 6×6 rectangle of unsigned normalized RGBA texel data with sRGB nonlinear encoding applied to the RGB components.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGBA_ASTC6X6_UFloat">
      <summary>
        <para>A four-component, ASTC compressed format where each 128-bit compressed texel block encodes a 6×6 rectangle of float RGBA texel data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGBA_ASTC6X6_UNorm">
      <summary>
        <para>A four-component, ASTC compressed format where each 128-bit compressed texel block encodes a 6×6 rectangle of unsigned normalized RGBA texel data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGBA_ASTC8X8_SRGB">
      <summary>
        <para>A four-component, ASTC compressed format where each 128-bit compressed texel block encodes an 8×8 rectangle of unsigned normalized RGBA texel data with sRGB nonlinear encoding applied to the RGB components.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGBA_ASTC8X8_UFloat">
      <summary>
        <para>A four-component, ASTC compressed format where each 128-bit compressed texel block encodes an 8×8 rectangle of float RGBA texel data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGBA_ASTC8X8_UNorm">
      <summary>
        <para>A four-component, ASTC compressed format where each 128-bit compressed texel block encodes an 8×8 rectangle of unsigned normalized RGBA texel data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGBA_BC7_SRGB">
      <summary>
        <para>A four-component, block-compressed format where each 128-bit compressed texel block encodes a 4×4 rectangle of unsigned normalized RGBA texel data with sRGB nonlinear encoding applied to the RGB components.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGBA_BC7_UNorm">
      <summary>
        <para>A four-component, block-compressed format where each 128-bit compressed texel block encodes a 4×4 rectangle of unsigned normalized RGBA texel data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGBA_DXT1_SRGB">
      <summary>
        <para>A three-component, block-compressed format. Each 64-bit compressed texel block encodes a 4×4 rectangle of unsigned normalized RGB texel data with sRGB nonlinear encoding. This format has a 1 bit alpha channel.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGBA_DXT1_UNorm">
      <summary>
        <para>A three-component, block-compressed format. Each 64-bit compressed texel block encodes a 4×4 rectangle of unsigned normalized RGB texel data. This format has a 1 bit alpha channel.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGBA_DXT3_SRGB">
      <summary>
        <para>A four-component, block-compressed format where each 128-bit compressed texel block encodes a 4×4 rectangle of unsigned normalized RGBA texel data with the first 64 bits encoding alpha values followed by 64 bits encoding RGB values with sRGB nonlinear encoding.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGBA_DXT3_UNorm">
      <summary>
        <para>A four-component, block-compressed format where each 128-bit compressed texel block encodes a 4×4 rectangle of unsigned normalized RGBA texel data with the first 64 bits encoding alpha values followed by 64 bits encoding RGB values.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGBA_DXT5_SRGB">
      <summary>
        <para>A four-component, block-compressed format where each 128-bit compressed texel block encodes a 4×4 rectangle of unsigned normalized RGBA texel data with the first 64 bits encoding alpha values followed by 64 bits encoding RGB values with sRGB nonlinear encoding.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGBA_DXT5_UNorm">
      <summary>
        <para>A four-component, block-compressed format where each 128-bit compressed texel block encodes a 4×4 rectangle of unsigned normalized RGBA texel data with the first 64 bits encoding alpha values followed by 64 bits encoding RGB values.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGBA_ETC2_SRGB">
      <summary>
        <para>A four-component, ETC2 compressed format where each 128-bit compressed texel block encodes a 4×4 rectangle of unsigned normalized RGBA texel data with the first 64 bits encoding alpha values followed by 64 bits encoding RGB values with sRGB nonlinear encoding applied.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGBA_ETC2_UNorm">
      <summary>
        <para>A four-component, ETC2 compressed format where each 128-bit compressed texel block encodes a 4×4 rectangle of unsigned normalized RGBA texel data with the first 64 bits encoding alpha values followed by 64 bits encoding RGB values.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGBA_PVRTC_2Bpp_SRGB">
      <summary>
        <para>A four-component, PVRTC compressed format where each 64-bit compressed texel block encodes a 8×4 rectangle of unsigned normalized RGBA texel data with the first 32 bits encoding alpha values followed by 32 bits encoding RGB values with sRGB nonlinear encoding applied.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGBA_PVRTC_2Bpp_UNorm">
      <summary>
        <para>A four-component, PVRTC compressed format where each 64-bit compressed texel block encodes a 8×4 rectangle of unsigned normalized RGBA texel data with the first 32 bits encoding alpha values followed by 32 bits encoding RGB values.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGBA_PVRTC_4Bpp_SRGB">
      <summary>
        <para>A four-component, PVRTC compressed format where each 64-bit compressed texel block encodes a 4×4 rectangle of unsigned normalized RGBA texel data with the first 32 bits encoding alpha values followed by 32 bits encoding RGB values with sRGB nonlinear encoding applied.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.GraphicsFormat.RGBA_PVRTC_4Bpp_UNorm">
      <summary>
        <para>A four-component, PVRTC compressed format where each 64-bit compressed texel block encodes a 4×4 rectangle of unsigned normalized RGBA texel data with the first 32 bits encoding alpha values followed by 32 bits encoding RGB values.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Experimental.Rendering.IScriptableRuntimeReflectionSystem">
      <summary>
        <para>Defines the required members for a Runtime Reflection Systems.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.IScriptableRuntimeReflectionSystem.TickRealtimeProbes">
      <summary>
        <para>Update the reflection probes.</para>
      </summary>
      <returns>
        <para>Whether a reflection probe was updated.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure">
      <summary>
        <para>A data structure used to represent the Renderers in the Scene for GPU ray tracing.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure.AddInstance(UnityEngine.Renderer,System.Boolean[],System.Boolean[],System.Boolean,System.Boolean,System.UInt32)">
      <summary>
        <para>Add an instance to this RayTracingAccelerationStructure. Instance geometry can be either a Renderer or a GraphicsBuffer that includes a number of axis-aligned bounding boxes.</para>
      </summary>
      <param name="targetRenderer">The renderer to be added to RayTracingAccelerationStructure.</param>
      <param name="subMeshMask">A bit mask of any size that indicates whether or not to add a submesh to the RayTracingAccelerationStructure. For a Renderer with multiple submeshes, if subMeshMask[i] = true, the submesh is added to the RayTracingAccelerationStructure. For a Renderer with only one submesh, you may pass an uninitialized array as a default value.</param>
      <param name="subMeshTransparencyFlags">A bit array of any size that indicates whether a given submesh is transparent. For a Renderer with multiple submeshes, if subMeshTransparencyFlag[i] = true, that submesh is marked as transparent. For a Renderer with only one submesh, pass an array with a single initialized entry, and indicate whether or not the one submesh is transparent.</param>
      <param name="enableTriangleCulling">A bool that indicates whether the GPU driver-level culling passes (such as front-face culling or back-face culling) should cull this Renderer. Culling is enabled (true) by default.</param>
      <param name="frontTriangleCounterClockwise">A bool that indicates whether to flip the way triangles face in this renderer. If this is set to true, front-facing triangles will become back-facing and vice versa. Set to false by default.</param>
      <param name="mask">An 8-bit mask you can use to selectively intersect this renderer with rays that only pass the mask. All rays are enabled (0xff) by default.</param>
      <param name="aabbBuffer">A GraphicsBuffer that defines a number of axis-aligned bounding boxes (AABBs). An AABB is defined by a list of bounds, written as floats in the following order: minX, minY, minZ, maxX, maxY, maxZ.</param>
      <param name="numElements">The number of axis-aligned bounding boxes defined in the given GraphicsBuffer.</param>
      <param name="material">The Material to apply to an instance defined by axis-aligned bounding boxes in a GraphicsBuffer.</param>
      <param name="instanceTransform">The object to world matrix to apply to an instance defined by axis-aligned bounding boxes in a GraphicsBuffer. This is optional, and takes the value of a Matrix4x4.identity by default.</param>
      <param name="isCutOff">A bool that indicates whether the Material applied to a GraphicsBuffer instance has cutoff transparency.</param>
      <param name="reuseBounds">A bool that indicates whether Unity reuses the AABBs defined in the GraphicsBuffer without change. If the exact same bounds can be used across multiple acceleration structures or multiple frames, set this to true. This is false by default.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure.AddInstance(UnityEngine.GraphicsBuffer,System.UInt32,UnityEngine.Material,UnityEngine.Matrix4x4,System.Boolean,System.Boolean,System.Boolean,System.UInt32,System.Boolean)">
      <summary>
        <para>Add an instance to this RayTracingAccelerationStructure. Instance geometry can be either a Renderer or a GraphicsBuffer that includes a number of axis-aligned bounding boxes.</para>
      </summary>
      <param name="targetRenderer">The renderer to be added to RayTracingAccelerationStructure.</param>
      <param name="subMeshMask">A bit mask of any size that indicates whether or not to add a submesh to the RayTracingAccelerationStructure. For a Renderer with multiple submeshes, if subMeshMask[i] = true, the submesh is added to the RayTracingAccelerationStructure. For a Renderer with only one submesh, you may pass an uninitialized array as a default value.</param>
      <param name="subMeshTransparencyFlags">A bit array of any size that indicates whether a given submesh is transparent. For a Renderer with multiple submeshes, if subMeshTransparencyFlag[i] = true, that submesh is marked as transparent. For a Renderer with only one submesh, pass an array with a single initialized entry, and indicate whether or not the one submesh is transparent.</param>
      <param name="enableTriangleCulling">A bool that indicates whether the GPU driver-level culling passes (such as front-face culling or back-face culling) should cull this Renderer. Culling is enabled (true) by default.</param>
      <param name="frontTriangleCounterClockwise">A bool that indicates whether to flip the way triangles face in this renderer. If this is set to true, front-facing triangles will become back-facing and vice versa. Set to false by default.</param>
      <param name="mask">An 8-bit mask you can use to selectively intersect this renderer with rays that only pass the mask. All rays are enabled (0xff) by default.</param>
      <param name="aabbBuffer">A GraphicsBuffer that defines a number of axis-aligned bounding boxes (AABBs). An AABB is defined by a list of bounds, written as floats in the following order: minX, minY, minZ, maxX, maxY, maxZ.</param>
      <param name="numElements">The number of axis-aligned bounding boxes defined in the given GraphicsBuffer.</param>
      <param name="material">The Material to apply to an instance defined by axis-aligned bounding boxes in a GraphicsBuffer.</param>
      <param name="instanceTransform">The object to world matrix to apply to an instance defined by axis-aligned bounding boxes in a GraphicsBuffer. This is optional, and takes the value of a Matrix4x4.identity by default.</param>
      <param name="isCutOff">A bool that indicates whether the Material applied to a GraphicsBuffer instance has cutoff transparency.</param>
      <param name="reuseBounds">A bool that indicates whether Unity reuses the AABBs defined in the GraphicsBuffer without change. If the exact same bounds can be used across multiple acceleration structures or multiple frames, set this to true. This is false by default.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure.AddInstance(UnityEngine.GraphicsBuffer,System.UInt32,UnityEngine.Material,System.Boolean,System.Boolean,System.Boolean,System.UInt32,System.Boolean)">
      <summary>
        <para>Add an instance to this RayTracingAccelerationStructure. Instance geometry can be either a Renderer or a GraphicsBuffer that includes a number of axis-aligned bounding boxes.</para>
      </summary>
      <param name="targetRenderer">The renderer to be added to RayTracingAccelerationStructure.</param>
      <param name="subMeshMask">A bit mask of any size that indicates whether or not to add a submesh to the RayTracingAccelerationStructure. For a Renderer with multiple submeshes, if subMeshMask[i] = true, the submesh is added to the RayTracingAccelerationStructure. For a Renderer with only one submesh, you may pass an uninitialized array as a default value.</param>
      <param name="subMeshTransparencyFlags">A bit array of any size that indicates whether a given submesh is transparent. For a Renderer with multiple submeshes, if subMeshTransparencyFlag[i] = true, that submesh is marked as transparent. For a Renderer with only one submesh, pass an array with a single initialized entry, and indicate whether or not the one submesh is transparent.</param>
      <param name="enableTriangleCulling">A bool that indicates whether the GPU driver-level culling passes (such as front-face culling or back-face culling) should cull this Renderer. Culling is enabled (true) by default.</param>
      <param name="frontTriangleCounterClockwise">A bool that indicates whether to flip the way triangles face in this renderer. If this is set to true, front-facing triangles will become back-facing and vice versa. Set to false by default.</param>
      <param name="mask">An 8-bit mask you can use to selectively intersect this renderer with rays that only pass the mask. All rays are enabled (0xff) by default.</param>
      <param name="aabbBuffer">A GraphicsBuffer that defines a number of axis-aligned bounding boxes (AABBs). An AABB is defined by a list of bounds, written as floats in the following order: minX, minY, minZ, maxX, maxY, maxZ.</param>
      <param name="numElements">The number of axis-aligned bounding boxes defined in the given GraphicsBuffer.</param>
      <param name="material">The Material to apply to an instance defined by axis-aligned bounding boxes in a GraphicsBuffer.</param>
      <param name="instanceTransform">The object to world matrix to apply to an instance defined by axis-aligned bounding boxes in a GraphicsBuffer. This is optional, and takes the value of a Matrix4x4.identity by default.</param>
      <param name="isCutOff">A bool that indicates whether the Material applied to a GraphicsBuffer instance has cutoff transparency.</param>
      <param name="reuseBounds">A bool that indicates whether Unity reuses the AABBs defined in the GraphicsBuffer without change. If the exact same bounds can be used across multiple acceleration structures or multiple frames, set this to true. This is false by default.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure.Build">
      <summary>
        <para>Builds this RayTracingAccelerationStructure on the GPU.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure.#ctor">
      <summary>
        <para>Creates a RayTracingAccelerationStructure with the given RayTracingAccelerationStructure.RASSettings.</para>
      </summary>
      <param name="settings">Defines whether a RayTracingAccelerationStructure is updated by the user or the Engine, and whether to mask certain object layers or RayTracingModes.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure.#ctor(UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure/RASSettings)">
      <summary>
        <para>Creates a RayTracingAccelerationStructure with the given RayTracingAccelerationStructure.RASSettings.</para>
      </summary>
      <param name="settings">Defines whether a RayTracingAccelerationStructure is updated by the user or the Engine, and whether to mask certain object layers or RayTracingModes.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure.Dispose">
      <summary>
        <para>Destroys this RayTracingAccelerationStructure.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure.GetSize">
      <summary>
        <para>Returns the total size of this RayTracingAccelerationStructure on the GPU in bytes.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure.ManagementMode">
      <summary>
        <para>Defines whether Unity updates a RayTracingAccelerationStructure automatically, or if the user updates it manually via API.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure.ManagementMode.Automatic">
      <summary>
        <para>Automatically populates and updates the RayTracingAccelerationStructure.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure.ManagementMode.Manual">
      <summary>
        <para>Gives user control over populating and updating the RayTracingAccelerationStructure.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure.RASSettings">
      <summary>
        <para>Defines whether a RayTracingAccelerationStructure is updated by the user or by the Engine, and whether to mask certain object layers or RayTracingModes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure.RASSettings.layerMask">
      <summary>
        <para>A 32-bit mask that controls which layers a GameObject must be on in order to be added to the RayTracingAccelerationStructure.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure.RASSettings.managementMode">
      <summary>
        <para>An enum that selects whether a RayTracingAccelerationStructure is automatically or manually updated.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure.RASSettings.rayTracingModeMask">
      <summary>
        <para>An enum controlling which RayTracingModes a Renderer must have in order to be added to the RayTracingAccelerationStructure.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure.RASSettings.#ctor(UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure/ManagementMode,UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure/RayTracingModeMask,System.Int32)">
      <summary>
        <para>Creates a RayTracingAccelerationStructure.RASSettings from the given configuration.</para>
      </summary>
      <param name="sceneManagementMode">Chooses whether a RayTracingAccelerationStructure will be managed by the user or Unity Engine.</param>
      <param name="rayTracingModeMask">Filters Renderers to add to the RayTracingAccelerationStructure based on their RayTracingAccelerationStructure.RayTracingMode.</param>
      <param name="layerMask"></param>
    </member>
    <member name="T:UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure.RayTracingModeMask">
      <summary>
        <para>An enum controlling which RayTracingAccelerationStructure.RayTracingModes a Renderer must have in order to be added to the RayTracingAccelerationStructure.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure.RayTracingModeMask.DynamicGeometry">
      <summary>
        <para>Only add Renderers with RayTracingMode.DynamicGeometry set to the RayTracingAccelerationStructure.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure.RayTracingModeMask.DynamicTransform">
      <summary>
        <para>Only add Renderers with RayTracingMode.DynamicTransform set to the RayTracingAccelerationStructure.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure.RayTracingModeMask.Everything">
      <summary>
        <para>Add all Renderers to the RayTracingAccelerationStructure except for those with that have RayTracingMode.Off.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure.RayTracingModeMask.Nothing">
      <summary>
        <para>Disable adding Renderers to this RayTracingAccelerationStructure.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure.RayTracingModeMask.Static">
      <summary>
        <para>Only add Renderers with RayTracingMode.Static set to the RayTracingAccelerationStructure.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure.Release">
      <summary>
        <para>See Also: RayTracingAccelerationStructure.Dispose.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure.Update">
      <summary>
        <para>Updates the transforms of all instances in this RayTracingAccelerationStructure.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure.UpdateInstanceTransform(UnityEngine.Renderer)">
      <summary>
        <para>Updates the transform of the instance associated with the given Renderer for this RayTracingAccelerationStructure.</para>
      </summary>
      <param name="renderer"></param>
    </member>
    <member name="T:UnityEngine.Experimental.Rendering.RayTracingMode">
      <summary>
        <para>Indicates how a Renderer is updated.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.RayTracingMode.DynamicGeometry">
      <summary>
        <para>Renderers with this mode have animated geometry and update their Mesh and Transform.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.RayTracingMode.DynamicTransform">
      <summary>
        <para>Renderers with this mode update their Transform, but not their Mesh.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.RayTracingMode.Off">
      <summary>
        <para>Renderers with this mode are not ray traced.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.RayTracingMode.Static">
      <summary>
        <para>Renderers with this mode never update.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.Rendering.RayTracingShader">
      <summary>
        <para>A shader for GPU ray tracing.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.Rendering.RayTracingShader.maxRecursionDepth">
      <summary>
        <para>The maximum number of ray bounces this shader can trace (Read Only).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingShader.Dispatch(System.String,System.Int32,System.Int32,System.Int32,UnityEngine.Camera)">
      <summary>
        <para>Dispatches this RayTracingShader.</para>
      </summary>
      <param name="rayGenFunctionName">The name of the ray generation shader.</param>
      <param name="width">The width of the ray generation shader thread grid.</param>
      <param name="height">The height of the ray generation shader thread grid.</param>
      <param name="depth">The depth of the ray generation shader thread grid.</param>
      <param name="camera">Optional parameter used to setup camera-related built-in shader variables.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingShader.SetAccelerationStructure(System.Int32,UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure)">
      <summary>
        <para>Sets the value for RayTracingAccelerationStructure property of this RayTracingShader.</para>
      </summary>
      <param name="name">The name of the RayTracingAccelerationStructure being set.</param>
      <param name="nameID">The ID of the RayTracingAccelerationStructure as given by Shader.PropertyToID.</param>
      <param name="accelerationStructure">The value to set the RayTracingAccelerationStructure to.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingShader.SetAccelerationStructure(System.String,UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure)">
      <summary>
        <para>Sets the value for RayTracingAccelerationStructure property of this RayTracingShader.</para>
      </summary>
      <param name="name">The name of the RayTracingAccelerationStructure being set.</param>
      <param name="nameID">The ID of the RayTracingAccelerationStructure as given by Shader.PropertyToID.</param>
      <param name="accelerationStructure">The value to set the RayTracingAccelerationStructure to.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingShader.SetBool(System.String,System.Boolean)">
      <summary>
        <para>Sets the value of a boolean uniform.</para>
      </summary>
      <param name="name">The name of the property being set.</param>
      <param name="nameID">The ID of the property as given by Shader.PropertyToID.</param>
      <param name="val">The boolean value to set.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingShader.SetBool(System.Int32,System.Boolean)">
      <summary>
        <para>Sets the value of a boolean uniform.</para>
      </summary>
      <param name="name">The name of the property being set.</param>
      <param name="nameID">The ID of the property as given by Shader.PropertyToID.</param>
      <param name="val">The boolean value to set.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingShader.SetBuffer(System.String,UnityEngine.ComputeBuffer)">
      <summary>
        <para>Binds a ComputeBuffer or GraphicsBuffer to a RayTracingShader.</para>
      </summary>
      <param name="nameID">The ID of the buffer name in shader code. Use Shader.PropertyToID to get this ID.</param>
      <param name="name">The name of the buffer in shader code.</param>
      <param name="buffer">The buffer to bind the named local resource to.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingShader.SetBuffer(System.Int32,UnityEngine.ComputeBuffer)">
      <summary>
        <para>Binds a ComputeBuffer or GraphicsBuffer to a RayTracingShader.</para>
      </summary>
      <param name="nameID">The ID of the buffer name in shader code. Use Shader.PropertyToID to get this ID.</param>
      <param name="name">The name of the buffer in shader code.</param>
      <param name="buffer">The buffer to bind the named local resource to.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingShader.SetBuffer(System.String,UnityEngine.GraphicsBuffer)">
      <summary>
        <para>Binds a ComputeBuffer or GraphicsBuffer to a RayTracingShader.</para>
      </summary>
      <param name="nameID">The ID of the buffer name in shader code. Use Shader.PropertyToID to get this ID.</param>
      <param name="name">The name of the buffer in shader code.</param>
      <param name="buffer">The buffer to bind the named local resource to.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingShader.SetBuffer(System.Int32,UnityEngine.GraphicsBuffer)">
      <summary>
        <para>Binds a ComputeBuffer or GraphicsBuffer to a RayTracingShader.</para>
      </summary>
      <param name="nameID">The ID of the buffer name in shader code. Use Shader.PropertyToID to get this ID.</param>
      <param name="name">The name of the buffer in shader code.</param>
      <param name="buffer">The buffer to bind the named local resource to.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingShader.SetConstantBuffer(System.Int32,UnityEngine.ComputeBuffer,System.Int32,System.Int32)">
      <summary>
        <para>Binds a constant buffer created through a ComputeBuffer or a GraphicsBuffer.</para>
      </summary>
      <param name="nameID">The ID of the property name for the constant buffer in shader code. Use Shader.PropertyToID to get this ID.</param>
      <param name="name">The name of the constant buffer in shader code.</param>
      <param name="buffer">The buffer to bind as constant buffer.</param>
      <param name="offset">The offset in bytes from the beginning of the ComputeBuffer or GraphicsBuffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.</param>
      <param name="size">The number of bytes to bind.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingShader.SetConstantBuffer(System.String,UnityEngine.ComputeBuffer,System.Int32,System.Int32)">
      <summary>
        <para>Binds a constant buffer created through a ComputeBuffer or a GraphicsBuffer.</para>
      </summary>
      <param name="nameID">The ID of the property name for the constant buffer in shader code. Use Shader.PropertyToID to get this ID.</param>
      <param name="name">The name of the constant buffer in shader code.</param>
      <param name="buffer">The buffer to bind as constant buffer.</param>
      <param name="offset">The offset in bytes from the beginning of the ComputeBuffer or GraphicsBuffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.</param>
      <param name="size">The number of bytes to bind.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingShader.SetConstantBuffer(System.Int32,UnityEngine.GraphicsBuffer,System.Int32,System.Int32)">
      <summary>
        <para>Binds a constant buffer created through a ComputeBuffer or a GraphicsBuffer.</para>
      </summary>
      <param name="nameID">The ID of the property name for the constant buffer in shader code. Use Shader.PropertyToID to get this ID.</param>
      <param name="name">The name of the constant buffer in shader code.</param>
      <param name="buffer">The buffer to bind as constant buffer.</param>
      <param name="offset">The offset in bytes from the beginning of the ComputeBuffer or GraphicsBuffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.</param>
      <param name="size">The number of bytes to bind.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingShader.SetConstantBuffer(System.String,UnityEngine.GraphicsBuffer,System.Int32,System.Int32)">
      <summary>
        <para>Binds a constant buffer created through a ComputeBuffer or a GraphicsBuffer.</para>
      </summary>
      <param name="nameID">The ID of the property name for the constant buffer in shader code. Use Shader.PropertyToID to get this ID.</param>
      <param name="name">The name of the constant buffer in shader code.</param>
      <param name="buffer">The buffer to bind as constant buffer.</param>
      <param name="offset">The offset in bytes from the beginning of the ComputeBuffer or GraphicsBuffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.</param>
      <param name="size">The number of bytes to bind.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingShader.SetFloat(System.String,System.Single)">
      <summary>
        <para>Sets the value of a float uniform.</para>
      </summary>
      <param name="name">The name of the property being set.</param>
      <param name="nameID">The ID of the property as given by Shader.PropertyToID.</param>
      <param name="val">The float value to set.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingShader.SetFloat(System.Int32,System.Single)">
      <summary>
        <para>Sets the value of a float uniform.</para>
      </summary>
      <param name="name">The name of the property being set.</param>
      <param name="nameID">The ID of the property as given by Shader.PropertyToID.</param>
      <param name="val">The float value to set.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingShader.SetFloats(System.String,System.Single[])">
      <summary>
        <para>Sets the values for a float array uniform.</para>
      </summary>
      <param name="name">The name of the property being set.</param>
      <param name="nameID">The ID of the property as given by Shader.PropertyToID.</param>
      <param name="values">The float array to set.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingShader.SetFloats(System.Int32,System.Single[])">
      <summary>
        <para>Sets the values for a float array uniform.</para>
      </summary>
      <param name="name">The name of the property being set.</param>
      <param name="nameID">The ID of the property as given by Shader.PropertyToID.</param>
      <param name="values">The float array to set.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingShader.SetInt(System.Int32,System.Int32)">
      <summary>
        <para>Sets the value of a int uniform.</para>
      </summary>
      <param name="name">The name of the property being set.</param>
      <param name="nameID">The ID of the property as given by Shader.PropertyToID.</param>
      <param name="val">The int value to set.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingShader.SetInt(System.String,System.Int32)">
      <summary>
        <para>Sets the value of a int uniform.</para>
      </summary>
      <param name="name">The name of the property being set.</param>
      <param name="nameID">The ID of the property as given by Shader.PropertyToID.</param>
      <param name="val">The int value to set.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingShader.SetInts(System.String,System.Int32[])">
      <summary>
        <para>Sets the values for a int array uniform.</para>
      </summary>
      <param name="name">The name of the property being set.</param>
      <param name="nameID">The ID of the property as given by Shader.PropertyToID.</param>
      <param name="values">The int array to set.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingShader.SetInts(System.Int32,System.Int32[])">
      <summary>
        <para>Sets the values for a int array uniform.</para>
      </summary>
      <param name="name">The name of the property being set.</param>
      <param name="nameID">The ID of the property as given by Shader.PropertyToID.</param>
      <param name="values">The int array to set.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingShader.SetMatrix(System.String,UnityEngine.Matrix4x4)">
      <summary>
        <para>Sets the value of a matrix uniform.</para>
      </summary>
      <param name="name">The name of the property being set.</param>
      <param name="nameID">The ID of the property as given by Shader.PropertyToID.</param>
      <param name="val">The matrix to set.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingShader.SetMatrix(System.Int32,UnityEngine.Matrix4x4)">
      <summary>
        <para>Sets the value of a matrix uniform.</para>
      </summary>
      <param name="name">The name of the property being set.</param>
      <param name="nameID">The ID of the property as given by Shader.PropertyToID.</param>
      <param name="val">The matrix to set.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingShader.SetMatrixArray(System.String,UnityEngine.Matrix4x4[])">
      <summary>
        <para>Sets a matrix array uniform.</para>
      </summary>
      <param name="name">The name of the property being set.</param>
      <param name="nameID">The ID of the property as given by Shader.PropertyToID.</param>
      <param name="values">The matrix array to set.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingShader.SetMatrixArray(System.Int32,UnityEngine.Matrix4x4[])">
      <summary>
        <para>Sets a matrix array uniform.</para>
      </summary>
      <param name="name">The name of the property being set.</param>
      <param name="nameID">The ID of the property as given by Shader.PropertyToID.</param>
      <param name="values">The matrix array to set.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingShader.SetShaderPass(System.String)">
      <summary>
        <para>Selects which Shader Pass to use when executing ray/geometry intersection shaders.</para>
      </summary>
      <param name="passName">The Shader Pass to use when executing ray tracing shaders.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingShader.SetTexture(System.String,UnityEngine.Texture)">
      <summary>
        <para>Binds a texture resource. This can be a input or an output texture (UAV).</para>
      </summary>
      <param name="nameID">The ID of the resource as given by Shader.PropertyToID.</param>
      <param name="name">The name of the texture being set.</param>
      <param name="texture">The texture to bind the named local resource to.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingShader.SetTexture(System.Int32,UnityEngine.Texture)">
      <summary>
        <para>Binds a texture resource. This can be a input or an output texture (UAV).</para>
      </summary>
      <param name="nameID">The ID of the resource as given by Shader.PropertyToID.</param>
      <param name="name">The name of the texture being set.</param>
      <param name="texture">The texture to bind the named local resource to.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingShader.SetTextureFromGlobal(System.Int32,System.Int32)">
      <summary>
        <para>Binds a global texture to a RayTracingShader.</para>
      </summary>
      <param name="nameID">The ID of the texture as given by Shader.PropertyToID.</param>
      <param name="name">The name of the texture to bind.</param>
      <param name="globalTextureName">The name of the global resource to bind to the RayTracingShader.</param>
      <param name="globalTextureNameID">The ID of the global resource as given by Shader.PropertyToID.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingShader.SetTextureFromGlobal(System.String,System.String)">
      <summary>
        <para>Binds a global texture to a RayTracingShader.</para>
      </summary>
      <param name="nameID">The ID of the texture as given by Shader.PropertyToID.</param>
      <param name="name">The name of the texture to bind.</param>
      <param name="globalTextureName">The name of the global resource to bind to the RayTracingShader.</param>
      <param name="globalTextureNameID">The ID of the global resource as given by Shader.PropertyToID.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingShader.SetVector(System.String,UnityEngine.Vector4)">
      <summary>
        <para>Sets the value for a vector uniform.</para>
      </summary>
      <param name="name">The name of the property being set.</param>
      <param name="nameID">The ID of the property as given by Shader.PropertyToID.</param>
      <param name="val">The vector to set.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingShader.SetVector(System.Int32,UnityEngine.Vector4)">
      <summary>
        <para>Sets the value for a vector uniform.</para>
      </summary>
      <param name="name">The name of the property being set.</param>
      <param name="nameID">The ID of the property as given by Shader.PropertyToID.</param>
      <param name="val">The vector to set.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingShader.SetVectorArray(System.Int32,UnityEngine.Vector4[])">
      <summary>
        <para>Sets a vector array uniform.</para>
      </summary>
      <param name="name">The name of the property being set.</param>
      <param name="nameID">The ID of the property as given by Shader.PropertyToID.</param>
      <param name="values">The array of vectors to set.</param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.RayTracingShader.SetVectorArray(System.String,UnityEngine.Vector4[])">
      <summary>
        <para>Sets a vector array uniform.</para>
      </summary>
      <param name="name">The name of the property being set.</param>
      <param name="nameID">The ID of the property as given by Shader.PropertyToID.</param>
      <param name="values">The array of vectors to set.</param>
    </member>
    <member name="T:UnityEngine.Experimental.Rendering.ScriptableRuntimeReflectionSystem">
      <summary>
        <para>Empty implementation of IScriptableRuntimeReflectionSystem.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.ScriptableRuntimeReflectionSystem.TickRealtimeProbes">
      <summary>
        <para>Update the reflection probes.</para>
      </summary>
      <returns>
        <para>Whether a reflection probe was updated.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Experimental.Rendering.ScriptableRuntimeReflectionSystemSettings">
      <summary>
        <para>Global settings for the scriptable runtime reflection system.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.Rendering.ScriptableRuntimeReflectionSystemSettings.system">
      <summary>
        <para>The current scriptable runtime reflection system instance.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.Rendering.ShaderWarmup">
      <summary>
        <para>Prewarms shaders in a way that is supported by all graphics APIs.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.ShaderWarmup.WarmupShader(UnityEngine.Shader,UnityEngine.Experimental.Rendering.ShaderWarmupSetup)">
      <summary>
        <para>Prewarms all shader variants for a given Shader, using a given rendering configuration.</para>
      </summary>
      <param name="shader"></param>
      <param name="setup"></param>
    </member>
    <member name="M:UnityEngine.Experimental.Rendering.ShaderWarmup.WarmupShaderFromCollection(UnityEngine.ShaderVariantCollection,UnityEngine.Shader,UnityEngine.Experimental.Rendering.ShaderWarmupSetup)">
      <summary>
        <para>Prewarms the shader variants for a given Shader that are in a given ShaderVariantCollection, using a given rendering configuration.</para>
      </summary>
      <param name="collection"></param>
      <param name="shader"></param>
      <param name="setup"></param>
    </member>
    <member name="T:UnityEngine.Experimental.Rendering.ShaderWarmupSetup">
      <summary>
        <para>The rendering configuration to use when prewarming shader variants.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.Rendering.ShaderWarmupSetup.vdecl">
      <summary>
        <para>The vertex data layout to use when prewarming shader variants.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Experimental.RenderSettings">
      <summary>
        <para>Experimental render settings features.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Experimental.RenderSettings.useRadianceAmbientProbe">
      <summary>
        <para>UseRadianceAmbientProbe has been deprecated, please use UnityEngine.Experimental.GlobalIllumination.useRadianceAmbientProbe.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ExposedPropertyResolver">
      <summary>
        <para>Object that is used to resolve references to an ExposedReference field.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ExposedReference`1">
      <summary>
        <para>Creates a type whos value is resolvable at runtime.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ExposedReference_1.defaultValue">
      <summary>
        <para>The default value, in case the value cannot be resolved.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ExposedReference_1.exposedName">
      <summary>
        <para>The name of the ExposedReference.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ExposedReference_1.Resolve">
      <summary>
        <para>Gets the value of the reference by resolving it given the ExposedPropertyResolver context object.</para>
      </summary>
      <param name="resolver">The ExposedPropertyResolver context object.</param>
      <returns>
        <para>The resolved reference value.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.FilterMode">
      <summary>
        <para>Filtering mode for textures. Corresponds to the settings in a.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FilterMode.Bilinear">
      <summary>
        <para>Bilinear filtering - texture samples are averaged.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FilterMode.Point">
      <summary>
        <para>Point filtering - texture pixels become blocky up close.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FilterMode.Trilinear">
      <summary>
        <para>Trilinear filtering - texture samples are averaged and also blended between mipmap levels.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Flare">
      <summary>
        <para>A flare asset. Read more about flares in the.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.FlareLayer">
      <summary>
        <para>FlareLayer component.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.FogMode">
      <summary>
        <para>Fog mode to use.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FogMode.Exponential">
      <summary>
        <para>Exponential fog.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FogMode.ExponentialSquared">
      <summary>
        <para>Exponential squared fog (default).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FogMode.Linear">
      <summary>
        <para>Linear fog.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.FrameTiming">
      <summary>
        <para>Struct containing basic FrameTimings and accompanying relevant data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FrameTiming.cpuFrameTime">
      <summary>
        <para>The CPU time for a given frame, in ms.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FrameTiming.cpuTimeFrameComplete">
      <summary>
        <para>This is the CPU clock time at the point GPU finished rendering the frame and interrupted the CPU.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FrameTiming.cpuTimePresentCalled">
      <summary>
        <para>This is the CPU clock time at the point Present was called for the current frame.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FrameTiming.gpuFrameTime">
      <summary>
        <para>The GPU time for a given frame, in ms.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FrameTiming.heightScale">
      <summary>
        <para>This was the height scale factor of the Dynamic Resolution system(if used) for the given frame and the linked frame timings.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FrameTiming.syncInterval">
      <summary>
        <para>This was the vsync mode for the given frame and the linked frame timings.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FrameTiming.widthScale">
      <summary>
        <para>This was the width scale factor of the Dynamic Resolution system(if used) for the given frame and the linked frame timings.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.FrameTimingManager">
      <summary>
        <para>The FrameTimingManager allows the user to capture and access FrameTiming data for multple frames.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.FrameTimingManager.CaptureFrameTimings">
      <summary>
        <para>This function triggers the FrameTimingManager to capture a snapshot of FrameTiming's data, that can then be accessed by the user.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.FrameTimingManager.GetCpuTimerFrequency">
      <summary>
        <para>This returns the frequency of CPU timer on the current platform, used to interpret timing results. If the platform does not support returning this value it will return 0.</para>
      </summary>
      <returns>
        <para>CPU timer frequency for current platform.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.FrameTimingManager.GetGpuTimerFrequency">
      <summary>
        <para>This returns the frequency of GPU timer on the current platform, used to interpret timing results. If the platform does not support returning this value it will return 0.</para>
      </summary>
      <returns>
        <para>GPU timer frequency for current platform.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.FrameTimingManager.GetLatestTimings(System.UInt32,UnityEngine.FrameTiming[])">
      <summary>
        <para>Allows the user to access the currently captured FrameTimings.</para>
      </summary>
      <param name="numFrames">User supplies a desired number of frames they would like FrameTimings for. This should be equal to or less than the maximum FrameTimings the platform can capture.</param>
      <param name="timings">An array of FrameTiming structs that is passed in by the user and will be filled with data as requested. It is the users job to make sure the array that is passed is large enough to hold the requested number of FrameTimings.</param>
      <returns>
        <para>Returns the number of FrameTimings it actually was able to get. This will always be equal to or less than the requested numFrames depending on availability of captured FrameTimings.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.FrameTimingManager.GetVSyncsPerSecond">
      <summary>
        <para>This returns the number of vsyncs per second on the current platform, used to interpret timing results. If the platform does not support returning this value it will return 0.</para>
      </summary>
      <returns>
        <para>Number of vsyncs per second of the current platform.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.FrustumPlanes">
      <summary>
        <para>This struct contains the view space coordinates of the near projection plane.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FrustumPlanes.bottom">
      <summary>
        <para>Position in view space of the bottom side of the near projection plane.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FrustumPlanes.left">
      <summary>
        <para>Position in view space of the left side of the near projection plane.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FrustumPlanes.right">
      <summary>
        <para>Position in view space of the right side of the near projection plane.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FrustumPlanes.top">
      <summary>
        <para>Position in view space of the top side of the near projection plane.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FrustumPlanes.zFar">
      <summary>
        <para>Z distance from the origin of view space to the far projection plane.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FrustumPlanes.zNear">
      <summary>
        <para>Z distance from the origin of view space to the near projection plane.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.FullScreenMode">
      <summary>
        <para>Platform agnostic fullscreen mode. Not all platforms support all modes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FullScreenMode.ExclusiveFullScreen">
      <summary>
        <para>Exclusive Mode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FullScreenMode.FullScreenWindow">
      <summary>
        <para>Fullscreen window.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FullScreenMode.MaximizedWindow">
      <summary>
        <para>Maximized window.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FullScreenMode.Windowed">
      <summary>
        <para>Windowed.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.FullScreenMovieControlMode">
      <summary>
        <para>Describes options for displaying movie playback controls.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FullScreenMovieControlMode.CancelOnInput">
      <summary>
        <para>Do not display any controls, but cancel movie playback if input occurs.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FullScreenMovieControlMode.Full">
      <summary>
        <para>Display the standard controls for controlling movie playback.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FullScreenMovieControlMode.Hidden">
      <summary>
        <para>Do not display any controls.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FullScreenMovieControlMode.Minimal">
      <summary>
        <para>Display minimal set of controls controlling movie playback.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.FullScreenMovieScalingMode">
      <summary>
        <para>Describes scaling modes for displaying movies.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FullScreenMovieScalingMode.AspectFill">
      <summary>
        <para>Scale the movie until the movie fills the entire screen.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FullScreenMovieScalingMode.AspectFit">
      <summary>
        <para>Scale the movie until one dimension fits on the screen exactly.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FullScreenMovieScalingMode.Fill">
      <summary>
        <para>Scale the movie until both dimensions fit the screen exactly.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FullScreenMovieScalingMode.None">
      <summary>
        <para>Do not scale the movie.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.GameObject">
      <summary>
        <para>Base class for all entities in Unity Scenes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.activeInHierarchy">
      <summary>
        <para>Defines whether the GameObject is active in the Scene.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.activeSelf">
      <summary>
        <para>The local active state of this GameObject. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.animation">
      <summary>
        <para>The Animation attached to this GameObject (Read Only). (Null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.audio">
      <summary>
        <para>The AudioSource attached to this GameObject (Read Only). (Null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.camera">
      <summary>
        <para>The Camera attached to this GameObject (Read Only). (Null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.collider">
      <summary>
        <para>The Collider attached to this GameObject (Read Only). (Null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.collider2D">
      <summary>
        <para>The Collider2D component attached to this object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.constantForce">
      <summary>
        <para>The ConstantForce attached to this GameObject (Read Only). (Null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.hingeJoint">
      <summary>
        <para>The HingeJoint attached to this GameObject (Read Only). (Null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.isStatic">
      <summary>
        <para>Gets and sets the GameObject's StaticEditorFlags.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.layer">
      <summary>
        <para>The layer the game object is in.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.light">
      <summary>
        <para>The Light attached to this GameObject (Read Only). (Null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.networkView">
      <summary>
        <para>The NetworkView attached to this GameObject (Read Only). (Null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.particleSystem">
      <summary>
        <para>The ParticleSystem attached to this GameObject (Read Only). (Null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.renderer">
      <summary>
        <para>The Renderer attached to this GameObject (Read Only). (Null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.rigidbody">
      <summary>
        <para>The Rigidbody attached to this GameObject (Read Only). (Null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.rigidbody2D">
      <summary>
        <para>The Rigidbody2D component attached to this GameObject. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.scene">
      <summary>
        <para>Scene that the GameObject is part of.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.sceneCullingMask">
      <summary>
        <para>Scene culling mask Unity uses to determine which scene to render the GameObject in.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.tag">
      <summary>
        <para>The tag of this game object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.transform">
      <summary>
        <para>The Transform attached to this GameObject.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GameObject.AddComponent(System.String)">
      <summary>
        <para>Adds a component class named className to the game object.</para>
      </summary>
      <param name="className"></param>
    </member>
    <member name="M:UnityEngine.GameObject.AddComponent(System.Type)">
      <summary>
        <para>Adds a component class of type componentType to the game object. C# Users can use a generic version.</para>
      </summary>
      <param name="componentType"></param>
    </member>
    <member name="M:UnityEngine.GameObject.AddComponent">
      <summary>
        <para>Generic version of this method.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GameObject.BroadcastMessage(System.String)">
      <summary>
        <para>Calls the method named methodName on every MonoBehaviour in this game object or any of its children.</para>
      </summary>
      <param name="methodName"></param>
      <param name="parameter"></param>
      <param name="options"></param>
    </member>
    <member name="M:UnityEngine.GameObject.BroadcastMessage(System.String,System.Object)">
      <summary>
        <para>Calls the method named methodName on every MonoBehaviour in this game object or any of its children.</para>
      </summary>
      <param name="methodName"></param>
      <param name="parameter"></param>
      <param name="options"></param>
    </member>
    <member name="M:UnityEngine.GameObject.BroadcastMessage(System.String,System.Object,UnityEngine.SendMessageOptions)">
      <summary>
        <para>Calls the method named methodName on every MonoBehaviour in this game object or any of its children.</para>
      </summary>
      <param name="methodName"></param>
      <param name="parameter"></param>
      <param name="options"></param>
    </member>
    <member name="M:UnityEngine.GameObject.BroadcastMessage(System.String,UnityEngine.SendMessageOptions)">
      <summary>
        <para></para>
      </summary>
      <param name="methodName"></param>
      <param name="options"></param>
    </member>
    <member name="M:UnityEngine.GameObject.CompareTag(System.String)">
      <summary>
        <para>Is this game object tagged with tag ?</para>
      </summary>
      <param name="tag">The tag to compare.</param>
    </member>
    <member name="M:UnityEngine.GameObject.CreatePrimitive(UnityEngine.PrimitiveType)">
      <summary>
        <para>Creates a game object with a primitive mesh renderer and appropriate collider.</para>
      </summary>
      <param name="type">The type of primitive object to create.</param>
    </member>
    <member name="M:UnityEngine.GameObject.#ctor">
      <summary>
        <para>Creates a new game object, named name.</para>
      </summary>
      <param name="name">The name that the GameObject is created with.</param>
      <param name="components">A list of Components to add to the GameObject on creation.</param>
    </member>
    <member name="M:UnityEngine.GameObject.#ctor(System.String)">
      <summary>
        <para>Creates a new game object, named name.</para>
      </summary>
      <param name="name">The name that the GameObject is created with.</param>
      <param name="components">A list of Components to add to the GameObject on creation.</param>
    </member>
    <member name="M:UnityEngine.GameObject.#ctor(System.String,System.Type[])">
      <summary>
        <para>Creates a new game object, named name.</para>
      </summary>
      <param name="name">The name that the GameObject is created with.</param>
      <param name="components">A list of Components to add to the GameObject on creation.</param>
    </member>
    <member name="M:UnityEngine.GameObject.Find(System.String)">
      <summary>
        <para>Finds a GameObject by name and returns it.</para>
      </summary>
      <param name="name"></param>
    </member>
    <member name="M:UnityEngine.GameObject.FindGameObjectsWithTag(System.String)">
      <summary>
        <para>Returns an array of active GameObjects tagged tag. Returns empty array if no GameObject was found.</para>
      </summary>
      <param name="tag">The name of the tag to search GameObjects for.</param>
    </member>
    <member name="M:UnityEngine.GameObject.FindWithTag(System.String)">
      <summary>
        <para>Returns one active GameObject tagged tag. Returns null if no GameObject was found.</para>
      </summary>
      <param name="tag">The tag to search for.</param>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponent(System.Type)">
      <summary>
        <para>Returns the component of Type type if the game object has one attached, null if it doesn't.</para>
      </summary>
      <param name="type">The type of Component to retrieve.</param>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponent">
      <summary>
        <para>Generic version of this method.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponent(System.String)">
      <summary>
        <para>Returns the component with name type if the game object has one attached, null if it doesn't.</para>
      </summary>
      <param name="type">The type of Component to retrieve.</param>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponentInChildren(System.Type)">
      <summary>
        <para>Returns the component of Type type in the GameObject or any of its children using depth first search.</para>
      </summary>
      <param name="type">The type of Component to retrieve.</param>
      <param name="includeInactive"></param>
      <returns>
        <para>A component of the matching type, if found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponentInChildren(System.Type,System.Boolean)">
      <summary>
        <para>Returns the component of Type type in the GameObject or any of its children using depth first search.</para>
      </summary>
      <param name="type">The type of Component to retrieve.</param>
      <param name="includeInactive"></param>
      <returns>
        <para>A component of the matching type, if found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponentInChildren()">
      <summary>
        <para>Generic version of this method.</para>
      </summary>
      <param name="includeInactive"></param>
      <returns>
        <para>A component of the matching type, if found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponentInChildren(System.Boolean)">
      <summary>
        <para>Generic version of this method.</para>
      </summary>
      <param name="includeInactive"></param>
      <returns>
        <para>A component of the matching type, if found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponentInParent(System.Type)">
      <summary>
        <para>Retrieves the component of Type type in the GameObject or any of its parents.</para>
      </summary>
      <param name="type">Type of component to find.</param>
      <param name="includeInactive"></param>
      <returns>
        <para>Returns a component if a component matching the type is found. Returns null otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponentInParent(System.Type,System.Boolean)">
      <summary>
        <para>Retrieves the component of Type type in the GameObject or any of its parents.</para>
      </summary>
      <param name="type">Type of component to find.</param>
      <param name="includeInactive"></param>
      <returns>
        <para>Returns a component if a component matching the type is found. Returns null otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponentInParent()">
      <summary>
        <para>Generic version of this method.</para>
      </summary>
      <param name="includeInactive"></param>
      <returns>
        <para>Returns a component if a component matching the type is found. Returns null otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponentInParent(System.Boolean)">
      <summary>
        <para>Generic version of this method.</para>
      </summary>
      <param name="includeInactive"></param>
      <returns>
        <para>Returns a component if a component matching the type is found. Returns null otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponents(System.Type)">
      <summary>
        <para>Returns all components of Type type in the GameObject.</para>
      </summary>
      <param name="type">The type of component to retrieve.</param>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponents">
      <summary>
        <para>Generic version of this method.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponents(System.Type,System.Collections.Generic.List`1&lt;UnityEngine.Component&gt;)">
      <summary>
        <para>Returns all components of Type type in the GameObject into List results. Note that results is of type Component, not the type of the component retrieved.</para>
      </summary>
      <param name="type">The type of Component to retrieve.</param>
      <param name="results">List to receive the results.</param>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponents(System.Collections.Generic.List`1&lt;T&gt;)">
      <summary>
        <para>Returns all components of Type type in the GameObject into List results.</para>
      </summary>
      <param name="results">List of type T to receive the results.</param>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponentsInChildren(System.Type)">
      <summary>
        <para>Returns all components of Type type in the GameObject or any of its children.</para>
      </summary>
      <param name="type">The type of Component to retrieve.</param>
      <param name="includeInactive">Should Components on inactive GameObjects be included in the found set?</param>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponentsInChildren(System.Type,System.Boolean)">
      <summary>
        <para>Returns all components of Type type in the GameObject or any of its children.</para>
      </summary>
      <param name="type">The type of Component to retrieve.</param>
      <param name="includeInactive">Should Components on inactive GameObjects be included in the found set?</param>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponentsInChildren">
      <summary>
        <para>Generic version of this method.</para>
      </summary>
      <param name="includeInactive">Should inactive GameObjects be included in the found set?</param>
      <returns>
        <para>A list of all found components matching the specified type.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponentsInChildren(System.Boolean)">
      <summary>
        <para>Generic version of this method.</para>
      </summary>
      <param name="includeInactive">Should inactive GameObjects be included in the found set?</param>
      <returns>
        <para>A list of all found components matching the specified type.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponentsInChildren(System.Collections.Generic.List`1&lt;T&gt;)">
      <summary>
        <para>Return all found Components into List results.</para>
      </summary>
      <param name="results">List to receive found Components.</param>
      <param name="includeInactive">Should inactive GameObjects be included in the found set?</param>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponentsInChildren(System.Boolean,System.Collections.Generic.List`1&lt;T&gt;)">
      <summary>
        <para>Return all found Components into List results.</para>
      </summary>
      <param name="results">List to receive found Components.</param>
      <param name="includeInactive">Should inactive GameObjects be included in the found set?</param>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponentsInParent(System.Type,System.Boolean)">
      <summary>
        <para>Returns all components of Type type in the GameObject or any of its parents.</para>
      </summary>
      <param name="type">The type of Component to retrieve.</param>
      <param name="includeInactive">Should inactive Components be included in the found set?</param>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponentsInParent">
      <summary>
        <para>Generic version of this method.</para>
      </summary>
      <param name="includeInactive">Determines whether to include inactive components in the found set.</param>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponentsInParent(System.Boolean)">
      <summary>
        <para>Generic version of this method.</para>
      </summary>
      <param name="includeInactive">Determines whether to include inactive components in the found set.</param>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponentsInParent(System.Boolean,System.Collections.Generic.List`1&lt;T&gt;)">
      <summary>
        <para>Find Components in GameObject or parents, and return them in List results.</para>
      </summary>
      <param name="includeInactive">Should inactive Components be included in the found set?</param>
      <param name="results">List holding the found Components.</param>
    </member>
    <member name="M:UnityEngine.GameObject.SendMessage(System.String)">
      <summary>
        <para>Calls the method named methodName on every MonoBehaviour in this game object.</para>
      </summary>
      <param name="methodName">The name of the method to call.</param>
      <param name="value">An optional parameter value to pass to the called method.</param>
      <param name="options">Should an error be raised if the method doesn't exist on the target object?</param>
    </member>
    <member name="M:UnityEngine.GameObject.SendMessage(System.String,System.Object)">
      <summary>
        <para>Calls the method named methodName on every MonoBehaviour in this game object.</para>
      </summary>
      <param name="methodName">The name of the method to call.</param>
      <param name="value">An optional parameter value to pass to the called method.</param>
      <param name="options">Should an error be raised if the method doesn't exist on the target object?</param>
    </member>
    <member name="M:UnityEngine.GameObject.SendMessage(System.String,System.Object,UnityEngine.SendMessageOptions)">
      <summary>
        <para>Calls the method named methodName on every MonoBehaviour in this game object.</para>
      </summary>
      <param name="methodName">The name of the method to call.</param>
      <param name="value">An optional parameter value to pass to the called method.</param>
      <param name="options">Should an error be raised if the method doesn't exist on the target object?</param>
    </member>
    <member name="M:UnityEngine.GameObject.SendMessage(System.String,UnityEngine.SendMessageOptions)">
      <summary>
        <para></para>
      </summary>
      <param name="methodName"></param>
      <param name="options"></param>
    </member>
    <member name="M:UnityEngine.GameObject.SendMessageUpwards(System.String)">
      <summary>
        <para>Calls the method named methodName on every MonoBehaviour in this game object and on every ancestor of the behaviour.</para>
      </summary>
      <param name="methodName">The name of the method to call.</param>
      <param name="value">An optional parameter value to pass to the called method.</param>
      <param name="options">Should an error be raised if the method doesn't exist on the target object?</param>
    </member>
    <member name="M:UnityEngine.GameObject.SendMessageUpwards(System.String,System.Object)">
      <summary>
        <para>Calls the method named methodName on every MonoBehaviour in this game object and on every ancestor of the behaviour.</para>
      </summary>
      <param name="methodName">The name of the method to call.</param>
      <param name="value">An optional parameter value to pass to the called method.</param>
      <param name="options">Should an error be raised if the method doesn't exist on the target object?</param>
    </member>
    <member name="M:UnityEngine.GameObject.SendMessageUpwards(System.String,System.Object,UnityEngine.SendMessageOptions)">
      <summary>
        <para>Calls the method named methodName on every MonoBehaviour in this game object and on every ancestor of the behaviour.</para>
      </summary>
      <param name="methodName">The name of the method to call.</param>
      <param name="value">An optional parameter value to pass to the called method.</param>
      <param name="options">Should an error be raised if the method doesn't exist on the target object?</param>
    </member>
    <member name="M:UnityEngine.GameObject.SendMessageUpwards(System.String,UnityEngine.SendMessageOptions)">
      <summary>
        <para></para>
      </summary>
      <param name="methodName"></param>
      <param name="options"></param>
    </member>
    <member name="M:UnityEngine.GameObject.SetActive(System.Boolean)">
      <summary>
        <para>ActivatesDeactivates the GameObject, depending on the given true or false/ value.</para>
      </summary>
      <param name="value">Activate or deactivate the object, where true activates the GameObject and false deactivates the GameObject.</param>
    </member>
    <member name="M:UnityEngine.GameObject.TryGetComponent(System.Type,UnityEngine.Component&amp;)">
      <summary>
        <para>Gets the component of the specified type, if it exists.</para>
      </summary>
      <param name="type">The type of component to retrieve.</param>
      <param name="component">The output argument that will contain the component or null.</param>
      <returns>
        <para>Returns true if the component is found, false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GameObject.TryGetComponent(T&amp;)">
      <summary>
        <para>Generic version of this method.</para>
      </summary>
      <param name="component">The output argument that will contain the component or null.</param>
      <returns>
        <para>Returns true if the component is found, false otherwise.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.GeometryUtility">
      <summary>
        <para>Utility class for common geometric functions.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GeometryUtility.CalculateBounds(UnityEngine.Vector3[],UnityEngine.Matrix4x4)">
      <summary>
        <para>Calculates the bounding box from the given array of positions and the transformation matrix.</para>
      </summary>
      <param name="positions">An array that stores the location of 3d positions.</param>
      <param name="transform">A matrix that changes the position, rotation and size of the bounds calculation.</param>
      <returns>
        <para>Calculates the axis-aligned bounding box.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GeometryUtility.CalculateFrustumPlanes(UnityEngine.Camera)">
      <summary>
        <para>Calculates frustum planes.</para>
      </summary>
      <param name="camera">The camera with the view frustum that you want to calculate planes from.</param>
      <returns>
        <para>The planes that form the camera's view frustum.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GeometryUtility.CalculateFrustumPlanes(UnityEngine.Camera,UnityEngine.Plane[])">
      <summary>
        <para>Calculates frustum planes.</para>
      </summary>
      <param name="camera">The camera with the view frustum that you want to calculate planes from.</param>
      <param name="planes">An array of 6 Planes that will be overwritten with the calculated plane values.</param>
    </member>
    <member name="M:UnityEngine.GeometryUtility.CalculateFrustumPlanes(UnityEngine.Matrix4x4)">
      <summary>
        <para>Calculates frustum planes.</para>
      </summary>
      <param name="worldToProjectionMatrix">A matrix that transforms from world space to projection space, from which the planes will be calculated.</param>
      <returns>
        <para>The planes that enclose the projection space described by the matrix.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GeometryUtility.CalculateFrustumPlanes(UnityEngine.Matrix4x4,UnityEngine.Plane[])">
      <summary>
        <para>Calculates frustum planes.</para>
      </summary>
      <param name="worldToProjectionMatrix">A matrix that transforms from world space to projection space, from which the planes will be calculated.</param>
      <param name="planes">An array of 6 Planes that will be overwritten with the calculated plane values.</param>
    </member>
    <member name="M:UnityEngine.GeometryUtility.TestPlanesAABB(UnityEngine.Plane[],UnityEngine.Bounds)">
      <summary>
        <para>Returns true if bounds are inside the plane array.</para>
      </summary>
      <param name="planes"></param>
      <param name="bounds"></param>
    </member>
    <member name="M:UnityEngine.GeometryUtility.TryCreatePlaneFromPolygon(UnityEngine.Vector3[],UnityEngine.Plane&amp;)">
      <summary>
        <para>GeometryUtility.TryCreatePlaneFromPolygon creates a plane from the given list of vertices that define the polygon, as long as they do not characterize a straight line or zero area.</para>
      </summary>
      <param name="vertices">An array of vertex positions that define the shape of a polygon.</param>
      <param name="plane">A valid plane that goes through the vertices.</param>
      <returns>
        <para>Returns true on success, false if Unity did not create a plane from the vertices.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Gizmos">
      <summary>
        <para>Gizmos are used to give visual debugging or setup aids in the Scene view.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Gizmos.color">
      <summary>
        <para>Sets the color for the gizmos that will be drawn next.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Gizmos.exposure">
      <summary>
        <para>Set a texture that contains the exposure correction for LightProbe gizmos. The value is sampled from the red channel in the middle of the texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Gizmos.matrix">
      <summary>
        <para>Sets the Matrix4x4 that the Unity Editor uses to draw Gizmos.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Gizmos.probeSize">
      <summary>
        <para>Set a scale for Light Probe gizmos. This scale will be used to render the spherical harmonic preview spheres.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Gizmos.DrawCube(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Draw a solid box with center and size.</para>
      </summary>
      <param name="center"></param>
      <param name="size"></param>
    </member>
    <member name="M:UnityEngine.Gizmos.DrawFrustum(UnityEngine.Vector3,System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Draw a camera frustum using the currently set Gizmos.matrix for it's location and rotation.</para>
      </summary>
      <param name="center">The apex of the truncated pyramid.</param>
      <param name="fov">Vertical field of view (ie, the angle at the apex in degrees).</param>
      <param name="maxRange">Distance of the frustum's far plane.</param>
      <param name="minRange">Distance of the frustum's near plane.</param>
      <param name="aspect">Width/height ratio.</param>
    </member>
    <member name="M:UnityEngine.Gizmos.DrawGUITexture(UnityEngine.Rect,UnityEngine.Texture)">
      <summary>
        <para>Draw a texture in the Scene.</para>
      </summary>
      <param name="screenRect">The size and position of the texture on the "screen" defined by the XY plane.</param>
      <param name="texture">The texture to be displayed.</param>
      <param name="mat">An optional material to apply the texture.</param>
      <param name="leftBorder">Inset from the rectangle's left edge.</param>
      <param name="rightBorder">Inset from the rectangle's right edge.</param>
      <param name="topBorder">Inset from the rectangle's top edge.</param>
      <param name="bottomBorder">Inset from the rectangle's bottom edge.</param>
    </member>
    <member name="M:UnityEngine.Gizmos.DrawGUITexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Material)">
      <summary>
        <para>Draw a texture in the Scene.</para>
      </summary>
      <param name="screenRect">The size and position of the texture on the "screen" defined by the XY plane.</param>
      <param name="texture">The texture to be displayed.</param>
      <param name="mat">An optional material to apply the texture.</param>
      <param name="leftBorder">Inset from the rectangle's left edge.</param>
      <param name="rightBorder">Inset from the rectangle's right edge.</param>
      <param name="topBorder">Inset from the rectangle's top edge.</param>
      <param name="bottomBorder">Inset from the rectangle's bottom edge.</param>
    </member>
    <member name="M:UnityEngine.Gizmos.DrawGUITexture(UnityEngine.Rect,UnityEngine.Texture,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Draw a texture in the Scene.</para>
      </summary>
      <param name="screenRect">The size and position of the texture on the "screen" defined by the XY plane.</param>
      <param name="texture">The texture to be displayed.</param>
      <param name="mat">An optional material to apply the texture.</param>
      <param name="leftBorder">Inset from the rectangle's left edge.</param>
      <param name="rightBorder">Inset from the rectangle's right edge.</param>
      <param name="topBorder">Inset from the rectangle's top edge.</param>
      <param name="bottomBorder">Inset from the rectangle's bottom edge.</param>
    </member>
    <member name="M:UnityEngine.Gizmos.DrawGUITexture(UnityEngine.Rect,UnityEngine.Texture,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Material)">
      <summary>
        <para>Draw a texture in the Scene.</para>
      </summary>
      <param name="screenRect">The size and position of the texture on the "screen" defined by the XY plane.</param>
      <param name="texture">The texture to be displayed.</param>
      <param name="mat">An optional material to apply the texture.</param>
      <param name="leftBorder">Inset from the rectangle's left edge.</param>
      <param name="rightBorder">Inset from the rectangle's right edge.</param>
      <param name="topBorder">Inset from the rectangle's top edge.</param>
      <param name="bottomBorder">Inset from the rectangle's bottom edge.</param>
    </member>
    <member name="M:UnityEngine.Gizmos.DrawIcon(UnityEngine.Vector3,System.String)">
      <summary>
        <para>Draw an icon at a position in the Scene view.</para>
      </summary>
      <param name="center"></param>
      <param name="name"></param>
      <param name="allowScaling"></param>
    </member>
    <member name="M:UnityEngine.Gizmos.DrawIcon(UnityEngine.Vector3,System.String,System.Boolean)">
      <summary>
        <para>Draw an icon at a position in the Scene view.</para>
      </summary>
      <param name="center"></param>
      <param name="name"></param>
      <param name="allowScaling"></param>
    </member>
    <member name="M:UnityEngine.Gizmos.DrawLine(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Draws a line starting at from towards to.</para>
      </summary>
      <param name="from"></param>
      <param name="to"></param>
    </member>
    <member name="M:UnityEngine.Gizmos.DrawMesh(UnityEngine.Mesh,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)">
      <summary>
        <para>Draws a mesh.</para>
      </summary>
      <param name="mesh">Mesh to draw as a gizmo.</param>
      <param name="position">Position (default is zero).</param>
      <param name="rotation">Rotation (default is no rotation).</param>
      <param name="scale">Scale (default is no scale).</param>
      <param name="submeshIndex">Submesh to draw (default is -1, which draws whole mesh).</param>
    </member>
    <member name="M:UnityEngine.Gizmos.DrawMesh(UnityEngine.Mesh,System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)">
      <summary>
        <para>Draws a mesh.</para>
      </summary>
      <param name="mesh">Mesh to draw as a gizmo.</param>
      <param name="position">Position (default is zero).</param>
      <param name="rotation">Rotation (default is no rotation).</param>
      <param name="scale">Scale (default is no scale).</param>
      <param name="submeshIndex">Submesh to draw (default is -1, which draws whole mesh).</param>
    </member>
    <member name="M:UnityEngine.Gizmos.DrawRay(UnityEngine.Ray)">
      <summary>
        <para>Draws a ray starting at from to from + direction.</para>
      </summary>
      <param name="r"></param>
      <param name="from"></param>
      <param name="direction"></param>
    </member>
    <member name="M:UnityEngine.Gizmos.DrawRay(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Draws a ray starting at from to from + direction.</para>
      </summary>
      <param name="r"></param>
      <param name="from"></param>
      <param name="direction"></param>
    </member>
    <member name="M:UnityEngine.Gizmos.DrawSphere(UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Draws a solid sphere with center and radius.</para>
      </summary>
      <param name="center"></param>
      <param name="radius"></param>
    </member>
    <member name="M:UnityEngine.Gizmos.DrawWireCube(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Draw a wireframe box with center and size.</para>
      </summary>
      <param name="center"></param>
      <param name="size"></param>
    </member>
    <member name="M:UnityEngine.Gizmos.DrawWireMesh(UnityEngine.Mesh,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)">
      <summary>
        <para>Draws a wireframe mesh.</para>
      </summary>
      <param name="mesh">Mesh to draw as a gizmo.</param>
      <param name="position">Position (default is zero).</param>
      <param name="rotation">Rotation (default is no rotation).</param>
      <param name="scale">Scale (default is no scale).</param>
      <param name="submeshIndex">Submesh to draw (default is -1, which draws whole mesh).</param>
    </member>
    <member name="M:UnityEngine.Gizmos.DrawWireMesh(UnityEngine.Mesh,System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)">
      <summary>
        <para>Draws a wireframe mesh.</para>
      </summary>
      <param name="mesh">Mesh to draw as a gizmo.</param>
      <param name="position">Position (default is zero).</param>
      <param name="rotation">Rotation (default is no rotation).</param>
      <param name="scale">Scale (default is no scale).</param>
      <param name="submeshIndex">Submesh to draw (default is -1, which draws whole mesh).</param>
    </member>
    <member name="M:UnityEngine.Gizmos.DrawWireSphere(UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Draws a wireframe sphere with center and radius.</para>
      </summary>
      <param name="center"></param>
      <param name="radius"></param>
    </member>
    <member name="T:UnityEngine.GL">
      <summary>
        <para>Low-level graphics library.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GL.invertCulling">
      <summary>
        <para>Select whether to invert the backface culling (true) or not (false).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GL.modelview">
      <summary>
        <para>Gets or sets the modelview matrix.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GL.sRGBWrite">
      <summary>
        <para>Controls whether Linear-to-sRGB color conversion is performed while rendering.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GL.wireframe">
      <summary>
        <para>Should rendering be done in wireframe?</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.Begin(System.Int32)">
      <summary>
        <para>Begin drawing 3D primitives.</para>
      </summary>
      <param name="mode">Primitives to draw: can be TRIANGLES, TRIANGLE_STRIP, QUADS or LINES.</param>
    </member>
    <member name="M:UnityEngine.GL.Clear(System.Boolean,System.Boolean,UnityEngine.Color,System.Single)">
      <summary>
        <para>Clear the current render buffer.</para>
      </summary>
      <param name="clearDepth">Should the depth buffer be cleared?</param>
      <param name="clearColor">Should the color buffer be cleared?</param>
      <param name="backgroundColor">The color to clear with, used only if clearColor is true.</param>
      <param name="depth">The depth to clear the z-buffer with, used only if clearDepth is true. The valid
range is from 0 (near plane) to 1 (far plane). The value is graphics API agnostic: the abstraction layer will convert
the value to match the convention of the current graphics API.</param>
    </member>
    <member name="M:UnityEngine.GL.ClearWithSkybox(System.Boolean,UnityEngine.Camera)">
      <summary>
        <para>Clear the current render buffer with camera's skybox.</para>
      </summary>
      <param name="clearDepth">Should the depth buffer be cleared?</param>
      <param name="camera">Camera to get projection parameters and skybox from.</param>
    </member>
    <member name="M:UnityEngine.GL.Color(UnityEngine.Color)">
      <summary>
        <para>Sets current vertex color.</para>
      </summary>
      <param name="c"></param>
    </member>
    <member name="M:UnityEngine.GL.End">
      <summary>
        <para>End drawing 3D primitives.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.Flush">
      <summary>
        <para>Sends queued-up commands in the driver's command buffer to the GPU.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.GetGPUProjectionMatrix(UnityEngine.Matrix4x4,System.Boolean)">
      <summary>
        <para>Compute GPU projection matrix from camera's projection matrix.</para>
      </summary>
      <param name="proj">Source projection matrix.</param>
      <param name="renderIntoTexture">Will this projection be used for rendering into a RenderTexture?</param>
      <returns>
        <para>Adjusted projection matrix for the current graphics API.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GL.InvalidateState">
      <summary>
        <para>Invalidate the internally cached render state.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.IssuePluginEvent(System.Int32)">
      <summary>
        <para>Send a user-defined event to a native code plugin.</para>
      </summary>
      <param name="eventID">User defined id to send to the callback.</param>
      <param name="callback">Native code callback to queue for Unity's renderer to invoke.</param>
    </member>
    <member name="M:UnityEngine.GL.IssuePluginEvent(System.IntPtr,System.Int32)">
      <summary>
        <para>Send a user-defined event to a native code plugin.</para>
      </summary>
      <param name="eventID">User defined id to send to the callback.</param>
      <param name="callback">Native code callback to queue for Unity's renderer to invoke.</param>
    </member>
    <member name="F:UnityEngine.GL.LINE_STRIP">
      <summary>
        <para>Mode for Begin: draw line strip.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.GL.LINES">
      <summary>
        <para>Mode for Begin: draw lines.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.LoadIdentity">
      <summary>
        <para>Load an identity into the current model and view matrices.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.LoadOrtho">
      <summary>
        <para>Helper function to set up an orthograhic projection.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.LoadPixelMatrix">
      <summary>
        <para>Setup a matrix for pixel-correct rendering.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.LoadPixelMatrix(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Setup a matrix for pixel-correct rendering.</para>
      </summary>
      <param name="left"></param>
      <param name="right"></param>
      <param name="bottom"></param>
      <param name="top"></param>
    </member>
    <member name="M:UnityEngine.GL.LoadProjectionMatrix(UnityEngine.Matrix4x4)">
      <summary>
        <para>Load an arbitrary matrix to the current projection matrix.</para>
      </summary>
      <param name="mat"></param>
    </member>
    <member name="M:UnityEngine.GL.MultiTexCoord(System.Int32,UnityEngine.Vector3)">
      <summary>
        <para>Sets current texture coordinate (v.x,v.y,v.z) to the actual texture unit.</para>
      </summary>
      <param name="unit"></param>
      <param name="v"></param>
    </member>
    <member name="M:UnityEngine.GL.MultiTexCoord2(System.Int32,System.Single,System.Single)">
      <summary>
        <para>Sets current texture coordinate (x,y) for the actual texture unit.</para>
      </summary>
      <param name="unit"></param>
      <param name="x"></param>
      <param name="y"></param>
    </member>
    <member name="M:UnityEngine.GL.MultiTexCoord3(System.Int32,System.Single,System.Single,System.Single)">
      <summary>
        <para>Sets current texture coordinate (x,y,z) to the actual texture unit.</para>
      </summary>
      <param name="unit"></param>
      <param name="x"></param>
      <param name="y"></param>
      <param name="z"></param>
    </member>
    <member name="M:UnityEngine.GL.MultMatrix(UnityEngine.Matrix4x4)">
      <summary>
        <para>Sets the current model matrix to the one specified.</para>
      </summary>
      <param name="m"></param>
    </member>
    <member name="M:UnityEngine.GL.PopMatrix">
      <summary>
        <para>Restores the model, view and projection matrices off the top of the matrix stack.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.PushMatrix">
      <summary>
        <para>Saves the model, view and projection matrices to the top of the matrix stack.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.GL.QUADS">
      <summary>
        <para>Mode for Begin: draw quads.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.RenderTargetBarrier">
      <summary>
        <para>Resolves the render target for subsequent operations sampling from it.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.TexCoord(UnityEngine.Vector3)">
      <summary>
        <para>Sets current texture coordinate (v.x,v.y,v.z) for all texture units.</para>
      </summary>
      <param name="v"></param>
    </member>
    <member name="M:UnityEngine.GL.TexCoord2(System.Single,System.Single)">
      <summary>
        <para>Sets current texture coordinate (x,y) for all texture units.</para>
      </summary>
      <param name="x"></param>
      <param name="y"></param>
    </member>
    <member name="M:UnityEngine.GL.TexCoord3(System.Single,System.Single,System.Single)">
      <summary>
        <para>Sets current texture coordinate (x,y,z) for all texture units.</para>
      </summary>
      <param name="x"></param>
      <param name="y"></param>
      <param name="z"></param>
    </member>
    <member name="F:UnityEngine.GL.TRIANGLE_STRIP">
      <summary>
        <para>Mode for Begin: draw triangle strip.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.GL.TRIANGLES">
      <summary>
        <para>Mode for Begin: draw triangles.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.Vertex(UnityEngine.Vector3)">
      <summary>
        <para>Submit a vertex.</para>
      </summary>
      <param name="v"></param>
    </member>
    <member name="M:UnityEngine.GL.Vertex3(System.Single,System.Single,System.Single)">
      <summary>
        <para>Submit a vertex.</para>
      </summary>
      <param name="x"></param>
      <param name="y"></param>
      <param name="z"></param>
    </member>
    <member name="M:UnityEngine.GL.Viewport(UnityEngine.Rect)">
      <summary>
        <para>Set the rendering viewport.</para>
      </summary>
      <param name="pixelRect"></param>
    </member>
    <member name="T:UnityEngine.Gradient">
      <summary>
        <para>Gradient used for animating colors.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Gradient.alphaKeys">
      <summary>
        <para>All alpha keys defined in the gradient.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Gradient.colorKeys">
      <summary>
        <para>All color keys defined in the gradient.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Gradient.mode">
      <summary>
        <para>Control how the gradient is evaluated.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Gradient.#ctor">
      <summary>
        <para>Create a new Gradient object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Gradient.Evaluate(System.Single)">
      <summary>
        <para>Calculate color at a given time.</para>
      </summary>
      <param name="time">Time of the key (0 - 1).</param>
    </member>
    <member name="M:UnityEngine.Gradient.SetKeys(UnityEngine.GradientColorKey[],UnityEngine.GradientAlphaKey[])">
      <summary>
        <para>Setup Gradient with an array of color keys and alpha keys.</para>
      </summary>
      <param name="colorKeys">Color keys of the gradient (maximum 8 color keys).</param>
      <param name="alphaKeys">Alpha keys of the gradient (maximum 8 alpha keys).</param>
    </member>
    <member name="T:UnityEngine.GradientAlphaKey">
      <summary>
        <para>Alpha key used by Gradient.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.GradientAlphaKey.alpha">
      <summary>
        <para>Alpha channel of key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.GradientAlphaKey.time">
      <summary>
        <para>Time of the key (0 - 1).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GradientAlphaKey.#ctor(System.Single,System.Single)">
      <summary>
        <para>Gradient alpha key.</para>
      </summary>
      <param name="alpha">Alpha of key (0 - 1).</param>
      <param name="time">Time of the key (0 - 1).</param>
    </member>
    <member name="T:UnityEngine.GradientColorKey">
      <summary>
        <para>Color key used by Gradient.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.GradientColorKey.color">
      <summary>
        <para>Color of key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.GradientColorKey.time">
      <summary>
        <para>Time of the key (0 - 1).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GradientColorKey.#ctor(UnityEngine.Color,System.Single)">
      <summary>
        <para>Gradient color key.</para>
      </summary>
      <param name="color">Color of key.</param>
      <param name="time">Time of the key (0 - 1).</param>
      <param name="col"></param>
    </member>
    <member name="T:UnityEngine.GradientMode">
      <summary>
        <para>Select how gradients will be evaluated.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.GradientMode.Blend">
      <summary>
        <para>Find the 2 keys adjacent to the requested evaluation time, and linearly interpolate between them to obtain a blended color.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.GradientMode.Fixed">
      <summary>
        <para>Return a fixed color, by finding the first key whose time value is greater than the requested evaluation time.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.GradientUsageAttribute">
      <summary>
        <para>Attribute used to configure the usage of the GradientField and Gradient Editor for a gradient.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.GradientUsageAttribute.colorSpace">
      <summary>
        <para>The color space the Gradient uses.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.GradientUsageAttribute.hdr">
      <summary>
        <para>If set to true the Gradient uses HDR colors.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GradientUsageAttribute.#ctor(System.Boolean,UnityEngine.ColorSpace)">
      <summary>
        <para>Attribute for gradient fields. Used to configure the GUI for the Gradient Editor.</para>
      </summary>
      <param name="hdr">Set to true if the colors should be treated as HDR colors (default value: false).</param>
      <param name="colorSpace">The colors should be treated as from this color space (default value: ColorSpace.Gamma).</param>
    </member>
    <member name="T:UnityEngine.Graphics">
      <summary>
        <para>Raw interface to Unity's drawing functions.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Graphics.activeColorBuffer">
      <summary>
        <para>Currently active color buffer (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Graphics.activeColorGamut">
      <summary>
        <para>Returns the currently active color gamut.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Graphics.activeDepthBuffer">
      <summary>
        <para>Currently active depth/stencil buffer (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Graphics.activeTier">
      <summary>
        <para>The GraphicsTier classification for the current device.
Changing this value affects any subsequently loaded shaders. Initially Unity auto-detects this value from the hardware in use. Graphics Tiers are only available in the Built-in Render Pipeline.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Graphics.minOpenGLESVersion">
      <summary>
        <para>The minimum OpenGL ES version. The value is specified in PlayerSettings.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Graphics.preserveFramebufferAlpha">
      <summary>
        <para>True when rendering over native UI is enabled in Player Settings (readonly).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Graphics.Blit(UnityEngine.Texture,UnityEngine.RenderTexture)">
      <summary>
        <para>Copies source texture into destination render texture with a shader.</para>
      </summary>
      <param name="source">Source texture.</param>
      <param name="dest">The destination RenderTexture. Set this to null to blit directly to screen. See description for more information.</param>
      <param name="mat">Material to use. Material's shader could do some post-processing effect, for example.</param>
      <param name="pass">If -1 (default), draws all passes in the material. Otherwise, draws given pass only.</param>
      <param name="offset">Offset applied to the source texture coordinate.</param>
      <param name="scale">Scale applied to the source texture coordinate.</param>
      <param name="sourceDepthSlice">The texture array source slice to perform the blit from.</param>
      <param name="destDepthSlice">The texture array destination slice to perform the blit to.</param>
    </member>
    <member name="M:UnityEngine.Graphics.Blit(UnityEngine.Texture,UnityEngine.RenderTexture,UnityEngine.Material,System.Int32)">
      <summary>
        <para>Copies source texture into destination render texture with a shader.</para>
      </summary>
      <param name="source">Source texture.</param>
      <param name="dest">The destination RenderTexture. Set this to null to blit directly to screen. See description for more information.</param>
      <param name="mat">Material to use. Material's shader could do some post-processing effect, for example.</param>
      <param name="pass">If -1 (default), draws all passes in the material. Otherwise, draws given pass only.</param>
      <param name="offset">Offset applied to the source texture coordinate.</param>
      <param name="scale">Scale applied to the source texture coordinate.</param>
      <param name="sourceDepthSlice">The texture array source slice to perform the blit from.</param>
      <param name="destDepthSlice">The texture array destination slice to perform the blit to.</param>
    </member>
    <member name="M:UnityEngine.Graphics.Blit(UnityEngine.Texture,UnityEngine.Material,System.Int32)">
      <summary>
        <para>Copies source texture into destination render texture with a shader.</para>
      </summary>
      <param name="source">Source texture.</param>
      <param name="dest">The destination RenderTexture. Set this to null to blit directly to screen. See description for more information.</param>
      <param name="mat">Material to use. Material's shader could do some post-processing effect, for example.</param>
      <param name="pass">If -1 (default), draws all passes in the material. Otherwise, draws given pass only.</param>
      <param name="offset">Offset applied to the source texture coordinate.</param>
      <param name="scale">Scale applied to the source texture coordinate.</param>
      <param name="sourceDepthSlice">The texture array source slice to perform the blit from.</param>
      <param name="destDepthSlice">The texture array destination slice to perform the blit to.</param>
    </member>
    <member name="M:UnityEngine.Graphics.Blit(UnityEngine.Texture,UnityEngine.RenderTexture,UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Copies source texture into destination render texture with a shader.</para>
      </summary>
      <param name="source">Source texture.</param>
      <param name="dest">The destination RenderTexture. Set this to null to blit directly to screen. See description for more information.</param>
      <param name="mat">Material to use. Material's shader could do some post-processing effect, for example.</param>
      <param name="pass">If -1 (default), draws all passes in the material. Otherwise, draws given pass only.</param>
      <param name="offset">Offset applied to the source texture coordinate.</param>
      <param name="scale">Scale applied to the source texture coordinate.</param>
      <param name="sourceDepthSlice">The texture array source slice to perform the blit from.</param>
      <param name="destDepthSlice">The texture array destination slice to perform the blit to.</param>
    </member>
    <member name="M:UnityEngine.Graphics.Blit(UnityEngine.Texture,UnityEngine.RenderTexture,System.Int32,System.Int32)">
      <summary>
        <para>Copies source texture into destination render texture with a shader.</para>
      </summary>
      <param name="source">Source texture.</param>
      <param name="dest">The destination RenderTexture. Set this to null to blit directly to screen. See description for more information.</param>
      <param name="mat">Material to use. Material's shader could do some post-processing effect, for example.</param>
      <param name="pass">If -1 (default), draws all passes in the material. Otherwise, draws given pass only.</param>
      <param name="offset">Offset applied to the source texture coordinate.</param>
      <param name="scale">Scale applied to the source texture coordinate.</param>
      <param name="sourceDepthSlice">The texture array source slice to perform the blit from.</param>
      <param name="destDepthSlice">The texture array destination slice to perform the blit to.</param>
    </member>
    <member name="M:UnityEngine.Graphics.Blit(UnityEngine.Texture,UnityEngine.Material,System.Int32,System.Int32)">
      <summary>
        <para>Copies source texture into destination render texture with a shader.</para>
      </summary>
      <param name="source">Source texture.</param>
      <param name="dest">The destination RenderTexture. Set this to null to blit directly to screen. See description for more information.</param>
      <param name="mat">Material to use. Material's shader could do some post-processing effect, for example.</param>
      <param name="pass">If -1 (default), draws all passes in the material. Otherwise, draws given pass only.</param>
      <param name="offset">Offset applied to the source texture coordinate.</param>
      <param name="scale">Scale applied to the source texture coordinate.</param>
      <param name="sourceDepthSlice">The texture array source slice to perform the blit from.</param>
      <param name="destDepthSlice">The texture array destination slice to perform the blit to.</param>
    </member>
    <member name="M:UnityEngine.Graphics.Blit(UnityEngine.Texture,UnityEngine.RenderTexture,UnityEngine.Vector2,UnityEngine.Vector2,System.Int32,System.Int32)">
      <summary>
        <para>Copies source texture into destination render texture with a shader.</para>
      </summary>
      <param name="source">Source texture.</param>
      <param name="dest">The destination RenderTexture. Set this to null to blit directly to screen. See description for more information.</param>
      <param name="mat">Material to use. Material's shader could do some post-processing effect, for example.</param>
      <param name="pass">If -1 (default), draws all passes in the material. Otherwise, draws given pass only.</param>
      <param name="offset">Offset applied to the source texture coordinate.</param>
      <param name="scale">Scale applied to the source texture coordinate.</param>
      <param name="sourceDepthSlice">The texture array source slice to perform the blit from.</param>
      <param name="destDepthSlice">The texture array destination slice to perform the blit to.</param>
    </member>
    <member name="M:UnityEngine.Graphics.BlitMultiTap(UnityEngine.Texture,UnityEngine.RenderTexture,UnityEngine.Material,UnityEngine.Vector2[])">
      <summary>
        <para>Copies source texture into destination, for multi-tap shader.</para>
      </summary>
      <param name="source">Source texture.</param>
      <param name="dest">Destination RenderTexture, or null to blit directly to screen.</param>
      <param name="mat">Material to use for copying. Material's shader should do some post-processing effect.</param>
      <param name="offsets">Variable number of filtering offsets. Offsets are given in pixels.</param>
      <param name="destDepthSlice">The texture array destination slice to blit to.</param>
    </member>
    <member name="M:UnityEngine.Graphics.BlitMultiTap(UnityEngine.Texture,UnityEngine.RenderTexture,UnityEngine.Material,System.Int32,UnityEngine.Vector2[])">
      <summary>
        <para>Copies source texture into destination, for multi-tap shader.</para>
      </summary>
      <param name="source">Source texture.</param>
      <param name="dest">Destination RenderTexture, or null to blit directly to screen.</param>
      <param name="mat">Material to use for copying. Material's shader should do some post-processing effect.</param>
      <param name="offsets">Variable number of filtering offsets. Offsets are given in pixels.</param>
      <param name="destDepthSlice">The texture array destination slice to blit to.</param>
    </member>
    <member name="M:UnityEngine.Graphics.ClearRandomWriteTargets">
      <summary>
        <para>Clear random write targets for level pixel shaders.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Graphics.ConvertTexture(UnityEngine.Texture,UnityEngine.Texture)">
      <summary>
        <para>This function provides an efficient way to convert between textures of different formats and dimensions.
The destination texture format should be uncompressed and correspond to a supported RenderTextureFormat.</para>
      </summary>
      <param name="src">Source texture.</param>
      <param name="dst">Destination texture.</param>
      <param name="srcElement">Source element (e.g. cubemap face).  Set this to 0 for 2D source textures.</param>
      <param name="dstElement">Destination element (e.g. cubemap face or texture array element).</param>
      <returns>
        <para>True if the call succeeded.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Graphics.ConvertTexture(UnityEngine.Texture,System.Int32,UnityEngine.Texture,System.Int32)">
      <summary>
        <para>This function provides an efficient way to convert between textures of different formats and dimensions.
The destination texture format should be uncompressed and correspond to a supported RenderTextureFormat.</para>
      </summary>
      <param name="src">Source texture.</param>
      <param name="dst">Destination texture.</param>
      <param name="srcElement">Source element (e.g. cubemap face).  Set this to 0 for 2D source textures.</param>
      <param name="dstElement">Destination element (e.g. cubemap face or texture array element).</param>
      <returns>
        <para>True if the call succeeded.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Graphics.CopyTexture(UnityEngine.Texture,UnityEngine.Texture)">
      <summary>
        <para>Copy texture contents.</para>
      </summary>
      <param name="src">Source texture.</param>
      <param name="dst">Destination texture.</param>
      <param name="srcElement">Source texture element (cubemap face, texture array layer or 3D texture depth slice).</param>
      <param name="srcMip">Source texture mipmap level.</param>
      <param name="dstElement">Destination texture element (cubemap face, texture array layer or 3D texture depth slice).</param>
      <param name="dstMip">Destination texture mipmap level.</param>
      <param name="srcX">X coordinate of source texture region to copy (left side is zero).</param>
      <param name="srcY">Y coordinate of source texture region to copy (bottom is zero).</param>
      <param name="srcWidth">Width of source texture region to copy.</param>
      <param name="srcHeight">Height of source texture region to copy.</param>
      <param name="dstX">X coordinate of where to copy region in destination texture (left side is zero).</param>
      <param name="dstY">Y coordinate of where to copy region in destination texture (bottom is zero).</param>
    </member>
    <member name="M:UnityEngine.Graphics.CopyTexture(UnityEngine.Texture,System.Int32,System.Int32,UnityEngine.Texture,System.Int32,System.Int32)">
      <summary>
        <para>Copy texture contents.</para>
      </summary>
      <param name="src">Source texture.</param>
      <param name="dst">Destination texture.</param>
      <param name="srcElement">Source texture element (cubemap face, texture array layer or 3D texture depth slice).</param>
      <param name="srcMip">Source texture mipmap level.</param>
      <param name="dstElement">Destination texture element (cubemap face, texture array layer or 3D texture depth slice).</param>
      <param name="dstMip">Destination texture mipmap level.</param>
      <param name="srcX">X coordinate of source texture region to copy (left side is zero).</param>
      <param name="srcY">Y coordinate of source texture region to copy (bottom is zero).</param>
      <param name="srcWidth">Width of source texture region to copy.</param>
      <param name="srcHeight">Height of source texture region to copy.</param>
      <param name="dstX">X coordinate of where to copy region in destination texture (left side is zero).</param>
      <param name="dstY">Y coordinate of where to copy region in destination texture (bottom is zero).</param>
    </member>
    <member name="M:UnityEngine.Graphics.CopyTexture(UnityEngine.Texture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Texture,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Copy texture contents.</para>
      </summary>
      <param name="src">Source texture.</param>
      <param name="dst">Destination texture.</param>
      <param name="srcElement">Source texture element (cubemap face, texture array layer or 3D texture depth slice).</param>
      <param name="srcMip">Source texture mipmap level.</param>
      <param name="dstElement">Destination texture element (cubemap face, texture array layer or 3D texture depth slice).</param>
      <param name="dstMip">Destination texture mipmap level.</param>
      <param name="srcX">X coordinate of source texture region to copy (left side is zero).</param>
      <param name="srcY">Y coordinate of source texture region to copy (bottom is zero).</param>
      <param name="srcWidth">Width of source texture region to copy.</param>
      <param name="srcHeight">Height of source texture region to copy.</param>
      <param name="dstX">X coordinate of where to copy region in destination texture (left side is zero).</param>
      <param name="dstY">Y coordinate of where to copy region in destination texture (bottom is zero).</param>
    </member>
    <member name="M:UnityEngine.Graphics.CreateAsyncGraphicsFence(UnityEngine.Rendering.SynchronisationStage)">
      <summary>
        <para>Shortcut for calling Graphics.CreateGraphicsFence with GraphicsFenceType.AsyncQueueSynchronization as the first parameter.</para>
      </summary>
      <param name="stage">The synchronization stage. See Graphics.CreateGraphicsFence.</param>
      <returns>
        <para>Returns a new GraphicsFence.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Graphics.CreateAsyncGraphicsFence">
      <summary>
        <para>Shortcut for calling Graphics.CreateGraphicsFence with GraphicsFenceType.AsyncQueueSynchronization as the first parameter.</para>
      </summary>
      <param name="stage">The synchronization stage. See Graphics.CreateGraphicsFence.</param>
      <returns>
        <para>Returns a new GraphicsFence.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Graphics.CreateGPUFence(UnityEngine.Rendering.SynchronisationStage)">
      <summary>
        <para>This functionality is deprecated, and should no longer be used. Please use Graphics.CreateGraphicsFence.</para>
      </summary>
      <param name="stage"></param>
    </member>
    <member name="M:UnityEngine.Graphics.CreateGraphicsFence">
      <summary>
        <para>Creates a GraphicsFence which will be passed after the last Blit, Clear, Draw, Dispatch or Texture Copy command prior to this call has been completed on the GPU.</para>
      </summary>
      <param name="fenceType">The type of GraphicsFence to create. Currently the only supported value is GraphicsFenceType.AsyncQueueSynchronization.</param>
      <param name="stage">On some platforms there is a significant gap between the vertex processing completing and the pixel processing begining for a given draw call. This parameter allows for the fence to be passed after either the vertex or pixel processing for the proceeding draw has completed. If a compute shader dispatch was the last task submitted then this parameter is ignored.</param>
      <returns>
        <para>Returns a new GraphicsFence.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Graphics.DrawMesh(UnityEngine.Mesh,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Material,System.Int32,UnityEngine.Camera,System.Int32,UnityEngine.MaterialPropertyBlock,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        <para>Draw a mesh.</para>
      </summary>
      <param name="mesh">The Mesh to draw.</param>
      <param name="position">Position of the mesh.</param>
      <param name="rotation">Rotation of the mesh.</param>
      <param name="matrix">Transformation matrix of the mesh (combines position, rotation and other transformations).</param>
      <param name="material">Material to use.</param>
      <param name="layer"> to use.</param>
      <param name="camera">If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.</param>
      <param name="submeshIndex">Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.</param>
      <param name="properties">Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.</param>
      <param name="castShadows">Determines whether the mesh can cast shadows.</param>
      <param name="receiveShadows">Determines whether the mesh can receive shadows.</param>
      <param name="useLightProbes">Should the mesh use light probes?</param>
      <param name="probeAnchor">If used, the mesh will use this Transform's position to sample light probes and find the matching reflection probe.</param>
      <param name="lightProbeUsage">LightProbeUsage for the mesh.</param>
      <param name="lightProbeProxyVolume"></param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawMesh(UnityEngine.Mesh,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Material,System.Int32,UnityEngine.Camera,System.Int32,UnityEngine.MaterialPropertyBlock,UnityEngine.Rendering.ShadowCastingMode,System.Boolean,UnityEngine.Transform,System.Boolean)">
      <summary>
        <para>Draw a mesh.</para>
      </summary>
      <param name="mesh">The Mesh to draw.</param>
      <param name="position">Position of the mesh.</param>
      <param name="rotation">Rotation of the mesh.</param>
      <param name="matrix">Transformation matrix of the mesh (combines position, rotation and other transformations).</param>
      <param name="material">Material to use.</param>
      <param name="layer"> to use.</param>
      <param name="camera">If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.</param>
      <param name="submeshIndex">Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.</param>
      <param name="properties">Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.</param>
      <param name="castShadows">Determines whether the mesh can cast shadows.</param>
      <param name="receiveShadows">Determines whether the mesh can receive shadows.</param>
      <param name="useLightProbes">Should the mesh use light probes?</param>
      <param name="probeAnchor">If used, the mesh will use this Transform's position to sample light probes and find the matching reflection probe.</param>
      <param name="lightProbeUsage">LightProbeUsage for the mesh.</param>
      <param name="lightProbeProxyVolume"></param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawMesh(UnityEngine.Mesh,UnityEngine.Matrix4x4,UnityEngine.Material,System.Int32,UnityEngine.Camera,System.Int32,UnityEngine.MaterialPropertyBlock,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        <para>Draw a mesh.</para>
      </summary>
      <param name="mesh">The Mesh to draw.</param>
      <param name="position">Position of the mesh.</param>
      <param name="rotation">Rotation of the mesh.</param>
      <param name="matrix">Transformation matrix of the mesh (combines position, rotation and other transformations).</param>
      <param name="material">Material to use.</param>
      <param name="layer"> to use.</param>
      <param name="camera">If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.</param>
      <param name="submeshIndex">Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.</param>
      <param name="properties">Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.</param>
      <param name="castShadows">Determines whether the mesh can cast shadows.</param>
      <param name="receiveShadows">Determines whether the mesh can receive shadows.</param>
      <param name="useLightProbes">Should the mesh use light probes?</param>
      <param name="probeAnchor">If used, the mesh will use this Transform's position to sample light probes and find the matching reflection probe.</param>
      <param name="lightProbeUsage">LightProbeUsage for the mesh.</param>
      <param name="lightProbeProxyVolume"></param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawMesh(UnityEngine.Mesh,UnityEngine.Matrix4x4,UnityEngine.Material,System.Int32,UnityEngine.Camera,System.Int32,UnityEngine.MaterialPropertyBlock,UnityEngine.Rendering.ShadowCastingMode,System.Boolean,UnityEngine.Transform,System.Boolean)">
      <summary>
        <para>Draw a mesh.</para>
      </summary>
      <param name="mesh">The Mesh to draw.</param>
      <param name="position">Position of the mesh.</param>
      <param name="rotation">Rotation of the mesh.</param>
      <param name="matrix">Transformation matrix of the mesh (combines position, rotation and other transformations).</param>
      <param name="material">Material to use.</param>
      <param name="layer"> to use.</param>
      <param name="camera">If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.</param>
      <param name="submeshIndex">Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.</param>
      <param name="properties">Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.</param>
      <param name="castShadows">Determines whether the mesh can cast shadows.</param>
      <param name="receiveShadows">Determines whether the mesh can receive shadows.</param>
      <param name="useLightProbes">Should the mesh use light probes?</param>
      <param name="probeAnchor">If used, the mesh will use this Transform's position to sample light probes and find the matching reflection probe.</param>
      <param name="lightProbeUsage">LightProbeUsage for the mesh.</param>
      <param name="lightProbeProxyVolume"></param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawMesh(UnityEngine.Mesh,UnityEngine.Matrix4x4,UnityEngine.Material,System.Int32,UnityEngine.Camera,System.Int32,UnityEngine.MaterialPropertyBlock,UnityEngine.Rendering.ShadowCastingMode,System.Boolean,UnityEngine.Transform,UnityEngine.Rendering.LightProbeUsage)">
      <summary>
        <para>Draw a mesh.</para>
      </summary>
      <param name="mesh">The Mesh to draw.</param>
      <param name="position">Position of the mesh.</param>
      <param name="rotation">Rotation of the mesh.</param>
      <param name="matrix">Transformation matrix of the mesh (combines position, rotation and other transformations).</param>
      <param name="material">Material to use.</param>
      <param name="layer"> to use.</param>
      <param name="camera">If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.</param>
      <param name="submeshIndex">Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.</param>
      <param name="properties">Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.</param>
      <param name="castShadows">Determines whether the mesh can cast shadows.</param>
      <param name="receiveShadows">Determines whether the mesh can receive shadows.</param>
      <param name="useLightProbes">Should the mesh use light probes?</param>
      <param name="probeAnchor">If used, the mesh will use this Transform's position to sample light probes and find the matching reflection probe.</param>
      <param name="lightProbeUsage">LightProbeUsage for the mesh.</param>
      <param name="lightProbeProxyVolume"></param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawMesh(UnityEngine.Mesh,UnityEngine.Matrix4x4,UnityEngine.Material,System.Int32,UnityEngine.Camera,System.Int32,UnityEngine.MaterialPropertyBlock,UnityEngine.Rendering.ShadowCastingMode,System.Boolean,UnityEngine.Transform,UnityEngine.Rendering.LightProbeUsage,UnityEngine.LightProbeProxyVolume)">
      <summary>
        <para>Draw a mesh.</para>
      </summary>
      <param name="mesh">The Mesh to draw.</param>
      <param name="position">Position of the mesh.</param>
      <param name="rotation">Rotation of the mesh.</param>
      <param name="matrix">Transformation matrix of the mesh (combines position, rotation and other transformations).</param>
      <param name="material">Material to use.</param>
      <param name="layer"> to use.</param>
      <param name="camera">If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.</param>
      <param name="submeshIndex">Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.</param>
      <param name="properties">Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.</param>
      <param name="castShadows">Determines whether the mesh can cast shadows.</param>
      <param name="receiveShadows">Determines whether the mesh can receive shadows.</param>
      <param name="useLightProbes">Should the mesh use light probes?</param>
      <param name="probeAnchor">If used, the mesh will use this Transform's position to sample light probes and find the matching reflection probe.</param>
      <param name="lightProbeUsage">LightProbeUsage for the mesh.</param>
      <param name="lightProbeProxyVolume"></param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawMeshInstanced(UnityEngine.Mesh,System.Int32,UnityEngine.Material,UnityEngine.Matrix4x4[],System.Int32,UnityEngine.MaterialPropertyBlock,UnityEngine.Rendering.ShadowCastingMode,System.Boolean,System.Int32,UnityEngine.Camera,UnityEngine.Rendering.LightProbeUsage,UnityEngine.LightProbeProxyVolume)">
      <summary>
        <para>Draws the same mesh multiple times using GPU instancing.</para>
      </summary>
      <param name="mesh">The Mesh to draw.</param>
      <param name="submeshIndex">Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.</param>
      <param name="material">Material to use.</param>
      <param name="matrices">The array of object transformation matrices.</param>
      <param name="count">The number of instances to be drawn.</param>
      <param name="properties">Additional material properties to apply. See MaterialPropertyBlock.</param>
      <param name="castShadows">Determines whether the Meshes should cast shadows.</param>
      <param name="receiveShadows">Determines whether the Meshes should receive shadows.</param>
      <param name="layer"> to use.</param>
      <param name="camera">If null (default), the mesh will be drawn in all cameras. Otherwise it will be drawn in the given Camera only.</param>
      <param name="lightProbeUsage">LightProbeUsage for the instances.</param>
      <param name="lightProbeProxyVolume"></param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawMeshInstanced(UnityEngine.Mesh,System.Int32,UnityEngine.Material,System.Collections.Generic.List`1&lt;UnityEngine.Matrix4x4&gt;,UnityEngine.MaterialPropertyBlock,UnityEngine.Rendering.ShadowCastingMode,System.Boolean,System.Int32,UnityEngine.Camera,UnityEngine.Rendering.LightProbeUsage,UnityEngine.LightProbeProxyVolume)">
      <summary>
        <para>Draws the same mesh multiple times using GPU instancing.</para>
      </summary>
      <param name="mesh">The Mesh to draw.</param>
      <param name="submeshIndex">Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.</param>
      <param name="material">Material to use.</param>
      <param name="matrices">The array of object transformation matrices.</param>
      <param name="count">The number of instances to be drawn.</param>
      <param name="properties">Additional material properties to apply. See MaterialPropertyBlock.</param>
      <param name="castShadows">Determines whether the Meshes should cast shadows.</param>
      <param name="receiveShadows">Determines whether the Meshes should receive shadows.</param>
      <param name="layer"> to use.</param>
      <param name="camera">If null (default), the mesh will be drawn in all cameras. Otherwise it will be drawn in the given Camera only.</param>
      <param name="lightProbeUsage">LightProbeUsage for the instances.</param>
      <param name="lightProbeProxyVolume"></param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawMeshInstancedIndirect(UnityEngine.Mesh,System.Int32,UnityEngine.Material,UnityEngine.Bounds,UnityEngine.ComputeBuffer,System.Int32,UnityEngine.MaterialPropertyBlock,UnityEngine.Rendering.ShadowCastingMode,System.Boolean,System.Int32,UnityEngine.Camera,UnityEngine.Rendering.LightProbeUsage,UnityEngine.LightProbeProxyVolume)">
      <summary>
        <para>Draws the same mesh multiple times using GPU instancing.</para>
      </summary>
      <param name="mesh">The Mesh to draw.</param>
      <param name="submeshIndex">Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.</param>
      <param name="material">Material to use.</param>
      <param name="bounds">The bounding volume surrounding the instances you intend to draw.</param>
      <param name="bufferWithArgs">The GPU buffer containing the arguments for how many instances of this mesh to draw.</param>
      <param name="argsOffset">The byte offset into the buffer, where the draw arguments start.</param>
      <param name="properties">Additional material properties to apply. See MaterialPropertyBlock.</param>
      <param name="castShadows">Determines whether the mesh can cast shadows.</param>
      <param name="receiveShadows">Determines whether the mesh can receive shadows.</param>
      <param name="layer"> to use.</param>
      <param name="camera">If null (default), the mesh will be drawn in all cameras. Otherwise it will be drawn in the given Camera only.</param>
      <param name="lightProbeUsage">LightProbeUsage for the instances.</param>
      <param name="lightProbeProxyVolume"></param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawMeshInstancedIndirect(UnityEngine.Mesh,System.Int32,UnityEngine.Material,UnityEngine.Bounds,UnityEngine.GraphicsBuffer,System.Int32,UnityEngine.MaterialPropertyBlock,UnityEngine.Rendering.ShadowCastingMode,System.Boolean,System.Int32,UnityEngine.Camera,UnityEngine.Rendering.LightProbeUsage,UnityEngine.LightProbeProxyVolume)">
      <summary>
        <para>Draws the same mesh multiple times using GPU instancing.</para>
      </summary>
      <param name="mesh">The Mesh to draw.</param>
      <param name="submeshIndex">Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.</param>
      <param name="material">Material to use.</param>
      <param name="bounds">The bounding volume surrounding the instances you intend to draw.</param>
      <param name="bufferWithArgs">The GPU buffer containing the arguments for how many instances of this mesh to draw.</param>
      <param name="argsOffset">The byte offset into the buffer, where the draw arguments start.</param>
      <param name="properties">Additional material properties to apply. See MaterialPropertyBlock.</param>
      <param name="castShadows">Determines whether the mesh can cast shadows.</param>
      <param name="receiveShadows">Determines whether the mesh can receive shadows.</param>
      <param name="layer"> to use.</param>
      <param name="camera">If null (default), the mesh will be drawn in all cameras. Otherwise it will be drawn in the given Camera only.</param>
      <param name="lightProbeUsage">LightProbeUsage for the instances.</param>
      <param name="lightProbeProxyVolume"></param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawMeshInstancedProcedural(UnityEngine.Mesh,System.Int32,UnityEngine.Material,UnityEngine.Bounds,System.Int32,UnityEngine.MaterialPropertyBlock,UnityEngine.Rendering.ShadowCastingMode,System.Boolean,System.Int32,UnityEngine.Camera,UnityEngine.Rendering.LightProbeUsage,UnityEngine.LightProbeProxyVolume)">
      <summary>
        <para>Draws the same mesh multiple times using GPU instancing.
This is similar to Graphics.DrawMeshInstancedIndirect, except that when the instance count is known from script, it can be supplied directly using this method, rather than via a ComputeBuffer.</para>
      </summary>
      <param name="mesh">The Mesh to draw.</param>
      <param name="submeshIndex">Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.</param>
      <param name="material">Material to use.</param>
      <param name="bounds">The bounding volume surrounding the instances you intend to draw.</param>
      <param name="count">The number of instances to be drawn.</param>
      <param name="properties">Additional material properties to apply. See MaterialPropertyBlock.</param>
      <param name="castShadows">Determines whether the Meshes should cast shadows.</param>
      <param name="receiveShadows">Determines whether the Meshes should receive shadows.</param>
      <param name="layer"> to use.</param>
      <param name="camera">If null (default), the mesh will be drawn in all cameras. Otherwise it will be drawn in the given Camera only.</param>
      <param name="lightProbeUsage">LightProbeUsage for the instances.</param>
      <param name="lightProbeProxyVolume"></param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawMeshNow(UnityEngine.Mesh,UnityEngine.Vector3,UnityEngine.Quaternion)">
      <summary>
        <para>Draw a mesh immediately.</para>
      </summary>
      <param name="mesh">The Mesh to draw.</param>
      <param name="position">Position of the mesh.</param>
      <param name="rotation">Rotation of the mesh.</param>
      <param name="matrix">The transformation matrix of the mesh (combines position, rotation and other transformations).</param>
      <param name="materialIndex">Subset of the mesh to draw.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawMeshNow(UnityEngine.Mesh,UnityEngine.Vector3,UnityEngine.Quaternion,System.Int32)">
      <summary>
        <para>Draw a mesh immediately.</para>
      </summary>
      <param name="mesh">The Mesh to draw.</param>
      <param name="position">Position of the mesh.</param>
      <param name="rotation">Rotation of the mesh.</param>
      <param name="matrix">The transformation matrix of the mesh (combines position, rotation and other transformations).</param>
      <param name="materialIndex">Subset of the mesh to draw.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawMeshNow(UnityEngine.Mesh,UnityEngine.Matrix4x4)">
      <summary>
        <para>Draw a mesh immediately.</para>
      </summary>
      <param name="mesh">The Mesh to draw.</param>
      <param name="position">Position of the mesh.</param>
      <param name="rotation">Rotation of the mesh.</param>
      <param name="matrix">The transformation matrix of the mesh (combines position, rotation and other transformations).</param>
      <param name="materialIndex">Subset of the mesh to draw.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawMeshNow(UnityEngine.Mesh,UnityEngine.Matrix4x4,System.Int32)">
      <summary>
        <para>Draw a mesh immediately.</para>
      </summary>
      <param name="mesh">The Mesh to draw.</param>
      <param name="position">Position of the mesh.</param>
      <param name="rotation">Rotation of the mesh.</param>
      <param name="matrix">The transformation matrix of the mesh (combines position, rotation and other transformations).</param>
      <param name="materialIndex">Subset of the mesh to draw.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawProcedural(UnityEngine.Material,UnityEngine.Bounds,UnityEngine.MeshTopology,System.Int32,System.Int32,UnityEngine.Camera,UnityEngine.MaterialPropertyBlock,UnityEngine.Rendering.ShadowCastingMode,System.Boolean,System.Int32)">
      <summary>
        <para>Draws procedural geometry on the GPU.</para>
      </summary>
      <param name="material">Material to use.</param>
      <param name="bounds">The bounding volume surrounding the instances you intend to draw.</param>
      <param name="topology">Topology of the procedural geometry.</param>
      <param name="instanceCount">Instance count to render.</param>
      <param name="vertexCount">Vertex count to render.</param>
      <param name="camera">If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.</param>
      <param name="properties">Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.</param>
      <param name="castShadows">Determines whether the mesh can cast shadows.</param>
      <param name="receiveShadows">Determines whether the mesh can receive shadows.</param>
      <param name="layer"> to use.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawProcedural">
      <summary>
        <para>Draws procedural geometry on the GPU.</para>
      </summary>
      <param name="material">Material to use.</param>
      <param name="bounds">The bounding volume surrounding the instances you intend to draw.</param>
      <param name="topology">Topology of the procedural geometry.</param>
      <param name="instanceCount">Instance count to render.</param>
      <param name="vertexCount">Vertex count to render.</param>
      <param name="camera">If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.</param>
      <param name="properties">Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.</param>
      <param name="castShadows">Determines whether the mesh can cast shadows.</param>
      <param name="receiveShadows">Determines whether the mesh can receive shadows.</param>
      <param name="layer"> to use.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawProcedural">
      <summary>
        <para>Draws procedural geometry on the GPU.</para>
      </summary>
      <param name="material">Material to use.</param>
      <param name="bounds">The bounding volume surrounding the instances you intend to draw.</param>
      <param name="topology">Topology of the procedural geometry.</param>
      <param name="instanceCount">Instance count to render.</param>
      <param name="vertexCount">Vertex count to render.</param>
      <param name="camera">If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.</param>
      <param name="properties">Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.</param>
      <param name="castShadows">Determines whether the mesh can cast shadows.</param>
      <param name="receiveShadows">Determines whether the mesh can receive shadows.</param>
      <param name="layer"> to use.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawProcedural(UnityEngine.Material,UnityEngine.Bounds,UnityEngine.MeshTopology,UnityEngine.GraphicsBuffer,System.Int32,System.Int32,UnityEngine.Camera,UnityEngine.MaterialPropertyBlock,UnityEngine.Rendering.ShadowCastingMode,System.Boolean,System.Int32)">
      <summary>
        <para>Draws procedural geometry on the GPU.</para>
      </summary>
      <param name="material">Material to use.</param>
      <param name="bounds">The bounding volume surrounding the instances you intend to draw.</param>
      <param name="topology">Topology of the procedural geometry.</param>
      <param name="indexBuffer">Index buffer used to submit vertices to the GPU.</param>
      <param name="instanceCount">Instance count to render.</param>
      <param name="indexCount">Index count to render.</param>
      <param name="camera">If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.</param>
      <param name="properties">Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.</param>
      <param name="castShadows">Determines whether the mesh can cast shadows.</param>
      <param name="receiveShadows">Determines whether the mesh can receive shadows.</param>
      <param name="layer"> to use.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawProceduralIndirect(UnityEngine.Material,UnityEngine.Bounds,UnityEngine.MeshTopology,UnityEngine.ComputeBuffer,System.Int32,UnityEngine.Camera,UnityEngine.MaterialPropertyBlock,UnityEngine.Rendering.ShadowCastingMode,System.Boolean,System.Int32)">
      <summary>
        <para>Draws procedural geometry on the GPU.</para>
      </summary>
      <param name="material">Material to use.</param>
      <param name="bounds">The bounding volume surrounding the instances you intend to draw.</param>
      <param name="topology">Topology of the procedural geometry.</param>
      <param name="camera">If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.</param>
      <param name="bufferWithArgs">Buffer with draw arguments.</param>
      <param name="argsOffset">Byte offset where in the buffer the draw arguments are.</param>
      <param name="properties">Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.</param>
      <param name="castShadows">Determines whether the mesh can cast shadows.</param>
      <param name="receiveShadows">Determines whether the mesh can receive shadows.</param>
      <param name="layer"> to use.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawProceduralIndirect">
      <summary>
        <para>Draws procedural geometry on the GPU.</para>
      </summary>
      <param name="material">Material to use.</param>
      <param name="bounds">The bounding volume surrounding the instances you intend to draw.</param>
      <param name="topology">Topology of the procedural geometry.</param>
      <param name="camera">If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.</param>
      <param name="bufferWithArgs">Buffer with draw arguments.</param>
      <param name="argsOffset">Byte offset where in the buffer the draw arguments are.</param>
      <param name="properties">Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.</param>
      <param name="castShadows">Determines whether the mesh can cast shadows.</param>
      <param name="receiveShadows">Determines whether the mesh can receive shadows.</param>
      <param name="layer"> to use.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawProceduralIndirect">
      <summary>
        <para>Draws procedural geometry on the GPU.</para>
      </summary>
      <param name="material">Material to use.</param>
      <param name="bounds">The bounding volume surrounding the instances you intend to draw.</param>
      <param name="topology">Topology of the procedural geometry.</param>
      <param name="camera">If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.</param>
      <param name="bufferWithArgs">Buffer with draw arguments.</param>
      <param name="argsOffset">Byte offset where in the buffer the draw arguments are.</param>
      <param name="properties">Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.</param>
      <param name="castShadows">Determines whether the mesh can cast shadows.</param>
      <param name="receiveShadows">Determines whether the mesh can receive shadows.</param>
      <param name="layer"> to use.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawProceduralIndirect(UnityEngine.Material,UnityEngine.Bounds,UnityEngine.MeshTopology,UnityEngine.GraphicsBuffer,UnityEngine.ComputeBuffer,System.Int32,UnityEngine.Camera,UnityEngine.MaterialPropertyBlock,UnityEngine.Rendering.ShadowCastingMode,System.Boolean,System.Int32)">
      <summary>
        <para>Draws procedural geometry on the GPU.</para>
      </summary>
      <param name="material">Material to use.</param>
      <param name="bounds">The bounding volume surrounding the instances you intend to draw.</param>
      <param name="topology">Topology of the procedural geometry.</param>
      <param name="indexBuffer">Index buffer used to submit vertices to the GPU.</param>
      <param name="camera">If null (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given Camera only.</param>
      <param name="bufferWithArgs">Buffer with draw arguments.</param>
      <param name="argsOffset">Byte offset where in the buffer the draw arguments are.</param>
      <param name="properties">Additional material properties to apply onto material just before this mesh will be drawn. See MaterialPropertyBlock.</param>
      <param name="castShadows">Determines whether the mesh can cast shadows.</param>
      <param name="receiveShadows">Determines whether the mesh can receive shadows.</param>
      <param name="layer"> to use.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawProceduralIndirectNow(UnityEngine.MeshTopology,UnityEngine.ComputeBuffer,System.Int32)">
      <summary>
        <para>Draws procedural geometry on the GPU.</para>
      </summary>
      <param name="topology">Topology of the procedural geometry.</param>
      <param name="bufferWithArgs">Buffer with draw arguments.</param>
      <param name="argsOffset">Byte offset where in the buffer the draw arguments are.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawProceduralIndirectNow(UnityEngine.MeshTopology,UnityEngine.GraphicsBuffer,System.Int32)">
      <summary>
        <para>Draws procedural geometry on the GPU.</para>
      </summary>
      <param name="topology">Topology of the procedural geometry.</param>
      <param name="bufferWithArgs">Buffer with draw arguments.</param>
      <param name="argsOffset">Byte offset where in the buffer the draw arguments are.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawProceduralIndirectNow(UnityEngine.MeshTopology,UnityEngine.GraphicsBuffer,UnityEngine.ComputeBuffer,System.Int32)">
      <summary>
        <para>Draws procedural geometry on the GPU.</para>
      </summary>
      <param name="topology">Topology of the procedural geometry.</param>
      <param name="indexBuffer">Index buffer used to submit vertices to the GPU.</param>
      <param name="bufferWithArgs">Buffer with draw arguments.</param>
      <param name="argsOffset">Byte offset where in the buffer the draw arguments are.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawProceduralIndirectNow(UnityEngine.MeshTopology,UnityEngine.GraphicsBuffer,UnityEngine.GraphicsBuffer,System.Int32)">
      <summary>
        <para>Draws procedural geometry on the GPU.</para>
      </summary>
      <param name="topology">Topology of the procedural geometry.</param>
      <param name="indexBuffer">Index buffer used to submit vertices to the GPU.</param>
      <param name="bufferWithArgs">Buffer with draw arguments.</param>
      <param name="argsOffset">Byte offset where in the buffer the draw arguments are.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawProceduralNow(UnityEngine.MeshTopology,System.Int32,System.Int32)">
      <summary>
        <para>Draws procedural geometry on the GPU.</para>
      </summary>
      <param name="topology">Topology of the procedural geometry.</param>
      <param name="vertexCount">Vertex count to render.</param>
      <param name="instanceCount">Instance count to render.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawProceduralNow(UnityEngine.MeshTopology,UnityEngine.GraphicsBuffer,System.Int32,System.Int32)">
      <summary>
        <para>Draws procedural geometry on the GPU.</para>
      </summary>
      <param name="topology">Topology of the procedural geometry.</param>
      <param name="indexCount">Index count to render.</param>
      <param name="instanceCount">Instance count to render.</param>
      <param name="indexBuffer">Index buffer used to submit vertices to the GPU.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Material)">
      <summary>
        <para>Draw a texture in screen coordinates.</para>
      </summary>
      <param name="screenRect">Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.</param>
      <param name="texture">Texture to draw.</param>
      <param name="sourceRect">Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.</param>
      <param name="leftBorder">Number of pixels from the left that are not affected by scale.</param>
      <param name="rightBorder">Number of pixels from the right that are not affected by scale.</param>
      <param name="topBorder">Number of pixels from the top that are not affected by scale.</param>
      <param name="bottomBorder">Number of pixels from the bottom that are not affected by scale.</param>
      <param name="color">Color that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.</param>
      <param name="mat">Custom Material that can be used to draw the texture. If null is passed, a default material with the Internal-GUITexture.shader is used.</param>
      <param name="pass">If -1 (default), draws all passes in the material. Otherwise, draws given pass only.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Material,System.Int32)">
      <summary>
        <para>Draw a texture in screen coordinates.</para>
      </summary>
      <param name="screenRect">Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.</param>
      <param name="texture">Texture to draw.</param>
      <param name="sourceRect">Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.</param>
      <param name="leftBorder">Number of pixels from the left that are not affected by scale.</param>
      <param name="rightBorder">Number of pixels from the right that are not affected by scale.</param>
      <param name="topBorder">Number of pixels from the top that are not affected by scale.</param>
      <param name="bottomBorder">Number of pixels from the bottom that are not affected by scale.</param>
      <param name="color">Color that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.</param>
      <param name="mat">Custom Material that can be used to draw the texture. If null is passed, a default material with the Internal-GUITexture.shader is used.</param>
      <param name="pass">If -1 (default), draws all passes in the material. Otherwise, draws given pass only.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawTexture(UnityEngine.Rect,UnityEngine.Texture,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Material,System.Int32)">
      <summary>
        <para>Draw a texture in screen coordinates.</para>
      </summary>
      <param name="screenRect">Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.</param>
      <param name="texture">Texture to draw.</param>
      <param name="sourceRect">Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.</param>
      <param name="leftBorder">Number of pixels from the left that are not affected by scale.</param>
      <param name="rightBorder">Number of pixels from the right that are not affected by scale.</param>
      <param name="topBorder">Number of pixels from the top that are not affected by scale.</param>
      <param name="bottomBorder">Number of pixels from the bottom that are not affected by scale.</param>
      <param name="color">Color that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.</param>
      <param name="mat">Custom Material that can be used to draw the texture. If null is passed, a default material with the Internal-GUITexture.shader is used.</param>
      <param name="pass">If -1 (default), draws all passes in the material. Otherwise, draws given pass only.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Rect,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Material,System.Int32)">
      <summary>
        <para>Draw a texture in screen coordinates.</para>
      </summary>
      <param name="screenRect">Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.</param>
      <param name="texture">Texture to draw.</param>
      <param name="sourceRect">Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.</param>
      <param name="leftBorder">Number of pixels from the left that are not affected by scale.</param>
      <param name="rightBorder">Number of pixels from the right that are not affected by scale.</param>
      <param name="topBorder">Number of pixels from the top that are not affected by scale.</param>
      <param name="bottomBorder">Number of pixels from the bottom that are not affected by scale.</param>
      <param name="color">Color that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.</param>
      <param name="mat">Custom Material that can be used to draw the texture. If null is passed, a default material with the Internal-GUITexture.shader is used.</param>
      <param name="pass">If -1 (default), draws all passes in the material. Otherwise, draws given pass only.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Rect,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Color,UnityEngine.Material,System.Int32)">
      <summary>
        <para>Draw a texture in screen coordinates.</para>
      </summary>
      <param name="screenRect">Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.</param>
      <param name="texture">Texture to draw.</param>
      <param name="sourceRect">Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.</param>
      <param name="leftBorder">Number of pixels from the left that are not affected by scale.</param>
      <param name="rightBorder">Number of pixels from the right that are not affected by scale.</param>
      <param name="topBorder">Number of pixels from the top that are not affected by scale.</param>
      <param name="bottomBorder">Number of pixels from the bottom that are not affected by scale.</param>
      <param name="color">Color that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.</param>
      <param name="mat">Custom Material that can be used to draw the texture. If null is passed, a default material with the Internal-GUITexture.shader is used.</param>
      <param name="pass">If -1 (default), draws all passes in the material. Otherwise, draws given pass only.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawTexture(UnityEngine.Rect,UnityEngine.Texture,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Material)">
      <summary>
        <para>Draw a texture in screen coordinates.</para>
      </summary>
      <param name="screenRect">Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.</param>
      <param name="texture">Texture to draw.</param>
      <param name="sourceRect">Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.</param>
      <param name="leftBorder">Number of pixels from the left that are not affected by scale.</param>
      <param name="rightBorder">Number of pixels from the right that are not affected by scale.</param>
      <param name="topBorder">Number of pixels from the top that are not affected by scale.</param>
      <param name="bottomBorder">Number of pixels from the bottom that are not affected by scale.</param>
      <param name="color">Color that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.</param>
      <param name="mat">Custom Material that can be used to draw the texture. If null is passed, a default material with the Internal-GUITexture.shader is used.</param>
      <param name="pass">If -1 (default), draws all passes in the material. Otherwise, draws given pass only.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Rect,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Material)">
      <summary>
        <para>Draw a texture in screen coordinates.</para>
      </summary>
      <param name="screenRect">Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.</param>
      <param name="texture">Texture to draw.</param>
      <param name="sourceRect">Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.</param>
      <param name="leftBorder">Number of pixels from the left that are not affected by scale.</param>
      <param name="rightBorder">Number of pixels from the right that are not affected by scale.</param>
      <param name="topBorder">Number of pixels from the top that are not affected by scale.</param>
      <param name="bottomBorder">Number of pixels from the bottom that are not affected by scale.</param>
      <param name="color">Color that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.</param>
      <param name="mat">Custom Material that can be used to draw the texture. If null is passed, a default material with the Internal-GUITexture.shader is used.</param>
      <param name="pass">If -1 (default), draws all passes in the material. Otherwise, draws given pass only.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Rect,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Color,UnityEngine.Material)">
      <summary>
        <para>Draw a texture in screen coordinates.</para>
      </summary>
      <param name="screenRect">Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.</param>
      <param name="texture">Texture to draw.</param>
      <param name="sourceRect">Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.</param>
      <param name="leftBorder">Number of pixels from the left that are not affected by scale.</param>
      <param name="rightBorder">Number of pixels from the right that are not affected by scale.</param>
      <param name="topBorder">Number of pixels from the top that are not affected by scale.</param>
      <param name="bottomBorder">Number of pixels from the bottom that are not affected by scale.</param>
      <param name="color">Color that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.</param>
      <param name="mat">Custom Material that can be used to draw the texture. If null is passed, a default material with the Internal-GUITexture.shader is used.</param>
      <param name="pass">If -1 (default), draws all passes in the material. Otherwise, draws given pass only.</param>
    </member>
    <member name="M:UnityEngine.Graphics.ExecuteCommandBuffer(UnityEngine.Rendering.CommandBuffer)">
      <summary>
        <para>Execute a command buffer.</para>
      </summary>
      <param name="buffer">The buffer to execute.</param>
    </member>
    <member name="M:UnityEngine.Graphics.ExecuteCommandBufferAsync(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.ComputeQueueType)">
      <summary>
        <para>Executes a command buffer on an async compute queue with the queue selected based on the ComputeQueueType parameter passed.</para>
      </summary>
      <param name="buffer">The CommandBuffer to be executed.</param>
      <param name="queueType">Describes the desired async compute queue the supplied CommandBuffer should be executed on.</param>
    </member>
    <member name="M:UnityEngine.Graphics.SetRandomWriteTarget(System.Int32,UnityEngine.ComputeBuffer,System.Boolean)">
      <summary>
        <para>Set random write target for level pixel shaders.</para>
      </summary>
      <param name="index">Index of the random write target in the shader.</param>
      <param name="uav">Buffer or texture to set as the write target.</param>
      <param name="preserveCounterValue">Whether to leave the append/consume counter value unchanged.</param>
    </member>
    <member name="M:UnityEngine.Graphics.SetRandomWriteTarget(System.Int32,UnityEngine.GraphicsBuffer,System.Boolean)">
      <summary>
        <para>Set random write target for level pixel shaders.</para>
      </summary>
      <param name="index">Index of the random write target in the shader.</param>
      <param name="uav">Buffer or texture to set as the write target.</param>
      <param name="preserveCounterValue">Whether to leave the append/consume counter value unchanged.</param>
    </member>
    <member name="M:UnityEngine.Graphics.SetRandomWriteTarget(System.Int32,UnityEngine.RenderTexture)">
      <summary>
        <para>Set random write target for level pixel shaders.</para>
      </summary>
      <param name="index">Index of the random write target in the shader.</param>
      <param name="uav">Buffer or texture to set as the write target.</param>
      <param name="preserveCounterValue">Whether to leave the append/consume counter value unchanged.</param>
    </member>
    <member name="M:UnityEngine.Graphics.SetRenderTarget(UnityEngine.RenderTexture,System.Int32,UnityEngine.CubemapFace,System.Int32)">
      <summary>
        <para>Sets current render target.</para>
      </summary>
      <param name="rt">RenderTexture to set as active render target.</param>
      <param name="mipLevel">Mipmap level to render into (use 0 if not mipmapped).</param>
      <param name="face">Cubemap face to render into (use Unknown if not a cubemap).</param>
      <param name="depthSlice">Depth slice to render into (use 0 if not a 3D or 2DArray render target).</param>
      <param name="colorBuffer">Color buffer to render into.</param>
      <param name="depthBuffer">Depth buffer to render into.</param>
      <param name="colorBuffers">Color buffers to render into (for multiple render target effects).</param>
      <param name="setup">Full render target setup information.</param>
    </member>
    <member name="M:UnityEngine.Graphics.SetRenderTarget(UnityEngine.RenderBuffer[],UnityEngine.RenderBuffer)">
      <summary>
        <para>Sets current render target.</para>
      </summary>
      <param name="rt">RenderTexture to set as active render target.</param>
      <param name="mipLevel">Mipmap level to render into (use 0 if not mipmapped).</param>
      <param name="face">Cubemap face to render into (use Unknown if not a cubemap).</param>
      <param name="depthSlice">Depth slice to render into (use 0 if not a 3D or 2DArray render target).</param>
      <param name="colorBuffer">Color buffer to render into.</param>
      <param name="depthBuffer">Depth buffer to render into.</param>
      <param name="colorBuffers">Color buffers to render into (for multiple render target effects).</param>
      <param name="setup">Full render target setup information.</param>
    </member>
    <member name="M:UnityEngine.Graphics.SetRenderTarget(UnityEngine.RenderBuffer,UnityEngine.RenderBuffer,System.Int32,UnityEngine.CubemapFace,System.Int32)">
      <summary>
        <para>Sets current render target.</para>
      </summary>
      <param name="rt">RenderTexture to set as active render target.</param>
      <param name="mipLevel">Mipmap level to render into (use 0 if not mipmapped).</param>
      <param name="face">Cubemap face to render into (use Unknown if not a cubemap).</param>
      <param name="depthSlice">Depth slice to render into (use 0 if not a 3D or 2DArray render target).</param>
      <param name="colorBuffer">Color buffer to render into.</param>
      <param name="depthBuffer">Depth buffer to render into.</param>
      <param name="colorBuffers">Color buffers to render into (for multiple render target effects).</param>
      <param name="setup">Full render target setup information.</param>
    </member>
    <member name="M:UnityEngine.Graphics.SetRenderTarget(UnityEngine.RenderTargetSetup)">
      <summary>
        <para>Sets current render target.</para>
      </summary>
      <param name="rt">RenderTexture to set as active render target.</param>
      <param name="mipLevel">Mipmap level to render into (use 0 if not mipmapped).</param>
      <param name="face">Cubemap face to render into (use Unknown if not a cubemap).</param>
      <param name="depthSlice">Depth slice to render into (use 0 if not a 3D or 2DArray render target).</param>
      <param name="colorBuffer">Color buffer to render into.</param>
      <param name="depthBuffer">Depth buffer to render into.</param>
      <param name="colorBuffers">Color buffers to render into (for multiple render target effects).</param>
      <param name="setup">Full render target setup information.</param>
    </member>
    <member name="M:UnityEngine.Graphics.WaitOnAsyncGraphicsFence(UnityEngine.Rendering.GraphicsFence)">
      <summary>
        <para>Instructs the GPU's processing of the graphics queue to wait until the given GraphicsFence is passed.</para>
      </summary>
      <param name="fence">The GraphicsFence that the GPU will be instructed to wait upon before proceeding with its processing of the graphics queue.</param>
      <param name="stage">On some platforms there is a significant gap between the vertex processing completing and the pixel processing begining for a given draw call. This parameter allows for requested wait to be before the next items vertex or pixel processing begins. If a compute shader dispatch is the next item to be submitted then this parameter is ignored.</param>
    </member>
    <member name="M:UnityEngine.Graphics.WaitOnAsyncGraphicsFence(UnityEngine.Rendering.GraphicsFence,UnityEngine.Rendering.SynchronisationStage)">
      <summary>
        <para>Instructs the GPU's processing of the graphics queue to wait until the given GraphicsFence is passed.</para>
      </summary>
      <param name="fence">The GraphicsFence that the GPU will be instructed to wait upon before proceeding with its processing of the graphics queue.</param>
      <param name="stage">On some platforms there is a significant gap between the vertex processing completing and the pixel processing begining for a given draw call. This parameter allows for requested wait to be before the next items vertex or pixel processing begins. If a compute shader dispatch is the next item to be submitted then this parameter is ignored.</param>
    </member>
    <member name="M:UnityEngine.Graphics.WaitOnGPUFence(UnityEngine.Rendering.GPUFence,UnityEngine.Rendering.SynchronisationStage)">
      <summary>
        <para>This functionality is deprecated, and should no longer be used. Please use Graphics.WaitOnAsyncGraphicsFence.</para>
      </summary>
      <param name="fence"></param>
      <param name="stage"></param>
    </member>
    <member name="T:UnityEngine.GraphicsBuffer">
      <summary>
        <para>GPU graphics data buffer, for working with data such as vertex and index buffers.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GraphicsBuffer.count">
      <summary>
        <para>Number of elements in the buffer (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GraphicsBuffer.stride">
      <summary>
        <para>Size of one element in the buffer (Read Only).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GraphicsBuffer.CopyCount(UnityEngine.ComputeBuffer,UnityEngine.ComputeBuffer,System.Int32)">
      <summary>
        <para>Copy counter value of append/consume buffer into another buffer.</para>
      </summary>
      <param name="src"></param>
      <param name="dst"></param>
      <param name="dstOffsetBytes"></param>
    </member>
    <member name="M:UnityEngine.GraphicsBuffer.CopyCount(UnityEngine.GraphicsBuffer,UnityEngine.ComputeBuffer,System.Int32)">
      <summary>
        <para>Copy counter value of append/consume buffer into another buffer.</para>
      </summary>
      <param name="src"></param>
      <param name="dst"></param>
      <param name="dstOffsetBytes"></param>
    </member>
    <member name="M:UnityEngine.GraphicsBuffer.CopyCount(UnityEngine.ComputeBuffer,UnityEngine.GraphicsBuffer,System.Int32)">
      <summary>
        <para>Copy counter value of append/consume buffer into another buffer.</para>
      </summary>
      <param name="src"></param>
      <param name="dst"></param>
      <param name="dstOffsetBytes"></param>
    </member>
    <member name="M:UnityEngine.GraphicsBuffer.CopyCount(UnityEngine.GraphicsBuffer,UnityEngine.GraphicsBuffer,System.Int32)">
      <summary>
        <para>Copy counter value of append/consume buffer into another buffer.</para>
      </summary>
      <param name="src"></param>
      <param name="dst"></param>
      <param name="dstOffsetBytes"></param>
    </member>
    <member name="M:UnityEngine.GraphicsBuffer.#ctor(UnityEngine.GraphicsBuffer/Target,System.Int32,System.Int32)">
      <summary>
        <para>Create a Graphics Buffer.</para>
      </summary>
      <param name="target">Select whether this buffer can be used as a vertex or index buffer.</param>
      <param name="count">Number of elements in the buffer.</param>
      <param name="stride">Size of one element in the buffer. For index buffers, this must be either 2 or 4 bytes.</param>
    </member>
    <member name="M:UnityEngine.GraphicsBuffer.GetData(System.Array)">
      <summary>
        <para>Read data values from the buffer into an array. The array can only use &lt;a href="https:docs.microsoft.comen-usdotnetframeworkinteropblittable-and-non-blittable-types"&gt;blittable&lt;a&gt; types.</para>
      </summary>
      <param name="data">An array to receive the data.</param>
      <param name="managedBufferStartIndex">The first element index in data where retrieved elements are copied.</param>
      <param name="computeBufferStartIndex">The first element index of the buffer from which elements are read.</param>
      <param name="count">The number of elements to retrieve.</param>
    </member>
    <member name="M:UnityEngine.GraphicsBuffer.GetData(System.Array,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Read data values from the buffer into an array. The array can only use &lt;a href="https:docs.microsoft.comen-usdotnetframeworkinteropblittable-and-non-blittable-types"&gt;blittable&lt;a&gt; types.</para>
      </summary>
      <param name="data">An array to receive the data.</param>
      <param name="managedBufferStartIndex">The first element index in data where retrieved elements are copied.</param>
      <param name="computeBufferStartIndex">The first element index of the buffer from which elements are read.</param>
      <param name="count">The number of elements to retrieve.</param>
    </member>
    <member name="M:UnityEngine.GraphicsBuffer.GetNativeBufferPtr">
      <summary>
        <para>Retrieve a native (underlying graphics API) pointer to the buffer.</para>
      </summary>
      <returns>
        <para>Pointer to the underlying graphics API buffer.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GraphicsBuffer.IsValid">
      <summary>
        <para>Returns true if this graphics buffer is valid, or false otherwise.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GraphicsBuffer.Release">
      <summary>
        <para>Release a Graphics Buffer.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GraphicsBuffer.SetCounterValue(System.UInt32)">
      <summary>
        <para>Sets counter value of append/consume buffer.</para>
      </summary>
      <param name="counterValue">Value of the append/consume counter.</param>
    </member>
    <member name="M:UnityEngine.GraphicsBuffer.SetData(System.Array)">
      <summary>
        <para>Set the buffer with values from an array.</para>
      </summary>
      <param name="data">Array of values to fill the buffer.</param>
    </member>
    <member name="M:UnityEngine.GraphicsBuffer.SetData(System.Collections.Generic.List`1&lt;T&gt;)">
      <summary>
        <para>Set the buffer with values from an array.</para>
      </summary>
      <param name="data">Array of values to fill the buffer.</param>
    </member>
    <member name="M:UnityEngine.GraphicsBuffer.SetData(Unity.Collections.NativeArray`1&lt;T&gt;)">
      <summary>
        <para>Set the buffer with values from an array.</para>
      </summary>
      <param name="data">Array of values to fill the buffer.</param>
    </member>
    <member name="M:UnityEngine.GraphicsBuffer.SetData(System.Array,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Partial copy of data values from an array into the buffer.</para>
      </summary>
      <param name="data">Array of values to fill the buffer.</param>
      <param name="managedBufferStartIndex">The first element index in data to copy to the graphics buffer.</param>
      <param name="count">The number of elements to copy.</param>
      <param name="graphicsBufferStartIndex">The first element index in the graphics buffer to receive the data.</param>
      <param name="nativeBufferStartIndex"></param>
    </member>
    <member name="M:UnityEngine.GraphicsBuffer.SetData(System.Collections.Generic.List`1&lt;T&gt;,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Partial copy of data values from an array into the buffer.</para>
      </summary>
      <param name="data">Array of values to fill the buffer.</param>
      <param name="managedBufferStartIndex">The first element index in data to copy to the graphics buffer.</param>
      <param name="count">The number of elements to copy.</param>
      <param name="graphicsBufferStartIndex">The first element index in the graphics buffer to receive the data.</param>
      <param name="nativeBufferStartIndex"></param>
    </member>
    <member name="M:UnityEngine.GraphicsBuffer.SetData(Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Partial copy of data values from an array into the buffer.</para>
      </summary>
      <param name="data">Array of values to fill the buffer.</param>
      <param name="managedBufferStartIndex">The first element index in data to copy to the graphics buffer.</param>
      <param name="count">The number of elements to copy.</param>
      <param name="graphicsBufferStartIndex">The first element index in the graphics buffer to receive the data.</param>
      <param name="nativeBufferStartIndex"></param>
    </member>
    <member name="T:UnityEngine.GraphicsBuffer.Target">
      <summary>
        <para>The type of graphics buffer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.GraphicsBuffer.Target.Append">
      <summary>
        <para>GraphicsBuffer can be used as an append-consume buffer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.GraphicsBuffer.Target.Constant">
      <summary>
        <para>GraphicsBuffer can be used as a constant buffer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.GraphicsBuffer.Target.Counter">
      <summary>
        <para>GraphicsBuffer with an internal counter. See Also: GraphicsBuffer.SetCounterValue and GraphicsBuffer.CopyCount.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.GraphicsBuffer.Target.Index">
      <summary>
        <para>GraphicsBuffer can be used as an index buffer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.GraphicsBuffer.Target.IndirectArguments">
      <summary>
        <para>GraphicsBuffer can be used as an indirect argument buffer for indirect draws and dispatches.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.GraphicsBuffer.Target.Raw">
      <summary>
        <para>GraphicsBuffer can be used as a raw buffer (ByteAddressBuffer).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.GraphicsBuffer.Target.Structured">
      <summary>
        <para>GraphicsBuffer can be used as a structured buffer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.GraphicsBuffer.Target.Vertex">
      <summary>
        <para>GraphicsBuffer can be used to store vertex data.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Handheld">
      <summary>
        <para>Interface into functionality unique to handheld devices.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Handheld.use32BitDisplayBuffer">
      <summary>
        <para>Determines whether or not a 32-bit display buffer will be used.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Handheld.GetActivityIndicatorStyle">
      <summary>
        <para>Gets the current activity indicator style.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Handheld.PlayFullScreenMovie(System.String)">
      <summary>
        <para>Plays a full-screen movie.</para>
      </summary>
      <param name="path">Filesystem path to the movie file.</param>
      <param name="bgColor">Background color.</param>
      <param name="controlMode">How the playback controls are to be displayed.</param>
      <param name="scalingMode">How the movie is to be scaled to fit the screen.</param>
    </member>
    <member name="M:UnityEngine.Handheld.PlayFullScreenMovie(System.String,UnityEngine.Color)">
      <summary>
        <para>Plays a full-screen movie.</para>
      </summary>
      <param name="path">Filesystem path to the movie file.</param>
      <param name="bgColor">Background color.</param>
      <param name="controlMode">How the playback controls are to be displayed.</param>
      <param name="scalingMode">How the movie is to be scaled to fit the screen.</param>
    </member>
    <member name="M:UnityEngine.Handheld.PlayFullScreenMovie(System.String,UnityEngine.Color,UnityEngine.FullScreenMovieControlMode)">
      <summary>
        <para>Plays a full-screen movie.</para>
      </summary>
      <param name="path">Filesystem path to the movie file.</param>
      <param name="bgColor">Background color.</param>
      <param name="controlMode">How the playback controls are to be displayed.</param>
      <param name="scalingMode">How the movie is to be scaled to fit the screen.</param>
    </member>
    <member name="M:UnityEngine.Handheld.PlayFullScreenMovie(System.String,UnityEngine.Color,UnityEngine.FullScreenMovieControlMode,UnityEngine.FullScreenMovieScalingMode)">
      <summary>
        <para>Plays a full-screen movie.</para>
      </summary>
      <param name="path">Filesystem path to the movie file.</param>
      <param name="bgColor">Background color.</param>
      <param name="controlMode">How the playback controls are to be displayed.</param>
      <param name="scalingMode">How the movie is to be scaled to fit the screen.</param>
    </member>
    <member name="M:UnityEngine.Handheld.SetActivityIndicatorStyle">
      <summary>
        <para>Sets the desired activity indicator style.</para>
      </summary>
      <param name="style"></param>
    </member>
    <member name="M:UnityEngine.Handheld.SetActivityIndicatorStyle(UnityEngine.AndroidActivityIndicatorStyle)">
      <summary>
        <para>Sets the desired activity indicator style.</para>
      </summary>
      <param name="style"></param>
    </member>
    <member name="M:UnityEngine.Handheld.StartActivityIndicator">
      <summary>
        <para>Starts os activity indicator.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Handheld.StopActivityIndicator">
      <summary>
        <para>Stops os activity indicator.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Handheld.Vibrate">
      <summary>
        <para>Triggers device vibration.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Hash128">
      <summary>
        <para>Represents  a 128-bit hash value.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Hash128.isValid">
      <summary>
        <para>Returns true is the hash value is valid. (Read Only)</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Hash128.Append(System.Int32)">
      <summary>
        <para>Hash new input data and combine with the current hash value.</para>
      </summary>
      <param name="val">Input value.</param>
    </member>
    <member name="M:UnityEngine.Hash128.Append(System.Single)">
      <summary>
        <para>Hash new input data and combine with the current hash value.</para>
      </summary>
      <param name="val">Input value.</param>
    </member>
    <member name="M:UnityEngine.Hash128.Append(T&amp;)">
      <summary>
        <para>Hash new input data and combine with the current hash value.</para>
      </summary>
      <param name="val">Input value.</param>
    </member>
    <member name="M:UnityEngine.Hash128.Append(System.String)">
      <summary>
        <para>Hash new input string and combine with the current hash value.</para>
      </summary>
      <param name="data">Input data string. Note that Unity interprets the string as UTF-8 data, even if internally in C# strings are UTF-16.</param>
    </member>
    <member name="M:UnityEngine.Hash128.Append(T[])">
      <summary>
        <para>Hash new input data array and combine with the current hash value.</para>
      </summary>
      <param name="data">Input data array.</param>
    </member>
    <member name="M:UnityEngine.Hash128.Append(System.Collections.Generic.List`1&lt;T&gt;)">
      <summary>
        <para>Hash new input data array and combine with the current hash value.</para>
      </summary>
      <param name="data">Input data array.</param>
    </member>
    <member name="M:UnityEngine.Hash128.Append(Unity.Collections.NativeArray`1&lt;T&gt;)">
      <summary>
        <para>Hash new input data array and combine with the current hash value.</para>
      </summary>
      <param name="data">Input data array.</param>
    </member>
    <member name="M:UnityEngine.Hash128.Append(T[],System.Int32,System.Int32)">
      <summary>
        <para>Hash a slice of new input data array and combine with the current hash value.</para>
      </summary>
      <param name="data">Input data array.</param>
      <param name="start">The first element in the data to start hashing from.</param>
      <param name="count">Number of array elements to hash.</param>
    </member>
    <member name="M:UnityEngine.Hash128.Append(System.Collections.Generic.List`1&lt;T&gt;,System.Int32,System.Int32)">
      <summary>
        <para>Hash a slice of new input data array and combine with the current hash value.</para>
      </summary>
      <param name="data">Input data array.</param>
      <param name="start">The first element in the data to start hashing from.</param>
      <param name="count">Number of array elements to hash.</param>
    </member>
    <member name="M:UnityEngine.Hash128.Append(Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32,System.Int32)">
      <summary>
        <para>Hash a slice of new input data array and combine with the current hash value.</para>
      </summary>
      <param name="data">Input data array.</param>
      <param name="start">The first element in the data to start hashing from.</param>
      <param name="count">Number of array elements to hash.</param>
    </member>
    <member name="M:UnityEngine.Hash128.Append(System.Void*,System.UInt64)">
      <summary>
        <para>Hash new input data and combine with the current hash value.</para>
      </summary>
      <param name="data">Raw data pointer, usually used with C# stackalloc data.</param>
      <param name="size">Data size in bytes.</param>
    </member>
    <member name="M:UnityEngine.Hash128.Compute(T&amp;)">
      <summary>
        <para>Compute a hash of input data.</para>
      </summary>
      <param name="val">Input value.</param>
      <returns>
        <para>The 128-bit hash.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Hash128.Compute(System.Int32)">
      <summary>
        <para>Compute a hash of input data.</para>
      </summary>
      <param name="val">Input value.</param>
      <returns>
        <para>The 128-bit hash.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Hash128.Compute(System.Single)">
      <summary>
        <para>Compute a hash of input data.</para>
      </summary>
      <param name="val">Input value.</param>
      <returns>
        <para>The 128-bit hash.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Hash128.Compute(System.String)">
      <summary>
        <para>Compute a hash of input data string.</para>
      </summary>
      <param name="data">Input data string. Note that Unity interprets the string as UTF-8 data, even if internally in C# strings are UTF-16.</param>
      <returns>
        <para>The 128-bit hash.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Hash128.Compute(T[])">
      <summary>
        <para>Compute a hash of input data.</para>
      </summary>
      <param name="data">Input data array.</param>
      <returns>
        <para>The 128-bit hash.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Hash128.Compute(System.Collections.Generic.List`1&lt;T&gt;)">
      <summary>
        <para>Compute a hash of input data.</para>
      </summary>
      <param name="data">Input data array.</param>
      <returns>
        <para>The 128-bit hash.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Hash128.Compute(Unity.Collections.NativeArray`1&lt;T&gt;)">
      <summary>
        <para>Compute a hash of input data.</para>
      </summary>
      <param name="data">Input data array.</param>
      <returns>
        <para>The 128-bit hash.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Hash128.Compute(T[],System.Int32,System.Int32)">
      <summary>
        <para>Compute a hash of a slice of input data.</para>
      </summary>
      <param name="data">Input data array.</param>
      <param name="start">The first element in the data to start hashing from.</param>
      <param name="count">Number of array elements to hash.</param>
      <returns>
        <para>The 128-bit hash.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Hash128.Compute(System.Collections.Generic.List`1&lt;T&gt;,System.Int32,System.Int32)">
      <summary>
        <para>Compute a hash of a slice of input data.</para>
      </summary>
      <param name="data">Input data array.</param>
      <param name="start">The first element in the data to start hashing from.</param>
      <param name="count">Number of array elements to hash.</param>
      <returns>
        <para>The 128-bit hash.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Hash128.Compute(Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32,System.Int32)">
      <summary>
        <para>Compute a hash of a slice of input data.</para>
      </summary>
      <param name="data">Input data array.</param>
      <param name="start">The first element in the data to start hashing from.</param>
      <param name="count">Number of array elements to hash.</param>
      <returns>
        <para>The 128-bit hash.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Hash128.Compute(System.Void*,System.UInt64)">
      <summary>
        <para>Compute a hash of input data.</para>
      </summary>
      <param name="data">Raw data pointer, usually used with C# stackalloc data.</param>
      <param name="size">Data size in bytes.</param>
      <returns>
        <para>The 128-bit hash.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Hash128.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
      <summary>
        <para>Directly initialize a Hash128 with a 128-bit value.</para>
      </summary>
      <param name="u32_0">First 32 bits of hash value.</param>
      <param name="u32_1">Second 32 bits of hash value.</param>
      <param name="u32_2">Third 32 bits of hash value.</param>
      <param name="u32_3">Fourth 32 bits of hash value.</param>
      <param name="u64_0">First 64 bits of hash value.</param>
      <param name="u64_1">Second 64 bits of hash value.</param>
    </member>
    <member name="M:UnityEngine.Hash128.#ctor(System.UInt64,System.UInt64)">
      <summary>
        <para>Directly initialize a Hash128 with a 128-bit value.</para>
      </summary>
      <param name="u32_0">First 32 bits of hash value.</param>
      <param name="u32_1">Second 32 bits of hash value.</param>
      <param name="u32_2">Third 32 bits of hash value.</param>
      <param name="u32_3">Fourth 32 bits of hash value.</param>
      <param name="u64_0">First 64 bits of hash value.</param>
      <param name="u64_1">Second 64 bits of hash value.</param>
    </member>
    <member name="M:UnityEngine.Hash128.Parse(System.String)">
      <summary>
        <para>Convert a hex-encoded string into Hash128 value.</para>
      </summary>
      <param name="hashString">A hexadecimal-encoded hash string.</param>
      <returns>
        <para>The 128-bit hash.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Hash128.ToString">
      <summary>
        <para>Convert a Hash128 to string.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.HashUnsafeUtilities">
      <summary>
        <para>Utilities to compute hashes with unsafe code.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.HashUnsafeUtilities.ComputeHash128(System.Void*,System.UInt64,System.UInt64*,System.UInt64*)">
      <summary>
        <para>Compute a 128 bit hash based on a data.</para>
      </summary>
      <param name="data">Pointer to the data to hash.</param>
      <param name="dataSize">The number of bytes to hash.</param>
      <param name="hash1">A pointer to store the low 64 bits of the computed hash.</param>
      <param name="hash2">A pointer to store the high 64 bits of the computed hash.</param>
      <param name="hash">A pointer to the Hash128 to updated with the computed hash.</param>
    </member>
    <member name="M:UnityEngine.HashUnsafeUtilities.ComputeHash128(System.Void*,System.UInt64,UnityEngine.Hash128*)">
      <summary>
        <para>Compute a 128 bit hash based on a data.</para>
      </summary>
      <param name="data">Pointer to the data to hash.</param>
      <param name="dataSize">The number of bytes to hash.</param>
      <param name="hash1">A pointer to store the low 64 bits of the computed hash.</param>
      <param name="hash2">A pointer to store the high 64 bits of the computed hash.</param>
      <param name="hash">A pointer to the Hash128 to updated with the computed hash.</param>
    </member>
    <member name="T:UnityEngine.HashUtilities">
      <summary>
        <para>Utilities to compute hashes.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.HashUtilities.AppendHash(UnityEngine.Hash128&amp;,UnityEngine.Hash128&amp;)">
      <summary>
        <para>Append inHash in outHash.</para>
      </summary>
      <param name="inHash">Hash to append.</param>
      <param name="outHash">Hash that will be updated.</param>
    </member>
    <member name="M:UnityEngine.HashUtilities.ComputeHash128(System.Byte[],UnityEngine.Hash128&amp;)">
      <summary>
        <para>Compute a 128 bit hash based on a value. the type of the value must be a value type.</para>
      </summary>
      <param name="value">A reference to the value to hash.</param>
      <param name="hash">A reference to the Hash128 to updated with the computed hash.</param>
    </member>
    <member name="M:UnityEngine.HashUtilities.ComputeHash128(T&amp;,UnityEngine.Hash128&amp;)">
      <summary>
        <para>Compute a 128 bit hash based on a value. the type of the value must be a value type.</para>
      </summary>
      <param name="value">A reference to the value to hash.</param>
      <param name="hash">A reference to the Hash128 to updated with the computed hash.</param>
    </member>
    <member name="M:UnityEngine.HashUtilities.QuantisedMatrixHash(UnityEngine.Matrix4x4&amp;,UnityEngine.Hash128&amp;)">
      <summary>
        <para>Compute a Hash128 of a Matrix4x4.</para>
      </summary>
      <param name="value">The Matrix4x4 to hash.</param>
      <param name="hash">The computed hash.</param>
    </member>
    <member name="M:UnityEngine.HashUtilities.QuantisedVectorHash(UnityEngine.Vector3&amp;,UnityEngine.Hash128&amp;)">
      <summary>
        <para>Compute a Hash128 of a Vector3.</para>
      </summary>
      <param name="hash">The Vector3 to hash.</param>
      <param name="value">The computed hash.</param>
    </member>
    <member name="T:UnityEngine.HDRDisplaySupportFlags">
      <summary>
        <para>A set of flags that describe the level of HDR display support available on the system.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HDRDisplaySupportFlags.AutomaticTonemapping">
      <summary>
        <para>Flag used to denote if the system supports automatic tonemapping to HDR displays.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HDRDisplaySupportFlags.None">
      <summary>
        <para>Flag used to denote that support for HDR displays is not available on the system.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HDRDisplaySupportFlags.RuntimeSwitchable">
      <summary>
        <para>Flag used to denote that the system can change whether output is performed in HDR or SDR ranges at runtime when connected to an HDR display.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HDRDisplaySupportFlags.Supported">
      <summary>
        <para>Flag used to denote that support for HDR displays is available on the system.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.HDROutputSettings">
      <summary>
        <para>Provides access to HDR display settings and information.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HDROutputSettings.active">
      <summary>
        <para>Describes whether HDR output is currently active on the display. It is true if this is the case, and @@false@ otherwise.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HDROutputSettings.automaticHDRTonemapping">
      <summary>
        <para>Describes whether Unity performs HDR tonemapping automatically.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HDROutputSettings.available">
      <summary>
        <para>Describes whether HDR is currently available on your primary display and that you have HDR enabled in your Unity Project. It is true if this is the case, and false otherwise.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HDROutputSettings.displayColorGamut">
      <summary>
        <para>The ColorGamut used to output to the active HDR display.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HDROutputSettings.displays">
      <summary>
        <para>The list of currently connected displays with possible HDR availability.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HDROutputSettings.format">
      <summary>
        <para>The RenderTextureFormat of the display buffer for the active HDR display.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HDROutputSettings.graphicsFormat">
      <summary>
        <para>The Experimental.Rendering.GraphicsFormat of the display buffer for the active HDR display.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HDROutputSettings.main">
      <summary>
        <para>The HDROutputSettings for the main display.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HDROutputSettings.maxFullFrameToneMapLuminance">
      <summary>
        <para>Maximum input luminance at which gradation is preserved even when the entire screen is bright.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HDROutputSettings.maxToneMapLuminance">
      <summary>
        <para>Maximum input luminance at which gradation is preserved when 10% of the screen is bright.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HDROutputSettings.minToneMapLuminance">
      <summary>
        <para>Minimum input luminance at which gradation is identifiable.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HDROutputSettings.paperWhiteNits">
      <summary>
        <para>The base luminance of a white paper surface in nits or candela per square meter (cd/m2).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HDROutputSettings.HDRModeChangeRequested">
      <summary>
        <para>Describes whether the user has requested to change the HDR Output Mode. It is true if this is the case, and false otherwise.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.HDROutputSettings.RequestHDRModeChange(System.Boolean)">
      <summary>
        <para>Use this function to request a change in the HDR Output Mode and in the value of HDROutputSettings.active.</para>
      </summary>
      <param name="enabled">Indicates whether HDR should be enabled.</param>
    </member>
    <member name="M:UnityEngine.HDROutputSettings.SetPaperWhiteInNits(System.Single)">
      <summary>
        <para>Sets the base luminance of a white paper surface in nits or candela per square meter (cd/m2).</para>
      </summary>
      <param name="paperWhite">The brightness of paper white in nits.</param>
    </member>
    <member name="T:UnityEngine.HeaderAttribute">
      <summary>
        <para>Use this PropertyAttribute to add a header above some fields in the Inspector.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HeaderAttribute.header">
      <summary>
        <para>The header text.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.HeaderAttribute.#ctor(System.String)">
      <summary>
        <para>Add a header above some fields in the Inspector.</para>
      </summary>
      <param name="header">The header text.</param>
    </member>
    <member name="T:UnityEngine.HelpURLAttribute">
      <summary>
        <para>Provide a custom documentation URL for a class.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.HelpURLAttribute.#ctor(System.String)">
      <summary>
        <para>Initialize the HelpURL attribute with a documentation url.</para>
      </summary>
      <param name="url">The custom documentation URL for this class.</param>
    </member>
    <member name="P:UnityEngine.HelpURLAttribute.URL">
      <summary>
        <para>The documentation URL specified for this class.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.HideFlags">
      <summary>
        <para>Bit mask that controls object destruction, saving and visibility in inspectors.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HideFlags.DontSave">
      <summary>
        <para>The object will not be saved to the Scene. It will not be destroyed when a new Scene is loaded. It is a shortcut for HideFlags.DontSaveInBuild | HideFlags.DontSaveInEditor | HideFlags.DontUnloadUnusedAsset.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HideFlags.DontSaveInBuild">
      <summary>
        <para>The object will not be saved when building a player.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HideFlags.DontSaveInEditor">
      <summary>
        <para>The object will not be saved to the Scene in the editor.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HideFlags.DontUnloadUnusedAsset">
      <summary>
        <para>The object will not be unloaded by Resources.UnloadUnusedAssets.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HideFlags.HideAndDontSave">
      <summary>
        <para>The GameObject is not shown in the Hierarchy, not saved to to Scenes, and not unloaded by Resources.UnloadUnusedAssets.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HideFlags.HideInHierarchy">
      <summary>
        <para>The object will not appear in the hierarchy.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HideFlags.HideInInspector">
      <summary>
        <para>It is not possible to view it in the inspector.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HideFlags.None">
      <summary>
        <para>A normal, visible object. This is the default.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HideFlags.NotEditable">
      <summary>
        <para>The object will not be editable in the inspector.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.HideInInspector">
      <summary>
        <para>Makes a variable not show up in the inspector but be serialized.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.HostData">
      <summary>
        <para>This is the data structure for holding individual host information.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HostData.comment">
      <summary>
        <para>A miscellaneous comment (can hold data).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HostData.connectedPlayers">
      <summary>
        <para>Currently connected players.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HostData.gameName">
      <summary>
        <para>The name of the game (like John Doe's Game).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HostData.gameType">
      <summary>
        <para>The type of the game (like "MyUniqueGameType").</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HostData.guid">
      <summary>
        <para>The GUID of the host, needed when connecting with NAT punchthrough.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HostData.ip">
      <summary>
        <para>Server IP address.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HostData.passwordProtected">
      <summary>
        <para>Does the server require a password?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HostData.playerLimit">
      <summary>
        <para>Maximum players limit.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HostData.port">
      <summary>
        <para>Server port.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HostData.useNat">
      <summary>
        <para>Does this server require NAT punchthrough?</para>
      </summary>
    </member>
    <member name="?:UnityEngine.IExposedPropertyTable">
      <summary>
        <para>Interface for objects used as resolvers on ExposedReferences.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.IExposedPropertyTable.ClearReferenceValue(UnityEngine.PropertyName)">
      <summary>
        <para>Remove a value for the given reference.</para>
      </summary>
      <param name="id">Identifier of the ExposedReference.</param>
    </member>
    <member name="M:UnityEngine.IExposedPropertyTable.GetReferenceValue(UnityEngine.PropertyName,System.Boolean&amp;)">
      <summary>
        <para>Retrieves a value for the given identifier.</para>
      </summary>
      <param name="id">Identifier of the ExposedReference.</param>
      <param name="idValid">Is the identifier valid?</param>
      <returns>
        <para>The value stored in the table.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.IExposedPropertyTable.SetReferenceValue(UnityEngine.PropertyName,UnityEngine.Object)">
      <summary>
        <para>Assigns a value for an ExposedReference.</para>
      </summary>
      <param name="id">Identifier of the ExposedReference.</param>
      <param name="value">The value to assigned to the ExposedReference.</param>
    </member>
    <member name="?:UnityEngine.ILogger">
      <summary>
        <para>Interface for custom logger implementation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ILogger.filterLogType">
      <summary>
        <para>To selective enable debug log message.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ILogger.logEnabled">
      <summary>
        <para>To runtime toggle debug logging [ON/OFF].</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ILogger.logHandler">
      <summary>
        <para>Set Logger.ILogHandler.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ILogger.IsLogTypeAllowed(UnityEngine.LogType)">
      <summary>
        <para>Check logging is enabled based on the LogType.</para>
      </summary>
      <param name="logType"></param>
      <returns>
        <para>Retrun true in case logs of LogType will be logged otherwise returns false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.ILogger.Log(UnityEngine.LogType,System.Object)">
      <summary>
        <para>Logs message to the Unity Console using default logger.</para>
      </summary>
      <param name="logType"></param>
      <param name="message"></param>
      <param name="context"></param>
      <param name="tag"></param>
    </member>
    <member name="M:UnityEngine.ILogger.Log(UnityEngine.LogType,System.Object,UnityEngine.Object)">
      <summary>
        <para>Logs message to the Unity Console using default logger.</para>
      </summary>
      <param name="logType"></param>
      <param name="message"></param>
      <param name="context"></param>
      <param name="tag"></param>
    </member>
    <member name="M:UnityEngine.ILogger.Log(UnityEngine.LogType,System.String,System.Object)">
      <summary>
        <para>Logs message to the Unity Console using default logger.</para>
      </summary>
      <param name="logType"></param>
      <param name="message"></param>
      <param name="context"></param>
      <param name="tag"></param>
    </member>
    <member name="M:UnityEngine.ILogger.Log(UnityEngine.LogType,System.String,System.Object,UnityEngine.Object)">
      <summary>
        <para>Logs message to the Unity Console using default logger.</para>
      </summary>
      <param name="logType"></param>
      <param name="message"></param>
      <param name="context"></param>
      <param name="tag"></param>
    </member>
    <member name="M:UnityEngine.ILogger.Log(System.Object)">
      <summary>
        <para>Logs message to the Unity Console using default logger.</para>
      </summary>
      <param name="logType"></param>
      <param name="message"></param>
      <param name="context"></param>
      <param name="tag"></param>
    </member>
    <member name="M:UnityEngine.ILogger.Log(System.String,System.Object)">
      <summary>
        <para>Logs message to the Unity Console using default logger.</para>
      </summary>
      <param name="logType"></param>
      <param name="message"></param>
      <param name="context"></param>
      <param name="tag"></param>
    </member>
    <member name="M:UnityEngine.ILogger.Log(System.String,System.Object,UnityEngine.Object)">
      <summary>
        <para>Logs message to the Unity Console using default logger.</para>
      </summary>
      <param name="logType"></param>
      <param name="message"></param>
      <param name="context"></param>
      <param name="tag"></param>
    </member>
    <member name="M:UnityEngine.ILogger.LogError(System.String,System.Object)">
      <summary>
        <para>A variant of ILogger.Log that logs an error message.</para>
      </summary>
      <param name="tag"></param>
      <param name="message"></param>
      <param name="context"></param>
    </member>
    <member name="M:UnityEngine.ILogger.LogError(System.String,System.Object,UnityEngine.Object)">
      <summary>
        <para>A variant of ILogger.Log that logs an error message.</para>
      </summary>
      <param name="tag"></param>
      <param name="message"></param>
      <param name="context"></param>
    </member>
    <member name="M:UnityEngine.ILogger.LogException(System.Exception)">
      <summary>
        <para>A variant of ILogger.Log that logs an exception message.</para>
      </summary>
      <param name="exception"></param>
    </member>
    <member name="M:UnityEngine.ILogger.LogFormat(UnityEngine.LogType,System.String,System.Object[])">
      <summary>
        <para>Logs a formatted message.</para>
      </summary>
      <param name="logType"></param>
      <param name="format"></param>
      <param name="args"></param>
    </member>
    <member name="M:UnityEngine.ILogger.LogWarning(System.String,System.Object)">
      <summary>
        <para>A variant of Logger.Log that logs an warning message.</para>
      </summary>
      <param name="tag"></param>
      <param name="message"></param>
      <param name="context"></param>
    </member>
    <member name="M:UnityEngine.ILogger.LogWarning(System.String,System.Object,UnityEngine.Object)">
      <summary>
        <para>A variant of Logger.Log that logs an warning message.</para>
      </summary>
      <param name="tag"></param>
      <param name="message"></param>
      <param name="context"></param>
    </member>
    <member name="?:UnityEngine.ILogHandler">
      <summary>
        <para>Interface for custom log handler implementation.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ILogHandler.LogException(System.Exception,UnityEngine.Object)">
      <summary>
        <para>A variant of ILogHandler.LogFormat that logs an exception message.</para>
      </summary>
      <param name="exception">Runtime Exception.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="M:UnityEngine.ILogHandler.LogFormat(UnityEngine.LogType,UnityEngine.Object,System.String,System.Object[])">
      <summary>
        <para>Logs a formatted message.</para>
      </summary>
      <param name="logType">The type of the log message.</param>
      <param name="context">Object to which the message applies.</param>
      <param name="format">A composite format string.</param>
      <param name="args">Format arguments.</param>
    </member>
    <member name="T:UnityEngine.ImageEffectAfterScale">
      <summary>
        <para>Any Image Effect with this attribute will be rendered after Dynamic Resolution stage.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ImageEffectAllowedInSceneView">
      <summary>
        <para>Any Image Effect with this attribute can be rendered into the Scene view camera.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ImageEffectOpaque">
      <summary>
        <para>Any Image Effect with this attribute will be rendered after opaque geometry but before transparent geometry.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ImageEffectTransformsToLDR">
      <summary>
        <para>When using HDR rendering it can sometime be desirable to switch to LDR rendering during ImageEffect rendering.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ImageEffectUsesCommandBuffer">
      <summary>
        <para>Use this attribute when image effects are implemented using Command Buffers.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.InspectorNameAttribute">
      <summary>
        <para>Use this attribute on enum value declarations to change the display name shown in the Inspector.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.InspectorNameAttribute.displayName">
      <summary>
        <para>Name to display in the Inspector.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.InspectorNameAttribute.#ctor(System.String)">
      <summary>
        <para>Specify a display name for an enum value.</para>
      </summary>
      <param name="displayName">The name to display.</param>
    </member>
    <member name="T:UnityEngine.iOS.ActivityIndicatorStyle">
      <summary>
        <para>ActivityIndicator Style (iOS Specific).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.ActivityIndicatorStyle.DontShow">
      <summary>
        <para>Do not show ActivityIndicator.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.ActivityIndicatorStyle.Gray">
      <summary>
        <para>The standard gray style of indicator (UIActivityIndicatorViewStyleGray).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.ActivityIndicatorStyle.White">
      <summary>
        <para>The standard white style of indicator (UIActivityIndicatorViewStyleWhite).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.ActivityIndicatorStyle.WhiteLarge">
      <summary>
        <para>The large white style of indicator (UIActivityIndicatorViewStyleWhiteLarge).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.iOS.ADBannerView">
      <summary>
        <para>ADBannerView is a wrapper around the ADBannerView class found in the Apple iAd framework and is only available on iOS.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.ADBannerView.layout">
      <summary>
        <para>Banner layout.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.ADBannerView.loaded">
      <summary>
        <para>Checks if banner contents are loaded.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.ADBannerView.position">
      <summary>
        <para>The position of the banner view.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.ADBannerView.size">
      <summary>
        <para>The size of the banner view.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.ADBannerView.visible">
      <summary>
        <para>Banner visibility. Initially banner is not visible.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.iOS.ADBannerView.BannerFailedToLoadDelegate">
      <summary>
        <para>Will be fired when banner ad failed to load.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.iOS.ADBannerView.BannerWasClickedDelegate">
      <summary>
        <para>Will be fired when banner was clicked.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.iOS.ADBannerView.BannerWasLoadedDelegate">
      <summary>
        <para>Will be fired when banner loaded new ad.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.iOS.ADBannerView.#ctor(UnityEngine.iOS.ADBannerView/Type,UnityEngine.iOS.ADBannerView/Layout)">
      <summary>
        <para>Creates a banner view with given type and auto-layout params.</para>
      </summary>
      <param name="type"></param>
      <param name="layout"></param>
    </member>
    <member name="M:UnityEngine.iOS.ADBannerView.IsAvailable(UnityEngine.iOS.ADBannerView/Type)">
      <summary>
        <para>Checks if the banner type is available (e.g. MediumRect is available only starting with ios6).</para>
      </summary>
      <param name="type"></param>
    </member>
    <member name="T:UnityEngine.iOS.ADBannerView.Layout">
      <summary>
        <para>Specifies how banner should be layed out on screen.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.ADBannerView.Layout.Bottom">
      <summary>
        <para>Traditional Banner: align to screen bottom.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.ADBannerView.Layout.BottomCenter">
      <summary>
        <para>Rect Banner: align to screen bottom, placing at the center.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.ADBannerView.Layout.BottomLeft">
      <summary>
        <para>Rect Banner: place in bottom-left corner.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.ADBannerView.Layout.BottomRight">
      <summary>
        <para>Rect Banner: place in bottom-right corner.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.ADBannerView.Layout.Center">
      <summary>
        <para>Rect Banner: place exactly at screen center.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.ADBannerView.Layout.CenterLeft">
      <summary>
        <para>Rect Banner: align to screen left, placing at the center.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.ADBannerView.Layout.CenterRight">
      <summary>
        <para>Rect Banner: align to screen right, placing at the center.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.ADBannerView.Layout.Manual">
      <summary>
        <para>Completely manual positioning.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.ADBannerView.Layout.Top">
      <summary>
        <para>Traditional Banner: align to screen top.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.ADBannerView.Layout.TopCenter">
      <summary>
        <para>Rect Banner: align to screen top, placing at the center.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.ADBannerView.Layout.TopLeft">
      <summary>
        <para>Rect Banner: place in top-left corner.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.ADBannerView.Layout.TopRight">
      <summary>
        <para>Rect Banner: place in top-right corner.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.iOS.ADBannerView.Type">
      <summary>
        <para>The type of the banner view.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.ADBannerView.Type.Banner">
      <summary>
        <para>Traditional Banner (it takes full screen width).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.ADBannerView.Type.MediumRect">
      <summary>
        <para>Rect Banner (300x250).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.iOS.ADInterstitialAd">
      <summary>
        <para>ADInterstitialAd is a wrapper around the ADInterstitialAd class found in the Apple iAd framework and is only available on iPad.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.ADInterstitialAd.isAvailable">
      <summary>
        <para>Checks if InterstitialAd is available (it is available on iPad since iOS 4.3, and on iPhone since iOS 7.0).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.ADInterstitialAd.loaded">
      <summary>
        <para>Has the interstitial ad object downloaded an advertisement? (Read Only)</para>
      </summary>
    </member>
    <member name="M:UnityEngine.iOS.ADInterstitialAd.#ctor">
      <summary>
        <para>Creates an interstitial ad.</para>
      </summary>
      <param name="autoReload"></param>
    </member>
    <member name="M:UnityEngine.iOS.ADInterstitialAd.#ctor(System.Boolean)">
      <summary>
        <para>Creates an interstitial ad.</para>
      </summary>
      <param name="autoReload"></param>
    </member>
    <member name="T:UnityEngine.iOS.ADInterstitialAd.InterstitialWasLoadedDelegate">
      <summary>
        <para>Will be called when ad is ready to be shown.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.iOS.ADInterstitialAd.InterstitialWasViewedDelegate">
      <summary>
        <para>Will be called when user viewed ad contents: i.e. they went past the initial screen. Please note that it is impossible to determine if they clicked on any links in ad sequences that follows the initial screen.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.iOS.ADInterstitialAd.ReloadAd">
      <summary>
        <para>Reload advertisement.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.iOS.ADInterstitialAd.Show">
      <summary>
        <para>Shows full-screen advertisement to user.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.iOS.CalendarIdentifier">
      <summary>
        <para>Specify calendar types.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.CalendarIdentifier.BuddhistCalendar">
      <summary>
        <para>Identifies the Buddhist calendar.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.CalendarIdentifier.ChineseCalendar">
      <summary>
        <para>Identifies the Chinese calendar.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.CalendarIdentifier.GregorianCalendar">
      <summary>
        <para>Identifies the Gregorian calendar.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.CalendarIdentifier.HebrewCalendar">
      <summary>
        <para>Identifies the Hebrew calendar.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.CalendarIdentifier.IndianCalendar">
      <summary>
        <para>Identifies the Indian calendar.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.CalendarIdentifier.IslamicCalendar">
      <summary>
        <para>Identifies the Islamic calendar.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.CalendarIdentifier.IslamicCivilCalendar">
      <summary>
        <para>Identifies the Islamic civil calendar.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.CalendarIdentifier.ISO8601Calendar">
      <summary>
        <para>Identifies the ISO8601.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.CalendarIdentifier.JapaneseCalendar">
      <summary>
        <para>Identifies the Japanese calendar.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.CalendarIdentifier.PersianCalendar">
      <summary>
        <para>Identifies the Persian calendar.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.CalendarIdentifier.RepublicOfChinaCalendar">
      <summary>
        <para>Identifies the Republic of China (Taiwan) calendar.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.iOS.CalendarUnit">
      <summary>
        <para>Specify calendrical units.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.CalendarUnit.Day">
      <summary>
        <para>Specifies the day unit.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.CalendarUnit.Era">
      <summary>
        <para>Specifies the era unit.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.CalendarUnit.Hour">
      <summary>
        <para>Specifies the hour unit.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.CalendarUnit.Minute">
      <summary>
        <para>Specifies the minute unit.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.CalendarUnit.Month">
      <summary>
        <para>Specifies the month unit.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.CalendarUnit.Quarter">
      <summary>
        <para>Specifies the quarter of the calendar.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.CalendarUnit.Second">
      <summary>
        <para>Specifies the second unit.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.CalendarUnit.Week">
      <summary>
        <para>Specifies the week unit.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.CalendarUnit.Weekday">
      <summary>
        <para>Specifies the weekday unit.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.CalendarUnit.WeekdayOrdinal">
      <summary>
        <para>Specifies the ordinal weekday unit.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.CalendarUnit.Year">
      <summary>
        <para>Specifies the year unit.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.iOS.Device">
      <summary>
        <para>Interface into iOS specific functionality.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.Device.advertisingIdentifier">
      <summary>
        <para>Advertising ID.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.Device.advertisingTrackingEnabled">
      <summary>
        <para>Is advertising tracking enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.Device.deferSystemGesturesMode">
      <summary>
        <para>Defer system gestures until the second swipe on specific edges.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.Device.generation">
      <summary>
        <para>The generation of the device. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.Device.hideHomeButton">
      <summary>
        <para>Specifies whether the home button should be hidden in the iOS build of this application.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.Device.iosAppOnMac">
      <summary>
        <para>Specifies whether app built for iOS is running on Mac.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.Device.lowPowerModeEnabled">
      <summary>
        <para>Indicates whether Low Power Mode is enabled on the device.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.Device.systemVersion">
      <summary>
        <para>iOS version.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.Device.vendorIdentifier">
      <summary>
        <para>Vendor ID.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.Device.wantsSoftwareDimming">
      <summary>
        <para>Indicates whether the screen may be dimmed lower than the hardware is normally capable of by emulating it in software.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.iOS.Device.RequestStoreReview">
      <summary>
        <para>Request App Store rating and review from the user.</para>
      </summary>
      <returns>
        <para>Value indicating whether the underlying API is available or not. False indicates that the iOS version isn't recent enough or that the StoreKit framework is not linked with the app.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.iOS.Device.ResetNoBackupFlag(System.String)">
      <summary>
        <para>Reset "no backup" file flag: file will be synced with iCloud/iTunes backup and can be deleted by OS in low storage situations.</para>
      </summary>
      <param name="path"></param>
    </member>
    <member name="M:UnityEngine.iOS.Device.SetNoBackupFlag(System.String)">
      <summary>
        <para>Set file flag to be excluded from iCloud/iTunes backup.</para>
      </summary>
      <param name="path"></param>
    </member>
    <member name="T:UnityEngine.iOS.DeviceGeneration">
      <summary>
        <para>iOS device generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPad1Gen">
      <summary>
        <para>iPad, first generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPad2Gen">
      <summary>
        <para>iPad, second generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPad3Gen">
      <summary>
        <para>iPad, third generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPad4Gen">
      <summary>
        <para>iPad, fourth generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPad5Gen">
      <summary>
        <para>iPad, fifth generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPad6Gen">
      <summary>
        <para>iPad, sixth generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPad7Gen">
      <summary>
        <para>iPad, seventh generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPad8Gen">
      <summary>
        <para>iPad, eighth generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPadAir1">
      <summary>
        <para>iPad Air.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPadAir2">
      <summary>
        <para>iPad Air 2.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPadAir3Gen">
      <summary>
        <para>iPad Air, third generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPadAir4Gen">
      <summary>
        <para>iPad Air, fourth generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPadMini1Gen">
      <summary>
        <para>iPad Mini, first generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPadMini2Gen">
      <summary>
        <para>iPad Mini, second generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPadMini3Gen">
      <summary>
        <para>iPad Mini, third generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPadMini4Gen">
      <summary>
        <para>iPad Mini, fourth generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPadMini5Gen">
      <summary>
        <para>iPad Mini, fifth generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPadPro10Inch1Gen">
      <summary>
        <para>iPad Pro 9.7", first generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPadPro10Inch2Gen">
      <summary>
        <para>iPad Pro 10.5", second generation 10" iPad.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPadPro11Inch">
      <summary>
        <para>iPad Pro 11", first generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPadPro11Inch2Gen">
      <summary>
        <para>iPad Pro 11", second generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPadPro1Gen">
      <summary>
        <para>iPad Pro 12.9", first generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPadPro2Gen">
      <summary>
        <para>iPad Pro 12.9", second generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPadPro3Gen">
      <summary>
        <para>iPad Pro 12.9", third generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPadPro4Gen">
      <summary>
        <para>iPad Pro 12.9", fourth generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPadUnknown">
      <summary>
        <para>Yet unknown iPad.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPhone">
      <summary>
        <para>iPhone, first generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPhone11">
      <summary>
        <para>iPhone 11.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPhone11Pro">
      <summary>
        <para>iPhone 11 Pro.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPhone11ProMax">
      <summary>
        <para>iPhone 11 Pro Max.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPhone12">
      <summary>
        <para>iPhone 12.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPhone12Mini">
      <summary>
        <para>iPhone 12 Mini.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPhone12Pro">
      <summary>
        <para>iPhone 12 Pro.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPhone12ProMax">
      <summary>
        <para>iPhone 12 Pro Max.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPhone3G">
      <summary>
        <para>iPhone, second generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPhone3GS">
      <summary>
        <para>iPhone, third generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPhone4">
      <summary>
        <para>iPhone, fourth generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPhone4S">
      <summary>
        <para>iPhone, fifth generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPhone5">
      <summary>
        <para>iPhone5.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPhone5C">
      <summary>
        <para>iPhone 5C.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPhone5S">
      <summary>
        <para>iPhone 5S.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPhone6">
      <summary>
        <para>iPhone 6.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPhone6Plus">
      <summary>
        <para>iPhone 6 plus.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPhone6S">
      <summary>
        <para>iPhone 6S.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPhone6SPlus">
      <summary>
        <para>iPhone 6S Plus.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPhone7">
      <summary>
        <para>iPhone 7.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPhone7Plus">
      <summary>
        <para>iPhone 7 Plus.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPhone8">
      <summary>
        <para>iPhone 8.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPhone8Plus">
      <summary>
        <para>iPhone 8 Plus.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPhoneSE1Gen">
      <summary>
        <para>iPhone SE, first generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPhoneSE2Gen">
      <summary>
        <para>iPhone SE, second generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPhoneUnknown">
      <summary>
        <para>Yet unknown iPhone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPhoneX">
      <summary>
        <para>iPhone X.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPhoneXR">
      <summary>
        <para>iPhone XR.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPhoneXS">
      <summary>
        <para>iPhone XS.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPhoneXSMax">
      <summary>
        <para>iPhone XSMax.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPodTouch1Gen">
      <summary>
        <para>iPod Touch, first generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPodTouch2Gen">
      <summary>
        <para>iPod Touch, second generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPodTouch3Gen">
      <summary>
        <para>iPod Touch, third generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPodTouch4Gen">
      <summary>
        <para>iPod Touch, fourth generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPodTouch5Gen">
      <summary>
        <para>iPod Touch, fifth generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPodTouch6Gen">
      <summary>
        <para>iPod Touch, sixth generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPodTouch7Gen">
      <summary>
        <para>iPod Touch, seventh generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.DeviceGeneration.iPodTouchUnknown">
      <summary>
        <para>Yet unknown iPod Touch.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.iOS.LocalNotification">
      <summary>
        <para>iOS.LocalNotification is a wrapper around the UILocalNotification class found in the Apple UIKit framework and is only available on iPhoneiPadiPod Touch.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.LocalNotification.alertAction">
      <summary>
        <para>The title of the action button or slider.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.LocalNotification.alertBody">
      <summary>
        <para>The message displayed in the notification alert.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.LocalNotification.alertLaunchImage">
      <summary>
        <para>Identifies the image used as the launch image when the user taps the action button.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.LocalNotification.alertTitle">
      <summary>
        <para>A short description of the reason for the alert.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.LocalNotification.applicationIconBadgeNumber">
      <summary>
        <para>The number to display as the application's icon badge.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.LocalNotification.defaultSoundName">
      <summary>
        <para>The default system sound. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.LocalNotification.fireDate">
      <summary>
        <para>The date and time when the system should deliver the notification.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.LocalNotification.hasAction">
      <summary>
        <para>A boolean value that controls whether the alert action is visible or not.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.LocalNotification.repeatCalendar">
      <summary>
        <para>The calendar type (Gregorian, Chinese, etc) to use for rescheduling the notification.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.LocalNotification.repeatInterval">
      <summary>
        <para>The calendar interval at which to reschedule the notification.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.LocalNotification.soundName">
      <summary>
        <para>The name of the sound file to play when an alert is displayed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.LocalNotification.timeZone">
      <summary>
        <para>The time zone of the notification's fire date.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.LocalNotification.userInfo">
      <summary>
        <para>A dictionary for passing custom information to the notified application.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.iOS.LocalNotification.#ctor">
      <summary>
        <para>Creates a new local notification.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.iOS.NotificationServices">
      <summary>
        <para>NotificationServices is only available on iPhoneiPadiPod Touch.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.NotificationServices.deviceToken">
      <summary>
        <para>Device token received from Apple Push Service after calling NotificationServices.RegisterForRemoteNotificationTypes. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.NotificationServices.enabledNotificationTypes">
      <summary>
        <para>Enabled local and remote notification types.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.NotificationServices.localNotificationCount">
      <summary>
        <para>The number of received local notifications. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.NotificationServices.localNotifications">
      <summary>
        <para>The list of objects representing received local notifications. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.NotificationServices.registrationError">
      <summary>
        <para>Returns an error that might occur on registration for remote notifications via NotificationServices.RegisterForRemoteNotificationTypes. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.NotificationServices.remoteNotificationCount">
      <summary>
        <para>The number of received remote notifications. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.NotificationServices.remoteNotifications">
      <summary>
        <para>The list of objects representing received remote notifications. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.NotificationServices.scheduledLocalNotifications">
      <summary>
        <para>All currently scheduled local notifications.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.iOS.NotificationServices.CancelAllLocalNotifications">
      <summary>
        <para>Cancels the delivery of all scheduled local notifications.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.iOS.NotificationServices.CancelLocalNotification(UnityEngine.iOS.LocalNotification)">
      <summary>
        <para>Cancels the delivery of the specified scheduled local notification.</para>
      </summary>
      <param name="notification"></param>
    </member>
    <member name="M:UnityEngine.iOS.NotificationServices.ClearLocalNotifications">
      <summary>
        <para>Discards of all received local notifications.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.iOS.NotificationServices.ClearRemoteNotifications">
      <summary>
        <para>Discards of all received remote notifications.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.iOS.NotificationServices.GetLocalNotification(System.Int32)">
      <summary>
        <para>Returns an object representing a specific local notification. (Read Only)</para>
      </summary>
      <param name="index"></param>
    </member>
    <member name="M:UnityEngine.iOS.NotificationServices.GetRemoteNotification(System.Int32)">
      <summary>
        <para>Returns an object representing a specific remote notification. (Read Only)</para>
      </summary>
      <param name="index"></param>
    </member>
    <member name="M:UnityEngine.iOS.NotificationServices.PresentLocalNotificationNow(UnityEngine.iOS.LocalNotification)">
      <summary>
        <para>Presents a local notification immediately.</para>
      </summary>
      <param name="notification"></param>
    </member>
    <member name="M:UnityEngine.iOS.NotificationServices.RegisterForNotifications(UnityEngine.iOS.NotificationType)">
      <summary>
        <para>Register to receive local and remote notifications of the specified types from a provider via Apple Push Service.</para>
      </summary>
      <param name="notificationTypes">Notification types to register for.</param>
      <param name="registerForRemote">Specify true to also register for remote notifications.</param>
    </member>
    <member name="M:UnityEngine.iOS.NotificationServices.RegisterForNotifications(UnityEngine.iOS.NotificationType,System.Boolean)">
      <summary>
        <para>Register to receive local and remote notifications of the specified types from a provider via Apple Push Service.</para>
      </summary>
      <param name="notificationTypes">Notification types to register for.</param>
      <param name="registerForRemote">Specify true to also register for remote notifications.</param>
    </member>
    <member name="M:UnityEngine.iOS.NotificationServices.ScheduleLocalNotification(UnityEngine.iOS.LocalNotification)">
      <summary>
        <para>Schedules a local notification.</para>
      </summary>
      <param name="notification"></param>
    </member>
    <member name="M:UnityEngine.iOS.NotificationServices.UnregisterForRemoteNotifications">
      <summary>
        <para>Unregister for remote notifications.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.iOS.NotificationType">
      <summary>
        <para>Specifies local and remote notification types.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.NotificationType.Alert">
      <summary>
        <para>Notification is an alert message.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.NotificationType.Badge">
      <summary>
        <para>Notification is a badge shown above the application's icon.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.NotificationType.None">
      <summary>
        <para>No notification types specified.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.NotificationType.Sound">
      <summary>
        <para>Notification is an alert sound.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.iOS.OnDemandResources">
      <summary>
        <para>On Demand Resources API.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.OnDemandResources.enabled">
      <summary>
        <para>Indicates whether player was built with "Use On Demand Resources" player setting enabled.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.iOS.OnDemandResources.PreloadAsync(System.String[])">
      <summary>
        <para>Creates an On Demand Resources (ODR) request.</para>
      </summary>
      <param name="tags">Tags for On Demand Resources that should be included in the request.</param>
      <returns>
        <para>Object representing ODR request.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.iOS.OnDemandResourcesRequest">
      <summary>
        <para>Represents a request for On Demand Resources (ODR). It's an AsyncOperation and can be yielded in a coroutine.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.OnDemandResourcesRequest.error">
      <summary>
        <para>Returns an error after operation is complete.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.OnDemandResourcesRequest.loadingPriority">
      <summary>
        <para>Sets the priority for request.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.iOS.OnDemandResourcesRequest.Dispose">
      <summary>
        <para>Release all resources kept alive by On Demand Resources (ODR) request.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.iOS.OnDemandResourcesRequest.GetResourcePath(System.String)">
      <summary>
        <para>Gets file system's path to the resource available in On Demand Resources (ODR) request.</para>
      </summary>
      <param name="resourceName">Resource name.</param>
    </member>
    <member name="T:UnityEngine.iOS.RemoteNotification">
      <summary>
        <para>RemoteNotification is only available on iPhoneiPadiPod Touch.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.RemoteNotification.alertBody">
      <summary>
        <para>The message displayed in the notification alert. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.RemoteNotification.alertTitle">
      <summary>
        <para>A short description of the reason for the alert. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.RemoteNotification.applicationIconBadgeNumber">
      <summary>
        <para>The number to display as the application's icon badge. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.RemoteNotification.hasAction">
      <summary>
        <para>A boolean value that controls whether the alert action is visible or not. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.RemoteNotification.soundName">
      <summary>
        <para>The name of the sound file to play when an alert is displayed. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iOS.RemoteNotification.userInfo">
      <summary>
        <para>A dictionary for passing custom information to the notified application. (Read Only)</para>
      </summary>
    </member>
    <member name="T:UnityEngine.iOS.SystemGestureDeferMode">
      <summary>
        <para>Bit-mask used to control the deferring of system gestures on iOS.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.SystemGestureDeferMode.All">
      <summary>
        <para>Identifies all screen edges.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.SystemGestureDeferMode.BottomEdge">
      <summary>
        <para>Identifies bottom screen edge.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.SystemGestureDeferMode.LeftEdge">
      <summary>
        <para>Identifies left screen edge.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.SystemGestureDeferMode.None">
      <summary>
        <para>Disables gesture deferring on all edges.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.SystemGestureDeferMode.RightEdge">
      <summary>
        <para>Identifies right screen edge.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOS.SystemGestureDeferMode.TopEdge">
      <summary>
        <para>Identifies top screen edge.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.ISerializationCallbackReceiver">
      <summary>
        <para>Interface to receive callbacks upon serialization and deserialization.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize">
      <summary>
        <para>Implement this method to receive a callback after Unity deserializes your object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize">
      <summary>
        <para>Implement this method to receive a callback before Unity serializes your object.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Jobs.IJobParallelForTransform">
      <summary>
        <para>IJobParallelForTransform.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Jobs.IJobParallelForTransform.Execute(System.Int32,UnityEngine.Jobs.TransformAccess)">
      <summary>
        <para>Execute.</para>
      </summary>
      <param name="index">Index.</param>
      <param name="transform">TransformAccessArray.</param>
    </member>
    <member name="T:UnityEngine.Jobs.IJobParallelForTransformExtensions">
      <summary>
        <para>Extension methods for IJobParallelForTransform.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Jobs.IJobParallelForTransformExtensions.RunReadOnly(T,UnityEngine.Jobs.TransformAccessArray)">
      <summary>
        <para>Run an IJobParallelForTransform job with read-only access to the transform data. This method makes the job run on the calling thread instead of spreading it out over multiple threads.</para>
      </summary>
      <param name="transforms">The TransformAccessArray to run this job on.</param>
      <param name="jobData">The job to run.</param>
    </member>
    <member name="M:UnityEngine.Jobs.IJobParallelForTransformExtensions.Schedule(T,UnityEngine.Jobs.TransformAccessArray,Unity.Jobs.JobHandle)">
      <summary>
        <para>Schedule an IJobParallelForTransform job with read-write access to the transform data. This method parallelizes access to transforms in different hierarchies. Transforms with a shared root object are always processed on the same thread.</para>
      </summary>
      <param name="jobData">The job to schedule.</param>
      <param name="transforms">The TransformAccessArray to run this job on.</param>
      <param name="dependsOn">A JobHandle containing any jobs that must finish executing before this job begins. (Combine multiple jobs with JobHandle.CombineDependencies). Use dependencies to ensure that two jobs reading or writing to the same data do not run in parallel.</param>
      <returns>
        <para>The handle identifying the scheduled job. Can be used as a dependency for a later job or ensure completion on the main thread.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Jobs.IJobParallelForTransformExtensions.ScheduleReadOnly(T,UnityEngine.Jobs.TransformAccessArray,System.Int32,Unity.Jobs.JobHandle)">
      <summary>
        <para>Schedule an IJobParallelForTransform job with read-only access to the transform data. This method provides better parallelization because it can read all transforms in parallel instead of just parallelizing over different hierarchies.</para>
      </summary>
      <param name="jobData">The job to schedule.</param>
      <param name="transforms">The TransformAccessArray to run this job on.</param>
      <param name="batchSize">Granularity in which workstealing is performed. A value of 32 means the job queue will steal 32 iterations and then perform them in an efficient inner loop.</param>
      <param name="dependsOn">A JobHandle containing any jobs that must finish executing before this job begins. (Combine multiple jobs with JobHandle.CombineDependencies). Use dependencies to ensure that two jobs reading or writing to the same data do not run in parallel.</param>
      <returns>
        <para>The handle identifying the scheduled job. Can be used as a dependency for a later job or ensure completion on the main thread.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Jobs.TransformAccess">
      <summary>
        <para>Position, rotation and scale of an object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Jobs.TransformAccess.isValid">
      <summary>
        <para>Use this to determine whether this instance refers to a valid Transform.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Jobs.TransformAccess.localPosition">
      <summary>
        <para>The position of the transform relative to the parent.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Jobs.TransformAccess.localRotation">
      <summary>
        <para>The rotation of the transform relative to the parent transform's rotation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Jobs.TransformAccess.localScale">
      <summary>
        <para>The scale of the transform relative to the parent.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Jobs.TransformAccess.localToWorldMatrix">
      <summary>
        <para>Matrix that transforms a point from local space into world space (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Jobs.TransformAccess.position">
      <summary>
        <para>The position of the transform in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Jobs.TransformAccess.rotation">
      <summary>
        <para>The rotation of the transform in world space stored as a Quaternion.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Jobs.TransformAccess.worldToLocalMatrix">
      <summary>
        <para>Matrix that transforms a point from world space into local space (Read Only).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Jobs.TransformAccessArray">
      <summary>
        <para>TransformAccessArray.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Jobs.TransformAccessArray.capacity">
      <summary>
        <para>Returns array capacity.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Jobs.TransformAccessArray.isCreated">
      <summary>
        <para>isCreated.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Jobs.TransformAccessArray.length">
      <summary>
        <para>Length.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Jobs.TransformAccessArray.Add(UnityEngine.Transform)">
      <summary>
        <para>Add.</para>
      </summary>
      <param name="transform">Transform.</param>
    </member>
    <member name="M:UnityEngine.Jobs.TransformAccessArray.Allocate(System.Int32,System.Int32,UnityEngine.Jobs.TransformAccessArray&amp;)">
      <summary>
        <para>Allocate.</para>
      </summary>
      <param name="capacity">Capacity.</param>
      <param name="desiredJobCount">Desired job count.</param>
      <param name="array">TransformAccessArray.</param>
    </member>
    <member name="M:UnityEngine.Jobs.TransformAccessArray.#ctor(UnityEngine.Transform[],System.Int32)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="transforms">Transforms.</param>
      <param name="desiredJobCount">Desired job count.</param>
      <param name="capacity">Capacity.</param>
    </member>
    <member name="M:UnityEngine.Jobs.TransformAccessArray.#ctor(System.Int32,System.Int32)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="transforms">Transforms.</param>
      <param name="desiredJobCount">Desired job count.</param>
      <param name="capacity">Capacity.</param>
    </member>
    <member name="M:UnityEngine.Jobs.TransformAccessArray.Dispose">
      <summary>
        <para>Dispose.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Jobs.TransformAccessArray.RemoveAtSwapBack(System.Int32)">
      <summary>
        <para>Remove item at index.</para>
      </summary>
      <param name="index">Index.</param>
    </member>
    <member name="M:UnityEngine.Jobs.TransformAccessArray.SetTransforms(UnityEngine.Transform[])">
      <summary>
        <para>Set transforms.</para>
      </summary>
      <param name="transforms">Transforms.</param>
    </member>
    <member name="P:UnityEngine.Jobs.TransformAccessArray.this">
      <summary>
        <para>Array indexer.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.KeyCode">
      <summary>
        <para>Key codes returned by Event.keyCode. These map directly to a physical key on the keyboard.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.A">
      <summary>
        <para>'a' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Alpha0">
      <summary>
        <para>The '0' key on the top of the alphanumeric keyboard.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Alpha1">
      <summary>
        <para>The '1' key on the top of the alphanumeric keyboard.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Alpha2">
      <summary>
        <para>The '2' key on the top of the alphanumeric keyboard.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Alpha3">
      <summary>
        <para>The '3' key on the top of the alphanumeric keyboard.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Alpha4">
      <summary>
        <para>The '4' key on the top of the alphanumeric keyboard.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Alpha5">
      <summary>
        <para>The '5' key on the top of the alphanumeric keyboard.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Alpha6">
      <summary>
        <para>The '6' key on the top of the alphanumeric keyboard.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Alpha7">
      <summary>
        <para>The '7' key on the top of the alphanumeric keyboard.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Alpha8">
      <summary>
        <para>The '8' key on the top of the alphanumeric keyboard.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Alpha9">
      <summary>
        <para>The '9' key on the top of the alphanumeric keyboard.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.AltGr">
      <summary>
        <para>Alt Gr key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Ampersand">
      <summary>
        <para>Ampersand key '&amp;'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Asterisk">
      <summary>
        <para>Asterisk key '*'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.At">
      <summary>
        <para>At key '@'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.B">
      <summary>
        <para>'b' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.BackQuote">
      <summary>
        <para>Back quote key '`'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Backslash">
      <summary>
        <para>Backslash key '\'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Backspace">
      <summary>
        <para>The backspace key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Break">
      <summary>
        <para>Break key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.C">
      <summary>
        <para>'c' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.CapsLock">
      <summary>
        <para>Capslock key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Caret">
      <summary>
        <para>Caret key '^'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Clear">
      <summary>
        <para>The Clear key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Colon">
      <summary>
        <para>Colon ':' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Comma">
      <summary>
        <para>Comma ',' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.D">
      <summary>
        <para>'d' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Delete">
      <summary>
        <para>The forward delete key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Dollar">
      <summary>
        <para>Dollar sign key '$'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.DoubleQuote">
      <summary>
        <para>Double quote key '"'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.DownArrow">
      <summary>
        <para>Down arrow key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.E">
      <summary>
        <para>'e' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.End">
      <summary>
        <para>End key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Equals">
      <summary>
        <para>Equals '=' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Escape">
      <summary>
        <para>Escape key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Exclaim">
      <summary>
        <para>Exclamation mark key '!'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.F">
      <summary>
        <para>'f' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.F1">
      <summary>
        <para>F1 function key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.F10">
      <summary>
        <para>F10 function key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.F11">
      <summary>
        <para>F11 function key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.F12">
      <summary>
        <para>F12 function key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.F13">
      <summary>
        <para>F13 function key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.F14">
      <summary>
        <para>F14 function key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.F15">
      <summary>
        <para>F15 function key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.F2">
      <summary>
        <para>F2 function key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.F3">
      <summary>
        <para>F3 function key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.F4">
      <summary>
        <para>F4 function key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.F5">
      <summary>
        <para>F5 function key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.F6">
      <summary>
        <para>F6 function key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.F7">
      <summary>
        <para>F7 function key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.F8">
      <summary>
        <para>F8 function key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.F9">
      <summary>
        <para>F9 function key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.G">
      <summary>
        <para>'g' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Greater">
      <summary>
        <para>Greater than '&gt;' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.H">
      <summary>
        <para>'h' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Hash">
      <summary>
        <para>Hash key '#'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Help">
      <summary>
        <para>Help key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Home">
      <summary>
        <para>Home key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.I">
      <summary>
        <para>'i' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Insert">
      <summary>
        <para>Insert key key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.J">
      <summary>
        <para>'j' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button0">
      <summary>
        <para>Button 0 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button1">
      <summary>
        <para>Button 1 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button10">
      <summary>
        <para>Button 10 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button11">
      <summary>
        <para>Button 11 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button12">
      <summary>
        <para>Button 12 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button13">
      <summary>
        <para>Button 13 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button14">
      <summary>
        <para>Button 14 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button15">
      <summary>
        <para>Button 15 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button16">
      <summary>
        <para>Button 16 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button17">
      <summary>
        <para>Button 17 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button18">
      <summary>
        <para>Button 18 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button19">
      <summary>
        <para>Button 19 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button2">
      <summary>
        <para>Button 2 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button3">
      <summary>
        <para>Button 3 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button4">
      <summary>
        <para>Button 4 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button5">
      <summary>
        <para>Button 5 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button6">
      <summary>
        <para>Button 6 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button7">
      <summary>
        <para>Button 7 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button8">
      <summary>
        <para>Button 8 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button9">
      <summary>
        <para>Button 9 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button0">
      <summary>
        <para>Button 0 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button1">
      <summary>
        <para>Button 1 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button10">
      <summary>
        <para>Button 10 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button11">
      <summary>
        <para>Button 11 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button12">
      <summary>
        <para>Button 12 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button13">
      <summary>
        <para>Button 13 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button14">
      <summary>
        <para>Button 14 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button15">
      <summary>
        <para>Button 15 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button16">
      <summary>
        <para>Button 16 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button17">
      <summary>
        <para>Button 17 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button18">
      <summary>
        <para>Button 18 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button19">
      <summary>
        <para>Button 19 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button2">
      <summary>
        <para>Button 2 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button3">
      <summary>
        <para>Button 3 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button4">
      <summary>
        <para>Button 4 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button5">
      <summary>
        <para>Button 5 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button6">
      <summary>
        <para>Button 6 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button7">
      <summary>
        <para>Button 7 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button8">
      <summary>
        <para>Button 8 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button9">
      <summary>
        <para>Button 9 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button0">
      <summary>
        <para>Button 0 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button1">
      <summary>
        <para>Button 1 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button10">
      <summary>
        <para>Button 10 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button11">
      <summary>
        <para>Button 11 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button12">
      <summary>
        <para>Button 12 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button13">
      <summary>
        <para>Button 13 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button14">
      <summary>
        <para>Button 14 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button15">
      <summary>
        <para>Button 15 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button16">
      <summary>
        <para>Button 16 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button17">
      <summary>
        <para>Button 17 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button18">
      <summary>
        <para>Button 18 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button19">
      <summary>
        <para>Button 19 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button2">
      <summary>
        <para>Button 2 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button3">
      <summary>
        <para>Button 3 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button4">
      <summary>
        <para>Button 4 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button5">
      <summary>
        <para>Button 5 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button6">
      <summary>
        <para>Button 6 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button7">
      <summary>
        <para>Button 7 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button8">
      <summary>
        <para>Button 8 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button9">
      <summary>
        <para>Button 9 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button0">
      <summary>
        <para>Button 0 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button1">
      <summary>
        <para>Button 1 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button10">
      <summary>
        <para>Button 10 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button11">
      <summary>
        <para>Button 11 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button12">
      <summary>
        <para>Button 12 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button13">
      <summary>
        <para>Button 13 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button14">
      <summary>
        <para>Button 14 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button15">
      <summary>
        <para>Button 15 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button16">
      <summary>
        <para>Button 16 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button17">
      <summary>
        <para>Button 17 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button18">
      <summary>
        <para>Button 18 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button19">
      <summary>
        <para>Button 19 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button2">
      <summary>
        <para>Button 2 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button3">
      <summary>
        <para>Button 3 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button4">
      <summary>
        <para>Button 4 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button5">
      <summary>
        <para>Button 5 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button6">
      <summary>
        <para>Button 6 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button7">
      <summary>
        <para>Button 7 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button8">
      <summary>
        <para>Button 8 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button9">
      <summary>
        <para>Button 9 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick5Button0">
      <summary>
        <para>Button 0 on fifth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick5Button1">
      <summary>
        <para>Button 1 on fifth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick5Button10">
      <summary>
        <para>Button 10 on fifth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick5Button11">
      <summary>
        <para>Button 11 on fifth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick5Button12">
      <summary>
        <para>Button 12 on fifth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick5Button13">
      <summary>
        <para>Button 13 on fifth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick5Button14">
      <summary>
        <para>Button 14 on fifth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick5Button15">
      <summary>
        <para>Button 15 on fifth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick5Button16">
      <summary>
        <para>Button 16 on fifth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick5Button17">
      <summary>
        <para>Button 17 on fifth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick5Button18">
      <summary>
        <para>Button 18 on fifth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick5Button19">
      <summary>
        <para>Button 19 on fifth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick5Button2">
      <summary>
        <para>Button 2 on fifth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick5Button3">
      <summary>
        <para>Button 3 on fifth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick5Button4">
      <summary>
        <para>Button 4 on fifth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick5Button5">
      <summary>
        <para>Button 5 on fifth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick5Button6">
      <summary>
        <para>Button 6 on fifth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick5Button7">
      <summary>
        <para>Button 7 on fifth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick5Button8">
      <summary>
        <para>Button 8 on fifth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick5Button9">
      <summary>
        <para>Button 9 on fifth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick6Button0">
      <summary>
        <para>Button 0 on sixth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick6Button1">
      <summary>
        <para>Button 1 on sixth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick6Button10">
      <summary>
        <para>Button 10 on sixth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick6Button11">
      <summary>
        <para>Button 11 on sixth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick6Button12">
      <summary>
        <para>Button 12 on sixth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick6Button13">
      <summary>
        <para>Button 13 on sixth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick6Button14">
      <summary>
        <para>Button 14 on sixth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick6Button15">
      <summary>
        <para>Button 15 on sixth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick6Button16">
      <summary>
        <para>Button 16 on sixth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick6Button17">
      <summary>
        <para>Button 17 on sixth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick6Button18">
      <summary>
        <para>Button 18 on sixth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick6Button19">
      <summary>
        <para>Button 19 on sixth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick6Button2">
      <summary>
        <para>Button 2 on sixth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick6Button3">
      <summary>
        <para>Button 3 on sixth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick6Button4">
      <summary>
        <para>Button 4 on sixth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick6Button5">
      <summary>
        <para>Button 5 on sixth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick6Button6">
      <summary>
        <para>Button 6 on sixth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick6Button7">
      <summary>
        <para>Button 7 on sixth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick6Button8">
      <summary>
        <para>Button 8 on sixth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick6Button9">
      <summary>
        <para>Button 9 on sixth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick7Button0">
      <summary>
        <para>Button 0 on seventh joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick7Button1">
      <summary>
        <para>Button 1 on seventh joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick7Button10">
      <summary>
        <para>Button 10 on seventh joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick7Button11">
      <summary>
        <para>Button 11 on seventh joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick7Button12">
      <summary>
        <para>Button 12 on seventh joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick7Button13">
      <summary>
        <para>Button 13 on seventh joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick7Button14">
      <summary>
        <para>Button 14 on seventh joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick7Button15">
      <summary>
        <para>Button 15 on seventh joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick7Button16">
      <summary>
        <para>Button 16 on seventh joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick7Button17">
      <summary>
        <para>Button 17 on seventh joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick7Button18">
      <summary>
        <para>Button 18 on seventh joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick7Button19">
      <summary>
        <para>Button 19 on seventh joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick7Button2">
      <summary>
        <para>Button 2 on seventh joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick7Button3">
      <summary>
        <para>Button 3 on seventh joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick7Button4">
      <summary>
        <para>Button 4 on seventh joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick7Button5">
      <summary>
        <para>Button 5 on seventh joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick7Button6">
      <summary>
        <para>Button 6 on seventh joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick7Button7">
      <summary>
        <para>Button 7 on seventh joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick7Button8">
      <summary>
        <para>Button 8 on seventh joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick7Button9">
      <summary>
        <para>Button 9 on seventh joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick8Button0">
      <summary>
        <para>Button 0 on eighth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick8Button1">
      <summary>
        <para>Button 1 on eighth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick8Button10">
      <summary>
        <para>Button 10 on eighth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick8Button11">
      <summary>
        <para>Button 11 on eighth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick8Button12">
      <summary>
        <para>Button 12 on eighth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick8Button13">
      <summary>
        <para>Button 13 on eighth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick8Button14">
      <summary>
        <para>Button 14 on eighth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick8Button15">
      <summary>
        <para>Button 15 on eighth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick8Button16">
      <summary>
        <para>Button 16 on eighth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick8Button17">
      <summary>
        <para>Button 17 on eighth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick8Button18">
      <summary>
        <para>Button 18 on eighth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick8Button19">
      <summary>
        <para>Button 19 on eighth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick8Button2">
      <summary>
        <para>Button 2 on eighth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick8Button3">
      <summary>
        <para>Button 3 on eighth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick8Button4">
      <summary>
        <para>Button 4 on eighth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick8Button5">
      <summary>
        <para>Button 5 on eighth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick8Button6">
      <summary>
        <para>Button 6 on eighth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick8Button7">
      <summary>
        <para>Button 7 on eighth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick8Button8">
      <summary>
        <para>Button 8 on eighth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick8Button9">
      <summary>
        <para>Button 9 on eighth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton0">
      <summary>
        <para>Button 0 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton1">
      <summary>
        <para>Button 1 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton10">
      <summary>
        <para>Button 10 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton11">
      <summary>
        <para>Button 11 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton12">
      <summary>
        <para>Button 12 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton13">
      <summary>
        <para>Button 13 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton14">
      <summary>
        <para>Button 14 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton15">
      <summary>
        <para>Button 15 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton16">
      <summary>
        <para>Button 16 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton17">
      <summary>
        <para>Button 17 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton18">
      <summary>
        <para>Button 18 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton19">
      <summary>
        <para>Button 19 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton2">
      <summary>
        <para>Button 2 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton3">
      <summary>
        <para>Button 3 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton4">
      <summary>
        <para>Button 4 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton5">
      <summary>
        <para>Button 5 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton6">
      <summary>
        <para>Button 6 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton7">
      <summary>
        <para>Button 7 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton8">
      <summary>
        <para>Button 8 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton9">
      <summary>
        <para>Button 9 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.K">
      <summary>
        <para>'k' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Keypad0">
      <summary>
        <para>Numeric keypad 0.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Keypad1">
      <summary>
        <para>Numeric keypad 1.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Keypad2">
      <summary>
        <para>Numeric keypad 2.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Keypad3">
      <summary>
        <para>Numeric keypad 3.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Keypad4">
      <summary>
        <para>Numeric keypad 4.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Keypad5">
      <summary>
        <para>Numeric keypad 5.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Keypad6">
      <summary>
        <para>Numeric keypad 6.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Keypad7">
      <summary>
        <para>Numeric keypad 7.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Keypad8">
      <summary>
        <para>Numeric keypad 8.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Keypad9">
      <summary>
        <para>Numeric keypad 9.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.KeypadDivide">
      <summary>
        <para>Numeric keypad '/'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.KeypadEnter">
      <summary>
        <para>Numeric keypad Enter.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.KeypadEquals">
      <summary>
        <para>Numeric keypad '='.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.KeypadMinus">
      <summary>
        <para>Numeric keypad '-'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.KeypadMultiply">
      <summary>
        <para>Numeric keypad '*'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.KeypadPeriod">
      <summary>
        <para>Numeric keypad '.'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.KeypadPlus">
      <summary>
        <para>Numeric keypad '+'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.L">
      <summary>
        <para>'l' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.LeftAlt">
      <summary>
        <para>Left Alt key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.LeftApple">
      <summary>
        <para>Left Command key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.LeftArrow">
      <summary>
        <para>Left arrow key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.LeftBracket">
      <summary>
        <para>Left square bracket key '['.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.LeftCommand">
      <summary>
        <para>Left Command key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.LeftControl">
      <summary>
        <para>Left Control key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.LeftCurlyBracket">
      <summary>
        <para>Left curly bracket key '{'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.LeftParen">
      <summary>
        <para>Left Parenthesis key '('.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.LeftShift">
      <summary>
        <para>Left shift key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.LeftWindows">
      <summary>
        <para>Left Windows key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Less">
      <summary>
        <para>Less than '&lt;' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.M">
      <summary>
        <para>'m' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Menu">
      <summary>
        <para>Menu key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Minus">
      <summary>
        <para>Minus '-' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Mouse0">
      <summary>
        <para>The Left (or primary) mouse button.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Mouse1">
      <summary>
        <para>Right mouse button (or secondary mouse button).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Mouse2">
      <summary>
        <para>Middle mouse button (or third button).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Mouse3">
      <summary>
        <para>Additional (fourth) mouse button.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Mouse4">
      <summary>
        <para>Additional (fifth) mouse button.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Mouse5">
      <summary>
        <para>Additional (or sixth) mouse button.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Mouse6">
      <summary>
        <para>Additional (or seventh) mouse button.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.N">
      <summary>
        <para>'n' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.None">
      <summary>
        <para>Not assigned (never returned as the result of a keystroke).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Numlock">
      <summary>
        <para>Numlock key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.O">
      <summary>
        <para>'o' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.P">
      <summary>
        <para>'p' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.PageDown">
      <summary>
        <para>Page down.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.PageUp">
      <summary>
        <para>Page up.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Pause">
      <summary>
        <para>Pause on PC machines.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Percent">
      <summary>
        <para>Percent '%' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Period">
      <summary>
        <para>Period '.' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Pipe">
      <summary>
        <para>Pipe '|' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Plus">
      <summary>
        <para>Plus key '+'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Print">
      <summary>
        <para>Print key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Q">
      <summary>
        <para>'q' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Question">
      <summary>
        <para>Question mark '?' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Quote">
      <summary>
        <para>Quote key '.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.R">
      <summary>
        <para>'r' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Return">
      <summary>
        <para>Return key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.RightAlt">
      <summary>
        <para>Right Alt key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.RightApple">
      <summary>
        <para>Right Command key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.RightArrow">
      <summary>
        <para>Right arrow key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.RightBracket">
      <summary>
        <para>Right square bracket key ']'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.RightCommand">
      <summary>
        <para>Right Command key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.RightControl">
      <summary>
        <para>Right Control key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.RightCurlyBracket">
      <summary>
        <para>Right curly bracket key '}'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.RightParen">
      <summary>
        <para>Right Parenthesis key ')'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.RightShift">
      <summary>
        <para>Right shift key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.RightWindows">
      <summary>
        <para>Right Windows key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.S">
      <summary>
        <para>'s' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.ScrollLock">
      <summary>
        <para>Scroll lock key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Semicolon">
      <summary>
        <para>Semicolon ';' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Slash">
      <summary>
        <para>Slash '/' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Space">
      <summary>
        <para>Space key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.SysReq">
      <summary>
        <para>Sys Req key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.T">
      <summary>
        <para>'t' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Tab">
      <summary>
        <para>The tab key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Tilde">
      <summary>
        <para>Tilde '~' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.U">
      <summary>
        <para>'u' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Underscore">
      <summary>
        <para>Underscore '_' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.UpArrow">
      <summary>
        <para>Up arrow key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.V">
      <summary>
        <para>'v' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.W">
      <summary>
        <para>'w' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.X">
      <summary>
        <para>'x' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Y">
      <summary>
        <para>'y' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Z">
      <summary>
        <para>'z' key.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Keyframe">
      <summary>
        <para>A single keyframe that can be injected into an animation curve.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Keyframe.inTangent">
      <summary>
        <para>Sets the incoming tangent for this key. The incoming tangent affects the slope of the curve from the previous key to this key.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Keyframe.inWeight">
      <summary>
        <para>Sets the incoming weight for this key. The incoming weight affects the slope of the curve from the previous key to this key.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Keyframe.outTangent">
      <summary>
        <para>Sets the outgoing tangent for this key. The outgoing tangent affects the slope of the curve from this key to the next key.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Keyframe.outWeight">
      <summary>
        <para>Sets the outgoing weight for this key. The outgoing weight affects the slope of the curve from this key to the next key.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Keyframe.tangentMode">
      <summary>
        <para>TangentMode is deprecated.  Use AnimationUtility.SetKeyLeftTangentMode or AnimationUtility.SetKeyRightTangentMode instead.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Keyframe.time">
      <summary>
        <para>The time of the keyframe.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Keyframe.value">
      <summary>
        <para>The value of the curve at keyframe.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Keyframe.weightedMode">
      <summary>
        <para>Weighted mode for the keyframe.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Keyframe.#ctor(System.Single,System.Single)">
      <summary>
        <para>Create a keyframe.</para>
      </summary>
      <param name="time"></param>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.Keyframe.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Create a keyframe.</para>
      </summary>
      <param name="time"></param>
      <param name="value"></param>
      <param name="inTangent"></param>
      <param name="outTangent"></param>
    </member>
    <member name="M:UnityEngine.Keyframe.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Create a keyframe.</para>
      </summary>
      <param name="time"></param>
      <param name="value"></param>
      <param name="inTangent"></param>
      <param name="outTangent"></param>
      <param name="inWeight"></param>
      <param name="outWeight"></param>
    </member>
    <member name="T:UnityEngine.LayerMask">
      <summary>
        <para>Specifies Layers to use in a Physics.Raycast.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LayerMask.value">
      <summary>
        <para>Converts a layer mask value to an integer value.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.LayerMask.GetMask(System.String[])">
      <summary>
        <para>Given a set of layer names as defined by either a Builtin or a User Layer in the, returns the equivalent layer mask for all of them.</para>
      </summary>
      <param name="layerNames">List of layer names to convert to a layer mask.</param>
      <returns>
        <para>The layer mask created from the layerNames.</para>
      </returns>
    </member>
    <member name="?:UnityEngine.LayerMask.implop_LayerMask(int)(System.Int32)">
      <summary>
        <para>Implicitly converts an integer to a LayerMask.</para>
      </summary>
      <param name="intVal"></param>
    </member>
    <member name="M:UnityEngine.LayerMask.LayerToName(System.Int32)">
      <summary>
        <para>Given a layer number, returns the name of the layer as defined in either a Builtin or a User Layer in the.</para>
      </summary>
      <param name="layer"></param>
    </member>
    <member name="M:UnityEngine.LayerMask.NameToLayer(System.String)">
      <summary>
        <para>Given a layer name, returns the layer index as defined by either a Builtin or a User Layer in the.</para>
      </summary>
      <param name="layerName"></param>
    </member>
    <member name="T:UnityEngine.LazyLoadReference`1">
      <summary>
        <para>Serializable lazy reference to a UnityEngine.Object contained in an asset file.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LazyLoadReference_1.asset">
      <summary>
        <para>Accessor to the referenced asset.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LazyLoadReference_1.instanceID">
      <summary>
        <para>Returns the instance id to the referenced asset.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LazyLoadReference_1.isBroken">
      <summary>
        <para>Convenience property that checks whether the reference is broken: refers to an object that is either not available or not loadable.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LazyLoadReference_1.isSet">
      <summary>
        <para>Determines if an asset is being targeted, regardless of whether the asset is available for loading.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.LazyLoadReference_1.#ctor(T)">
      <summary>
        <para>Construct a new LazyLoadReference.</para>
      </summary>
      <param name="asset">The asset reference.</param>
      <param name="instanceID">The asset instance ID.</param>
    </member>
    <member name="M:UnityEngine.LazyLoadReference_1.#ctor(System.Int32)">
      <summary>
        <para>Construct a new LazyLoadReference.</para>
      </summary>
      <param name="asset">The asset reference.</param>
      <param name="instanceID">The asset instance ID.</param>
    </member>
    <member name="?:UnityEngine.LazyLoadReference_1.implop_LazyLoadReference&lt;T&gt;(int)(System.Int32)">
      <summary>
        <para>Implicit conversion from instance ID to LazyLoadReference.</para>
      </summary>
      <param name="instanceID">The asset instance ID.</param>
    </member>
    <member name="?:UnityEngine.LazyLoadReference_1.implop_LazyLoadReference&lt;T&gt;(T)(T)">
      <summary>
        <para>Implicit conversion from asset reference to LazyLoadReference.</para>
      </summary>
      <param name="asset">The asset reference.</param>
    </member>
    <member name="T:UnityEngine.LensFlare">
      <summary>
        <para>Script interface for a.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LensFlare.brightness">
      <summary>
        <para>The strength of the flare.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LensFlare.color">
      <summary>
        <para>The color of the flare.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LensFlare.fadeSpeed">
      <summary>
        <para>The fade speed of the flare.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LensFlare.flare">
      <summary>
        <para>The to use.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Light">
      <summary>
        <para>Script interface for.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.areaSize">
      <summary>
        <para>The size of the area light (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.bakingOutput">
      <summary>
        <para>This property describes the output of the last Global Illumination bake.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.bounceIntensity">
      <summary>
        <para>The multiplier that defines the strength of the bounce lighting.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.boundingSphereOverride">
      <summary>
        <para>Bounding sphere used to override the regular light bounding sphere during culling.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.color">
      <summary>
        <para>The color of the light.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.colorTemperature">
      <summary>
        <para>
          The color temperature of the light.
          Correlated Color Temperature (abbreviated as CCT) is multiplied with the color filter when calculating the final color of a light source. The color temperature of the electromagnetic radiation emitted from an ideal black body is defined as its surface temperature in Kelvin. White is 6500K according to the D65 standard. A candle light is 1800K and a soft warm light bulb is 2700K.
          If you want to use colorTemperature, GraphicsSettings.lightsUseLinearIntensity and Light.useColorTemperature has to be enabled.
          See Also: GraphicsSettings.lightsUseLinearIntensity, GraphicsSettings.useColorTemperature.
        </para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.commandBufferCount">
      <summary>
        <para>Number of command buffers set up on this light (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.cookie">
      <summary>
        <para>The cookie texture projected by the light.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.cookieSize">
      <summary>
        <para>The size of a directional light's cookie.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.cullingMask">
      <summary>
        <para>This is used to light certain objects in the Scene selectively.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.flare">
      <summary>
        <para>The to use for this light.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.innerSpotAngle">
      <summary>
        <para>The angle of the light's spotlight inner cone in degrees.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.intensity">
      <summary>
        <para>The Intensity of a light is multiplied with the Light color.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.isBaked">
      <summary>
        <para>Is the light contribution already stored in lightmaps and/or lightprobes (Read Only). Obsolete; replaced by Light-lightmapBakeType.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.layerShadowCullDistances">
      <summary>
        <para>Per-light, per-layer shadow culling distances. Directional lights only. </para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.lightmapBakeType">
      <summary>
        <para>This property describes what part of a light's contribution can be baked (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.lightShadowCasterMode">
      <summary>
        <para>Allows you to override the global Shadowmask Mode per light. Only use this with render pipelines that can handle per light Shadowmask modes. Incompatible with the legacy renderers.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.range">
      <summary>
        <para>The range of the light.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.renderingLayerMask">
      <summary>
        <para>Determines which rendering LayerMask this Light affects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.renderMode">
      <summary>
        <para>How to render the light.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.shadowAngle">
      <summary>
        <para>Controls the amount of artificial softening applied to the edges of shadows cast by directional lights.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.shadowBias">
      <summary>
        <para>Shadow mapping constant bias.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.shadowCustomResolution">
      <summary>
        <para>The custom resolution of the shadow map.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.shadowMatrixOverride">
      <summary>
        <para>Projection matrix used to override the regular light matrix during shadow culling.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.shadowNearPlane">
      <summary>
        <para>Near plane value to use for shadow frustums.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.shadowNormalBias">
      <summary>
        <para>Shadow mapping normal-based bias.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.shadowRadius">
      <summary>
        <para>Controls the amount of artificial softening applied to the edges of shadows cast by the Point or Spot light.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.shadowResolution">
      <summary>
        <para>The resolution of the shadow map.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.shadows">
      <summary>
        <para>How this light casts shadows</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.shadowStrength">
      <summary>
        <para>Strength of light's shadows.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.shape">
      <summary>
        <para>This property describes the shape of the spot light. Only Scriptable Render Pipelines use this property; the built-in renderer does not support it.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.spotAngle">
      <summary>
        <para>The angle of the light's spotlight cone in degrees.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.type">
      <summary>
        <para>The type of the light.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.useBoundingSphereOverride">
      <summary>
        <para>Set to true to override light bounding sphere for culling.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.useColorTemperature">
      <summary>
        <para>Set to true to use the color temperature.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.useShadowMatrixOverride">
      <summary>
        <para>Set to true to enable custom matrix for culling during shadows.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.useViewFrustumForShadowCasterCull">
      <summary>
        <para>Whether to cull shadows for this Light when the Light is outside of the view frustum.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Light.AddCommandBuffer(UnityEngine.Rendering.LightEvent,UnityEngine.Rendering.CommandBuffer)">
      <summary>
        <para>Add a command buffer to be executed at a specified place.</para>
      </summary>
      <param name="evt">When to execute the command buffer during rendering.</param>
      <param name="buffer">The buffer to execute.</param>
      <param name="shadowPassMask">A mask specifying which shadow passes to execute the buffer for.</param>
    </member>
    <member name="M:UnityEngine.Light.AddCommandBuffer(UnityEngine.Rendering.LightEvent,UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.ShadowMapPass)">
      <summary>
        <para>Add a command buffer to be executed at a specified place.</para>
      </summary>
      <param name="evt">When to execute the command buffer during rendering.</param>
      <param name="buffer">The buffer to execute.</param>
      <param name="shadowPassMask">A mask specifying which shadow passes to execute the buffer for.</param>
    </member>
    <member name="M:UnityEngine.Light.AddCommandBufferAsync(UnityEngine.Rendering.LightEvent,UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.ComputeQueueType)">
      <summary>
        <para>Adds a command buffer to the GPU's async compute queues and executes that command buffer when graphics processing reaches a given point.</para>
      </summary>
      <param name="evt">The point during the graphics processing at which this command buffer should commence on the GPU.</param>
      <param name="buffer">The buffer to execute.</param>
      <param name="queueType">The desired async compute queue type to execute the buffer on.</param>
      <param name="shadowPassMask">A mask specifying which shadow passes to execute the buffer for.</param>
    </member>
    <member name="M:UnityEngine.Light.AddCommandBufferAsync(UnityEngine.Rendering.LightEvent,UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.ShadowMapPass,UnityEngine.Rendering.ComputeQueueType)">
      <summary>
        <para>Adds a command buffer to the GPU's async compute queues and executes that command buffer when graphics processing reaches a given point.</para>
      </summary>
      <param name="evt">The point during the graphics processing at which this command buffer should commence on the GPU.</param>
      <param name="buffer">The buffer to execute.</param>
      <param name="queueType">The desired async compute queue type to execute the buffer on.</param>
      <param name="shadowPassMask">A mask specifying which shadow passes to execute the buffer for.</param>
    </member>
    <member name="M:UnityEngine.Light.GetCommandBuffers(UnityEngine.Rendering.LightEvent)">
      <summary>
        <para>Get command buffers to be executed at a specified place.</para>
      </summary>
      <param name="evt">When to execute the command buffer during rendering.</param>
      <returns>
        <para>Array of command buffers.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Light.RemoveAllCommandBuffers">
      <summary>
        <para>Remove all command buffers set on this light.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Light.RemoveCommandBuffer(UnityEngine.Rendering.LightEvent,UnityEngine.Rendering.CommandBuffer)">
      <summary>
        <para>Remove command buffer from execution at a specified place.</para>
      </summary>
      <param name="evt">When to execute the command buffer during rendering.</param>
      <param name="buffer">The buffer to execute.</param>
    </member>
    <member name="M:UnityEngine.Light.RemoveCommandBuffers(UnityEngine.Rendering.LightEvent)">
      <summary>
        <para>Remove command buffers from execution at a specified place.</para>
      </summary>
      <param name="evt">When to execute the command buffer during rendering.</param>
    </member>
    <member name="M:UnityEngine.Light.Reset">
      <summary>
        <para>Revert all light parameters to default.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Light.SetLightDirty">
      <summary>
        <para>Sets a light dirty to notify the light baking backends to update their internal light representation (Editor only).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LightBakingOutput">
      <summary>
        <para>Struct describing the result of a Global Illumination bake for a given light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightBakingOutput.isBaked">
      <summary>
        <para>Is the light contribution already stored in lightmaps and/or lightprobes?</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightBakingOutput.lightmapBakeType">
      <summary>
        <para>This property describes what part of a light's contribution was baked.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightBakingOutput.mixedLightingMode">
      <summary>
        <para>In case of a LightmapBakeType.Mixed light, describes what Mixed mode was used to bake the light, irrelevant otherwise.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightBakingOutput.occlusionMaskChannel">
      <summary>
        <para>In case of a LightmapBakeType.Mixed light, contains the index of the occlusion mask channel to use if any, otherwise -1.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightBakingOutput.probeOcclusionLightIndex">
      <summary>
        <para>In case of a LightmapBakeType.Mixed light, contains the index of the light as seen from the occlusion probes point of view if any, otherwise -1.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LightingSettings">
      <summary>
        <para>An object containing settings for precomputing lighting data, that Unity can serialize as a.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.albedoBoost">
      <summary>
        <para>The intensity of surface albedo throughout the Scene when considered in lighting calculations. This value influences the energy of light at each bounce. (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.ao">
      <summary>
        <para>Whether to apply ambient occlusion to lightmaps. (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.aoExponentDirect">
      <summary>
        <para>Determines the degree to which direct lighting is considered when calculating ambient occlusion in lightmaps. (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.aoExponentIndirect">
      <summary>
        <para>Sets the contrast of ambient occlusion that Unity applies to indirect lighting in lightmaps. (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.aoMaxDistance">
      <summary>
        <para>The distance that a ray travels before Unity considers it to be unoccluded when calculating ambient occlusion in lightmaps. (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.autoGenerate">
      <summary>
        <para>Whether the Unity Editor automatically precomputes lighting data when the Scene data changes. (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.bakedGI">
      <summary>
        <para>Whether to enable the Baked Global Illumination system for this Scene.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.bounces">
      <summary>
        <para>This property is now obsolete. Use LightingSettings.maxBounces. </para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.compressLightmaps">
      <summary>
        <para>Whether to compress the lightmap textures that the Progressive Lightmapper generates. (Editor only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.denoiserTypeAO">
      <summary>
        <para>Determines the type of denoising that the Progressive Lightmapper applies to ambient occlusion in lightmaps. (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.denoiserTypeDirect">
      <summary>
        <para>Determines the denoiser that the Progressive Lightmapper applies to direct lighting. (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.denoiserTypeIndirect">
      <summary>
        <para>Determines the denoiser that the Progressive Lightmapper applies to indirect lighting. (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.directionalityMode">
      <summary>
        <para>Determines whether the lightmapper should generate directional or non-directional lightmaps. (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.directSampleCount">
      <summary>
        <para>Specifies the number of samples the Progressive Lightmapper uses for direct lighting calculations. (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.environmentSampleCount">
      <summary>
        <para>Specifies the number of samples the Progressive Lightmapper uses when sampling indirect lighting from the skybox. (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.exportTrainingData">
      <summary>
        <para>Whether the Progressive Lightmapper exports machine learning training data to the Project folder when it performs the bake. ( Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.extractAO">
      <summary>
        <para>Whether the Progressive Lightmapper extracts Ambient Occlusion to a separate lightmap. (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.filteringAtrousPositionSigmaAO">
      <summary>
        <para>Specifies the threshold the Progressive Lightmapper uses to filter direct light stored in the lightmap when using the A-Trous filter. (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.filteringAtrousPositionSigmaDirect">
      <summary>
        <para>Specifies the threshold the Progressive Lightmapper uses to filter the indirect lighting component of the lightmap when using the A-Trous filter. (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.filteringAtrousPositionSigmaIndirect">
      <summary>
        <para>Specifies the radius the Progressive Lightmapper uses to filter the ambient occlusion component in the lightmap when using Gaussian filter. (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.filteringGaussRadiusAO">
      <summary>
        <para>Specifies the radius the Progressive Lightmapper uses to filter the direct lighting component of the lightmap when using Gaussian filter. (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.filteringGaussRadiusDirect">
      <summary>
        <para>Specifies the radius the Progressive Lightmapper used to filter the indirect lighting component of the lightmap when using Gaussian filter. (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.filteringGaussRadiusIndirect">
      <summary>
        <para>Specifies the method used by the Progressive Lightmapper to reduce noise in lightmaps. (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.filteringMode">
      <summary>
        <para>Specifies the filter type that the Progressive Lightmapper uses for ambient occlusion. (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.filterTypeAO">
      <summary>
        <para>Specifies the filter kernel that the Progressive Lightmapper uses for ambient occlusion. (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.filterTypeDirect">
      <summary>
        <para>Specifies the filter kernel that the Progressive Lightmapper uses for the direct lighting. (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.filterTypeIndirect">
      <summary>
        <para>Specifies the filter kernel that the Progressive Lightmapper uses for indirect lighting. (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.finalGather">
      <summary>
        <para>Specifies whether the final light bounce of the global illumination calculation is calculated at the same resolution as the baked lightmap. (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.finalGatherFiltering">
      <summary>
        <para>Controls whether a denoising filter is applied to the final gather output.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.finalGatherRayCount">
      <summary>
        <para>Controls the number of rays emitted for every final gather point. A final gather point is a lightmap texel in the final, composited lightmap. (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.indirectResolution">
      <summary>
        <para>Defines the number of texels that Enlighten uses per world unit when calculating indirect lighting. (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.indirectSampleCount">
      <summary>
        <para>Specifies the number of samples the Progressive Lightmapper uses for indirect lighting calculations. (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.indirectScale">
      <summary>
        <para>Multiplies the intensity of of indirect lighting in lightmaps. (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.lightmapMaxSize">
      <summary>
        <para>The maximum size in pixels of an individual lightmap texture. (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.lightmapPadding">
      <summary>
        <para>Sets the distance (in texels) between separate UV tiles in lightmaps. (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.lightmapper">
      <summary>
        <para>Determines which backend to use for baking lightmaps in the Baked Global Illumination system. (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.lightmapResolution">
      <summary>
        <para>Defines the number of texels to use per world unit when generating lightmaps.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.lightProbeSampleCountMultiplier">
      <summary>
        <para>Specifies the number of samples to use for Light Probes relative to the number of samples for lightmap texels. (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.maxBounces">
      <summary>
        <para>Stores the maximum number of bounces the Progressive Lightmapper computes for indirect lighting. (Editor only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.minBounces">
      <summary>
        <para>Stores the minimum number of bounces the Progressive Lightmapper computes for indirect lighting. (Editor only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.mixedBakeMode">
      <summary>
        <para>Sets the MixedLightingMode that Unity uses for all Mixed Lights in the Scene. (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.prioritizeView">
      <summary>
        <para>Whether the Progressive Lightmapper prioritizes baking visible texels within the frustum of the Scene view. (Editor only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.realtimeEnvironmentLighting">
      <summary>
        <para>Determines the lightmap that Unity stores environment lighting in.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.realtimeGI">
      <summary>
        <para>Whether to enable the Realtime Global Illumination system for this Scene.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.russianRouletteStartBounce">
      <summary>
        <para>This property is now obsolete. Use LightingSettings.minBounces.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightingSettings.trainingDataDestination">
      <summary>
        <para>Determines the name of the destination folder for the exported textures. (Editor only).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LightingSettings.DenoiserType">
      <summary>
        <para>The available denoisers for the Progressive Lightmapper.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightingSettings.DenoiserType.None">
      <summary>
        <para>Use this to disable denoising for the lightmap.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightingSettings.DenoiserType.OpenImage">
      <summary>
        <para>Intel Open Image Denoiser.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightingSettings.DenoiserType.Optix">
      <summary>
        <para>NVIDIA Optix Denoiser.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightingSettings.DenoiserType.RadeonPro">
      <summary>
        <para>RadeonPro Denoiser.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LightingSettings.FilterMode">
      <summary>
        <para>The available filtering modes for the Progressive Lightmapper.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightingSettings.FilterMode.Advanced">
      <summary>
        <para>When enabled, you can configure the filtering settings for the Progressive Lightmapper. When disabled, the default filtering settings apply.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightingSettings.FilterMode.Auto">
      <summary>
        <para>The filtering is configured automatically.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightingSettings.FilterMode.None">
      <summary>
        <para>No filtering.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LightingSettings.FilterType">
      <summary>
        <para>The available filter kernels for the Progressive Lightmapper.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightingSettings.FilterType.ATrous">
      <summary>
        <para>When enabled, the lightmap uses an A-Trous filter.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightingSettings.FilterType.Gaussian">
      <summary>
        <para>When enabled, the lightmap uses a Gaussian filter.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightingSettings.FilterType.None">
      <summary>
        <para>When enabled, the lightmap uses no filtering.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LightingSettings.Lightmapper">
      <summary>
        <para>Backends available for baking lighting.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightingSettings.Lightmapper.Enlighten">
      <summary>
        <para>Backend for baking lighting with the Enlighten radiosity middleware.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightingSettings.Lightmapper.ProgressiveCPU">
      <summary>
        <para>Backend for baking lighting using the CPU. Uses a progressive path tracing algorithm.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightingSettings.Lightmapper.ProgressiveGPU">
      <summary>
        <para>Backend for baking lighting using the GPU. Uses a progressive path tracing algorithm.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LightmapBakeType">
      <summary>
        <para>Enum describing what part of a light contribution can be baked.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightmapBakeType.Baked">
      <summary>
        <para>Baked lights cannot move or change in any way during run time. All lighting for static objects gets baked into lightmaps. Lighting and shadows for dynamic objects gets baked into Light Probes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightmapBakeType.Mixed">
      <summary>
        <para>Mixed lights allow a mix of realtime and baked lighting, based on the Mixed Lighting Mode used. These lights cannot move, but can change color and intensity at run time. Changes to color and intensity only affect direct lighting as indirect lighting gets baked. If using Subtractive mode, changes to color or intensity are not calculated at run time on static objects.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightmapBakeType.Realtime">
      <summary>
        <para>Realtime lights cast run time light and shadows. They can change position, orientation, color, brightness, and many other properties at run time. No lighting gets baked into lightmaps or light probes..</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LightmapData">
      <summary>
        <para>Data of a lightmap.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightmapData.lightmapColor">
      <summary>
        <para>Lightmap storing color of incoming light.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightmapData.lightmapDir">
      <summary>
        <para>Lightmap storing dominant direction of incoming light.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightmapData.shadowMask">
      <summary>
        <para>Texture storing occlusion mask per light (ShadowMask, up to four lights).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LightmapSettings">
      <summary>
        <para>Stores lightmaps of the Scene.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightmapSettings.lightmaps">
      <summary>
        <para>Lightmap array.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightmapSettings.lightmapsMode">
      <summary>
        <para>NonDirectional or CombinedDirectional Specular lightmaps rendering mode.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightmapSettings.lightProbes">
      <summary>
        <para>Baked Light Probe data.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LightmapsMode">
      <summary>
        <para>Lightmap (and lighting) configuration mode, controls how lightmaps interact with lighting and what kind of information they store.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightmapsMode.CombinedDirectional">
      <summary>
        <para>Directional information for direct light is combined with directional information for indirect light, encoded as 2 lightmaps.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightmapsMode.NonDirectional">
      <summary>
        <para>Light intensity (no directional information), encoded as 1 lightmap.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightmapsMode.SeparateDirectional">
      <summary>
        <para>Directional information for direct light is stored separately from directional information for indirect light, encoded as 4 lightmaps.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LightmapsModeLegacy">
      <summary>
        <para>Single, dual, or directional lightmaps rendering mode, used only in GIWorkflowMode.Legacy</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightmapsModeLegacy.Directional">
      <summary>
        <para>Directional rendering mode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightmapsModeLegacy.Dual">
      <summary>
        <para>Dual lightmap rendering mode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightmapsModeLegacy.Single">
      <summary>
        <para>Single, traditional lightmap rendering mode.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LightProbeGroup">
      <summary>
        <para>Light Probe Group.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightProbeGroup.dering">
      <summary>
        <para>Removes ringing from probes if enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightProbeGroup.probePositions">
      <summary>
        <para>Editor only function to access and modify probe positions.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LightProbeProxyVolume">
      <summary>
        <para>The Light Probe Proxy Volume component offers the possibility to use higher resolution lighting for large non-static GameObjects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightProbeProxyVolume.boundingBoxMode">
      <summary>
        <para>The bounding box mode for generating the 3D grid of interpolated Light Probes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightProbeProxyVolume.boundsGlobal">
      <summary>
        <para>The world-space bounding box in which the 3D grid of interpolated Light Probes is generated.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightProbeProxyVolume.dataFormat">
      <summary>
        <para>The texture data format used by the Light Probe Proxy Volume 3D texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightProbeProxyVolume.gridResolutionX">
      <summary>
        <para>The 3D grid resolution on the x-axis.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightProbeProxyVolume.gridResolutionY">
      <summary>
        <para>The 3D grid resolution on the y-axis.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightProbeProxyVolume.gridResolutionZ">
      <summary>
        <para>The 3D grid resolution on the z-axis.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightProbeProxyVolume.isFeatureSupported">
      <summary>
        <para>Checks if Light Probe Proxy Volumes are supported.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightProbeProxyVolume.originCustom">
      <summary>
        <para>The local-space origin of the bounding box in which the 3D grid of interpolated Light Probes is generated.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightProbeProxyVolume.probeDensity">
      <summary>
        <para>Interpolated Light Probe density.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightProbeProxyVolume.probePositionMode">
      <summary>
        <para>The mode in which the interpolated Light Probe positions are generated.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightProbeProxyVolume.qualityMode">
      <summary>
        <para>Determines how many Spherical Harmonics bands will be evaluated to compute the ambient color.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightProbeProxyVolume.refreshMode">
      <summary>
        <para>Sets the way the Light Probe Proxy Volume refreshes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightProbeProxyVolume.resolutionMode">
      <summary>
        <para>The resolution mode for generating the grid of interpolated Light Probes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightProbeProxyVolume.sizeCustom">
      <summary>
        <para>The size of the bounding box in which the 3D grid of interpolated Light Probes is generated.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LightProbeProxyVolume.BoundingBoxMode">
      <summary>
        <para>The bounding box mode for generating a grid of interpolated Light Probes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightProbeProxyVolume.BoundingBoxMode.AutomaticLocal">
      <summary>
        <para>The bounding box encloses the current Renderer and all the relevant Renderers down the hierarchy, in local space.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightProbeProxyVolume.BoundingBoxMode.AutomaticWorld">
      <summary>
        <para>The bounding box encloses the current Renderer and all the relevant Renderers down the hierarchy, in world space.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightProbeProxyVolume.BoundingBoxMode.Custom">
      <summary>
        <para>A custom local-space bounding box is used. The user is able to edit the bounding box.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LightProbeProxyVolume.DataFormat">
      <summary>
        <para>The texture data format used by the Light Probe Proxy Volume 3D texture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightProbeProxyVolume.DataFormat.Float">
      <summary>
        <para>A 32-bit floating-point format is used for the Light Probe Proxy Volume 3D texture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightProbeProxyVolume.DataFormat.HalfFloat">
      <summary>
        <para>A 16-bit half floating-point format is used for the Light Probe Proxy Volume 3D texture.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LightProbeProxyVolume.ProbePositionMode">
      <summary>
        <para>The mode in which the interpolated Light Probe positions are generated.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightProbeProxyVolume.ProbePositionMode.CellCenter">
      <summary>
        <para>Divide the volume in cells based on resolution, and generate interpolated Light Probe positions in the center of the cells.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightProbeProxyVolume.ProbePositionMode.CellCorner">
      <summary>
        <para>Divide the volume in cells based on resolution, and generate interpolated Light Probes positions in the corner/edge of the cells.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LightProbeProxyVolume.QualityMode">
      <summary>
        <para>An enum describing the Quality option used by the Light Probe Proxy Volume component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightProbeProxyVolume.QualityMode.Low">
      <summary>
        <para>This option will use only two SH coefficients bands: L0 and L1. The coefficients are sampled from the Light Probe Proxy Volume 3D Texture. Using this option might increase the draw call batch sizes by not having to change the L2 coefficients per Renderer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightProbeProxyVolume.QualityMode.Normal">
      <summary>
        <para>This option will use L0 and L1 SH coefficients from the Light Probe Proxy Volume 3D Texture. The L2 coefficients are constant per Renderer. By having to provide the L2 coefficients, draw call batches might be broken.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LightProbeProxyVolume.RefreshMode">
      <summary>
        <para>An enum describing the way a Light Probe Proxy Volume refreshes in the Player.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightProbeProxyVolume.RefreshMode.Automatic">
      <summary>
        <para>Automatically detects updates in Light Probes and triggers an update of the Light Probe volume.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightProbeProxyVolume.RefreshMode.EveryFrame">
      <summary>
        <para>Causes Unity to update the Light Probe Proxy Volume every frame.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightProbeProxyVolume.RefreshMode.ViaScripting">
      <summary>
        <para>Use this option to indicate that the Light Probe Proxy Volume is never to be automatically updated by Unity.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LightProbeProxyVolume.ResolutionMode">
      <summary>
        <para>The resolution mode for generating a grid of interpolated Light Probes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightProbeProxyVolume.ResolutionMode.Automatic">
      <summary>
        <para>The automatic mode uses a number of interpolated Light Probes per unit area, and uses the bounding volume size to compute the resolution. The final resolution value is a power of 2.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightProbeProxyVolume.ResolutionMode.Custom">
      <summary>
        <para>The custom mode allows you to specify the 3D grid resolution.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.LightProbeProxyVolume.Update">
      <summary>
        <para>Triggers an update of the Light Probe Proxy Volume.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LightProbes">
      <summary>
        <para>Stores light probe data for all currently loaded Scenes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightProbes.bakedProbes">
      <summary>
        <para>Coefficients of baked light probes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightProbes.cellCount">
      <summary>
        <para>The number of cells space is divided into (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightProbes.count">
      <summary>
        <para>The number of light probes (Read Only).</para>
      </summary>
    </member>
    <member name="?:UnityEngine.LightProbes.needsRetetrahedralization(System.Action)">
      <summary>
        <para>An event which is called when the number of currently loaded light probes changes due to additive scene loading or unloading.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="P:UnityEngine.LightProbes.positions">
      <summary>
        <para>Positions of the baked light probes (Read Only).</para>
      </summary>
    </member>
    <member name="?:UnityEngine.LightProbes.tetrahedralizationCompleted(System.Action)">
      <summary>
        <para>Event which is called after LightProbes.Tetrahedralize or LightProbes.TetrahedralizeAsync has finished computing a tetrahedralization.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.LightProbes.CalculateInterpolatedLightAndOcclusionProbes(UnityEngine.Vector3[],UnityEngine.Rendering.SphericalHarmonicsL2[],UnityEngine.Vector4[])">
      <summary>
        <para>Calculate light probes and occlusion probes at the given world space positions.</para>
      </summary>
      <param name="positions">The array of world space positions used to evaluate the probes.</param>
      <param name="lightProbes">The array where the resulting light probes are written to.</param>
      <param name="occlusionProbes">The array where the resulting occlusion probes are written to.</param>
    </member>
    <member name="M:UnityEngine.LightProbes.CalculateInterpolatedLightAndOcclusionProbes(System.Collections.Generic.List`1&lt;UnityEngine.Vector3&gt;,System.Collections.Generic.List`1&lt;UnityEngine.Rendering.SphericalHarmonicsL2&gt;,System.Collections.Generic.List`1&lt;UnityEngine.Vector4&gt;)">
      <summary>
        <para>Calculate light probes and occlusion probes at the given world space positions.</para>
      </summary>
      <param name="positions">The array of world space positions used to evaluate the probes.</param>
      <param name="lightProbes">The array where the resulting light probes are written to.</param>
      <param name="occlusionProbes">The array where the resulting occlusion probes are written to.</param>
    </member>
    <member name="M:UnityEngine.LightProbes.GetInterpolatedProbe(UnityEngine.Vector3,UnityEngine.Renderer,UnityEngine.Rendering.SphericalHarmonicsL2&amp;)">
      <summary>
        <para>Returns an interpolated probe for the given position for both realtime and baked light probes combined.</para>
      </summary>
      <param name="position"></param>
      <param name="renderer"></param>
      <param name="probe"></param>
    </member>
    <member name="M:UnityEngine.LightProbes.Tetrahedralize">
      <summary>
        <para>Synchronously tetrahedralize the currently loaded LightProbe positions.</para>
      </summary>
      <returns>
        <para>Returns true if the tetrahedralization finished successfully.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.LightProbes.TetrahedralizeAsync">
      <summary>
        <para>Asynchronously tetrahedralize the currently loaded LightProbe positions.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.LightProbes.TetrahedralizeAsync">
      <summary>
        <para>Asynchronously tetrahedralize the currently loaded LightProbe positions.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LightRenderMode">
      <summary>
        <para>How the Light is rendered.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightRenderMode.Auto">
      <summary>
        <para>Automatically choose the render mode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightRenderMode.ForcePixel">
      <summary>
        <para>Force the Light to be a pixel light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightRenderMode.ForceVertex">
      <summary>
        <para>Force the Light to be a vertex light.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LightShadowCasterMode">
      <summary>
        <para>Allows mixed lights to control shadow caster culling when Shadowmasks are present.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightShadowCasterMode.Default">
      <summary>
        <para>Use the global Shadowmask Mode from the quality settings.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightShadowCasterMode.Everything">
      <summary>
        <para>Render all shadow casters into the shadow map. This corresponds with the distance Shadowmask mode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightShadowCasterMode.NonLightmappedOnly">
      <summary>
        <para>Render only non-lightmapped objects into the shadow map. This corresponds with the Shadowmask mode.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LightShadows">
      <summary>
        <para>Shadow casting options for a Light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightShadows.Hard">
      <summary>
        <para>Cast "hard" shadows (with no shadow filtering).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightShadows.None">
      <summary>
        <para>Do not cast shadows (default).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightShadows.Soft">
      <summary>
        <para>Cast "soft" shadows (with 4x PCF filtering).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LightShape">
      <summary>
        <para>Describes the shape of a spot light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightShape.Box">
      <summary>
        <para>The shape of the spot light resembles a box oriented along the ray direction.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightShape.Cone">
      <summary>
        <para>The shape of the spot light resembles a cone. This is the default shape for spot lights.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightShape.Pyramid">
      <summary>
        <para>The shape of the spotlight resembles a pyramid or frustum. You can use this to simulate a screening or barn door effect on a normal spotlight.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LightType">
      <summary>
        <para>The type of a Light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightType.Directional">
      <summary>
        <para>The light is a directional light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightType.Disc">
      <summary>
        <para>The light is a disc shaped area light. It affects only baked lightmaps and lightprobes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightType.Point">
      <summary>
        <para>The light is a point light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightType.Rectangle">
      <summary>
        <para>The light is a rectangle shaped area light. It affects only baked lightmaps and lightprobes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightType.Spot">
      <summary>
        <para>The light is a spot light.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LineAlignment">
      <summary>
        <para>Control the direction lines face, when using the LineRenderer or TrailRenderer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LineAlignment.Local">
      <summary>
        <para>Lines face the direction of the Transform Component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LineAlignment.TransformZ">
      <summary>
        <para>Lines face the Z axis of the Transform Component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LineAlignment.View">
      <summary>
        <para>Lines face the camera.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LineRenderer">
      <summary>
        <para>The line renderer is used to draw free-floating lines in 3D space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LineRenderer.alignment">
      <summary>
        <para>Select whether the line will face the camera, or the orientation of the Transform Component.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LineRenderer.colorGradient">
      <summary>
        <para>Set the color gradient describing the color of the line at various points along its length.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LineRenderer.endColor">
      <summary>
        <para>Set the color at the end of the line.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LineRenderer.endWidth">
      <summary>
        <para>Set the width at the end of the line.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LineRenderer.generateLightingData">
      <summary>
        <para>Configures a line to generate Normals and Tangents. With this data, Scene lighting can affect the line via Normal Maps and the Unity Standard Shader, or your own custom-built Shaders.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LineRenderer.loop">
      <summary>
        <para>Connect the start and end positions of the line together to form a continuous loop.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LineRenderer.numCapVertices">
      <summary>
        <para>Set this to a value greater than 0, to get rounded corners on each end of the line.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LineRenderer.numCornerVertices">
      <summary>
        <para>Set this to a value greater than 0, to get rounded corners between each segment of the line.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LineRenderer.numPositions">
      <summary>
        <para>Set the number of line segments.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LineRenderer.positionCount">
      <summary>
        <para>Set/get the number of vertices.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LineRenderer.shadowBias">
      <summary>
        <para>Apply a shadow bias to prevent self-shadowing artifacts. The specified value is the proportion of the line width at each segment.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LineRenderer.startColor">
      <summary>
        <para>Set the color at the start of the line.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LineRenderer.startWidth">
      <summary>
        <para>Set the width at the start of the line.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LineRenderer.textureMode">
      <summary>
        <para>Choose whether the U coordinate of the line texture is tiled or stretched.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LineRenderer.useWorldSpace">
      <summary>
        <para>If enabled, the lines are defined in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LineRenderer.widthCurve">
      <summary>
        <para>Set the curve describing the width of the line at various points along its length.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LineRenderer.widthMultiplier">
      <summary>
        <para>Set an overall multiplier that is applied to the LineRenderer.widthCurve to get the final width of the line.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.LineRenderer.BakeMesh(UnityEngine.Mesh,System.Boolean)">
      <summary>
        <para>Creates a snapshot of LineRenderer and stores it in mesh.</para>
      </summary>
      <param name="mesh">A static mesh that will receive the snapshot of the line.</param>
      <param name="camera">The camera used for determining which way camera-space lines will face.</param>
      <param name="useTransform">Include the rotation and scale of the Transform in the baked mesh.</param>
    </member>
    <member name="M:UnityEngine.LineRenderer.BakeMesh(UnityEngine.Mesh)">
      <summary>
        <para>Creates a snapshot of LineRenderer and stores it in mesh.</para>
      </summary>
      <param name="mesh">A static mesh that will receive the snapshot of the line.</param>
      <param name="camera">The camera used for determining which way camera-space lines will face.</param>
      <param name="useTransform">Include the rotation and scale of the Transform in the baked mesh.</param>
    </member>
    <member name="M:UnityEngine.LineRenderer.BakeMesh(UnityEngine.Mesh,UnityEngine.Camera,System.Boolean)">
      <summary>
        <para>Creates a snapshot of LineRenderer and stores it in mesh.</para>
      </summary>
      <param name="mesh">A static mesh that will receive the snapshot of the line.</param>
      <param name="camera">The camera used for determining which way camera-space lines will face.</param>
      <param name="useTransform">Include the rotation and scale of the Transform in the baked mesh.</param>
    </member>
    <member name="M:UnityEngine.LineRenderer.BakeMesh(UnityEngine.Mesh,UnityEngine.Camera)">
      <summary>
        <para>Creates a snapshot of LineRenderer and stores it in mesh.</para>
      </summary>
      <param name="mesh">A static mesh that will receive the snapshot of the line.</param>
      <param name="camera">The camera used for determining which way camera-space lines will face.</param>
      <param name="useTransform">Include the rotation and scale of the Transform in the baked mesh.</param>
    </member>
    <member name="M:UnityEngine.LineRenderer.GetPosition(System.Int32)">
      <summary>
        <para>Get the position of a vertex in the line.</para>
      </summary>
      <param name="index">The index of the position to retrieve.</param>
      <returns>
        <para>The position at the specified index in the array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.LineRenderer.GetPositions(UnityEngine.Vector3[])">
      <summary>
        <para>Get the positions of all vertices in the line.</para>
      </summary>
      <param name="positions">The array of positions to retrieve. The array passed should be of at least positionCount in size.</param>
      <returns>
        <para>How many positions were actually stored in the output array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.LineRenderer.GetPositions(Unity.Collections.NativeArray`1&lt;UnityEngine.Vector3&gt;)">
      <summary>
        <para>Get the positions of all vertices in the line.</para>
      </summary>
      <param name="positions">The array of positions to retrieve. The array passed should be of at least positionCount in size.</param>
      <returns>
        <para>How many positions were actually stored in the output array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.LineRenderer.GetPositions(Unity.Collections.NativeSlice`1&lt;UnityEngine.Vector3&gt;)">
      <summary>
        <para>Get the positions of all vertices in the line.</para>
      </summary>
      <param name="positions">The array of positions to retrieve. The array passed should be of at least positionCount in size.</param>
      <returns>
        <para>How many positions were actually stored in the output array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.LineRenderer.SetColors(UnityEngine.Color,UnityEngine.Color)">
      <summary>
        <para>Set the line color at the start and at the end.</para>
      </summary>
      <param name="start"></param>
      <param name="end"></param>
    </member>
    <member name="M:UnityEngine.LineRenderer.SetPosition(System.Int32,UnityEngine.Vector3)">
      <summary>
        <para>Set the position of a vertex in the line.</para>
      </summary>
      <param name="index">Which position to set.</param>
      <param name="position">The new position.</param>
    </member>
    <member name="M:UnityEngine.LineRenderer.SetPositions(UnityEngine.Vector3[])">
      <summary>
        <para>Set the positions of all vertices in the line.</para>
      </summary>
      <param name="positions">The array of positions to set.</param>
    </member>
    <member name="M:UnityEngine.LineRenderer.SetPositions(Unity.Collections.NativeArray`1&lt;UnityEngine.Vector3&gt;)">
      <summary>
        <para>Set the positions of all vertices in the line.</para>
      </summary>
      <param name="positions">The array of positions to set.</param>
    </member>
    <member name="M:UnityEngine.LineRenderer.SetPositions(Unity.Collections.NativeSlice`1&lt;UnityEngine.Vector3&gt;)">
      <summary>
        <para>Set the positions of all vertices in the line.</para>
      </summary>
      <param name="positions">The array of positions to set.</param>
    </member>
    <member name="M:UnityEngine.LineRenderer.SetVertexCount(System.Int32)">
      <summary>
        <para>Set the number of line segments.</para>
      </summary>
      <param name="count"></param>
    </member>
    <member name="M:UnityEngine.LineRenderer.SetWidth(System.Single,System.Single)">
      <summary>
        <para>Set the line width at the start and at the end.</para>
      </summary>
      <param name="start"></param>
      <param name="end"></param>
    </member>
    <member name="M:UnityEngine.LineRenderer.Simplify(System.Single)">
      <summary>
        <para>Generates a simplified version of the original line by removing points that fall within the specified tolerance.</para>
      </summary>
      <param name="tolerance">This value is used to evaluate which points should be removed from the line. A higher value results in a simpler line (less points). A positive value close to zero results in a line with little to no reduction. A value of zero or less has no effect.</param>
    </member>
    <member name="T:UnityEngine.LineTextureMode">
      <summary>
        <para>Choose how textures are applied to Lines and Trails.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LineTextureMode.DistributePerSegment">
      <summary>
        <para>Map the texture once along the entire length of the line, assuming all vertices are evenly spaced.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LineTextureMode.RepeatPerSegment">
      <summary>
        <para>Repeat the texture along the line, repeating at a rate of once per line segment. To adjust the tiling rate, use Material.SetTextureScale.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LineTextureMode.Stretch">
      <summary>
        <para>Map the texture once along the entire length of the line.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LineTextureMode.Tile">
      <summary>
        <para>Repeat the texture along the line, based on its length in world units. To set the tiling rate, use Material.SetTextureScale.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LineUtility">
      <summary>
        <para>A collection of common line functions.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.LineUtility.Simplify(System.Collections.Generic.List`1&lt;UnityEngine.Vector3&gt;,System.Single,System.Collections.Generic.List`1&lt;System.Int32&gt;)">
      <summary>
        <para>Generates a simplified version of the original line by removing points that fall within the specified tolerance.</para>
      </summary>
      <param name="points">The points that make up the original line.</param>
      <param name="tolerance">This value is used to evaluate which points should be removed from the line. A higher value results in a simpler line (less points). A positive value close to zero results in a line with little to no reduction. A value of zero or less has no effect.</param>
      <param name="pointsToKeep">Populated by this function. Contains the indexes of the points that should be generate a simplified version..</param>
      <param name="simplifiedPoints">Populated by this function. Contains the points that form the simplified line.</param>
    </member>
    <member name="M:UnityEngine.LineUtility.Simplify(System.Collections.Generic.List`1&lt;UnityEngine.Vector3&gt;,System.Single,System.Collections.Generic.List`1&lt;UnityEngine.Vector3&gt;)">
      <summary>
        <para>Generates a simplified version of the original line by removing points that fall within the specified tolerance.</para>
      </summary>
      <param name="points">The points that make up the original line.</param>
      <param name="tolerance">This value is used to evaluate which points should be removed from the line. A higher value results in a simpler line (less points). A positive value close to zero results in a line with little to no reduction. A value of zero or less has no effect.</param>
      <param name="pointsToKeep">Populated by this function. Contains the indexes of the points that should be generate a simplified version..</param>
      <param name="simplifiedPoints">Populated by this function. Contains the points that form the simplified line.</param>
    </member>
    <member name="M:UnityEngine.LineUtility.Simplify(System.Collections.Generic.List`1&lt;UnityEngine.Vector2&gt;,System.Single,System.Collections.Generic.List`1&lt;System.Int32&gt;)">
      <summary>
        <para>Generates a simplified version of the original line by removing points that fall within the specified tolerance.</para>
      </summary>
      <param name="points">The points that make up the original line.</param>
      <param name="tolerance">This value is used to evaluate which points should be removed from the line. A higher value results in a simpler line (less points). A positive value close to zero results in a line with little to no reduction. A value of zero or less has no effect.</param>
      <param name="pointsToKeep">Populated by this function. Contains the indexes of the points that should be generate a simplified version..</param>
      <param name="simplifiedPoints">Populated by this function. Contains the points that form the simplified line.</param>
    </member>
    <member name="M:UnityEngine.LineUtility.Simplify(System.Collections.Generic.List`1&lt;UnityEngine.Vector2&gt;,System.Single,System.Collections.Generic.List`1&lt;UnityEngine.Vector2&gt;)">
      <summary>
        <para>Generates a simplified version of the original line by removing points that fall within the specified tolerance.</para>
      </summary>
      <param name="points">The points that make up the original line.</param>
      <param name="tolerance">This value is used to evaluate which points should be removed from the line. A higher value results in a simpler line (less points). A positive value close to zero results in a line with little to no reduction. A value of zero or less has no effect.</param>
      <param name="pointsToKeep">Populated by this function. Contains the indexes of the points that should be generate a simplified version..</param>
      <param name="simplifiedPoints">Populated by this function. Contains the points that form the simplified line.</param>
    </member>
    <member name="T:UnityEngine.LOD">
      <summary>
        <para>Structure for building a LOD for passing to the SetLODs function.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LOD.fadeTransitionWidth">
      <summary>
        <para>Width of the cross-fade transition zone (proportion to the current LOD's whole length) [0-1]. Only used if it's not animated.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LOD.renderers">
      <summary>
        <para>List of renderers for this LOD level.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LOD.screenRelativeTransitionHeight">
      <summary>
        <para>The screen relative height to use for the transition [0-1].</para>
      </summary>
    </member>
    <member name="M:UnityEngine.LOD.#ctor(System.Single,UnityEngine.Renderer[])">
      <summary>
        <para>Construct a LOD.</para>
      </summary>
      <param name="screenRelativeTransitionHeight">The screen relative height to use for the transition [0-1].</param>
      <param name="renderers">An array of renderers to use for this LOD level.</param>
    </member>
    <member name="T:UnityEngine.LODFadeMode">
      <summary>
        <para>The LOD fade modes. Modes other than LODFadeMode.None will result in Unity calculating a blend factor for blending/interpolating between two neighbouring LODs and pass it to your shader.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LODFadeMode.CrossFade">
      <summary>
        <para>Perform cross-fade style blending between the current LOD and the next LOD if the distance to camera falls in the range specified by the LOD.fadeTransitionWidth of each LOD.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LODFadeMode.None">
      <summary>
        <para>Indicates the LOD fading is turned off.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LODFadeMode.SpeedTree">
      <summary>
        <para>By specifying this mode, your LODGroup will perform a SpeedTree-style LOD fading scheme:


* For all the mesh LODs other than the last (most crude) mesh LOD, the fade factor is calculated as the percentage of the object's current screen height, compared to the whole range of the LOD. It is 1, if the camera is right at the position where the previous LOD switches out and 0, if the next LOD is just about to switch in.


* For the last mesh LOD and the billboard LOD, the cross-fade mode is used.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LODGroup">
      <summary>
        <para>LODGroup lets you group multiple Renderers into LOD levels.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LODGroup.animateCrossFading">
      <summary>
        <para>Specify if the cross-fading should be animated by time. The animation duration is specified globally as crossFadeAnimationDuration.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LODGroup.crossFadeAnimationDuration">
      <summary>
        <para>The cross-fading animation duration in seconds. ArgumentException will be thrown if it is set to zero or a negative value.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LODGroup.enabled">
      <summary>
        <para>Allows you to enable or disable the LODGroup.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LODGroup.fadeMode">
      <summary>
        <para>The LOD fade mode used.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LODGroup.localReferencePoint">
      <summary>
        <para>The local reference point against which the LOD distance is calculated.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LODGroup.lodCount">
      <summary>
        <para>The number of LOD levels.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LODGroup.size">
      <summary>
        <para>The size of the LOD object in local space.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.LODGroup.ForceLOD(System.Int32)">
      <summary>
        <para></para>
      </summary>
      <param name="index">The LOD level to use. Passing index &lt; 0 will return to standard LOD processing.</param>
    </member>
    <member name="M:UnityEngine.LODGroup.GetLODs">
      <summary>
        <para>Returns the array of LODs.</para>
      </summary>
      <returns>
        <para>The LOD array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.LODGroup.RecalculateBounds">
      <summary>
        <para>Recalculate the bounding region for the LODGroup (Relatively slow, do not call often).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.LODGroup.SetLODs(UnityEngine.LOD[])">
      <summary>
        <para>Set the LODs for the LOD group. This will remove any existing LODs configured on the LODGroup.</para>
      </summary>
      <param name="lods">The LODs to use for this group.</param>
    </member>
    <member name="T:UnityEngine.Logger">
      <summary>
        <para>Initializes a new instance of the Logger.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Logger.filterLogType">
      <summary>
        <para>To selective enable debug log message.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Logger.logEnabled">
      <summary>
        <para>To runtime toggle debug logging [ON/OFF].</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Logger.logHandler">
      <summary>
        <para>Set  Logger.ILogHandler.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Logger.#ctor(UnityEngine.ILogHandler)">
      <summary>
        <para>Create a custom Logger.</para>
      </summary>
      <param name="logHandler">Pass in default log handler or custom log handler.</param>
    </member>
    <member name="M:UnityEngine.Logger.IsLogTypeAllowed(UnityEngine.LogType)">
      <summary>
        <para>Check logging is enabled based on the LogType.</para>
      </summary>
      <param name="logType">The type of the log message.</param>
      <returns>
        <para>Retrun true in case logs of LogType will be logged otherwise returns false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Logger.Log(UnityEngine.LogType,System.Object)">
      <summary>
        <para>Logs message to the Unity Console using default logger.</para>
      </summary>
      <param name="logType">The type of the log message.</param>
      <param name="tag">Used to identify the source of a log message. It usually identifies the class where the log call occurs.</param>
      <param name="message">String or object to be converted to string representation for display.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="M:UnityEngine.Logger.Log(UnityEngine.LogType,System.Object,UnityEngine.Object)">
      <summary>
        <para>Logs message to the Unity Console using default logger.</para>
      </summary>
      <param name="logType">The type of the log message.</param>
      <param name="tag">Used to identify the source of a log message. It usually identifies the class where the log call occurs.</param>
      <param name="message">String or object to be converted to string representation for display.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="M:UnityEngine.Logger.Log(UnityEngine.LogType,System.String,System.Object)">
      <summary>
        <para>Logs message to the Unity Console using default logger.</para>
      </summary>
      <param name="logType">The type of the log message.</param>
      <param name="tag">Used to identify the source of a log message. It usually identifies the class where the log call occurs.</param>
      <param name="message">String or object to be converted to string representation for display.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="M:UnityEngine.Logger.Log(UnityEngine.LogType,System.String,System.Object,UnityEngine.Object)">
      <summary>
        <para>Logs message to the Unity Console using default logger.</para>
      </summary>
      <param name="logType">The type of the log message.</param>
      <param name="tag">Used to identify the source of a log message. It usually identifies the class where the log call occurs.</param>
      <param name="message">String or object to be converted to string representation for display.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="M:UnityEngine.Logger.Log(System.Object)">
      <summary>
        <para>Logs message to the Unity Console using default logger.</para>
      </summary>
      <param name="logType">The type of the log message.</param>
      <param name="tag">Used to identify the source of a log message. It usually identifies the class where the log call occurs.</param>
      <param name="message">String or object to be converted to string representation for display.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="M:UnityEngine.Logger.Log(System.String,System.Object)">
      <summary>
        <para>Logs message to the Unity Console using default logger.</para>
      </summary>
      <param name="logType">The type of the log message.</param>
      <param name="tag">Used to identify the source of a log message. It usually identifies the class where the log call occurs.</param>
      <param name="message">String or object to be converted to string representation for display.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="M:UnityEngine.Logger.Log(System.String,System.Object,UnityEngine.Object)">
      <summary>
        <para>Logs message to the Unity Console using default logger.</para>
      </summary>
      <param name="logType">The type of the log message.</param>
      <param name="tag">Used to identify the source of a log message. It usually identifies the class where the log call occurs.</param>
      <param name="message">String or object to be converted to string representation for display.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="M:UnityEngine.Logger.LogError(System.String,System.Object)">
      <summary>
        <para>A variant of Logger.Log that logs an error message.</para>
      </summary>
      <param name="tag">Used to identify the source of a log message. It usually identifies the class where the log call occurs.</param>
      <param name="message">String or object to be converted to string representation for display.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="M:UnityEngine.Logger.LogError(System.String,System.Object,UnityEngine.Object)">
      <summary>
        <para>A variant of Logger.Log that logs an error message.</para>
      </summary>
      <param name="tag">Used to identify the source of a log message. It usually identifies the class where the log call occurs.</param>
      <param name="message">String or object to be converted to string representation for display.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="M:UnityEngine.Logger.LogException(System.Exception)">
      <summary>
        <para>A variant of Logger.Log that logs an exception message.</para>
      </summary>
      <param name="exception">Runtime Exception.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="M:UnityEngine.Logger.LogException(System.Exception,UnityEngine.Object)">
      <summary>
        <para>A variant of Logger.Log that logs an exception message.</para>
      </summary>
      <param name="exception">Runtime Exception.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="M:UnityEngine.Logger.LogFormat(UnityEngine.LogType,System.String,System.Object[])">
      <summary>
        <para>Logs a formatted message.</para>
      </summary>
      <param name="logType">The type of the log message.</param>
      <param name="context">Object to which the message applies.</param>
      <param name="format">A composite format string.</param>
      <param name="args">Format arguments.</param>
    </member>
    <member name="M:UnityEngine.Logger.LogFormat(UnityEngine.LogType,UnityEngine.Object,System.String,System.Object[])">
      <summary>
        <para>Logs a formatted message.</para>
      </summary>
      <param name="logType">The type of the log message.</param>
      <param name="context">Object to which the message applies.</param>
      <param name="format">A composite format string.</param>
      <param name="args">Format arguments.</param>
    </member>
    <member name="M:UnityEngine.Logger.LogWarning(System.String,System.Object)">
      <summary>
        <para>A variant of Logger.Log that logs an warning message.</para>
      </summary>
      <param name="tag">Used to identify the source of a log message. It usually identifies the class where the log call occurs.</param>
      <param name="message">String or object to be converted to string representation for display.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="M:UnityEngine.Logger.LogWarning(System.String,System.Object,UnityEngine.Object)">
      <summary>
        <para>A variant of Logger.Log that logs an warning message.</para>
      </summary>
      <param name="tag">Used to identify the source of a log message. It usually identifies the class where the log call occurs.</param>
      <param name="message">String or object to be converted to string representation for display.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="T:UnityEngine.LogOption">
      <summary>
        <para>Option flags for specifying special treatment of a log message.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LogOption.None">
      <summary>
        <para>Normal log message.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LogOption.NoStacktrace">
      <summary>
        <para>The log message will not have a stacktrace appended automatically.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LogType">
      <summary>
        <para>The type of the log message in Debug.unityLogger.Log or delegate registered with Application.RegisterLogCallback.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LogType.Assert">
      <summary>
        <para>LogType used for Asserts. (These could also indicate an error inside Unity itself.)</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LogType.Error">
      <summary>
        <para>LogType used for Errors.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LogType.Exception">
      <summary>
        <para>LogType used for Exceptions.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LogType.Log">
      <summary>
        <para>LogType used for regular log messages.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LogType.Warning">
      <summary>
        <para>LogType used for Warnings.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LowLevel.PlayerLoop">
      <summary>
        <para>The class representing the player loop in Unity.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.LowLevel.PlayerLoop.GetCurrentPlayerLoop">
      <summary>
        <para>Returns the current update order of all engine systems in Unity.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.LowLevel.PlayerLoop.GetDefaultPlayerLoop">
      <summary>
        <para>Returns the default update order of all engine systems in Unity.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.LowLevel.PlayerLoop.SetPlayerLoop(UnityEngine.LowLevel.PlayerLoopSystem)">
      <summary>
        <para>Set a new custom update order of all engine systems in Unity.</para>
      </summary>
      <param name="loop"></param>
    </member>
    <member name="T:UnityEngine.LowLevel.PlayerLoopSystem">
      <summary>
        <para>The representation of a single system being updated by the player loop in Unity.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LowLevel.PlayerLoopSystem.loopConditionFunction">
      <summary>
        <para>The loop condition for a native engine system. To get a valid value for this, you must copy it from one of the PlayerLoopSystems returned by PlayerLoop.GetDefaultPlayerLoop.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LowLevel.PlayerLoopSystem.subSystemList">
      <summary>
        <para>A list of sub systems which run as part of this item in the player loop.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LowLevel.PlayerLoopSystem.type">
      <summary>
        <para>This property is used to identify which native system this belongs to, or to get the name of the managed system to show in the profiler.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LowLevel.PlayerLoopSystem.updateDelegate">
      <summary>
        <para>A managed delegate. You can set this to create a new C# entrypoint in the player loop.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LowLevel.PlayerLoopSystem.updateFunction">
      <summary>
        <para>A native engine system. To get a valid value for this, you must copy it from one of the PlayerLoopSystems returned by PlayerLoop.GetDefaultPlayerLoop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Lumin.UsesLuminPlatformLevelAttribute">
      <summary>
        <para>This attribute provides a way to declaratively define a Lumin platform level requirement that is automatically added to the manifest at build time.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Lumin.UsesLuminPlatformLevelAttribute.#ctor(System.UInt32)">
      <summary>
        <para>Minimum platform level that is required.</para>
      </summary>
      <param name="platformLevel"></param>
    </member>
    <member name="T:UnityEngine.Lumin.UsesLuminPrivilegeAttribute">
      <summary>
        <para>This attribute provides a way to declaratively define a Lumin privilege requirement that is automatically added to the manifest at build time.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Lumin.UsesLuminPrivilegeAttribute.#ctor(System.String)">
      <summary>
        <para>Privilege identifer to request</para>
      </summary>
      <param name="privilege"></param>
    </member>
    <member name="T:UnityEngine.MasterServer">
      <summary>
        <para>The Master Server is used to make matchmaking between servers and clients easy.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.MasterServer.dedicatedServer">
      <summary>
        <para>Report this machine as a dedicated server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.MasterServer.ipAddress">
      <summary>
        <para>The IP address of the master server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.MasterServer.port">
      <summary>
        <para>The connection port of the master server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.MasterServer.updateRate">
      <summary>
        <para>Set the minimum update rate for master server host information update.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MasterServer.ClearHostList">
      <summary>
        <para>Clear the host list which was received by MasterServer.PollHostList.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MasterServer.PollHostList">
      <summary>
        <para>Check for the latest host list received by using MasterServer.RequestHostList.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MasterServer.RegisterHost(System.String,System.String)">
      <summary>
        <para>Register this server on the master server.</para>
      </summary>
      <param name="gameTypeName"></param>
      <param name="gameName"></param>
      <param name="comment"></param>
    </member>
    <member name="M:UnityEngine.MasterServer.RegisterHost(System.String,System.String,System.String)">
      <summary>
        <para>Register this server on the master server.</para>
      </summary>
      <param name="gameTypeName"></param>
      <param name="gameName"></param>
      <param name="comment"></param>
    </member>
    <member name="M:UnityEngine.MasterServer.RequestHostList(System.String)">
      <summary>
        <para>Request a host list from the master server.</para>
      </summary>
      <param name="gameTypeName"></param>
    </member>
    <member name="M:UnityEngine.MasterServer.UnregisterHost">
      <summary>
        <para>Unregister this server from the master server.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.MasterServerEvent">
      <summary>
        <para>Describes status messages from the master server as returned in MonoBehaviour.OnMasterServerEvent|OnMasterServerEvent.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Material">
      <summary>
        <para>The material class.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Material.color">
      <summary>
        <para>The main color of the Material.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Material.doubleSidedGI">
      <summary>
        <para>Gets and sets whether the Double Sided Global Illumination setting is enabled for this material.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Material.enableInstancing">
      <summary>
        <para>Gets and sets whether GPU instancing is enabled for this material.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Material.globalIlluminationFlags">
      <summary>
        <para>Defines how the material should interact with lightmaps and lightprobes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Material.mainTexture">
      <summary>
        <para>The main texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Material.mainTextureOffset">
      <summary>
        <para>The offset of the main texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Material.mainTextureScale">
      <summary>
        <para>The scale of the main texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Material.passCount">
      <summary>
        <para>How many passes are in this material (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Material.renderQueue">
      <summary>
        <para>Render queue of this material.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Material.shader">
      <summary>
        <para>The shader used by the material.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Material.shaderKeywords">
      <summary>
        <para>Additional shader keywords set by this material.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.ComputeCRC">
      <summary>
        <para>Computes a CRC hash value from the content of the material.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.CopyPropertiesFromMaterial(UnityEngine.Material)">
      <summary>
        <para>Copy properties from other material into this material.</para>
      </summary>
      <param name="mat"></param>
    </member>
    <member name="M:UnityEngine.Material.#ctor(System.String)">
      <summary>
        <para></para>
      </summary>
      <param name="contents"></param>
    </member>
    <member name="M:UnityEngine.Material.#ctor(UnityEngine.Shader)">
      <summary>
        <para>Create a temporary Material.</para>
      </summary>
      <param name="shader">Create a material with a given Shader.</param>
      <param name="source">Create a material by copying all properties from another material.</param>
    </member>
    <member name="M:UnityEngine.Material.#ctor(UnityEngine.Material)">
      <summary>
        <para>Create a temporary Material.</para>
      </summary>
      <param name="shader">Create a material with a given Shader.</param>
      <param name="source">Create a material by copying all properties from another material.</param>
    </member>
    <member name="M:UnityEngine.Material.DisableKeyword(System.String)">
      <summary>
        <para>Unset a shader keyword.</para>
      </summary>
      <param name="keyword"></param>
    </member>
    <member name="M:UnityEngine.Material.EnableKeyword(System.String)">
      <summary>
        <para>Sets a shader keyword that is enabled by this material.</para>
      </summary>
      <param name="keyword"></param>
    </member>
    <member name="M:UnityEngine.Material.FindPass(System.String)">
      <summary>
        <para>Returns the index of the pass passName.</para>
      </summary>
      <param name="passName"></param>
    </member>
    <member name="M:UnityEngine.Material.GetColor(System.String)">
      <summary>
        <para>Get a named color value.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Material.GetColor(System.Int32)">
      <summary>
        <para>Get a named color value.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Material.GetColorArray(System.String)">
      <summary>
        <para>Get a named color array.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Material.GetColorArray(System.Int32)">
      <summary>
        <para>Get a named color array.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Material.GetColorArray(System.String,System.Collections.Generic.List`1&lt;UnityEngine.Color&gt;)">
      <summary>
        <para>Fetch a named color array into a list.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="values">The list to hold the returned array.</param>
    </member>
    <member name="M:UnityEngine.Material.GetColorArray(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.Color&gt;)">
      <summary>
        <para>Fetch a named color array into a list.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="values">The list to hold the returned array.</param>
    </member>
    <member name="M:UnityEngine.Material.GetFloat(System.String)">
      <summary>
        <para>Get a named float value.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Material.GetFloat(System.Int32)">
      <summary>
        <para>Get a named float value.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Material.GetFloatArray(System.String)">
      <summary>
        <para>Get a named float array.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
    </member>
    <member name="M:UnityEngine.Material.GetFloatArray(System.Int32)">
      <summary>
        <para>Get a named float array.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
    </member>
    <member name="M:UnityEngine.Material.GetFloatArray(System.String,System.Collections.Generic.List`1&lt;System.Single&gt;)">
      <summary>
        <para>Fetch a named float array into a list.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="values">The list to hold the returned array.</param>
    </member>
    <member name="M:UnityEngine.Material.GetFloatArray(System.Int32,System.Collections.Generic.List`1&lt;System.Single&gt;)">
      <summary>
        <para>Fetch a named float array into a list.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="values">The list to hold the returned array.</param>
    </member>
    <member name="M:UnityEngine.Material.GetInt(System.String)">
      <summary>
        <para>Get a named integer value.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Material.GetInt(System.Int32)">
      <summary>
        <para>Get a named integer value.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Material.GetMatrix(System.String)">
      <summary>
        <para>Get a named matrix value from the shader.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Material.GetMatrix(System.Int32)">
      <summary>
        <para>Get a named matrix value from the shader.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Material.GetMatrixArray(System.String)">
      <summary>
        <para>Get a named matrix array.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
    </member>
    <member name="M:UnityEngine.Material.GetMatrixArray(System.Int32)">
      <summary>
        <para>Get a named matrix array.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
    </member>
    <member name="M:UnityEngine.Material.GetMatrixArray(System.String,System.Collections.Generic.List`1&lt;UnityEngine.Matrix4x4&gt;)">
      <summary>
        <para>Fetch a named matrix array into a list.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="values">The list to hold the returned array.</param>
    </member>
    <member name="M:UnityEngine.Material.GetMatrixArray(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.Matrix4x4&gt;)">
      <summary>
        <para>Fetch a named matrix array into a list.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="values">The list to hold the returned array.</param>
    </member>
    <member name="M:UnityEngine.Material.GetPassName(System.Int32)">
      <summary>
        <para>Returns the name of the shader pass at index pass.</para>
      </summary>
      <param name="pass"></param>
    </member>
    <member name="M:UnityEngine.Material.GetShaderPassEnabled(System.String)">
      <summary>
        <para>Checks whether a given Shader pass is enabled on this Material.</para>
      </summary>
      <param name="passName">Shader pass name (case insensitive).</param>
      <returns>
        <para>True if the Shader pass is enabled.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Material.GetTag(System.String,System.Boolean)">
      <summary>
        <para>Get the value of material's shader tag.</para>
      </summary>
      <param name="tag"></param>
      <param name="searchFallbacks"></param>
      <param name="defaultValue"></param>
    </member>
    <member name="M:UnityEngine.Material.GetTag(System.String,System.Boolean,System.String)">
      <summary>
        <para>Get the value of material's shader tag.</para>
      </summary>
      <param name="tag"></param>
      <param name="searchFallbacks"></param>
      <param name="defaultValue"></param>
    </member>
    <member name="M:UnityEngine.Material.GetTexture(System.String)">
      <summary>
        <para>Get a named texture.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Material.GetTexture(System.Int32)">
      <summary>
        <para>Get a named texture.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Material.GetTextureOffset(System.String)">
      <summary>
        <para>Gets the placement offset of texture propertyName.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Material.GetTextureOffset(System.Int32)">
      <summary>
        <para>Gets the placement offset of texture propertyName.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Material.GetTexturePropertyNameIDs">
      <summary>
        <para>Return the name IDs of all texture properties exposed on this material.</para>
      </summary>
      <param name="outNames">IDs of all texture properties exposed on this material.</param>
      <returns>
        <para>IDs of all texture properties exposed on this material.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Material.GetTexturePropertyNameIDs(System.Collections.Generic.List`1&lt;System.Int32&gt;)">
      <summary>
        <para>Return the name IDs of all texture properties exposed on this material.</para>
      </summary>
      <param name="outNames">IDs of all texture properties exposed on this material.</param>
      <returns>
        <para>IDs of all texture properties exposed on this material.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Material.GetTexturePropertyNames">
      <summary>
        <para>Returns the names of all texture properties exposed on this material.</para>
      </summary>
      <param name="outNames">Names of all texture properties exposed on this material.</param>
      <returns>
        <para>Names of all texture properties exposed on this material.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Material.GetTexturePropertyNames(System.Collections.Generic.List`1&lt;System.String&gt;)">
      <summary>
        <para>Returns the names of all texture properties exposed on this material.</para>
      </summary>
      <param name="outNames">Names of all texture properties exposed on this material.</param>
      <returns>
        <para>Names of all texture properties exposed on this material.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Material.GetTextureScale(System.String)">
      <summary>
        <para>Gets the placement scale of texture propertyName.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Material.GetTextureScale(System.Int32)">
      <summary>
        <para>Gets the placement scale of texture propertyName.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Material.GetVector(System.String)">
      <summary>
        <para>Get a named vector value.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Material.GetVector(System.Int32)">
      <summary>
        <para>Get a named vector value.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Material.GetVectorArray(System.String)">
      <summary>
        <para>Get a named vector array.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
    </member>
    <member name="M:UnityEngine.Material.GetVectorArray(System.Int32)">
      <summary>
        <para>Get a named vector array.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
    </member>
    <member name="M:UnityEngine.Material.GetVectorArray(System.String,System.Collections.Generic.List`1&lt;UnityEngine.Vector4&gt;)">
      <summary>
        <para>Fetch a named vector array into a list.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="values">The list to hold the returned array.</param>
    </member>
    <member name="M:UnityEngine.Material.GetVectorArray(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.Vector4&gt;)">
      <summary>
        <para>Fetch a named vector array into a list.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="values">The list to hold the returned array.</param>
    </member>
    <member name="M:UnityEngine.Material.HasProperty(System.String)">
      <summary>
        <para>Checks if material's shader has a property of a given name.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Material.HasProperty(System.Int32)">
      <summary>
        <para>Checks if material's shader has a property of a given name.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Material.IsKeywordEnabled(System.String)">
      <summary>
        <para>Is the shader keyword enabled on this material?</para>
      </summary>
      <param name="keyword"></param>
    </member>
    <member name="M:UnityEngine.Material.Lerp(UnityEngine.Material,UnityEngine.Material,System.Single)">
      <summary>
        <para>Interpolate properties between two materials.</para>
      </summary>
      <param name="start"></param>
      <param name="end"></param>
      <param name="t"></param>
    </member>
    <member name="M:UnityEngine.Material.SetBuffer(System.String,UnityEngine.ComputeBuffer)">
      <summary>
        <para>Sets a named buffer value.</para>
      </summary>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="name">Property name.</param>
      <param name="value">The ComputeBuffer or GraphicsBuffer value to set.</param>
    </member>
    <member name="M:UnityEngine.Material.SetBuffer(System.Int32,UnityEngine.ComputeBuffer)">
      <summary>
        <para>Sets a named buffer value.</para>
      </summary>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="name">Property name.</param>
      <param name="value">The ComputeBuffer or GraphicsBuffer value to set.</param>
    </member>
    <member name="M:UnityEngine.Material.SetBuffer(System.String,UnityEngine.GraphicsBuffer)">
      <summary>
        <para>Sets a named buffer value.</para>
      </summary>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="name">Property name.</param>
      <param name="value">The ComputeBuffer or GraphicsBuffer value to set.</param>
    </member>
    <member name="M:UnityEngine.Material.SetBuffer(System.Int32,UnityEngine.GraphicsBuffer)">
      <summary>
        <para>Sets a named buffer value.</para>
      </summary>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="name">Property name.</param>
      <param name="value">The ComputeBuffer or GraphicsBuffer value to set.</param>
    </member>
    <member name="M:UnityEngine.Material.SetColor(System.String,UnityEngine.Color)">
      <summary>
        <para>Sets a named color value.</para>
      </summary>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="name">Property name, e.g. "_Color".</param>
      <param name="value">Color value to set.</param>
    </member>
    <member name="M:UnityEngine.Material.SetColor(System.Int32,UnityEngine.Color)">
      <summary>
        <para>Sets a named color value.</para>
      </summary>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="name">Property name, e.g. "_Color".</param>
      <param name="value">Color value to set.</param>
    </member>
    <member name="M:UnityEngine.Material.SetColorArray(System.String,UnityEngine.Color[])">
      <summary>
        <para>Sets a color array property.</para>
      </summary>
      <param name="name">Property name.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="values">Array of values to set.</param>
    </member>
    <member name="M:UnityEngine.Material.SetColorArray(System.Int32,UnityEngine.Color[])">
      <summary>
        <para>Sets a color array property.</para>
      </summary>
      <param name="name">Property name.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="values">Array of values to set.</param>
    </member>
    <member name="M:UnityEngine.Material.SetColorArray(System.String,System.Collections.Generic.List`1&lt;UnityEngine.Color&gt;)">
      <summary>
        <para>Sets a color array property.</para>
      </summary>
      <param name="name">Property name.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="values">Array of values to set.</param>
    </member>
    <member name="M:UnityEngine.Material.SetColorArray(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.Color&gt;)">
      <summary>
        <para>Sets a color array property.</para>
      </summary>
      <param name="name">Property name.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="values">Array of values to set.</param>
    </member>
    <member name="M:UnityEngine.Material.SetConstantBuffer(System.String,UnityEngine.ComputeBuffer,System.Int32,System.Int32)">
      <summary>
        <para>Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the material.</para>
      </summary>
      <param name="name">The name of the constant buffer to override.</param>
      <param name="value">The ComputeBuffer to override the constant buffer values with, or null to remove binding.</param>
      <param name="offset">Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.</param>
      <param name="size">The number of bytes to bind.</param>
      <param name="nameID">The shader property ID of the constant buffer to override.</param>
    </member>
    <member name="M:UnityEngine.Material.SetConstantBuffer(System.Int32,UnityEngine.ComputeBuffer,System.Int32,System.Int32)">
      <summary>
        <para>Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the material.</para>
      </summary>
      <param name="name">The name of the constant buffer to override.</param>
      <param name="value">The ComputeBuffer to override the constant buffer values with, or null to remove binding.</param>
      <param name="offset">Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.</param>
      <param name="size">The number of bytes to bind.</param>
      <param name="nameID">The shader property ID of the constant buffer to override.</param>
    </member>
    <member name="M:UnityEngine.Material.SetConstantBuffer(System.String,UnityEngine.GraphicsBuffer,System.Int32,System.Int32)">
      <summary>
        <para>Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the material.</para>
      </summary>
      <param name="name">The name of the constant buffer to override.</param>
      <param name="value">The ComputeBuffer to override the constant buffer values with, or null to remove binding.</param>
      <param name="offset">Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.</param>
      <param name="size">The number of bytes to bind.</param>
      <param name="nameID">The shader property ID of the constant buffer to override.</param>
    </member>
    <member name="M:UnityEngine.Material.SetConstantBuffer(System.Int32,UnityEngine.GraphicsBuffer,System.Int32,System.Int32)">
      <summary>
        <para>Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the material.</para>
      </summary>
      <param name="name">The name of the constant buffer to override.</param>
      <param name="value">The ComputeBuffer to override the constant buffer values with, or null to remove binding.</param>
      <param name="offset">Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.</param>
      <param name="size">The number of bytes to bind.</param>
      <param name="nameID">The shader property ID of the constant buffer to override.</param>
    </member>
    <member name="M:UnityEngine.Material.SetFloat(System.String,System.Single)">
      <summary>
        <para>Sets a named float value.</para>
      </summary>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="value">Float value to set.</param>
      <param name="name">Property name, e.g. "_Glossiness".</param>
    </member>
    <member name="M:UnityEngine.Material.SetFloat(System.Int32,System.Single)">
      <summary>
        <para>Sets a named float value.</para>
      </summary>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="value">Float value to set.</param>
      <param name="name">Property name, e.g. "_Glossiness".</param>
    </member>
    <member name="M:UnityEngine.Material.SetFloatArray(System.String,System.Single[])">
      <summary>
        <para>Sets a float array property.</para>
      </summary>
      <param name="name">Property name.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="values">Array of values to set.</param>
    </member>
    <member name="M:UnityEngine.Material.SetFloatArray(System.Int32,System.Single[])">
      <summary>
        <para>Sets a float array property.</para>
      </summary>
      <param name="name">Property name.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="values">Array of values to set.</param>
    </member>
    <member name="M:UnityEngine.Material.SetFloatArray(System.String,System.Collections.Generic.List`1&lt;System.Single&gt;)">
      <summary>
        <para>Sets a float array property.</para>
      </summary>
      <param name="name">Property name.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="values">Array of values to set.</param>
    </member>
    <member name="M:UnityEngine.Material.SetFloatArray(System.Int32,System.Collections.Generic.List`1&lt;System.Single&gt;)">
      <summary>
        <para>Sets a float array property.</para>
      </summary>
      <param name="name">Property name.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="values">Array of values to set.</param>
    </member>
    <member name="M:UnityEngine.Material.SetInt(System.String,System.Int32)">
      <summary>
        <para>Sets a named integer value.</para>
      </summary>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="value">Integer value to set.</param>
      <param name="name">Property name, e.g. "_SrcBlend".</param>
    </member>
    <member name="M:UnityEngine.Material.SetInt(System.Int32,System.Int32)">
      <summary>
        <para>Sets a named integer value.</para>
      </summary>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="value">Integer value to set.</param>
      <param name="name">Property name, e.g. "_SrcBlend".</param>
    </member>
    <member name="M:UnityEngine.Material.SetMatrix(System.String,UnityEngine.Matrix4x4)">
      <summary>
        <para>Sets a named matrix for the shader.</para>
      </summary>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="name">Property name, e.g. "_CubemapRotation".</param>
      <param name="value">Matrix value to set.</param>
    </member>
    <member name="M:UnityEngine.Material.SetMatrix(System.Int32,UnityEngine.Matrix4x4)">
      <summary>
        <para>Sets a named matrix for the shader.</para>
      </summary>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="name">Property name, e.g. "_CubemapRotation".</param>
      <param name="value">Matrix value to set.</param>
    </member>
    <member name="M:UnityEngine.Material.SetMatrixArray(System.String,UnityEngine.Matrix4x4[])">
      <summary>
        <para>Sets a matrix array property.</para>
      </summary>
      <param name="name">Property name.</param>
      <param name="values">Array of values to set.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
    </member>
    <member name="M:UnityEngine.Material.SetMatrixArray(System.Int32,UnityEngine.Matrix4x4[])">
      <summary>
        <para>Sets a matrix array property.</para>
      </summary>
      <param name="name">Property name.</param>
      <param name="values">Array of values to set.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
    </member>
    <member name="M:UnityEngine.Material.SetMatrixArray(System.String,System.Collections.Generic.List`1&lt;UnityEngine.Matrix4x4&gt;)">
      <summary>
        <para>Sets a matrix array property.</para>
      </summary>
      <param name="name">Property name.</param>
      <param name="values">Array of values to set.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
    </member>
    <member name="M:UnityEngine.Material.SetMatrixArray(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.Matrix4x4&gt;)">
      <summary>
        <para>Sets a matrix array property.</para>
      </summary>
      <param name="name">Property name.</param>
      <param name="values">Array of values to set.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
    </member>
    <member name="M:UnityEngine.Material.SetOverrideTag(System.String,System.String)">
      <summary>
        <para>Sets an override tag/value on the material.</para>
      </summary>
      <param name="tag">Name of the tag to set.</param>
      <param name="val">Name of the value to set. Empty string to clear the override flag.</param>
    </member>
    <member name="M:UnityEngine.Material.SetPass(System.Int32)">
      <summary>
        <para>Activate the given pass for rendering.</para>
      </summary>
      <param name="pass">Shader pass number to setup.</param>
      <returns>
        <para>If false is returned, no rendering should be done.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Material.SetShaderPassEnabled(System.String,System.Boolean)">
      <summary>
        <para>Enables or disables a Shader pass on a per-Material level.</para>
      </summary>
      <param name="passName">Shader pass name (case insensitive).</param>
      <param name="enabled">Flag indicating whether this Shader pass should be enabled.</param>
    </member>
    <member name="M:UnityEngine.Material.SetTexture(System.String,UnityEngine.Texture)">
      <summary>
        <para>Sets a named texture.</para>
      </summary>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="name">Property name, e.g. "_MainTex".</param>
      <param name="value">Texture to set.</param>
      <param name="element">Optional parameter that specifies the type of data to set from the RenderTexture.</param>
    </member>
    <member name="M:UnityEngine.Material.SetTexture(System.Int32,UnityEngine.Texture)">
      <summary>
        <para>Sets a named texture.</para>
      </summary>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="name">Property name, e.g. "_MainTex".</param>
      <param name="value">Texture to set.</param>
      <param name="element">Optional parameter that specifies the type of data to set from the RenderTexture.</param>
    </member>
    <member name="M:UnityEngine.Material.SetTexture(System.String,UnityEngine.RenderTexture,UnityEngine.Rendering.RenderTextureSubElement)">
      <summary>
        <para>Sets a named texture.</para>
      </summary>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="name">Property name, e.g. "_MainTex".</param>
      <param name="value">Texture to set.</param>
      <param name="element">Optional parameter that specifies the type of data to set from the RenderTexture.</param>
    </member>
    <member name="M:UnityEngine.Material.SetTexture(System.Int32,UnityEngine.RenderTexture,UnityEngine.Rendering.RenderTextureSubElement)">
      <summary>
        <para>Sets a named texture.</para>
      </summary>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="name">Property name, e.g. "_MainTex".</param>
      <param name="value">Texture to set.</param>
      <param name="element">Optional parameter that specifies the type of data to set from the RenderTexture.</param>
    </member>
    <member name="M:UnityEngine.Material.SetTextureOffset(System.String,UnityEngine.Vector2)">
      <summary>
        <para>Sets the placement offset of texture propertyName.</para>
      </summary>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="name">Property name, for example: "_MainTex".</param>
      <param name="value">Texture placement offset.</param>
    </member>
    <member name="M:UnityEngine.Material.SetTextureOffset(System.Int32,UnityEngine.Vector2)">
      <summary>
        <para>Sets the placement offset of texture propertyName.</para>
      </summary>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="name">Property name, for example: "_MainTex".</param>
      <param name="value">Texture placement offset.</param>
    </member>
    <member name="M:UnityEngine.Material.SetTextureScale(System.String,UnityEngine.Vector2)">
      <summary>
        <para>Sets the placement scale of texture propertyName.</para>
      </summary>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="name">Property name, e.g. "_MainTex".</param>
      <param name="value">Texture placement scale.</param>
    </member>
    <member name="M:UnityEngine.Material.SetTextureScale(System.Int32,UnityEngine.Vector2)">
      <summary>
        <para>Sets the placement scale of texture propertyName.</para>
      </summary>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="name">Property name, e.g. "_MainTex".</param>
      <param name="value">Texture placement scale.</param>
    </member>
    <member name="M:UnityEngine.Material.SetVector(System.String,UnityEngine.Vector4)">
      <summary>
        <para>Sets a named vector value.</para>
      </summary>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="name">Property name, e.g. "_WaveAndDistance".</param>
      <param name="value">Vector value to set.</param>
    </member>
    <member name="M:UnityEngine.Material.SetVector(System.Int32,UnityEngine.Vector4)">
      <summary>
        <para>Sets a named vector value.</para>
      </summary>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
      <param name="name">Property name, e.g. "_WaveAndDistance".</param>
      <param name="value">Vector value to set.</param>
    </member>
    <member name="M:UnityEngine.Material.SetVectorArray(System.String,UnityEngine.Vector4[])">
      <summary>
        <para>Sets a vector array property.</para>
      </summary>
      <param name="name">Property name.</param>
      <param name="values">Array of values to set.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
    </member>
    <member name="M:UnityEngine.Material.SetVectorArray(System.Int32,UnityEngine.Vector4[])">
      <summary>
        <para>Sets a vector array property.</para>
      </summary>
      <param name="name">Property name.</param>
      <param name="values">Array of values to set.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
    </member>
    <member name="M:UnityEngine.Material.SetVectorArray(System.String,System.Collections.Generic.List`1&lt;UnityEngine.Vector4&gt;)">
      <summary>
        <para>Sets a vector array property.</para>
      </summary>
      <param name="name">Property name.</param>
      <param name="values">Array of values to set.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
    </member>
    <member name="M:UnityEngine.Material.SetVectorArray(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.Vector4&gt;)">
      <summary>
        <para>Sets a vector array property.</para>
      </summary>
      <param name="name">Property name.</param>
      <param name="values">Array of values to set.</param>
      <param name="nameID">Property name ID, use Shader.PropertyToID to get it.</param>
    </member>
    <member name="T:UnityEngine.MaterialGlobalIlluminationFlags">
      <summary>
        <para>How the material interacts with lightmaps and lightprobes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.MaterialGlobalIlluminationFlags.AnyEmissive">
      <summary>
        <para>Helper Mask to be used to query the enum only based on whether realtime GI or baked GI is set, ignoring all other bits.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.MaterialGlobalIlluminationFlags.BakedEmissive">
      <summary>
        <para>The emissive lighting affects baked Global Illumination. It emits lighting into baked lightmaps and baked lightprobes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.MaterialGlobalIlluminationFlags.EmissiveIsBlack">
      <summary>
        <para>The emissive lighting is guaranteed to be black. This lets the lightmapping system know that it doesn't have to extract emissive lighting information from the material and can simply assume it is completely black.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.MaterialGlobalIlluminationFlags.None">
      <summary>
        <para>The emissive lighting does not affect Global Illumination at all.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.MaterialGlobalIlluminationFlags.RealtimeEmissive">
      <summary>
        <para>The emissive lighting will affect realtime Global Illumination. It emits lighting into realtime lightmaps and realtime lightprobes.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.MaterialPropertyBlock">
      <summary>
        <para>A block of material values to apply.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.MaterialPropertyBlock.isEmpty">
      <summary>
        <para>Is the material property block empty? (Read Only)</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.Clear">
      <summary>
        <para>Clear material property values.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.CopyProbeOcclusionArrayFrom(UnityEngine.Vector4[])">
      <summary>
        <para>This function copies the entire source array into a Vector4 property array named unity_ProbesOcclusion for use with instanced rendering.</para>
      </summary>
      <param name="occlusionProbes">The array of probe occlusion values to copy from.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.CopyProbeOcclusionArrayFrom(System.Collections.Generic.List`1&lt;UnityEngine.Vector4&gt;)">
      <summary>
        <para>This function copies the entire source array into a Vector4 property array named unity_ProbesOcclusion for use with instanced rendering.</para>
      </summary>
      <param name="occlusionProbes">The array of probe occlusion values to copy from.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.CopyProbeOcclusionArrayFrom(UnityEngine.Vector4[],System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>This function copies the source array into a Vector4 property array named unity_ProbesOcclusion with the specified source and destination range for use with instanced rendering.</para>
      </summary>
      <param name="occlusionProbes">The array of probe occlusion values to copy from.</param>
      <param name="sourceStart">The index of the first element in the source array to copy from.</param>
      <param name="destStart">The index of the first element in the destination MaterialPropertyBlock array to copy to.</param>
      <param name="count">The number of elements to copy.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.CopyProbeOcclusionArrayFrom(System.Collections.Generic.List`1&lt;UnityEngine.Vector4&gt;,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>This function copies the source array into a Vector4 property array named unity_ProbesOcclusion with the specified source and destination range for use with instanced rendering.</para>
      </summary>
      <param name="occlusionProbes">The array of probe occlusion values to copy from.</param>
      <param name="sourceStart">The index of the first element in the source array to copy from.</param>
      <param name="destStart">The index of the first element in the destination MaterialPropertyBlock array to copy to.</param>
      <param name="count">The number of elements to copy.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.CopySHCoefficientArraysFrom(System.Collections.Generic.List`1&lt;UnityEngine.Rendering.SphericalHarmonicsL2&gt;)">
      <summary>
        <para>This function converts and copies the entire source array into 7 Vector4 property arrays named unity_SHAr, unity_SHAg, unity_SHAb, unity_SHBr, unity_SHBg, unity_SHBb and unity_SHC for use with instanced rendering.</para>
      </summary>
      <param name="lightProbes">The array of SH values to copy from.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.CopySHCoefficientArraysFrom(UnityEngine.Rendering.SphericalHarmonicsL2[])">
      <summary>
        <para>This function converts and copies the entire source array into 7 Vector4 property arrays named unity_SHAr, unity_SHAg, unity_SHAb, unity_SHBr, unity_SHBg, unity_SHBb and unity_SHC for use with instanced rendering.</para>
      </summary>
      <param name="lightProbes">The array of SH values to copy from.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.CopySHCoefficientArraysFrom(UnityEngine.Rendering.SphericalHarmonicsL2[],System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>This function converts and copies the source array into 7 Vector4 property arrays named unity_SHAr, unity_SHAg, unity_SHAb, unity_SHBr, unity_SHBg, unity_SHBb and unity_SHC with the specified source and destination range for use with instanced rendering.</para>
      </summary>
      <param name="lightProbes">The array of SH values to copy from.</param>
      <param name="sourceStart">The index of the first element in the source array to copy from.</param>
      <param name="destStart">The index of the first element in the destination MaterialPropertyBlock array to copy to.</param>
      <param name="count">The number of elements to copy.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.CopySHCoefficientArraysFrom(System.Collections.Generic.List`1&lt;UnityEngine.Rendering.SphericalHarmonicsL2&gt;,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>This function converts and copies the source array into 7 Vector4 property arrays named unity_SHAr, unity_SHAg, unity_SHAb, unity_SHBr, unity_SHBg, unity_SHBb and unity_SHC with the specified source and destination range for use with instanced rendering.</para>
      </summary>
      <param name="lightProbes">The array of SH values to copy from.</param>
      <param name="sourceStart">The index of the first element in the source array to copy from.</param>
      <param name="destStart">The index of the first element in the destination MaterialPropertyBlock array to copy to.</param>
      <param name="count">The number of elements to copy.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.GetColor(System.String)">
      <summary>
        <para>Get a color from the property block.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.GetColor(System.Int32)">
      <summary>
        <para>Get a color from the property block.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.GetFloat(System.String)">
      <summary>
        <para>Get a float from the property block.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.GetFloat(System.Int32)">
      <summary>
        <para>Get a float from the property block.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.GetFloatArray(System.String)">
      <summary>
        <para>Get a float array from the property block.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.GetFloatArray(System.Int32)">
      <summary>
        <para>Get a float array from the property block.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.GetFloatArray(System.String,System.Collections.Generic.List`1&lt;System.Single&gt;)">
      <summary>
        <para>Fetch a float array from the property block into a list.</para>
      </summary>
      <param name="values">The list to hold the returned array.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.GetFloatArray(System.Int32,System.Collections.Generic.List`1&lt;System.Single&gt;)">
      <summary>
        <para>Fetch a float array from the property block into a list.</para>
      </summary>
      <param name="values">The list to hold the returned array.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.GetInt(System.String)">
      <summary>
        <para>Get an int from the property block.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.GetInt(System.Int32)">
      <summary>
        <para>Get an int from the property block.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.GetMatrix(System.String)">
      <summary>
        <para>Get a matrix from the property block.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.GetMatrix(System.Int32)">
      <summary>
        <para>Get a matrix from the property block.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.GetMatrixArray(System.String)">
      <summary>
        <para>Get a matrix array from the property block.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.GetMatrixArray(System.Int32)">
      <summary>
        <para>Get a matrix array from the property block.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.GetMatrixArray(System.String,System.Collections.Generic.List`1&lt;UnityEngine.Matrix4x4&gt;)">
      <summary>
        <para>Fetch a matrix array from the property block into a list.</para>
      </summary>
      <param name="values">The list to hold the returned array.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.GetMatrixArray(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.Matrix4x4&gt;)">
      <summary>
        <para>Fetch a matrix array from the property block into a list.</para>
      </summary>
      <param name="values">The list to hold the returned array.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.GetTexture(System.String)">
      <summary>
        <para>Get a texture from the property block.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.GetTexture(System.Int32)">
      <summary>
        <para>Get a texture from the property block.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.GetVector(System.String)">
      <summary>
        <para>Get a vector from the property block.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.GetVector(System.Int32)">
      <summary>
        <para>Get a vector from the property block.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.GetVectorArray(System.String)">
      <summary>
        <para>Get a vector array from the property block.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.GetVectorArray(System.Int32)">
      <summary>
        <para>Get a vector array from the property block.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.GetVectorArray(System.String,System.Collections.Generic.List`1&lt;UnityEngine.Vector4&gt;)">
      <summary>
        <para>Fetch a vector array from the property block into a list.</para>
      </summary>
      <param name="values">The list to hold the returned array.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.GetVectorArray(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.Vector4&gt;)">
      <summary>
        <para>Fetch a vector array from the property block into a list.</para>
      </summary>
      <param name="values">The list to hold the returned array.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetBuffer(System.String,UnityEngine.ComputeBuffer)">
      <summary>
        <para>Set a buffer property.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="value">The ComputeBuffer or GraphicsBuffer to set.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetBuffer(System.Int32,UnityEngine.ComputeBuffer)">
      <summary>
        <para>Set a buffer property.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="value">The ComputeBuffer or GraphicsBuffer to set.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetBuffer(System.String,UnityEngine.GraphicsBuffer)">
      <summary>
        <para>Set a buffer property.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="value">The ComputeBuffer or GraphicsBuffer to set.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetBuffer(System.Int32,UnityEngine.GraphicsBuffer)">
      <summary>
        <para>Set a buffer property.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="value">The ComputeBuffer or GraphicsBuffer to set.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetColor(System.String,UnityEngine.Color)">
      <summary>
        <para>Set a color property.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="value">The Color value to set.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetColor(System.Int32,UnityEngine.Color)">
      <summary>
        <para>Set a color property.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="value">The Color value to set.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetConstantBuffer(System.String,UnityEngine.ComputeBuffer,System.Int32,System.Int32)">
      <summary>
        <para>Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the MaterialPropertyBlock.</para>
      </summary>
      <param name="name">The name of the constant buffer to override.</param>
      <param name="value">The buffer to override the constant buffer values with.</param>
      <param name="offset">Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.</param>
      <param name="size">The number of bytes to bind.</param>
      <param name="nameID">The shader property ID of the constant buffer to override.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetConstantBuffer(System.Int32,UnityEngine.ComputeBuffer,System.Int32,System.Int32)">
      <summary>
        <para>Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the MaterialPropertyBlock.</para>
      </summary>
      <param name="name">The name of the constant buffer to override.</param>
      <param name="value">The buffer to override the constant buffer values with.</param>
      <param name="offset">Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.</param>
      <param name="size">The number of bytes to bind.</param>
      <param name="nameID">The shader property ID of the constant buffer to override.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetConstantBuffer(System.String,UnityEngine.GraphicsBuffer,System.Int32,System.Int32)">
      <summary>
        <para>Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the MaterialPropertyBlock.</para>
      </summary>
      <param name="name">The name of the constant buffer to override.</param>
      <param name="value">The buffer to override the constant buffer values with.</param>
      <param name="offset">Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.</param>
      <param name="size">The number of bytes to bind.</param>
      <param name="nameID">The shader property ID of the constant buffer to override.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetConstantBuffer(System.Int32,UnityEngine.GraphicsBuffer,System.Int32,System.Int32)">
      <summary>
        <para>Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for the MaterialPropertyBlock.</para>
      </summary>
      <param name="name">The name of the constant buffer to override.</param>
      <param name="value">The buffer to override the constant buffer values with.</param>
      <param name="offset">Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.</param>
      <param name="size">The number of bytes to bind.</param>
      <param name="nameID">The shader property ID of the constant buffer to override.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetFloat(System.String,System.Single)">
      <summary>
        <para>Set a float property.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="value">The float value to set.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetFloat(System.Int32,System.Single)">
      <summary>
        <para>Set a float property.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="value">The float value to set.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetFloatArray(System.String,System.Single[])">
      <summary>
        <para>Set a float array property.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="values">The array to set.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetFloatArray(System.Int32,System.Single[])">
      <summary>
        <para>Set a float array property.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="values">The array to set.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetFloatArray(System.String,System.Collections.Generic.List`1&lt;System.Single&gt;)">
      <summary>
        <para>Set a float array property.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="values">The array to set.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetFloatArray(System.Int32,System.Collections.Generic.List`1&lt;System.Single&gt;)">
      <summary>
        <para>Set a float array property.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="values">The array to set.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetInt(System.Int32,System.Int32)">
      <summary>
        <para>Adds a property to the block. If an int property with the given name already exists, the old value is replaced.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="value">The int value to set.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetInt(System.String,System.Int32)">
      <summary>
        <para>Adds a property to the block. If an int property with the given name already exists, the old value is replaced.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="value">The int value to set.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetMatrix(System.String,UnityEngine.Matrix4x4)">
      <summary>
        <para>Set a matrix property.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="value">The matrix value to set.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetMatrix(System.Int32,UnityEngine.Matrix4x4)">
      <summary>
        <para>Set a matrix property.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="value">The matrix value to set.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetMatrixArray(System.String,UnityEngine.Matrix4x4[])">
      <summary>
        <para>Set a matrix array property.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="values">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="nameID">The array to set.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetMatrixArray(System.Int32,UnityEngine.Matrix4x4[])">
      <summary>
        <para>Set a matrix array property.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="values">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="nameID">The array to set.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetMatrixArray(System.String,System.Collections.Generic.List`1&lt;UnityEngine.Matrix4x4&gt;)">
      <summary>
        <para>Set a matrix array property.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="values">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="nameID">The array to set.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetMatrixArray(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.Matrix4x4&gt;)">
      <summary>
        <para>Set a matrix array property.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="values">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="nameID">The array to set.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetTexture(System.String,UnityEngine.Texture)">
      <summary>
        <para>Set a texture property.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="value">The Texture to set.</param>
      <param name="element">Optional parameter that specifies the type of data to set from the RenderTexture.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetTexture(System.Int32,UnityEngine.Texture)">
      <summary>
        <para>Set a texture property.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="value">The Texture to set.</param>
      <param name="element">Optional parameter that specifies the type of data to set from the RenderTexture.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetTexture(System.String,UnityEngine.RenderTexture,UnityEngine.Rendering.RenderTextureSubElement)">
      <summary>
        <para>Set a texture property.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="value">The Texture to set.</param>
      <param name="element">Optional parameter that specifies the type of data to set from the RenderTexture.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetTexture(System.Int32,UnityEngine.RenderTexture,UnityEngine.Rendering.RenderTextureSubElement)">
      <summary>
        <para>Set a texture property.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="value">The Texture to set.</param>
      <param name="element">Optional parameter that specifies the type of data to set from the RenderTexture.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetVector(System.String,UnityEngine.Vector4)">
      <summary>
        <para>Set a vector property.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="value">The Vector4 value to set.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetVector(System.Int32,UnityEngine.Vector4)">
      <summary>
        <para>Set a vector property.</para>
      </summary>
      <param name="name">The name of the property.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="value">The Vector4 value to set.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetVectorArray(System.String,UnityEngine.Vector4[])">
      <summary>
        <para>Set a vector array property.</para>
      </summary>
      <param name="nameID">The name of the property.</param>
      <param name="values">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The array to set.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetVectorArray(System.Int32,UnityEngine.Vector4[])">
      <summary>
        <para>Set a vector array property.</para>
      </summary>
      <param name="nameID">The name of the property.</param>
      <param name="values">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The array to set.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetVectorArray(System.String,System.Collections.Generic.List`1&lt;UnityEngine.Vector4&gt;)">
      <summary>
        <para>Set a vector array property.</para>
      </summary>
      <param name="nameID">The name of the property.</param>
      <param name="values">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The array to set.</param>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetVectorArray(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.Vector4&gt;)">
      <summary>
        <para>Set a vector array property.</para>
      </summary>
      <param name="nameID">The name of the property.</param>
      <param name="values">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The array to set.</param>
    </member>
    <member name="T:UnityEngine.Mathf">
      <summary>
        <para>A collection of common math functions.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Abs(System.Single)">
      <summary>
        <para>Returns the absolute value of f.</para>
      </summary>
      <param name="f"></param>
    </member>
    <member name="M:UnityEngine.Mathf.Abs(System.Int32)">
      <summary>
        <para>Returns the absolute value of value.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.Mathf.Acos(System.Single)">
      <summary>
        <para>Returns the arc-cosine of f - the angle in radians whose cosine is f.</para>
      </summary>
      <param name="f"></param>
    </member>
    <member name="M:UnityEngine.Mathf.Approximately(System.Single,System.Single)">
      <summary>
        <para>Compares two floating point values and returns true if they are similar.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="M:UnityEngine.Mathf.Asin(System.Single)">
      <summary>
        <para>Returns the arc-sine of f - the angle in radians whose sine is f.</para>
      </summary>
      <param name="f"></param>
    </member>
    <member name="M:UnityEngine.Mathf.Atan(System.Single)">
      <summary>
        <para>Returns the arc-tangent of f - the angle in radians whose tangent is f.</para>
      </summary>
      <param name="f"></param>
    </member>
    <member name="M:UnityEngine.Mathf.Atan2(System.Single,System.Single)">
      <summary>
        <para>Returns the angle in radians whose Tan is y/x.</para>
      </summary>
      <param name="y"></param>
      <param name="x"></param>
    </member>
    <member name="M:UnityEngine.Mathf.Ceil(System.Single)">
      <summary>
        <para>Returns the smallest integer greater to or equal to f.</para>
      </summary>
      <param name="f"></param>
    </member>
    <member name="M:UnityEngine.Mathf.CeilToInt(System.Single)">
      <summary>
        <para>Returns the smallest integer greater to or equal to f.</para>
      </summary>
      <param name="f"></param>
    </member>
    <member name="M:UnityEngine.Mathf.Clamp(System.Single,System.Single,System.Single)">
      <summary>
        <para>Clamps the given value between the given minimum float and maximum float values.  Returns the given value if it is within the min and max range.</para>
      </summary>
      <param name="value">The floating point value to restrict inside the range defined by the min and max values.</param>
      <param name="min">The minimum floating point value to compare against.</param>
      <param name="max">The maximum floating point value to compare against.</param>
      <returns>
        <para>The float result between the min and max values.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Mathf.Clamp(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Clamps the given value between a range defined by the given minimum integer and maximum integer values. Returns the given value if it is within min and max.</para>
      </summary>
      <param name="value">The integer point value to restrict inside the min-to-max range</param>
      <param name="min">The minimum integer point value to compare against.</param>
      <param name="max">The maximum  integer point value to compare against.</param>
      <returns>
        <para>The int result between min and max values.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Mathf.Clamp01(System.Single)">
      <summary>
        <para>Clamps value between 0 and 1 and returns value.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.Mathf.ClosestPowerOfTwo(System.Int32)">
      <summary>
        <para>Returns the closest power of two value.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.Mathf.CorrelatedColorTemperatureToRGB(System.Single)">
      <summary>
        <para>Convert a color temperature in Kelvin to RGB color.</para>
      </summary>
      <param name="kelvin">Temperature in Kelvin. Range 1000 to 40000 Kelvin.</param>
      <returns>
        <para>Correlated Color Temperature as floating point RGB color.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Mathf.Cos(System.Single)">
      <summary>
        <para>Returns the cosine of angle f.</para>
      </summary>
      <param name="f">The input angle, in radians.</param>
      <returns>
        <para>The return value between -1 and 1.</para>
      </returns>
    </member>
    <member name="F:UnityEngine.Mathf.Deg2Rad">
      <summary>
        <para>Degrees-to-radians conversion constant (Read Only).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.DeltaAngle(System.Single,System.Single)">
      <summary>
        <para>Calculates the shortest difference between two given angles given in degrees.</para>
      </summary>
      <param name="current"></param>
      <param name="target"></param>
    </member>
    <member name="F:UnityEngine.Mathf.Epsilon">
      <summary>
        <para>A tiny floating point value (Read Only).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Exp(System.Single)">
      <summary>
        <para>Returns e raised to the specified power.</para>
      </summary>
      <param name="power"></param>
    </member>
    <member name="M:UnityEngine.Mathf.FloatToHalf(System.Single)">
      <summary>
        <para>Encode a floating point value into a 16-bit representation.</para>
      </summary>
      <param name="val">The floating point value to convert.</param>
      <returns>
        <para>The converted half-precision float, stored in a 16-bit unsigned integer.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Mathf.Floor(System.Single)">
      <summary>
        <para>Returns the largest integer smaller than or equal to f.</para>
      </summary>
      <param name="f"></param>
    </member>
    <member name="M:UnityEngine.Mathf.FloorToInt(System.Single)">
      <summary>
        <para>Returns the largest integer smaller to or equal to f.</para>
      </summary>
      <param name="f"></param>
    </member>
    <member name="M:UnityEngine.Mathf.GammaToLinearSpace(System.Single)">
      <summary>
        <para>Converts the given value from gamma (sRGB) to linear color space.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.Mathf.HalfToFloat(System.UInt16)">
      <summary>
        <para>Convert a half precision float to a 32-bit floating point value.</para>
      </summary>
      <param name="val">The half precision value to convert.</param>
      <returns>
        <para>The decoded 32-bit float.</para>
      </returns>
    </member>
    <member name="F:UnityEngine.Mathf.Infinity">
      <summary>
        <para>A representation of positive infinity (Read Only).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.InverseLerp(System.Single,System.Single,System.Single)">
      <summary>
        <para>Calculates the linear parameter t that produces the interpolant value within the range [a, b].</para>
      </summary>
      <param name="a">Start value.</param>
      <param name="b">End value.</param>
      <param name="value">Value between start and end.</param>
      <returns>
        <para>Percentage of value between start and end.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Mathf.IsPowerOfTwo(System.Int32)">
      <summary>
        <para>Returns true if the value is power of two.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.Mathf.Lerp(System.Single,System.Single,System.Single)">
      <summary>
        <para>Linearly interpolates between a and b by t.</para>
      </summary>
      <param name="a">The start value.</param>
      <param name="b">The end value.</param>
      <param name="t">The interpolation value between the two floats.</param>
      <returns>
        <para>The interpolated float result between the two float values.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Mathf.LerpAngle(System.Single,System.Single,System.Single)">
      <summary>
        <para>Same as Lerp but makes sure the values interpolate correctly when they wrap around 360 degrees.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
      <param name="t"></param>
    </member>
    <member name="M:UnityEngine.Mathf.LerpUnclamped(System.Single,System.Single,System.Single)">
      <summary>
        <para>Linearly interpolates between a and b by t with no limit to t.</para>
      </summary>
      <param name="a">The start value.</param>
      <param name="b">The end value.</param>
      <param name="t">The interpolation between the two floats.</param>
      <returns>
        <para>The float value as a result from the linear interpolation.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Mathf.LinearToGammaSpace(System.Single)">
      <summary>
        <para>Converts the given value from linear to gamma (sRGB) color space.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.Mathf.Log(System.Single,System.Single)">
      <summary>
        <para>Returns the logarithm of a specified number in a specified base.</para>
      </summary>
      <param name="f"></param>
      <param name="p"></param>
    </member>
    <member name="M:UnityEngine.Mathf.Log(System.Single)">
      <summary>
        <para>Returns the natural (base e) logarithm of a specified number.</para>
      </summary>
      <param name="f"></param>
    </member>
    <member name="M:UnityEngine.Mathf.Log10(System.Single)">
      <summary>
        <para>Returns the base 10 logarithm of a specified number.</para>
      </summary>
      <param name="f"></param>
    </member>
    <member name="M:UnityEngine.Mathf.Max(System.Single,System.Single)">
      <summary>
        <para>Returns largest of two or more values.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
      <param name="values"></param>
    </member>
    <member name="M:UnityEngine.Mathf.Max(System.Single[])">
      <summary>
        <para>Returns largest of two or more values.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
      <param name="values"></param>
    </member>
    <member name="M:UnityEngine.Mathf.Max(System.Int32,System.Int32)">
      <summary>
        <para>Returns the largest of two or more values.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
      <param name="values"></param>
    </member>
    <member name="M:UnityEngine.Mathf.Max(System.Int32[])">
      <summary>
        <para>Returns the largest of two or more values.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
      <param name="values"></param>
    </member>
    <member name="M:UnityEngine.Mathf.Min(System.Single,System.Single)">
      <summary>
        <para>Returns the smallest of two or more values.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
      <param name="values"></param>
    </member>
    <member name="M:UnityEngine.Mathf.Min(System.Single[])">
      <summary>
        <para>Returns the smallest of two or more values.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
      <param name="values"></param>
    </member>
    <member name="M:UnityEngine.Mathf.Min(System.Int32,System.Int32)">
      <summary>
        <para>Returns the smallest of two or more values.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
      <param name="values"></param>
    </member>
    <member name="M:UnityEngine.Mathf.Min(System.Int32[])">
      <summary>
        <para>Returns the smallest of two or more values.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
      <param name="values"></param>
    </member>
    <member name="M:UnityEngine.Mathf.MoveTowards(System.Single,System.Single,System.Single)">
      <summary>
        <para>Moves a value current towards target.</para>
      </summary>
      <param name="current">The current value.</param>
      <param name="target">The value to move towards.</param>
      <param name="maxDelta">The maximum change that should be applied to the value.</param>
    </member>
    <member name="M:UnityEngine.Mathf.MoveTowardsAngle(System.Single,System.Single,System.Single)">
      <summary>
        <para>Same as MoveTowards but makes sure the values interpolate correctly when they wrap around 360 degrees.</para>
      </summary>
      <param name="current"></param>
      <param name="target"></param>
      <param name="maxDelta"></param>
    </member>
    <member name="F:UnityEngine.Mathf.NegativeInfinity">
      <summary>
        <para>A representation of negative infinity (Read Only).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.NextPowerOfTwo(System.Int32)">
      <summary>
        <para>Returns the next power of two that is equal to, or greater than, the argument.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.Mathf.PerlinNoise(System.Single,System.Single)">
      <summary>
        <para>Generate 2D Perlin noise.</para>
      </summary>
      <param name="x">X-coordinate of sample point.</param>
      <param name="y">Y-coordinate of sample point.</param>
      <returns>
        <para>Value between 0.0 and 1.0. (Return value might be slightly below 0.0 or beyond 1.0.)</para>
      </returns>
    </member>
    <member name="F:UnityEngine.Mathf.PI">
      <summary>
        <para>The well-known 3.14159265358979... value (Read Only).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.PingPong(System.Single,System.Single)">
      <summary>
        <para>PingPong returns a value that will increment and decrement between the value 0 and length.</para>
      </summary>
      <param name="t"></param>
      <param name="length"></param>
    </member>
    <member name="M:UnityEngine.Mathf.Pow(System.Single,System.Single)">
      <summary>
        <para>Returns f raised to power p.</para>
      </summary>
      <param name="f"></param>
      <param name="p"></param>
    </member>
    <member name="F:UnityEngine.Mathf.Rad2Deg">
      <summary>
        <para>Radians-to-degrees conversion constant (Read Only).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Repeat(System.Single,System.Single)">
      <summary>
        <para>Loops the value t, so that it is never larger than length and never smaller than 0.</para>
      </summary>
      <param name="t"></param>
      <param name="length"></param>
    </member>
    <member name="M:UnityEngine.Mathf.Round(System.Single)">
      <summary>
        <para>Returns f rounded to the nearest integer.</para>
      </summary>
      <param name="f"></param>
    </member>
    <member name="M:UnityEngine.Mathf.RoundToInt(System.Single)">
      <summary>
        <para>Returns f rounded to the nearest integer.</para>
      </summary>
      <param name="f"></param>
    </member>
    <member name="M:UnityEngine.Mathf.Sign(System.Single)">
      <summary>
        <para>Returns the sign of f.</para>
      </summary>
      <param name="f"></param>
    </member>
    <member name="M:UnityEngine.Mathf.Sin(System.Single)">
      <summary>
        <para>Returns the sine of angle f.</para>
      </summary>
      <param name="f">The input angle, in radians.</param>
      <returns>
        <para>The return value between -1 and +1.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Mathf.SmoothDamp(System.Single,System.Single,System.Single&amp;,System.Single)">
      <summary>
        <para>Gradually changes a value towards a desired goal over time.</para>
      </summary>
      <param name="current">The current position.</param>
      <param name="target">The position we are trying to reach.</param>
      <param name="currentVelocity">The current velocity, this value is modified by the function every time you call it.</param>
      <param name="smoothTime">Approximately the time it will take to reach the target. A smaller value will reach the target faster.</param>
      <param name="maxSpeed">Optionally allows you to clamp the maximum speed.</param>
      <param name="deltaTime">The time since the last call to this function. By default Time.deltaTime.</param>
    </member>
    <member name="M:UnityEngine.Mathf.SmoothDamp(System.Single,System.Single,System.Single&amp;,System.Single,System.Single)">
      <summary>
        <para>Gradually changes a value towards a desired goal over time.</para>
      </summary>
      <param name="current">The current position.</param>
      <param name="target">The position we are trying to reach.</param>
      <param name="currentVelocity">The current velocity, this value is modified by the function every time you call it.</param>
      <param name="smoothTime">Approximately the time it will take to reach the target. A smaller value will reach the target faster.</param>
      <param name="maxSpeed">Optionally allows you to clamp the maximum speed.</param>
      <param name="deltaTime">The time since the last call to this function. By default Time.deltaTime.</param>
    </member>
    <member name="M:UnityEngine.Mathf.SmoothDamp(System.Single,System.Single,System.Single&amp;,System.Single,System.Single,System.Single)">
      <summary>
        <para>Gradually changes a value towards a desired goal over time.</para>
      </summary>
      <param name="current">The current position.</param>
      <param name="target">The position we are trying to reach.</param>
      <param name="currentVelocity">The current velocity, this value is modified by the function every time you call it.</param>
      <param name="smoothTime">Approximately the time it will take to reach the target. A smaller value will reach the target faster.</param>
      <param name="maxSpeed">Optionally allows you to clamp the maximum speed.</param>
      <param name="deltaTime">The time since the last call to this function. By default Time.deltaTime.</param>
    </member>
    <member name="M:UnityEngine.Mathf.SmoothDampAngle(System.Single,System.Single,System.Single&amp;,System.Single)">
      <summary>
        <para>Gradually changes an angle given in degrees towards a desired goal angle over time.</para>
      </summary>
      <param name="current">The current position.</param>
      <param name="target">The position we are trying to reach.</param>
      <param name="currentVelocity">The current velocity, this value is modified by the function every time you call it.</param>
      <param name="smoothTime">Approximately the time it will take to reach the target. A smaller value will reach the target faster.</param>
      <param name="maxSpeed">Optionally allows you to clamp the maximum speed.</param>
      <param name="deltaTime">The time since the last call to this function. By default Time.deltaTime.</param>
    </member>
    <member name="M:UnityEngine.Mathf.SmoothDampAngle(System.Single,System.Single,System.Single&amp;,System.Single,System.Single)">
      <summary>
        <para>Gradually changes an angle given in degrees towards a desired goal angle over time.</para>
      </summary>
      <param name="current">The current position.</param>
      <param name="target">The position we are trying to reach.</param>
      <param name="currentVelocity">The current velocity, this value is modified by the function every time you call it.</param>
      <param name="smoothTime">Approximately the time it will take to reach the target. A smaller value will reach the target faster.</param>
      <param name="maxSpeed">Optionally allows you to clamp the maximum speed.</param>
      <param name="deltaTime">The time since the last call to this function. By default Time.deltaTime.</param>
    </member>
    <member name="M:UnityEngine.Mathf.SmoothDampAngle(System.Single,System.Single,System.Single&amp;,System.Single,System.Single,System.Single)">
      <summary>
        <para>Gradually changes an angle given in degrees towards a desired goal angle over time.</para>
      </summary>
      <param name="current">The current position.</param>
      <param name="target">The position we are trying to reach.</param>
      <param name="currentVelocity">The current velocity, this value is modified by the function every time you call it.</param>
      <param name="smoothTime">Approximately the time it will take to reach the target. A smaller value will reach the target faster.</param>
      <param name="maxSpeed">Optionally allows you to clamp the maximum speed.</param>
      <param name="deltaTime">The time since the last call to this function. By default Time.deltaTime.</param>
    </member>
    <member name="M:UnityEngine.Mathf.SmoothStep(System.Single,System.Single,System.Single)">
      <summary>
        <para>Interpolates between min and max with smoothing at the limits.</para>
      </summary>
      <param name="from"></param>
      <param name="to"></param>
      <param name="t"></param>
    </member>
    <member name="M:UnityEngine.Mathf.Sqrt(System.Single)">
      <summary>
        <para>Returns square root of f.</para>
      </summary>
      <param name="f"></param>
    </member>
    <member name="M:UnityEngine.Mathf.Tan(System.Single)">
      <summary>
        <para>Returns the tangent of angle f in radians.</para>
      </summary>
      <param name="f"></param>
    </member>
    <member name="T:UnityEngine.Matrix4x4">
      <summary>
        <para>A standard 4x4 transformation matrix.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Matrix4x4.decomposeProjection">
      <summary>
        <para>This property takes a projection matrix and returns the six plane coordinates that define a projection frustum.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Matrix4x4.determinant">
      <summary>
        <para>The determinant of the matrix. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Matrix4x4.identity">
      <summary>
        <para>Returns the identity matrix (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Matrix4x4.inverse">
      <summary>
        <para>The inverse of this matrix. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Matrix4x4.isIdentity">
      <summary>
        <para>Checks whether this is an identity matrix. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Matrix4x4.lossyScale">
      <summary>
        <para>Attempts to get a scale value from the matrix. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Matrix4x4.rotation">
      <summary>
        <para>Attempts to get a rotation quaternion from this matrix.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Matrix4x4.transpose">
      <summary>
        <para>Returns the transpose of this matrix (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Matrix4x4.zero">
      <summary>
        <para>Returns a matrix with all elements set to zero (Read Only).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Matrix4x4.Frustum(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>This function returns a projection matrix with viewing frustum that has a near plane defined by the coordinates that were passed in.</para>
      </summary>
      <param name="left">The X coordinate of the left side of the near projection plane in view space.</param>
      <param name="right">The X coordinate of the right side of the near projection plane in view space.</param>
      <param name="bottom">The Y coordinate of the bottom side of the near projection plane in view space.</param>
      <param name="top">The Y coordinate of the top side of the near projection plane in view space.</param>
      <param name="zNear">Z distance to the near plane from the origin in view space.</param>
      <param name="zFar">Z distance to the far plane from the origin in view space.</param>
      <param name="frustumPlanes">Frustum planes struct that contains the view space coordinates of that define a viewing frustum.</param>
      <param name="fp"></param>
      <returns>
        <para>A projection matrix with a viewing frustum defined by the plane coordinates passed in.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Matrix4x4.Frustum(UnityEngine.FrustumPlanes)">
      <summary>
        <para>This function returns a projection matrix with viewing frustum that has a near plane defined by the coordinates that were passed in.</para>
      </summary>
      <param name="left">The X coordinate of the left side of the near projection plane in view space.</param>
      <param name="right">The X coordinate of the right side of the near projection plane in view space.</param>
      <param name="bottom">The Y coordinate of the bottom side of the near projection plane in view space.</param>
      <param name="top">The Y coordinate of the top side of the near projection plane in view space.</param>
      <param name="zNear">Z distance to the near plane from the origin in view space.</param>
      <param name="zFar">Z distance to the far plane from the origin in view space.</param>
      <param name="frustumPlanes">Frustum planes struct that contains the view space coordinates of that define a viewing frustum.</param>
      <param name="fp"></param>
      <returns>
        <para>A projection matrix with a viewing frustum defined by the plane coordinates passed in.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Matrix4x4.GetColumn(System.Int32)">
      <summary>
        <para>Get a column of the matrix.</para>
      </summary>
      <param name="index"></param>
    </member>
    <member name="M:UnityEngine.Matrix4x4.GetRow(System.Int32)">
      <summary>
        <para>Returns a row of the matrix.</para>
      </summary>
      <param name="index"></param>
    </member>
    <member name="M:UnityEngine.Matrix4x4.Inverse3DAffine(UnityEngine.Matrix4x4,UnityEngine.Matrix4x4&amp;)">
      <summary>
        <para>Computes the inverse of a 3D affine matrix.</para>
      </summary>
      <param name="input">Input matrix to invert.</param>
      <param name="result">The result of the inversion. Equal to the input matrix if the function fails.</param>
      <returns>
        <para>Returns true and a valid result if the function succeeds, false and a copy of the input matrix if the function fails.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Matrix4x4.LookAt(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Create a "look at" matrix.</para>
      </summary>
      <param name="from">The source point.</param>
      <param name="to">The target point.</param>
      <param name="up">The vector describing the up direction (typically Vector3.up).</param>
      <returns>
        <para>The resulting transformation matrix.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Matrix4x4.MultiplyPoint(UnityEngine.Vector3)">
      <summary>
        <para>Transforms a position by this matrix (generic).</para>
      </summary>
      <param name="point"></param>
    </member>
    <member name="M:UnityEngine.Matrix4x4.MultiplyPoint3x4(UnityEngine.Vector3)">
      <summary>
        <para>Transforms a position by this matrix (fast).</para>
      </summary>
      <param name="point"></param>
    </member>
    <member name="M:UnityEngine.Matrix4x4.MultiplyVector(UnityEngine.Vector3)">
      <summary>
        <para>Transforms a direction by this matrix.</para>
      </summary>
      <param name="vector"></param>
    </member>
    <member name="?:UnityEngine.Matrix4x4.op_Multiply(UnityEngine.Matrix4x4,UnityEngine.Matrix4x4)">
      <summary>
        <para>Multiplies two matrices.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member name="?:UnityEngine.Matrix4x4.op_Multiply(UnityEngine.Matrix4x4,UnityEngine.Vector4)">
      <summary>
        <para>Transforms a Vector4 by a matrix.</para>
      </summary>
      <param name="lhs"></param>
      <param name="vector"></param>
    </member>
    <member name="M:UnityEngine.Matrix4x4.Ortho(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Create an orthogonal projection matrix.</para>
      </summary>
      <param name="left">Left-side x-coordinate.</param>
      <param name="right">Right-side x-coordinate.</param>
      <param name="bottom">Bottom y-coordinate.</param>
      <param name="top">Top y-coordinate.</param>
      <param name="zNear">Near depth clipping plane value.</param>
      <param name="zFar">Far depth clipping plane value.</param>
      <returns>
        <para>The projection matrix.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Matrix4x4.Perspective(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Create a perspective projection matrix.</para>
      </summary>
      <param name="fov">Vertical field-of-view in degrees.</param>
      <param name="aspect">Aspect ratio (width divided by height).</param>
      <param name="zNear">Near depth clipping plane value.</param>
      <param name="zFar">Far depth clipping plane value.</param>
      <returns>
        <para>The projection matrix.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Matrix4x4.Rotate(UnityEngine.Quaternion)">
      <summary>
        <para>Creates a rotation matrix.</para>
      </summary>
      <param name="q"></param>
    </member>
    <member name="M:UnityEngine.Matrix4x4.Scale(UnityEngine.Vector3)">
      <summary>
        <para>Creates a scaling matrix.</para>
      </summary>
      <param name="vector"></param>
    </member>
    <member name="M:UnityEngine.Matrix4x4.SetColumn(System.Int32,UnityEngine.Vector4)">
      <summary>
        <para>Sets a column of the matrix.</para>
      </summary>
      <param name="index"></param>
      <param name="column"></param>
    </member>
    <member name="M:UnityEngine.Matrix4x4.SetRow(System.Int32,UnityEngine.Vector4)">
      <summary>
        <para>Sets a row of the matrix.</para>
      </summary>
      <param name="index"></param>
      <param name="row"></param>
    </member>
    <member name="M:UnityEngine.Matrix4x4.SetTRS(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)">
      <summary>
        <para>Sets this matrix to a translation, rotation and scaling matrix.</para>
      </summary>
      <param name="pos"></param>
      <param name="q"></param>
      <param name="s"></param>
    </member>
    <member name="P:UnityEngine.Matrix4x4.this">
      <summary>
        <para>Access element at [row, column].</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Matrix4x4.this">
      <summary>
        <para>Access element at sequential index (0..15 inclusive).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Matrix4x4.ToString">
      <summary>
        <para>Returns a formatted string for this matrix.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="M:UnityEngine.Matrix4x4.ToString(System.String)">
      <summary>
        <para>Returns a formatted string for this matrix.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="M:UnityEngine.Matrix4x4.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Returns a formatted string for this matrix.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="M:UnityEngine.Matrix4x4.TransformPlane(UnityEngine.Plane)">
      <summary>
        <para>Returns a plane that is transformed in space.</para>
      </summary>
      <param name="plane"></param>
    </member>
    <member name="M:UnityEngine.Matrix4x4.Translate(UnityEngine.Vector3)">
      <summary>
        <para>Creates a translation matrix.</para>
      </summary>
      <param name="vector"></param>
    </member>
    <member name="M:UnityEngine.Matrix4x4.TRS(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)">
      <summary>
        <para>Creates a translation, rotation and scaling matrix.</para>
      </summary>
      <param name="pos"></param>
      <param name="q"></param>
      <param name="s"></param>
    </member>
    <member name="M:UnityEngine.Matrix4x4.ValidTRS">
      <summary>
        <para>Checks if this matrix is a valid transform matrix.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Mesh">
      <summary>
        <para>A class that allows you to create or modify meshes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.bindposes">
      <summary>
        <para>The bind poses. The bind pose at each index refers to the bone with the same index.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.blendShapeCount">
      <summary>
        <para>Returns BlendShape count on this mesh.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.boneWeights">
      <summary>
        <para>The BoneWeight for each vertex in the Mesh, which represents 4 bones per vertex.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.bounds">
      <summary>
        <para>The bounding volume of the Mesh.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.colors">
      <summary>
        <para>Vertex colors of the Mesh.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.colors32">
      <summary>
        <para>Vertex colors of the Mesh.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.indexFormat">
      <summary>
        <para>Format of the mesh index buffer data.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.isReadable">
      <summary>
        <para>Returns true if the Mesh is read/write enabled, or false if it is not.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.normals">
      <summary>
        <para>The normals of the Mesh.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.subMeshCount">
      <summary>
        <para>The number of sub-meshes inside the Mesh object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.tangents">
      <summary>
        <para>The tangents of the Mesh.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.triangles">
      <summary>
        <para>An array containing all triangles in the Mesh.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.uv">
      <summary>
        <para>The base texture coordinates of the Mesh.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.uv2">
      <summary>
        <para>The second texture coordinate set of the mesh, if present.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.uv3">
      <summary>
        <para>The third texture coordinate set of the mesh, if present.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.uv4">
      <summary>
        <para>The fourth texture coordinate set of the mesh, if present.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.uv5">
      <summary>
        <para>The fifth texture coordinate set of the mesh, if present.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.uv6">
      <summary>
        <para>The sixth texture coordinate set of the mesh, if present.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.uv7">
      <summary>
        <para>The seventh texture coordinate set of the mesh, if present.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.uv8">
      <summary>
        <para>The eighth texture coordinate set of the mesh, if present.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.vertexAttributeCount">
      <summary>
        <para>Returns the number of vertex attributes that the mesh has. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.vertexBufferCount">
      <summary>
        <para>Gets the number of vertex buffers present in the Mesh. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.vertexCount">
      <summary>
        <para>Returns the number of vertices in the Mesh (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.vertices">
      <summary>
        <para>Returns a copy of the vertex positions or assigns a new vertex positions array.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mesh.AcquireReadOnlyMeshData(UnityEngine.Mesh)">
      <summary>
        <para>Gets a snapshot of Mesh data for read-only access.</para>
      </summary>
      <param name="mesh">The input mesh.</param>
      <param name="meshes">The input meshes.</param>
      <returns>
        <para>Returns a MeshDataArray containing read-only MeshData structs. See Mesh.MeshDataArray and Mesh.MeshData.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Mesh.AcquireReadOnlyMeshData(UnityEngine.Mesh[])">
      <summary>
        <para>Gets a snapshot of Mesh data for read-only access.</para>
      </summary>
      <param name="mesh">The input mesh.</param>
      <param name="meshes">The input meshes.</param>
      <returns>
        <para>Returns a MeshDataArray containing read-only MeshData structs. See Mesh.MeshDataArray and Mesh.MeshData.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Mesh.AcquireReadOnlyMeshData(System.Collections.Generic.List`1&lt;UnityEngine.Mesh&gt;)">
      <summary>
        <para>Gets a snapshot of Mesh data for read-only access.</para>
      </summary>
      <param name="mesh">The input mesh.</param>
      <param name="meshes">The input meshes.</param>
      <returns>
        <para>Returns a MeshDataArray containing read-only MeshData structs. See Mesh.MeshDataArray and Mesh.MeshData.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Mesh.AddBlendShapeFrame(System.String,System.Single,UnityEngine.Vector3[],UnityEngine.Vector3[],UnityEngine.Vector3[])">
      <summary>
        <para>Adds a new blend shape frame.</para>
      </summary>
      <param name="shapeName">Name of the blend shape to add a frame to.</param>
      <param name="frameWeight">Weight for the frame being added.</param>
      <param name="deltaVertices">Delta vertices for the frame being added.</param>
      <param name="deltaNormals">Delta normals for the frame being added.</param>
      <param name="deltaTangents">Delta tangents for the frame being added.</param>
    </member>
    <member name="M:UnityEngine.Mesh.AllocateWritableMeshData(System.Int32)">
      <summary>
        <para>Allocates data structures for Mesh creation using C# Jobs.</para>
      </summary>
      <param name="meshCount">The amount of meshes that will be created.</param>
      <returns>
        <para>Returns a MeshDataArray containing writeable MeshData structs. See Mesh.MeshDataArray and Mesh.MeshData.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Mesh.ApplyAndDisposeWritableMeshData(UnityEngine.Mesh/MeshDataArray,UnityEngine.Mesh,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Applies data defined in MeshData structs to Mesh objects.</para>
      </summary>
      <param name="data">The mesh data array, see Mesh.MeshDataArray.</param>
      <param name="mesh">The destination Mesh. Mesh data array must be of size 1.</param>
      <param name="meshes">The destination Meshes. Must match the size of mesh data array.</param>
      <param name="flags">The mesh data update flags, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.ApplyAndDisposeWritableMeshData(UnityEngine.Mesh/MeshDataArray,UnityEngine.Mesh[],UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Applies data defined in MeshData structs to Mesh objects.</para>
      </summary>
      <param name="data">The mesh data array, see Mesh.MeshDataArray.</param>
      <param name="mesh">The destination Mesh. Mesh data array must be of size 1.</param>
      <param name="meshes">The destination Meshes. Must match the size of mesh data array.</param>
      <param name="flags">The mesh data update flags, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.ApplyAndDisposeWritableMeshData(UnityEngine.Mesh/MeshDataArray,System.Collections.Generic.List`1&lt;UnityEngine.Mesh&gt;,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Applies data defined in MeshData structs to Mesh objects.</para>
      </summary>
      <param name="data">The mesh data array, see Mesh.MeshDataArray.</param>
      <param name="mesh">The destination Mesh. Mesh data array must be of size 1.</param>
      <param name="meshes">The destination Meshes. Must match the size of mesh data array.</param>
      <param name="flags">The mesh data update flags, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.Clear()">
      <summary>
        <para>Clears all vertex data and all triangle indices.</para>
      </summary>
      <param name="keepVertexLayout">True if the existing Mesh data layout should be preserved.</param>
    </member>
    <member name="M:UnityEngine.Mesh.Clear(System.Boolean)">
      <summary>
        <para>Clears all vertex data and all triangle indices.</para>
      </summary>
      <param name="keepVertexLayout">True if the existing Mesh data layout should be preserved.</param>
    </member>
    <member name="M:UnityEngine.Mesh.ClearBlendShapes">
      <summary>
        <para>Clears all blend shapes from Mesh.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mesh.CombineMeshes(UnityEngine.CombineInstance[],System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        <para>Combines several Meshes into this Mesh.</para>
      </summary>
      <param name="combine">Descriptions of the Meshes to combine.</param>
      <param name="mergeSubMeshes">Defines whether Meshes should be combined into a single sub-mesh.</param>
      <param name="useMatrices">Defines whether the transforms supplied in the CombineInstance array should be used or ignored.</param>
      <param name="hasLightmapData"></param>
    </member>
    <member name="M:UnityEngine.Mesh.CombineMeshes(UnityEngine.CombineInstance[])">
      <summary>
        <para>Combines several Meshes into this Mesh.</para>
      </summary>
      <param name="combine">Descriptions of the Meshes to combine.</param>
      <param name="mergeSubMeshes">Defines whether Meshes should be combined into a single sub-mesh.</param>
      <param name="useMatrices">Defines whether the transforms supplied in the CombineInstance array should be used or ignored.</param>
      <param name="hasLightmapData"></param>
    </member>
    <member name="M:UnityEngine.Mesh.CombineMeshes(UnityEngine.CombineInstance[],System.Boolean)">
      <summary>
        <para>Combines several Meshes into this Mesh.</para>
      </summary>
      <param name="combine">Descriptions of the Meshes to combine.</param>
      <param name="mergeSubMeshes">Defines whether Meshes should be combined into a single sub-mesh.</param>
      <param name="useMatrices">Defines whether the transforms supplied in the CombineInstance array should be used or ignored.</param>
      <param name="hasLightmapData"></param>
    </member>
    <member name="M:UnityEngine.Mesh.CombineMeshes(UnityEngine.CombineInstance[],System.Boolean,System.Boolean)">
      <summary>
        <para>Combines several Meshes into this Mesh.</para>
      </summary>
      <param name="combine">Descriptions of the Meshes to combine.</param>
      <param name="mergeSubMeshes">Defines whether Meshes should be combined into a single sub-mesh.</param>
      <param name="useMatrices">Defines whether the transforms supplied in the CombineInstance array should be used or ignored.</param>
      <param name="hasLightmapData"></param>
    </member>
    <member name="M:UnityEngine.Mesh.#ctor">
      <summary>
        <para>Creates an empty Mesh.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mesh.GetAllBoneWeights">
      <summary>
        <para>Gets the bone weights for the Mesh.</para>
      </summary>
      <returns>
        <para>Returns all non-zero bone weights for the Mesh, in vertex index order.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Mesh.GetBaseVertex(System.Int32)">
      <summary>
        <para>Gets the base vertex index of the given sub-mesh.</para>
      </summary>
      <param name="submesh">The sub-mesh index. See subMeshCount.</param>
      <returns>
        <para>The offset applied to all vertex indices of this sub-mesh.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Mesh.GetBindposes(System.Collections.Generic.List`1&lt;UnityEngine.Matrix4x4&gt;)">
      <summary>
        <para>Gets the bind poses of the Mesh.</para>
      </summary>
      <param name="bindposes">A list of bind poses to populate.</param>
    </member>
    <member name="M:UnityEngine.Mesh.GetBlendShapeFrameCount(System.Int32)">
      <summary>
        <para>Returns the frame count for a blend shape.</para>
      </summary>
      <param name="shapeIndex">The shape index to get frame count from.</param>
    </member>
    <member name="M:UnityEngine.Mesh.GetBlendShapeFrameVertices(System.Int32,System.Int32,UnityEngine.Vector3[],UnityEngine.Vector3[],UnityEngine.Vector3[])">
      <summary>
        <para>Retreives deltaVertices, deltaNormals and deltaTangents of a blend shape frame.</para>
      </summary>
      <param name="shapeIndex">The shape index of the frame.</param>
      <param name="frameIndex">The frame index to get the weight from.</param>
      <param name="deltaVertices">Delta vertices output array for the frame being retreived.</param>
      <param name="deltaNormals">Delta normals output array for the frame being retreived.</param>
      <param name="deltaTangents">Delta tangents output array for the frame being retreived.</param>
    </member>
    <member name="M:UnityEngine.Mesh.GetBlendShapeFrameWeight(System.Int32,System.Int32)">
      <summary>
        <para>Returns the weight of a blend shape frame.</para>
      </summary>
      <param name="shapeIndex">The shape index of the frame.</param>
      <param name="frameIndex">The frame index to get the weight from.</param>
    </member>
    <member name="M:UnityEngine.Mesh.GetBlendShapeIndex(System.String)">
      <summary>
        <para>Returns index of BlendShape by given name.</para>
      </summary>
      <param name="blendShapeName"></param>
    </member>
    <member name="M:UnityEngine.Mesh.GetBlendShapeName(System.Int32)">
      <summary>
        <para>Returns name of BlendShape by given index.</para>
      </summary>
      <param name="shapeIndex"></param>
    </member>
    <member name="M:UnityEngine.Mesh.GetBonesPerVertex">
      <summary>
        <para>The number of non-zero bone weights for each vertex.</para>
      </summary>
      <returns>
        <para>Returns the number of non-zero bone weights for each vertex.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Mesh.GetBoneWeights(System.Collections.Generic.List`1&lt;UnityEngine.BoneWeight&gt;)">
      <summary>
        <para>Gets the bone weights for the Mesh.</para>
      </summary>
      <param name="boneWeights">A list of BoneWeight structs to populate.</param>
    </member>
    <member name="M:UnityEngine.Mesh.GetColors(System.Collections.Generic.List`1&lt;UnityEngine.Color&gt;)">
      <summary>
        <para>Gets the vertex colors of the Mesh.</para>
      </summary>
      <param name="colors">A list of vertex colors to populate.</param>
    </member>
    <member name="M:UnityEngine.Mesh.GetColors(System.Collections.Generic.List`1&lt;UnityEngine.Color32&gt;)">
      <summary>
        <para>Gets the vertex colors of the Mesh.</para>
      </summary>
      <param name="colors">A list of vertex colors to populate.</param>
    </member>
    <member name="M:UnityEngine.Mesh.GetIndexCount(System.Int32)">
      <summary>
        <para>Gets the index count of the given sub-mesh.</para>
      </summary>
      <param name="submesh"></param>
    </member>
    <member name="M:UnityEngine.Mesh.GetIndexStart(System.Int32)">
      <summary>
        <para>Gets the starting index location within the Mesh's index buffer, for the given sub-mesh.</para>
      </summary>
      <param name="submesh"></param>
    </member>
    <member name="M:UnityEngine.Mesh.GetIndices(System.Int32)">
      <summary>
        <para>Fetches the index list for the specified sub-mesh.</para>
      </summary>
      <param name="submesh">The sub-mesh index. See subMeshCount.</param>
      <param name="applyBaseVertex">True (default value) will apply base vertex offset to returned indices.</param>
      <returns>
        <para>Array with face indices.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Mesh.GetIndices(System.Int32,System.Boolean)">
      <summary>
        <para>Fetches the index list for the specified sub-mesh.</para>
      </summary>
      <param name="submesh">The sub-mesh index. See subMeshCount.</param>
      <param name="applyBaseVertex">True (default value) will apply base vertex offset to returned indices.</param>
      <returns>
        <para>Array with face indices.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Mesh.GetIndices(System.Collections.Generic.List`1&lt;System.Int32&gt;,System.Int32)">
      <summary>
        <para>Use this method overload if you control the life cycle of the list passed in and you want to avoid allocating a new array with every access.</para>
      </summary>
      <param name="indices">A list of indices to populate.</param>
      <param name="submesh">The sub-mesh index. See subMeshCount.</param>
      <param name="applyBaseVertex">True (default value) will apply base vertex offset to returned indices.</param>
    </member>
    <member name="M:UnityEngine.Mesh.GetIndices(System.Collections.Generic.List`1&lt;System.Int32&gt;,System.Int32,System.Boolean)">
      <summary>
        <para>Use this method overload if you control the life cycle of the list passed in and you want to avoid allocating a new array with every access.</para>
      </summary>
      <param name="indices">A list of indices to populate.</param>
      <param name="submesh">The sub-mesh index. See subMeshCount.</param>
      <param name="applyBaseVertex">True (default value) will apply base vertex offset to returned indices.</param>
    </member>
    <member name="M:UnityEngine.Mesh.GetIndices(System.Collections.Generic.List`1&lt;System.UInt16&gt;,System.Int32,System.Boolean)">
      <summary>
        <para>Use this method overload if you control the life cycle of the list passed in and you want to avoid allocating a new array with every access.</para>
      </summary>
      <param name="indices">A list of indices to populate.</param>
      <param name="submesh">The sub-mesh index. See subMeshCount.</param>
      <param name="applyBaseVertex">True (default value) will apply base vertex offset to returned indices.</param>
    </member>
    <member name="M:UnityEngine.Mesh.GetNativeIndexBufferPtr">
      <summary>
        <para>Retrieves a native (underlying graphics API) pointer to the index buffer.</para>
      </summary>
      <returns>
        <para>Pointer to the underlying graphics API index buffer.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Mesh.GetNativeVertexBufferPtr(System.Int32)">
      <summary>
        <para>Retrieves a native (underlying graphics API) pointer to the vertex buffer.</para>
      </summary>
      <param name="bufferIndex">Which vertex buffer to get (some Meshes might have more than one). See vertexBufferCount.</param>
      <param name="index"></param>
      <returns>
        <para>Pointer to the underlying graphics API vertex buffer.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Mesh.GetNormals(System.Collections.Generic.List`1&lt;UnityEngine.Vector3&gt;)">
      <summary>
        <para>Gets the vertex normals of the Mesh.</para>
      </summary>
      <param name="normals">A list of vertex normals to populate.</param>
    </member>
    <member name="M:UnityEngine.Mesh.GetSubMesh(System.Int32)">
      <summary>
        <para>Get information about a sub-mesh of the Mesh.</para>
      </summary>
      <param name="index">Sub-mesh index. See subMeshCount. Out of range indices throw an exception.</param>
      <returns>
        <para>Sub-mesh data.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Mesh.GetTangents(System.Collections.Generic.List`1&lt;UnityEngine.Vector4&gt;)">
      <summary>
        <para>Gets the tangents of the Mesh.</para>
      </summary>
      <param name="tangents">A list of tangents to populate.</param>
    </member>
    <member name="M:UnityEngine.Mesh.GetTopology(System.Int32)">
      <summary>
        <para>Gets the topology of a sub-mesh.</para>
      </summary>
      <param name="submesh"></param>
    </member>
    <member name="M:UnityEngine.Mesh.GetTriangles(System.Int32)">
      <summary>
        <para>Fetches the triangle list for the specified sub-mesh on this object.</para>
      </summary>
      <param name="triangles">A list of vertex indices to populate.</param>
      <param name="submesh">The sub-mesh index. See subMeshCount.</param>
      <param name="applyBaseVertex">True (default value) will apply base vertex offset to returned indices.</param>
    </member>
    <member name="M:UnityEngine.Mesh.GetTriangles(System.Int32,System.Boolean)">
      <summary>
        <para>Fetches the triangle list for the specified sub-mesh on this object.</para>
      </summary>
      <param name="triangles">A list of vertex indices to populate.</param>
      <param name="submesh">The sub-mesh index. See subMeshCount.</param>
      <param name="applyBaseVertex">True (default value) will apply base vertex offset to returned indices.</param>
    </member>
    <member name="M:UnityEngine.Mesh.GetTriangles(System.Collections.Generic.List`1&lt;System.Int32&gt;,System.Int32,System.Boolean)">
      <summary>
        <para>Fetches the triangle list for the specified sub-mesh on this object.</para>
      </summary>
      <param name="triangles">A list of vertex indices to populate.</param>
      <param name="submesh">The sub-mesh index. See subMeshCount.</param>
      <param name="applyBaseVertex">True (default value) will apply base vertex offset to returned indices.</param>
    </member>
    <member name="M:UnityEngine.Mesh.GetTriangles(System.Collections.Generic.List`1&lt;System.Int32&gt;,System.Int32)">
      <summary>
        <para>Fetches the triangle list for the specified sub-mesh on this object.</para>
      </summary>
      <param name="triangles">A list of vertex indices to populate.</param>
      <param name="submesh">The sub-mesh index. See subMeshCount.</param>
      <param name="applyBaseVertex">True (default value) will apply base vertex offset to returned indices.</param>
    </member>
    <member name="M:UnityEngine.Mesh.GetTriangles(System.Collections.Generic.List`1&lt;System.UInt16&gt;,System.Int32,System.Boolean)">
      <summary>
        <para>Fetches the triangle list for the specified sub-mesh on this object.</para>
      </summary>
      <param name="triangles">A list of vertex indices to populate.</param>
      <param name="submesh">The sub-mesh index. See subMeshCount.</param>
      <param name="applyBaseVertex">True (default value) will apply base vertex offset to returned indices.</param>
    </member>
    <member name="M:UnityEngine.Mesh.GetUVDistributionMetric(System.Int32)">
      <summary>
        <para>The UV distribution metric can be used to calculate the desired mipmap level based on the position of the camera.</para>
      </summary>
      <param name="uvSetIndex">UV set index to return the UV distibution metric for. 0 for first.</param>
      <returns>
        <para>Average of triangle area / uv area.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Mesh.GetUVs(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.Vector2&gt;)">
      <summary>
        <para>Gets the UVs of the Mesh.</para>
      </summary>
      <param name="channel">The UV channel, in [0..7] range. Indices start at 0, which corresponds to uv. Note that 1 corresponds to uv2.</param>
      <param name="uvs">A list of UVs to populate.</param>
    </member>
    <member name="M:UnityEngine.Mesh.GetUVs(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.Vector3&gt;)">
      <summary>
        <para>Gets the UVs of the Mesh.</para>
      </summary>
      <param name="channel">The UV channel, in [0..7] range. Indices start at 0, which corresponds to uv. Note that 1 corresponds to uv2.</param>
      <param name="uvs">A list of UVs to populate.</param>
    </member>
    <member name="M:UnityEngine.Mesh.GetUVs(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.Vector4&gt;)">
      <summary>
        <para>Gets the UVs of the Mesh.</para>
      </summary>
      <param name="channel">The UV channel, in [0..7] range. Indices start at 0, which corresponds to uv. Note that 1 corresponds to uv2.</param>
      <param name="uvs">A list of UVs to populate.</param>
    </member>
    <member name="M:UnityEngine.Mesh.GetVertexAttribute(System.Int32)">
      <summary>
        <para>Returns information about a vertex attribute based on its index.</para>
      </summary>
      <param name="index">The vertex attribute index (0 to vertexAttributeCount-1).</param>
      <returns>
        <para>Information about the vertex attribute.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Mesh.GetVertexAttributeDimension(UnityEngine.Rendering.VertexAttribute)">
      <summary>
        <para>Get dimension of a specific vertex data attribute on this Mesh.</para>
      </summary>
      <param name="attr">Vertex data attribute to check for.</param>
      <returns>
        <para>Dimensionality of the data attribute, or zero if it is not present.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Mesh.GetVertexAttributeFormat(UnityEngine.Rendering.VertexAttribute)">
      <summary>
        <para>Get format of a specific vertex data attribute on this Mesh.</para>
      </summary>
      <param name="attr">Vertex data attribute to check for.</param>
      <returns>
        <para>Format of the data attribute.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Mesh.GetVertexAttributes">
      <summary>
        <para>Get information about vertex attributes of a Mesh.</para>
      </summary>
      <returns>
        <para>Array of vertex attribute information.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Mesh.GetVertexAttributes(UnityEngine.Rendering.VertexAttributeDescriptor[])">
      <summary>
        <para>Get information about vertex attributes of a Mesh, without memory allocations.</para>
      </summary>
      <param name="attributes">Collection of vertex attributes to receive the results.</param>
      <returns>
        <para>The number of vertex attributes returned in the attributes container.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Mesh.GetVertexAttributes(System.Collections.Generic.List`1&lt;UnityEngine.Rendering.VertexAttributeDescriptor&gt;)">
      <summary>
        <para>Get information about vertex attributes of a Mesh, without memory allocations.</para>
      </summary>
      <param name="attributes">Collection of vertex attributes to receive the results.</param>
      <returns>
        <para>The number of vertex attributes returned in the attributes container.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Mesh.GetVertices(System.Collections.Generic.List`1&lt;UnityEngine.Vector3&gt;)">
      <summary>
        <para>Gets the vertex positions of the Mesh.</para>
      </summary>
      <param name="vertices">A list of vertex positions to populate.</param>
    </member>
    <member name="M:UnityEngine.Mesh.HasVertexAttribute(UnityEngine.Rendering.VertexAttribute)">
      <summary>
        <para>Checks if a specific vertex data attribute exists on this Mesh.</para>
      </summary>
      <param name="attr">Vertex data attribute to check for.</param>
      <returns>
        <para>Returns true if the data attribute is present in the mesh.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Mesh.MarkDynamic">
      <summary>
        <para>Optimize mesh for frequent updates.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mesh.MarkModified">
      <summary>
        <para>Notify Renderer components of mesh geometry change.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Mesh.MeshData">
      <summary>
        <para>A struct containing Mesh data for C# Job System access.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.MeshData.indexFormat">
      <summary>
        <para>Gets the format of the index buffer data in the MeshData. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.MeshData.subMeshCount">
      <summary>
        <para>The number of sub-meshes in the MeshData.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.MeshData.vertexBufferCount">
      <summary>
        <para>Gets the number of vertex buffers in the MeshData. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.MeshData.vertexCount">
      <summary>
        <para>Gets the number of vertices in the MeshData. (Read Only)</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mesh.MeshData.GetColors(Unity.Collections.NativeArray`1&lt;UnityEngine.Color&gt;)">
      <summary>
        <para>Populates an array with the vertex colors from the MeshData.</para>
      </summary>
      <param name="outColors">The destination vertex colors array.</param>
    </member>
    <member name="M:UnityEngine.Mesh.MeshData.GetColors(Unity.Collections.NativeArray`1&lt;UnityEngine.Color32&gt;)">
      <summary>
        <para>Populates an array with the vertex colors from the MeshData.</para>
      </summary>
      <param name="outColors">The destination vertex colors array.</param>
    </member>
    <member name="M:UnityEngine.Mesh.MeshData.GetIndexData">
      <summary>
        <para>Gets raw data from the index buffer of the MeshData.</para>
      </summary>
      <returns>
        <para>Returns a NativeArray containing the index buffer data.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Mesh.MeshData.GetIndices(Unity.Collections.NativeArray`1&lt;System.UInt16&gt;,System.Int32,System.Boolean)">
      <summary>
        <para>Populates an array with the indices for a given sub-mesh from the MeshData.</para>
      </summary>
      <param name="outIndices">The destination indices array.</param>
      <param name="submesh">The index of the sub-mesh to get the indices for. See Mesh.MeshData.subMeshCount|subMeshCount.</param>
      <param name="applyBaseVertex">If true, Unity will apply base vertex offset to the returned indices. The default value is true.</param>
    </member>
    <member name="M:UnityEngine.Mesh.MeshData.GetIndices(Unity.Collections.NativeArray`1&lt;System.Int32&gt;,System.Int32,System.Boolean)">
      <summary>
        <para>Populates an array with the indices for a given sub-mesh from the MeshData.</para>
      </summary>
      <param name="outIndices">The destination indices array.</param>
      <param name="submesh">The index of the sub-mesh to get the indices for. See Mesh.MeshData.subMeshCount|subMeshCount.</param>
      <param name="applyBaseVertex">If true, Unity will apply base vertex offset to the returned indices. The default value is true.</param>
    </member>
    <member name="M:UnityEngine.Mesh.MeshData.GetNormals(Unity.Collections.NativeArray`1&lt;UnityEngine.Vector3&gt;)">
      <summary>
        <para>Populates an array with the vertex normals from the MeshData.</para>
      </summary>
      <param name="outNormals">The destination vertex normals array.</param>
    </member>
    <member name="M:UnityEngine.Mesh.MeshData.GetSubMesh(System.Int32)">
      <summary>
        <para>Gets data about a given sub-mesh in the MeshData.</para>
      </summary>
      <param name="index">The index of the sub-mesh. See Mesh.MeshData.subMeshCount|subMeshCount. If you specify an out of range index, Unity throws an exception.</param>
      <returns>
        <para>Returns sub-mesh data.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Mesh.MeshData.GetTangents(Unity.Collections.NativeArray`1&lt;UnityEngine.Vector4&gt;)">
      <summary>
        <para>Populates an array with the vertex tangents from the MeshData.</para>
      </summary>
      <param name="outTangents">The destination vertex tangents array.</param>
    </member>
    <member name="M:UnityEngine.Mesh.MeshData.GetUVs(System.Int32,Unity.Collections.NativeArray`1&lt;UnityEngine.Vector2&gt;)">
      <summary>
        <para>Populates an array with the UVs from the MeshData.</para>
      </summary>
      <param name="channel">The UV channel, in [0..7] range.</param>
      <param name="outUVs">The destination texture coordinates array.</param>
    </member>
    <member name="M:UnityEngine.Mesh.MeshData.GetUVs(System.Int32,Unity.Collections.NativeArray`1&lt;UnityEngine.Vector3&gt;)">
      <summary>
        <para>Populates an array with the UVs from the MeshData.</para>
      </summary>
      <param name="channel">The UV channel, in [0..7] range.</param>
      <param name="outUVs">The destination texture coordinates array.</param>
    </member>
    <member name="M:UnityEngine.Mesh.MeshData.GetUVs(System.Int32,Unity.Collections.NativeArray`1&lt;UnityEngine.Vector4&gt;)">
      <summary>
        <para>Populates an array with the UVs from the MeshData.</para>
      </summary>
      <param name="channel">The UV channel, in [0..7] range.</param>
      <param name="outUVs">The destination texture coordinates array.</param>
    </member>
    <member name="M:UnityEngine.Mesh.MeshData.GetVertexAttributeDimension(UnityEngine.Rendering.VertexAttribute)">
      <summary>
        <para>Gets the dimension of a given vertex attribute in the MeshData.</para>
      </summary>
      <param name="attr">The vertex attribute to get the dimension of.</param>
      <returns>
        <para>Returns the dimension of the vertex attribute. Returns 0 if the vertex attribute is not present.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Mesh.MeshData.GetVertexAttributeFormat(UnityEngine.Rendering.VertexAttribute)">
      <summary>
        <para>Gets the format of a given vertex attribute in the MeshData.</para>
      </summary>
      <param name="attr">The vertex attribute to check the format of.</param>
      <returns>
        <para>Returns the format of the given vertex attribute.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Mesh.MeshData.GetVertexData(System.Int32)">
      <summary>
        <para>Gets raw data for a given vertex buffer stream format in the MeshData.</para>
      </summary>
      <param name="stream">The vertex buffer stream to get data for. The default value is 0.</param>
      <returns>
        <para>Returns a NativeArray containing the vertex buffer data.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Mesh.MeshData.GetVertices(Unity.Collections.NativeArray`1&lt;UnityEngine.Vector3&gt;)">
      <summary>
        <para>Populates an array with the vertex positions from the MeshData.</para>
      </summary>
      <param name="outVertices">The destination vertex positions array.</param>
    </member>
    <member name="M:UnityEngine.Mesh.MeshData.HasVertexAttribute(UnityEngine.Rendering.VertexAttribute)">
      <summary>
        <para>Checks if a given vertex attribute exists in the MeshData.</para>
      </summary>
      <param name="attr">The vertex attribute to check for.</param>
      <returns>
        <para>Returns true if the data attribute is present in the Mesh. Returns false if it is not.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Mesh.MeshData.SetIndexBufferParams(System.Int32,UnityEngine.Rendering.IndexFormat)">
      <summary>
        <para>Sets the index buffer size and format of the Mesh that Unity creates from the MeshData.</para>
      </summary>
      <param name="indexCount">The size of the index buffer.</param>
      <param name="format">The format of the indices.</param>
    </member>
    <member name="M:UnityEngine.Mesh.MeshData.SetSubMesh(System.Int32,UnityEngine.Rendering.SubMeshDescriptor,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets the data for a sub-mesh of the Mesh that Unity creates from the MeshData.</para>
      </summary>
      <param name="index">The index of the sub-mesh to set data for. See Mesh.MeshData.subMeshCount|subMeshCount. If you specify an out of range index, Unity throws an exception.</param>
      <param name="desc">Sub-mesh data.</param>
      <param name="flags">Flags controlling the function behavior. See MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.MeshData.SetVertexBufferParams(System.Int32,UnityEngine.Rendering.VertexAttributeDescriptor[])">
      <summary>
        <para>Sets the vertex buffer size and layout of the Mesh that Unity creates from the MeshData.</para>
      </summary>
      <param name="vertexCount">The number of vertices in the Mesh.</param>
      <param name="attributes">Layout of the vertex data: which attributes are present, their data types and so on.</param>
    </member>
    <member name="M:UnityEngine.Mesh.MeshData.SetVertexBufferParams(System.Int32,Unity.Collections.NativeArray`1&lt;UnityEngine.Rendering.VertexAttributeDescriptor&gt;)">
      <summary>
        <para>Sets the vertex buffer size and layout of the Mesh that Unity creates from the MeshData.</para>
      </summary>
      <param name="vertexCount">The number of vertices in the Mesh.</param>
      <param name="attributes">Layout of the vertex data: which attributes are present, their data types and so on.</param>
    </member>
    <member name="T:UnityEngine.Mesh.MeshDataArray">
      <summary>
        <para>An array of Mesh data snapshots for C# Job System access.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mesh.MeshDataArray.Dispose">
      <summary>
        <para>Use this method to dispose of the MeshDataArray struct.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.MeshDataArray.Length">
      <summary>
        <para>Number of Mesh data elements in the MeshDataArray.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.MeshDataArray.this">
      <summary>
        <para>Access MeshDataArray element by an index.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mesh.Optimize">
      <summary>
        <para>Optimizes the Mesh data to improve rendering performance.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mesh.OptimizeIndexBuffers">
      <summary>
        <para>Optimizes the geometry of the Mesh to improve rendering performance.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mesh.OptimizeReorderVertexBuffer">
      <summary>
        <para>Optimizes the vertices of the Mesh to improve rendering performance.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mesh.RecalculateBounds()">
      <summary>
        <para>Recalculate the bounding volume of the Mesh from the vertices.</para>
      </summary>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.RecalculateBounds(UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Recalculate the bounding volume of the Mesh from the vertices.</para>
      </summary>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.RecalculateNormals()">
      <summary>
        <para>Recalculates the normals of the Mesh from the triangles and vertices.</para>
      </summary>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.RecalculateNormals(UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Recalculates the normals of the Mesh from the triangles and vertices.</para>
      </summary>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.RecalculateTangents()">
      <summary>
        <para>Recalculates the tangents of the Mesh from the normals and texture coordinates.</para>
      </summary>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.RecalculateTangents(UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Recalculates the tangents of the Mesh from the normals and texture coordinates.</para>
      </summary>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.RecalculateUVDistributionMetric(System.Int32,System.Single)">
      <summary>
        <para>Recalculates the UV distribution metric of the Mesh from the vertices and uv coordinates.</para>
      </summary>
      <param name="uvSetIndex">The UV set index to set the UV distibution metric for. Use 0 for first index.</param>
      <param name="uvAreaThreshold">The minimum UV area to consider. The default value is 1e-9f.</param>
    </member>
    <member name="M:UnityEngine.Mesh.RecalculateUVDistributionMetrics(System.Single)">
      <summary>
        <para>Recalculates the UV distribution metrics of the Mesh from the vertices and uv coordinates.</para>
      </summary>
      <param name="uvAreaThreshold">The minimum UV area to consider. The default value is 1e-9f.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetBoneWeights(Unity.Collections.NativeArray`1&lt;System.Byte&gt;,Unity.Collections.NativeArray`1&lt;UnityEngine.BoneWeight1&gt;)">
      <summary>
        <para>Sets the bone weights for the Mesh.</para>
      </summary>
      <param name="bonesPerVertex">Bone count for each vertex in the Mesh.</param>
      <param name="weights">BoneWeight1 structs for each vertex, sorted by vertex index.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetColors(UnityEngine.Color32[])">
      <summary>
        <para>Set the per-vertex colors of the Mesh.</para>
      </summary>
      <param name="inColors">Per-vertex colors.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetColors(UnityEngine.Color[])">
      <summary>
        <para>Set the per-vertex colors of the Mesh.</para>
      </summary>
      <param name="inColors">Per-vertex colors.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetColors(System.Collections.Generic.List`1&lt;UnityEngine.Color32&gt;)">
      <summary>
        <para>Set the per-vertex colors of the Mesh.</para>
      </summary>
      <param name="inColors">Per-vertex colors.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetColors(System.Collections.Generic.List`1&lt;UnityEngine.Color&gt;)">
      <summary>
        <para>Set the per-vertex colors of the Mesh.</para>
      </summary>
      <param name="inColors">Per-vertex colors.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetColors(Unity.Collections.NativeArray`1&lt;T&gt;)">
      <summary>
        <para>Set the per-vertex colors of the Mesh.</para>
      </summary>
      <param name="inColors">Per-vertex colors.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetColors(UnityEngine.Color32[],System.Int32,System.Int32)">
      <summary>
        <para>Sets the per-vertex colors of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="inColors">Per-vertex colors.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetColors(UnityEngine.Color32[],System.Int32,System.Int32,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets the per-vertex colors of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="inColors">Per-vertex colors.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetColors(UnityEngine.Color[],System.Int32,System.Int32)">
      <summary>
        <para>Sets the per-vertex colors of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="inColors">Per-vertex colors.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetColors(UnityEngine.Color[],System.Int32,System.Int32,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets the per-vertex colors of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="inColors">Per-vertex colors.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetColors(System.Collections.Generic.List`1&lt;UnityEngine.Color32&gt;,System.Int32,System.Int32)">
      <summary>
        <para>Sets the per-vertex colors of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="inColors">Per-vertex colors.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetColors(System.Collections.Generic.List`1&lt;UnityEngine.Color32&gt;,System.Int32,System.Int32,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets the per-vertex colors of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="inColors">Per-vertex colors.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetColors(System.Collections.Generic.List`1&lt;UnityEngine.Color&gt;,System.Int32,System.Int32)">
      <summary>
        <para>Sets the per-vertex colors of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="inColors">Per-vertex colors.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetColors(System.Collections.Generic.List`1&lt;UnityEngine.Color&gt;,System.Int32,System.Int32,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets the per-vertex colors of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="inColors">Per-vertex colors.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetColors(Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32,System.Int32)">
      <summary>
        <para>Sets the per-vertex colors of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="inColors">Per-vertex colors.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetColors(Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32,System.Int32,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets the per-vertex colors of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="inColors">Per-vertex colors.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetIndexBufferData(Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Sets the data of the index buffer of the Mesh.</para>
      </summary>
      <param name="data">Index buffer data array.</param>
      <param name="dataStart">The first element in the data to copy from.</param>
      <param name="meshBufferStart">The first element in the mesh index buffer to receive the data.</param>
      <param name="count">Count of indices to copy.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetIndexBufferData(Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32,System.Int32,System.Int32,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets the data of the index buffer of the Mesh.</para>
      </summary>
      <param name="data">Index buffer data array.</param>
      <param name="dataStart">The first element in the data to copy from.</param>
      <param name="meshBufferStart">The first element in the mesh index buffer to receive the data.</param>
      <param name="count">Count of indices to copy.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetIndexBufferData(T[],System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Sets the data of the index buffer of the Mesh.</para>
      </summary>
      <param name="data">Index buffer data array.</param>
      <param name="dataStart">The first element in the data to copy from.</param>
      <param name="meshBufferStart">The first element in the mesh index buffer to receive the data.</param>
      <param name="count">Count of indices to copy.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetIndexBufferData(T[],System.Int32,System.Int32,System.Int32,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets the data of the index buffer of the Mesh.</para>
      </summary>
      <param name="data">Index buffer data array.</param>
      <param name="dataStart">The first element in the data to copy from.</param>
      <param name="meshBufferStart">The first element in the mesh index buffer to receive the data.</param>
      <param name="count">Count of indices to copy.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetIndexBufferData(System.Collections.Generic.List`1&lt;T&gt;,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Sets the data of the index buffer of the Mesh.</para>
      </summary>
      <param name="data">Index buffer data array.</param>
      <param name="dataStart">The first element in the data to copy from.</param>
      <param name="meshBufferStart">The first element in the mesh index buffer to receive the data.</param>
      <param name="count">Count of indices to copy.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetIndexBufferData(System.Collections.Generic.List`1&lt;T&gt;,System.Int32,System.Int32,System.Int32,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets the data of the index buffer of the Mesh.</para>
      </summary>
      <param name="data">Index buffer data array.</param>
      <param name="dataStart">The first element in the data to copy from.</param>
      <param name="meshBufferStart">The first element in the mesh index buffer to receive the data.</param>
      <param name="count">Count of indices to copy.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetIndexBufferParams(System.Int32,UnityEngine.Rendering.IndexFormat)">
      <summary>
        <para>Sets the index buffer size and format.</para>
      </summary>
      <param name="indexCount">Size of index buffer.</param>
      <param name="format">Format of the indices.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetIndices(System.Int32[],UnityEngine.MeshTopology,System.Int32,System.Boolean)">
      <summary>
        <para>Sets the index buffer for the sub-mesh.</para>
      </summary>
      <param name="indices">The array of indices that define the mesh faces.</param>
      <param name="topology">The topology of the Mesh, e.g: Triangles, Lines, Quads, Points, etc. See MeshTopology.</param>
      <param name="submesh">The sub-mesh to modify.</param>
      <param name="calculateBounds">Calculate the bounding box of the Mesh after setting the indices. This is done by default.
Use false when you want to use the existing bounding box and reduce the CPU cost of setting the indices.</param>
      <param name="baseVertex">Optional vertex offset that is added to all vertex indices.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetIndices(System.Int32[],UnityEngine.MeshTopology,System.Int32)">
      <summary>
        <para>Sets the index buffer for the sub-mesh.</para>
      </summary>
      <param name="indices">The array of indices that define the mesh faces.</param>
      <param name="topology">The topology of the Mesh, e.g: Triangles, Lines, Quads, Points, etc. See MeshTopology.</param>
      <param name="submesh">The sub-mesh to modify.</param>
      <param name="calculateBounds">Calculate the bounding box of the Mesh after setting the indices. This is done by default.
Use false when you want to use the existing bounding box and reduce the CPU cost of setting the indices.</param>
      <param name="baseVertex">Optional vertex offset that is added to all vertex indices.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetIndices(System.Int32[],UnityEngine.MeshTopology,System.Int32,System.Boolean,System.Int32)">
      <summary>
        <para>Sets the index buffer for the sub-mesh.</para>
      </summary>
      <param name="indices">The array of indices that define the mesh faces.</param>
      <param name="topology">The topology of the Mesh, e.g: Triangles, Lines, Quads, Points, etc. See MeshTopology.</param>
      <param name="submesh">The sub-mesh to modify.</param>
      <param name="calculateBounds">Calculate the bounding box of the Mesh after setting the indices. This is done by default.
Use false when you want to use the existing bounding box and reduce the CPU cost of setting the indices.</param>
      <param name="baseVertex">Optional vertex offset that is added to all vertex indices.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetIndices(System.Collections.Generic.List`1&lt;System.Int32&gt;,UnityEngine.MeshTopology,System.Int32,System.Boolean,System.Int32)">
      <summary>
        <para>Sets the index buffer for the sub-mesh.</para>
      </summary>
      <param name="indices">The array of indices that define the mesh faces.</param>
      <param name="topology">The topology of the Mesh, e.g: Triangles, Lines, Quads, Points, etc. See MeshTopology.</param>
      <param name="submesh">The sub-mesh to modify.</param>
      <param name="calculateBounds">Calculate the bounding box of the Mesh after setting the indices. This is done by default.
Use false when you want to use the existing bounding box and reduce the CPU cost of setting the indices.</param>
      <param name="baseVertex">Optional vertex offset that is added to all vertex indices.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetIndices(System.UInt16[],UnityEngine.MeshTopology,System.Int32,System.Boolean,System.Int32)">
      <summary>
        <para>Sets the index buffer for the sub-mesh.</para>
      </summary>
      <param name="indices">The array of indices that define the mesh faces.</param>
      <param name="topology">The topology of the Mesh, e.g: Triangles, Lines, Quads, Points, etc. See MeshTopology.</param>
      <param name="submesh">The sub-mesh to modify.</param>
      <param name="calculateBounds">Calculate the bounding box of the Mesh after setting the indices. This is done by default.
Use false when you want to use the existing bounding box and reduce the CPU cost of setting the indices.</param>
      <param name="baseVertex">Optional vertex offset that is added to all vertex indices.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetIndices(System.Collections.Generic.List`1&lt;System.UInt16&gt;,UnityEngine.MeshTopology,System.Int32,System.Boolean,System.Int32)">
      <summary>
        <para>Sets the index buffer for the sub-mesh.</para>
      </summary>
      <param name="indices">The array of indices that define the mesh faces.</param>
      <param name="topology">The topology of the Mesh, e.g: Triangles, Lines, Quads, Points, etc. See MeshTopology.</param>
      <param name="submesh">The sub-mesh to modify.</param>
      <param name="calculateBounds">Calculate the bounding box of the Mesh after setting the indices. This is done by default.
Use false when you want to use the existing bounding box and reduce the CPU cost of setting the indices.</param>
      <param name="baseVertex">Optional vertex offset that is added to all vertex indices.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetIndices(Unity.Collections.NativeArray`1&lt;T&gt;,UnityEngine.MeshTopology,System.Int32,System.Boolean,System.Int32)">
      <summary>
        <para>Sets the index buffer for the sub-mesh.</para>
      </summary>
      <param name="indices">The array of indices that define the mesh faces.</param>
      <param name="topology">The topology of the Mesh, e.g: Triangles, Lines, Quads, Points, etc. See MeshTopology.</param>
      <param name="submesh">The sub-mesh to modify.</param>
      <param name="calculateBounds">Calculate the bounding box of the Mesh after setting the indices. This is done by default.
Use false when you want to use the existing bounding box and reduce the CPU cost of setting the indices.</param>
      <param name="baseVertex">Optional vertex offset that is added to all vertex indices.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetIndices(System.Int32[],System.Int32,System.Int32,UnityEngine.MeshTopology,System.Int32,System.Boolean,System.Int32)">
      <summary>
        <para>Sets the index buffer of a sub-mesh, using a part of the input array.</para>
      </summary>
      <param name="indices">The array of indices that define the mesh faces.</param>
      <param name="indicesStart">Index of the first element to take from the input array.</param>
      <param name="indicesLength">Number of elements to take from the input array.</param>
      <param name="topology">The topology of the Mesh, e.g: Triangles, Lines, Quads, Points, etc. See MeshTopology.</param>
      <param name="submesh">The sub-mesh to modify.</param>
      <param name="calculateBounds">Calculate the bounding box of the Mesh after setting the indices. This is done by default.
Use false when you want to use the existing bounding box and reduce the CPU cost of setting the indices.</param>
      <param name="baseVertex">Optional vertex offset that is added to all vertex indices.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetIndices(System.Collections.Generic.List`1&lt;System.Int32&gt;,System.Int32,System.Int32,UnityEngine.MeshTopology,System.Int32,System.Boolean,System.Int32)">
      <summary>
        <para>Sets the index buffer of a sub-mesh, using a part of the input array.</para>
      </summary>
      <param name="indices">The array of indices that define the mesh faces.</param>
      <param name="indicesStart">Index of the first element to take from the input array.</param>
      <param name="indicesLength">Number of elements to take from the input array.</param>
      <param name="topology">The topology of the Mesh, e.g: Triangles, Lines, Quads, Points, etc. See MeshTopology.</param>
      <param name="submesh">The sub-mesh to modify.</param>
      <param name="calculateBounds">Calculate the bounding box of the Mesh after setting the indices. This is done by default.
Use false when you want to use the existing bounding box and reduce the CPU cost of setting the indices.</param>
      <param name="baseVertex">Optional vertex offset that is added to all vertex indices.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetIndices(System.UInt16[],System.Int32,System.Int32,UnityEngine.MeshTopology,System.Int32,System.Boolean,System.Int32)">
      <summary>
        <para>Sets the index buffer of a sub-mesh, using a part of the input array.</para>
      </summary>
      <param name="indices">The array of indices that define the mesh faces.</param>
      <param name="indicesStart">Index of the first element to take from the input array.</param>
      <param name="indicesLength">Number of elements to take from the input array.</param>
      <param name="topology">The topology of the Mesh, e.g: Triangles, Lines, Quads, Points, etc. See MeshTopology.</param>
      <param name="submesh">The sub-mesh to modify.</param>
      <param name="calculateBounds">Calculate the bounding box of the Mesh after setting the indices. This is done by default.
Use false when you want to use the existing bounding box and reduce the CPU cost of setting the indices.</param>
      <param name="baseVertex">Optional vertex offset that is added to all vertex indices.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetIndices(System.Collections.Generic.List`1&lt;System.UInt16&gt;,System.Int32,System.Int32,UnityEngine.MeshTopology,System.Int32,System.Boolean,System.Int32)">
      <summary>
        <para>Sets the index buffer of a sub-mesh, using a part of the input array.</para>
      </summary>
      <param name="indices">The array of indices that define the mesh faces.</param>
      <param name="indicesStart">Index of the first element to take from the input array.</param>
      <param name="indicesLength">Number of elements to take from the input array.</param>
      <param name="topology">The topology of the Mesh, e.g: Triangles, Lines, Quads, Points, etc. See MeshTopology.</param>
      <param name="submesh">The sub-mesh to modify.</param>
      <param name="calculateBounds">Calculate the bounding box of the Mesh after setting the indices. This is done by default.
Use false when you want to use the existing bounding box and reduce the CPU cost of setting the indices.</param>
      <param name="baseVertex">Optional vertex offset that is added to all vertex indices.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetIndices(Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32,System.Int32,UnityEngine.MeshTopology,System.Int32,System.Boolean,System.Int32)">
      <summary>
        <para>Sets the index buffer of a sub-mesh, using a part of the input array.</para>
      </summary>
      <param name="indices">The array of indices that define the mesh faces.</param>
      <param name="indicesStart">Index of the first element to take from the input array.</param>
      <param name="indicesLength">Number of elements to take from the input array.</param>
      <param name="topology">The topology of the Mesh, e.g: Triangles, Lines, Quads, Points, etc. See MeshTopology.</param>
      <param name="submesh">The sub-mesh to modify.</param>
      <param name="calculateBounds">Calculate the bounding box of the Mesh after setting the indices. This is done by default.
Use false when you want to use the existing bounding box and reduce the CPU cost of setting the indices.</param>
      <param name="baseVertex">Optional vertex offset that is added to all vertex indices.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetNormals(UnityEngine.Vector3[])">
      <summary>
        <para>Set the normals of the Mesh.</para>
      </summary>
      <param name="inNormals">Per-vertex normals.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetNormals(System.Collections.Generic.List`1&lt;UnityEngine.Vector3&gt;)">
      <summary>
        <para>Set the normals of the Mesh.</para>
      </summary>
      <param name="inNormals">Per-vertex normals.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetNormals(Unity.Collections.NativeArray`1&lt;T&gt;)">
      <summary>
        <para>Set the normals of the Mesh.</para>
      </summary>
      <param name="inNormals">Per-vertex normals.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetNormals(UnityEngine.Vector3[],System.Int32,System.Int32)">
      <summary>
        <para>Sets the vertex normals of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="inNormals">Per-vertex normals.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetNormals(UnityEngine.Vector3[],System.Int32,System.Int32,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets the vertex normals of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="inNormals">Per-vertex normals.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetNormals(System.Collections.Generic.List`1&lt;UnityEngine.Vector3&gt;,System.Int32,System.Int32)">
      <summary>
        <para>Sets the vertex normals of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="inNormals">Per-vertex normals.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetNormals(System.Collections.Generic.List`1&lt;UnityEngine.Vector3&gt;,System.Int32,System.Int32,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets the vertex normals of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="inNormals">Per-vertex normals.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetNormals(Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32,System.Int32)">
      <summary>
        <para>Sets the vertex normals of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="inNormals">Per-vertex normals.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetNormals(Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32,System.Int32,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets the vertex normals of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="inNormals">Per-vertex normals.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetSubMesh(System.Int32,UnityEngine.Rendering.SubMeshDescriptor)">
      <summary>
        <para>Sets the information about a sub-mesh of the Mesh.</para>
      </summary>
      <param name="index">Sub-mesh index. See subMeshCount. Out of range indices throw an exception.</param>
      <param name="desc">Sub-mesh data.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetSubMesh(System.Int32,UnityEngine.Rendering.SubMeshDescriptor,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets the information about a sub-mesh of the Mesh.</para>
      </summary>
      <param name="index">Sub-mesh index. See subMeshCount. Out of range indices throw an exception.</param>
      <param name="desc">Sub-mesh data.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetSubMeshes(UnityEngine.Rendering.SubMeshDescriptor[],System.Int32,System.Int32)">
      <summary>
        <para>Sets information defining all sub-meshes in this Mesh, replacing any existing sub-meshes.</para>
      </summary>
      <param name="desc">An array or list of sub-mesh data descriptors.</param>
      <param name="start">Index of the first element to take from the array or list in desc.</param>
      <param name="count">Number of elements to take from the array or list in desc.</param>
      <param name="flags">(Optional) Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetSubMeshes(UnityEngine.Rendering.SubMeshDescriptor[],System.Int32,System.Int32,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets information defining all sub-meshes in this Mesh, replacing any existing sub-meshes.</para>
      </summary>
      <param name="desc">An array or list of sub-mesh data descriptors.</param>
      <param name="start">Index of the first element to take from the array or list in desc.</param>
      <param name="count">Number of elements to take from the array or list in desc.</param>
      <param name="flags">(Optional) Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetSubMeshes(UnityEngine.Rendering.SubMeshDescriptor[])">
      <summary>
        <para>Sets information defining all sub-meshes in this Mesh, replacing any existing sub-meshes.</para>
      </summary>
      <param name="desc">An array or list of sub-mesh data descriptors.</param>
      <param name="start">Index of the first element to take from the array or list in desc.</param>
      <param name="count">Number of elements to take from the array or list in desc.</param>
      <param name="flags">(Optional) Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetSubMeshes(UnityEngine.Rendering.SubMeshDescriptor[],UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets information defining all sub-meshes in this Mesh, replacing any existing sub-meshes.</para>
      </summary>
      <param name="desc">An array or list of sub-mesh data descriptors.</param>
      <param name="start">Index of the first element to take from the array or list in desc.</param>
      <param name="count">Number of elements to take from the array or list in desc.</param>
      <param name="flags">(Optional) Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetSubMeshes(System.Collections.Generic.List`1&lt;UnityEngine.Rendering.SubMeshDescriptor&gt;,System.Int32,System.Int32,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets information defining all sub-meshes in this Mesh, replacing any existing sub-meshes.</para>
      </summary>
      <param name="desc">An array or list of sub-mesh data descriptors.</param>
      <param name="start">Index of the first element to take from the array or list in desc.</param>
      <param name="count">Number of elements to take from the array or list in desc.</param>
      <param name="flags">(Optional) Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetSubMeshes(System.Collections.Generic.List`1&lt;UnityEngine.Rendering.SubMeshDescriptor&gt;,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets information defining all sub-meshes in this Mesh, replacing any existing sub-meshes.</para>
      </summary>
      <param name="desc">An array or list of sub-mesh data descriptors.</param>
      <param name="start">Index of the first element to take from the array or list in desc.</param>
      <param name="count">Number of elements to take from the array or list in desc.</param>
      <param name="flags">(Optional) Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetSubMeshes(Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32,System.Int32,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets information defining all sub-meshes in this Mesh, replacing any existing sub-meshes.</para>
      </summary>
      <param name="desc">An array or list of sub-mesh data descriptors.</param>
      <param name="start">Index of the first element to take from the array or list in desc.</param>
      <param name="count">Number of elements to take from the array or list in desc.</param>
      <param name="flags">(Optional) Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetSubMeshes(Unity.Collections.NativeArray`1&lt;T&gt;,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets information defining all sub-meshes in this Mesh, replacing any existing sub-meshes.</para>
      </summary>
      <param name="desc">An array or list of sub-mesh data descriptors.</param>
      <param name="start">Index of the first element to take from the array or list in desc.</param>
      <param name="count">Number of elements to take from the array or list in desc.</param>
      <param name="flags">(Optional) Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetTangents(UnityEngine.Vector4[])">
      <summary>
        <para>Set the tangents of the Mesh.</para>
      </summary>
      <param name="inTangents">Per-vertex tangents.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetTangents(System.Collections.Generic.List`1&lt;UnityEngine.Vector4&gt;)">
      <summary>
        <para>Set the tangents of the Mesh.</para>
      </summary>
      <param name="inTangents">Per-vertex tangents.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetTangents(Unity.Collections.NativeArray`1&lt;T&gt;)">
      <summary>
        <para>Set the tangents of the Mesh.</para>
      </summary>
      <param name="inTangents">Per-vertex tangents.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetTangents(UnityEngine.Vector4[],System.Int32,System.Int32)">
      <summary>
        <para>Sets the tangents of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="inTangents">Per-vertex tangents.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetTangents(UnityEngine.Vector4[],System.Int32,System.Int32,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets the tangents of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="inTangents">Per-vertex tangents.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetTangents(System.Collections.Generic.List`1&lt;UnityEngine.Vector4&gt;,System.Int32,System.Int32)">
      <summary>
        <para>Sets the tangents of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="inTangents">Per-vertex tangents.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetTangents(System.Collections.Generic.List`1&lt;UnityEngine.Vector4&gt;,System.Int32,System.Int32,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets the tangents of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="inTangents">Per-vertex tangents.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetTangents(Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32,System.Int32)">
      <summary>
        <para>Sets the tangents of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="inTangents">Per-vertex tangents.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetTangents(Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32,System.Int32,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets the tangents of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="inTangents">Per-vertex tangents.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetTriangles(System.Int32[],System.Int32,System.Boolean,System.Int32)">
      <summary>
        <para>Sets the triangle list for the sub-mesh.</para>
      </summary>
      <param name="triangles">The list of indices that define the triangles.</param>
      <param name="submesh">The sub-mesh to modify.</param>
      <param name="calculateBounds">Calculate the bounding box of the Mesh after setting the triangles. This is done by default.
Use false when you want to use the existing bounding box and reduce the CPU cost of setting the triangles.</param>
      <param name="baseVertex">Optional vertex offset that is added to all triangle vertex indices.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetTriangles(System.Int32[],System.Int32,System.Boolean)">
      <summary>
        <para>Sets the triangle list for the sub-mesh.</para>
      </summary>
      <param name="triangles">The list of indices that define the triangles.</param>
      <param name="submesh">The sub-mesh to modify.</param>
      <param name="calculateBounds">Calculate the bounding box of the Mesh after setting the triangles. This is done by default.
Use false when you want to use the existing bounding box and reduce the CPU cost of setting the triangles.</param>
      <param name="baseVertex">Optional vertex offset that is added to all triangle vertex indices.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetTriangles(System.Int32[],System.Int32)">
      <summary>
        <para>Sets the triangle list for the sub-mesh.</para>
      </summary>
      <param name="triangles">The list of indices that define the triangles.</param>
      <param name="submesh">The sub-mesh to modify.</param>
      <param name="calculateBounds">Calculate the bounding box of the Mesh after setting the triangles. This is done by default.
Use false when you want to use the existing bounding box and reduce the CPU cost of setting the triangles.</param>
      <param name="baseVertex">Optional vertex offset that is added to all triangle vertex indices.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetTriangles(System.Collections.Generic.List`1&lt;System.Int32&gt;,System.Int32,System.Boolean,System.Int32)">
      <summary>
        <para>Sets the triangle list for the sub-mesh.</para>
      </summary>
      <param name="triangles">The list of indices that define the triangles.</param>
      <param name="submesh">The sub-mesh to modify.</param>
      <param name="calculateBounds">Calculate the bounding box of the Mesh after setting the triangles. This is done by default.
Use false when you want to use the existing bounding box and reduce the CPU cost of setting the triangles.</param>
      <param name="baseVertex">Optional vertex offset that is added to all triangle vertex indices.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetTriangles(System.Collections.Generic.List`1&lt;System.Int32&gt;,System.Int32,System.Boolean)">
      <summary>
        <para>Sets the triangle list for the sub-mesh.</para>
      </summary>
      <param name="triangles">The list of indices that define the triangles.</param>
      <param name="submesh">The sub-mesh to modify.</param>
      <param name="calculateBounds">Calculate the bounding box of the Mesh after setting the triangles. This is done by default.
Use false when you want to use the existing bounding box and reduce the CPU cost of setting the triangles.</param>
      <param name="baseVertex">Optional vertex offset that is added to all triangle vertex indices.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetTriangles(System.Collections.Generic.List`1&lt;System.Int32&gt;,System.Int32)">
      <summary>
        <para>Sets the triangle list for the sub-mesh.</para>
      </summary>
      <param name="triangles">The list of indices that define the triangles.</param>
      <param name="submesh">The sub-mesh to modify.</param>
      <param name="calculateBounds">Calculate the bounding box of the Mesh after setting the triangles. This is done by default.
Use false when you want to use the existing bounding box and reduce the CPU cost of setting the triangles.</param>
      <param name="baseVertex">Optional vertex offset that is added to all triangle vertex indices.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetTriangles(System.UInt16[],System.Int32,System.Boolean,System.Int32)">
      <summary>
        <para>Sets the triangle list for the sub-mesh.</para>
      </summary>
      <param name="triangles">The list of indices that define the triangles.</param>
      <param name="submesh">The sub-mesh to modify.</param>
      <param name="calculateBounds">Calculate the bounding box of the Mesh after setting the triangles. This is done by default.
Use false when you want to use the existing bounding box and reduce the CPU cost of setting the triangles.</param>
      <param name="baseVertex">Optional vertex offset that is added to all triangle vertex indices.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetTriangles(System.Collections.Generic.List`1&lt;System.UInt16&gt;,System.Int32,System.Boolean,System.Int32)">
      <summary>
        <para>Sets the triangle list for the sub-mesh.</para>
      </summary>
      <param name="triangles">The list of indices that define the triangles.</param>
      <param name="submesh">The sub-mesh to modify.</param>
      <param name="calculateBounds">Calculate the bounding box of the Mesh after setting the triangles. This is done by default.
Use false when you want to use the existing bounding box and reduce the CPU cost of setting the triangles.</param>
      <param name="baseVertex">Optional vertex offset that is added to all triangle vertex indices.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetTriangles(System.Int32[],System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)">
      <summary>
        <para>Sets the triangle list of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="triangles">The list of indices that define the triangles.</param>
      <param name="trianglesStart">Index of the first element to take from the input array.</param>
      <param name="trianglesLength">Number of elements to take from the input array.</param>
      <param name="submesh">The sub-mesh to modify.</param>
      <param name="calculateBounds">Calculate the bounding box of the Mesh after setting the triangles. This is done by default.
Use false when you want to use the existing bounding box and reduce the CPU cost of setting the triangles.</param>
      <param name="baseVertex">Optional vertex offset that is added to all triangle vertex indices.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetTriangles(System.Collections.Generic.List`1&lt;System.Int32&gt;,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)">
      <summary>
        <para>Sets the triangle list of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="triangles">The list of indices that define the triangles.</param>
      <param name="trianglesStart">Index of the first element to take from the input array.</param>
      <param name="trianglesLength">Number of elements to take from the input array.</param>
      <param name="submesh">The sub-mesh to modify.</param>
      <param name="calculateBounds">Calculate the bounding box of the Mesh after setting the triangles. This is done by default.
Use false when you want to use the existing bounding box and reduce the CPU cost of setting the triangles.</param>
      <param name="baseVertex">Optional vertex offset that is added to all triangle vertex indices.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetTriangles(System.UInt16[],System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)">
      <summary>
        <para>Sets the triangle list of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="triangles">The list of indices that define the triangles.</param>
      <param name="trianglesStart">Index of the first element to take from the input array.</param>
      <param name="trianglesLength">Number of elements to take from the input array.</param>
      <param name="submesh">The sub-mesh to modify.</param>
      <param name="calculateBounds">Calculate the bounding box of the Mesh after setting the triangles. This is done by default.
Use false when you want to use the existing bounding box and reduce the CPU cost of setting the triangles.</param>
      <param name="baseVertex">Optional vertex offset that is added to all triangle vertex indices.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetTriangles(System.Collections.Generic.List`1&lt;System.UInt16&gt;,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)">
      <summary>
        <para>Sets the triangle list of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="triangles">The list of indices that define the triangles.</param>
      <param name="trianglesStart">Index of the first element to take from the input array.</param>
      <param name="trianglesLength">Number of elements to take from the input array.</param>
      <param name="submesh">The sub-mesh to modify.</param>
      <param name="calculateBounds">Calculate the bounding box of the Mesh after setting the triangles. This is done by default.
Use false when you want to use the existing bounding box and reduce the CPU cost of setting the triangles.</param>
      <param name="baseVertex">Optional vertex offset that is added to all triangle vertex indices.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetUVs(System.Int32,UnityEngine.Vector2[])">
      <summary>
        <para>Sets the UVs of the Mesh.</para>
      </summary>
      <param name="channel">The UV channel, in [0..7] range. Indices start at 0, which corresponds to uv. Note that 1 corresponds to uv2.</param>
      <param name="uvs">UVs to set for the given index.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetUVs(System.Int32,UnityEngine.Vector3[])">
      <summary>
        <para>Sets the UVs of the Mesh.</para>
      </summary>
      <param name="channel">The UV channel, in [0..7] range. Indices start at 0, which corresponds to uv. Note that 1 corresponds to uv2.</param>
      <param name="uvs">UVs to set for the given index.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetUVs(System.Int32,UnityEngine.Vector4[])">
      <summary>
        <para>Sets the UVs of the Mesh.</para>
      </summary>
      <param name="channel">The UV channel, in [0..7] range. Indices start at 0, which corresponds to uv. Note that 1 corresponds to uv2.</param>
      <param name="uvs">UVs to set for the given index.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetUVs(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.Vector2&gt;)">
      <summary>
        <para>Sets the UVs of the Mesh.</para>
      </summary>
      <param name="channel">The UV channel, in [0..7] range. Indices start at 0, which corresponds to uv. Note that 1 corresponds to uv2.</param>
      <param name="uvs">UVs to set for the given index.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetUVs(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.Vector3&gt;)">
      <summary>
        <para>Sets the UVs of the Mesh.</para>
      </summary>
      <param name="channel">The UV channel, in [0..7] range. Indices start at 0, which corresponds to uv. Note that 1 corresponds to uv2.</param>
      <param name="uvs">UVs to set for the given index.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetUVs(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.Vector4&gt;)">
      <summary>
        <para>Sets the UVs of the Mesh.</para>
      </summary>
      <param name="channel">The UV channel, in [0..7] range. Indices start at 0, which corresponds to uv. Note that 1 corresponds to uv2.</param>
      <param name="uvs">UVs to set for the given index.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetUVs(System.Int32,Unity.Collections.NativeArray`1&lt;T&gt;)">
      <summary>
        <para>Sets the UVs of the Mesh.</para>
      </summary>
      <param name="channel">The UV channel, in [0..7] range. Indices start at 0, which corresponds to uv. Note that 1 corresponds to uv2.</param>
      <param name="uvs">UVs to set for the given index.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetUVs(System.Int32,UnityEngine.Vector2[],System.Int32,System.Int32)">
      <summary>
        <para>Sets the UVs of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="channel">The UV channel, in [0..7] range.</param>
      <param name="uvs">UVs to set for the given index.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetUVs(System.Int32,UnityEngine.Vector2[],System.Int32,System.Int32,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets the UVs of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="channel">The UV channel, in [0..7] range.</param>
      <param name="uvs">UVs to set for the given index.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetUVs(System.Int32,UnityEngine.Vector3[],System.Int32,System.Int32)">
      <summary>
        <para>Sets the UVs of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="channel">The UV channel, in [0..7] range.</param>
      <param name="uvs">UVs to set for the given index.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetUVs(System.Int32,UnityEngine.Vector3[],System.Int32,System.Int32,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets the UVs of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="channel">The UV channel, in [0..7] range.</param>
      <param name="uvs">UVs to set for the given index.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetUVs(System.Int32,UnityEngine.Vector4[],System.Int32,System.Int32)">
      <summary>
        <para>Sets the UVs of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="channel">The UV channel, in [0..7] range.</param>
      <param name="uvs">UVs to set for the given index.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetUVs(System.Int32,UnityEngine.Vector4[],System.Int32,System.Int32,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets the UVs of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="channel">The UV channel, in [0..7] range.</param>
      <param name="uvs">UVs to set for the given index.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetUVs(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.Vector2&gt;,System.Int32,System.Int32)">
      <summary>
        <para>Sets the UVs of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="channel">The UV channel, in [0..7] range.</param>
      <param name="uvs">UVs to set for the given index.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetUVs(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.Vector2&gt;,System.Int32,System.Int32,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets the UVs of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="channel">The UV channel, in [0..7] range.</param>
      <param name="uvs">UVs to set for the given index.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetUVs(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.Vector3&gt;,System.Int32,System.Int32)">
      <summary>
        <para>Sets the UVs of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="channel">The UV channel, in [0..7] range.</param>
      <param name="uvs">UVs to set for the given index.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetUVs(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.Vector3&gt;,System.Int32,System.Int32,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets the UVs of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="channel">The UV channel, in [0..7] range.</param>
      <param name="uvs">UVs to set for the given index.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetUVs(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.Vector4&gt;,System.Int32,System.Int32)">
      <summary>
        <para>Sets the UVs of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="channel">The UV channel, in [0..7] range.</param>
      <param name="uvs">UVs to set for the given index.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetUVs(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.Vector4&gt;,System.Int32,System.Int32,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets the UVs of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="channel">The UV channel, in [0..7] range.</param>
      <param name="uvs">UVs to set for the given index.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetUVs(System.Int32,Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32,System.Int32)">
      <summary>
        <para>Sets the UVs of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="channel">The UV channel, in [0..7] range.</param>
      <param name="uvs">UVs to set for the given index.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetUVs(System.Int32,Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32,System.Int32,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets the UVs of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="channel">The UV channel, in [0..7] range.</param>
      <param name="uvs">UVs to set for the given index.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetVertexBufferData(Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Sets the data of the vertex buffer of the Mesh.</para>
      </summary>
      <param name="data">Vertex data array.</param>
      <param name="dataStart">The first element in the data to copy from.</param>
      <param name="meshBufferStart">The first element in mesh vertex buffer to receive the data.</param>
      <param name="count">Number of vertices to copy.</param>
      <param name="stream">Vertex buffer stream to set data for (default 0).</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetVertexBufferData(Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets the data of the vertex buffer of the Mesh.</para>
      </summary>
      <param name="data">Vertex data array.</param>
      <param name="dataStart">The first element in the data to copy from.</param>
      <param name="meshBufferStart">The first element in mesh vertex buffer to receive the data.</param>
      <param name="count">Number of vertices to copy.</param>
      <param name="stream">Vertex buffer stream to set data for (default 0).</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetVertexBufferData(T[],System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Sets the data of the vertex buffer of the Mesh.</para>
      </summary>
      <param name="data">Vertex data array.</param>
      <param name="dataStart">The first element in the data to copy from.</param>
      <param name="meshBufferStart">The first element in mesh vertex buffer to receive the data.</param>
      <param name="count">Number of vertices to copy.</param>
      <param name="stream">Vertex buffer stream to set data for (default 0).</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetVertexBufferData(T[],System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets the data of the vertex buffer of the Mesh.</para>
      </summary>
      <param name="data">Vertex data array.</param>
      <param name="dataStart">The first element in the data to copy from.</param>
      <param name="meshBufferStart">The first element in mesh vertex buffer to receive the data.</param>
      <param name="count">Number of vertices to copy.</param>
      <param name="stream">Vertex buffer stream to set data for (default 0).</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetVertexBufferData(System.Collections.Generic.List`1&lt;T&gt;,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Sets the data of the vertex buffer of the Mesh.</para>
      </summary>
      <param name="data">Vertex data array.</param>
      <param name="dataStart">The first element in the data to copy from.</param>
      <param name="meshBufferStart">The first element in mesh vertex buffer to receive the data.</param>
      <param name="count">Number of vertices to copy.</param>
      <param name="stream">Vertex buffer stream to set data for (default 0).</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetVertexBufferData(System.Collections.Generic.List`1&lt;T&gt;,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets the data of the vertex buffer of the Mesh.</para>
      </summary>
      <param name="data">Vertex data array.</param>
      <param name="dataStart">The first element in the data to copy from.</param>
      <param name="meshBufferStart">The first element in mesh vertex buffer to receive the data.</param>
      <param name="count">Number of vertices to copy.</param>
      <param name="stream">Vertex buffer stream to set data for (default 0).</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetVertexBufferParams(System.Int32,UnityEngine.Rendering.VertexAttributeDescriptor[])">
      <summary>
        <para>Sets the vertex buffer size and layout.</para>
      </summary>
      <param name="vertexCount">The number of vertices in the Mesh.</param>
      <param name="attributes">Layout of the vertex data -- which attributes are present, their data types and so on.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetVertexBufferParams(System.Int32,Unity.Collections.NativeArray`1&lt;UnityEngine.Rendering.VertexAttributeDescriptor&gt;)">
      <summary>
        <para>Sets the vertex buffer size and layout.</para>
      </summary>
      <param name="vertexCount">The number of vertices in the Mesh.</param>
      <param name="attributes">Layout of the vertex data -- which attributes are present, their data types and so on.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetVertices(UnityEngine.Vector3[])">
      <summary>
        <para>Assigns a new vertex positions array.</para>
      </summary>
      <param name="inVertices">Per-vertex positions.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetVertices(System.Collections.Generic.List`1&lt;UnityEngine.Vector3&gt;)">
      <summary>
        <para>Assigns a new vertex positions array.</para>
      </summary>
      <param name="inVertices">Per-vertex positions.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetVertices(Unity.Collections.NativeArray`1&lt;T&gt;)">
      <summary>
        <para>Assigns a new vertex positions array.</para>
      </summary>
      <param name="inVertices">Per-vertex positions.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetVertices(UnityEngine.Vector3[],System.Int32,System.Int32)">
      <summary>
        <para>Sets the vertex positions of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="inVertices">Per-vertex positions.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetVertices(UnityEngine.Vector3[],System.Int32,System.Int32,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets the vertex positions of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="inVertices">Per-vertex positions.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetVertices(System.Collections.Generic.List`1&lt;UnityEngine.Vector3&gt;,System.Int32,System.Int32)">
      <summary>
        <para>Sets the vertex positions of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="inVertices">Per-vertex positions.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetVertices(System.Collections.Generic.List`1&lt;UnityEngine.Vector3&gt;,System.Int32,System.Int32,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets the vertex positions of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="inVertices">Per-vertex positions.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetVertices(Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32,System.Int32)">
      <summary>
        <para>Sets the vertex positions of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="inVertices">Per-vertex positions.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.SetVertices(Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32,System.Int32,UnityEngine.Rendering.MeshUpdateFlags)">
      <summary>
        <para>Sets the vertex positions of the Mesh, using a part of the input array.</para>
      </summary>
      <param name="inVertices">Per-vertex positions.</param>
      <param name="start">Index of the first element to take from the input array.</param>
      <param name="length">Number of elements to take from the input array.</param>
      <param name="flags">Flags controlling the function behavior, see MeshUpdateFlags.</param>
    </member>
    <member name="M:UnityEngine.Mesh.UploadMeshData(System.Boolean)">
      <summary>
        <para>Upload previously done Mesh modifications to the graphics API.</para>
      </summary>
      <param name="markNoLongerReadable">Frees up system memory copy of mesh data when set to true.</param>
    </member>
    <member name="T:UnityEngine.MeshFilter">
      <summary>
        <para>A class to access the Mesh of the.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.MeshFilter.mesh">
      <summary>
        <para>Returns the instantiated Mesh assigned to the mesh filter.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.MeshFilter.sharedMesh">
      <summary>
        <para>Returns the shared mesh of the mesh filter.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.MeshRenderer">
      <summary>
        <para>Renders meshes inserted by the MeshFilter or TextMesh.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.MeshRenderer.additionalVertexStreams">
      <summary>
        <para>Vertex attributes in this mesh will override or add attributes of the primary mesh in the MeshRenderer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.MeshRenderer.enlightenVertexStream">
      <summary>
        <para>Vertex attributes in this mesh will override or add attributes of the primary mesh and the additionalVertexStreams in the MeshRenderer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.MeshRenderer.receiveGI">
      <summary>
        <para>Determines how the object will receive global illumination. (Editor only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.MeshRenderer.scaleInLightmap">
      <summary>
        <para>Specifies the relative lightmap resolution of this object. (Editor only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.MeshRenderer.stitchLightmapSeams">
      <summary>
        <para>When enabled, seams in baked lightmaps will get smoothed. (Editor only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.MeshRenderer.subMeshStartIndex">
      <summary>
        <para>Index of the first sub-mesh to use from the Mesh associated with this MeshRenderer (Read Only).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.MeshTopology">
      <summary>
        <para>Topology of Mesh faces.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.MeshTopology.Lines">
      <summary>
        <para>Mesh is made from lines.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.MeshTopology.LineStrip">
      <summary>
        <para>Mesh is a line strip.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.MeshTopology.Points">
      <summary>
        <para>Mesh is made from points.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.MeshTopology.Quads">
      <summary>
        <para>Mesh is made from quads.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.MeshTopology.Triangles">
      <summary>
        <para>Mesh is made from triangles.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.MinAttribute">
      <summary>
        <para>Attribute used to make a float or int variable in a script be restricted to a specific minimum value.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.MinAttribute.min">
      <summary>
        <para>The minimum allowed value.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MinAttribute.#ctor(System.Single)">
      <summary>
        <para>Attribute used to make a float or int variable in a script be restricted to a specific minimum value.</para>
      </summary>
      <param name="min">The minimum allowed value.</param>
    </member>
    <member name="T:UnityEngine.MixedLightingMode">
      <summary>
        <para>Enum describing what lighting mode to be used with Mixed lights.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.MixedLightingMode.IndirectOnly">
      <summary>
        <para>Mixed lights provide realtime direct lighting while indirect light is baked into lightmaps and light probes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.MixedLightingMode.Shadowmask">
      <summary>
        <para>Mixed lights provide realtime direct lighting. Indirect lighting gets baked into lightmaps and light probes. Shadowmasks and light probe occlusion get generated for baked shadows. The Shadowmask Mode used at run time can be set in the Quality Settings panel.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.MixedLightingMode.Subtractive">
      <summary>
        <para>Mixed lights provide baked direct and indirect lighting for static objects. Dynamic objects receive realtime direct lighting and cast shadows on static objects using the main directional light in the Scene.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.MonoBehaviour">
      <summary>
        <para>MonoBehaviour is the base class from which every Unity script derives.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MonoBehaviour.print(System.Object)">
      <summary>
        <para>Logs message to the Unity Console (identical to Debug.Log).</para>
      </summary>
      <param name="message"></param>
    </member>
    <member name="P:UnityEngine.MonoBehaviour.runInEditMode">
      <summary>
        <para>Allow a specific instance of a MonoBehaviour to run in edit mode (only available in the editor).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.MonoBehaviour.useGUILayout">
      <summary>
        <para>Disabling this lets you skip the GUI layout phase.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MonoBehaviour.CancelInvoke">
      <summary>
        <para>Cancels all Invoke calls on this MonoBehaviour.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MonoBehaviour.CancelInvoke(System.String)">
      <summary>
        <para>Cancels all Invoke calls with name methodName on this behaviour.</para>
      </summary>
      <param name="methodName"></param>
    </member>
    <member name="M:UnityEngine.MonoBehaviour.Invoke(System.String,System.Single)">
      <summary>
        <para>Invokes the method methodName in time seconds.</para>
      </summary>
      <param name="methodName"></param>
      <param name="time"></param>
    </member>
    <member name="M:UnityEngine.MonoBehaviour.InvokeRepeating(System.String,System.Single,System.Single)">
      <summary>
        <para>Invokes the method methodName in time seconds, then repeatedly every repeatRate seconds.</para>
      </summary>
      <param name="methodName"></param>
      <param name="time"></param>
      <param name="repeatRate"></param>
    </member>
    <member name="M:UnityEngine.MonoBehaviour.IsInvoking(System.String)">
      <summary>
        <para>Is any invoke on methodName pending?</para>
      </summary>
      <param name="methodName"></param>
    </member>
    <member name="M:UnityEngine.MonoBehaviour.IsInvoking">
      <summary>
        <para>Is any invoke pending on this MonoBehaviour?</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MonoBehaviour.StartCoroutine(System.Collections.IEnumerator)">
      <summary>
        <para>Starts a Coroutine.</para>
      </summary>
      <param name="routine"></param>
    </member>
    <member name="M:UnityEngine.MonoBehaviour.StartCoroutine(System.String,System.Object)">
      <summary>
        <para>Starts a coroutine named methodName.</para>
      </summary>
      <param name="methodName"></param>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.MonoBehaviour.StartCoroutine(System.String)">
      <summary>
        <para>Starts a coroutine named methodName.</para>
      </summary>
      <param name="methodName"></param>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.MonoBehaviour.StopAllCoroutines">
      <summary>
        <para>Stops all coroutines running on this behaviour.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MonoBehaviour.StopCoroutine(System.String)">
      <summary>
        <para>Stops the first coroutine named methodName, or the coroutine stored in routine running on this behaviour.</para>
      </summary>
      <param name="methodName">Name of coroutine.</param>
      <param name="routine">Name of the function in code, including coroutines.</param>
    </member>
    <member name="M:UnityEngine.MonoBehaviour.StopCoroutine(System.Collections.IEnumerator)">
      <summary>
        <para>Stops the first coroutine named methodName, or the coroutine stored in routine running on this behaviour.</para>
      </summary>
      <param name="methodName">Name of coroutine.</param>
      <param name="routine">Name of the function in code, including coroutines.</param>
    </member>
    <member name="M:UnityEngine.MonoBehaviour.StopCoroutine(UnityEngine.Coroutine)">
      <summary>
        <para>Stops the first coroutine named methodName, or the coroutine stored in routine running on this behaviour.</para>
      </summary>
      <param name="methodName">Name of coroutine.</param>
      <param name="routine">Name of the function in code, including coroutines.</param>
    </member>
    <member name="T:UnityEngine.MotionVectorGenerationMode">
      <summary>
        <para>The type of motion vectors that should be generated.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.MotionVectorGenerationMode.Camera">
      <summary>
        <para>Use only camera movement to track motion.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.MotionVectorGenerationMode.ForceNoMotion">
      <summary>
        <para>Do not track motion. Motion vectors will be 0.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.MotionVectorGenerationMode.Object">
      <summary>
        <para>Use a specific pass (if required) to track motion.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.MultilineAttribute">
      <summary>
        <para>Attribute to make a string be edited with a multi-line textfield.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MultilineAttribute.#ctor">
      <summary>
        <para>Attribute used to make a string value be shown in a multiline textarea.</para>
      </summary>
      <param name="lines">How many lines of text to make room for. Default is 3.</param>
    </member>
    <member name="M:UnityEngine.MultilineAttribute.#ctor(System.Int32)">
      <summary>
        <para>Attribute used to make a string value be shown in a multiline textarea.</para>
      </summary>
      <param name="lines">How many lines of text to make room for. Default is 3.</param>
    </member>
    <member name="T:UnityEngine.Network">
      <summary>
        <para>The network class is at the heart of the network implementation and provides the core functions.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.connections">
      <summary>
        <para>All connected players.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.connectionTesterIP">
      <summary>
        <para>The IP address of the connection tester used in Network.TestConnection.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.connectionTesterPort">
      <summary>
        <para>The port of the connection tester used in Network.TestConnection.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.incomingPassword">
      <summary>
        <para>Set the password for the server (for incoming connections).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.isClient">
      <summary>
        <para>Returns true if your peer type is client.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.isMessageQueueRunning">
      <summary>
        <para>Enable or disable the processing of network messages.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.isServer">
      <summary>
        <para>Returns true if your peer type is server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.logLevel">
      <summary>
        <para>Set the log level for network messages (default is Off).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.maxConnections">
      <summary>
        <para>Set the maximum amount of connections/players allowed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.minimumAllocatableViewIDs">
      <summary>
        <para>Get or set the minimum number of ViewID numbers in the ViewID pool given to clients by the server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.natFacilitatorIP">
      <summary>
        <para>The IP address of the NAT punchthrough facilitator.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.natFacilitatorPort">
      <summary>
        <para>The port of the NAT punchthrough facilitator.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.peerType">
      <summary>
        <para>The status of the peer type, i.e. if it is disconnected, connecting, server or client.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.player">
      <summary>
        <para>Get the local NetworkPlayer instance.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.proxyIP">
      <summary>
        <para>The IP address of the proxy server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.proxyPassword">
      <summary>
        <para>Set the proxy server password.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.proxyPort">
      <summary>
        <para>The port of the proxy server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.sendRate">
      <summary>
        <para>The default send rate of network updates for all Network Views.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.time">
      <summary>
        <para>Get the current network time (seconds).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.useProxy">
      <summary>
        <para>Indicate if proxy support is needed, in which case traffic is relayed through the proxy server.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.AllocateViewID">
      <summary>
        <para>Query for the next available network view ID number and allocate it (reserve).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.CloseConnection(UnityEngine.NetworkPlayer,System.Boolean)">
      <summary>
        <para>Close the connection to another system.</para>
      </summary>
      <param name="target"></param>
      <param name="sendDisconnectionNotification"></param>
    </member>
    <member name="M:UnityEngine.Network.Connect(System.String,System.Int32)">
      <summary>
        <para>Connect to the specified host (ip or domain name) and server port.</para>
      </summary>
      <param name="IP"></param>
      <param name="remotePort"></param>
      <param name="password"></param>
    </member>
    <member name="M:UnityEngine.Network.Connect(System.String,System.Int32,System.String)">
      <summary>
        <para>Connect to the specified host (ip or domain name) and server port.</para>
      </summary>
      <param name="IP"></param>
      <param name="remotePort"></param>
      <param name="password"></param>
    </member>
    <member name="M:UnityEngine.Network.Connect(System.String[],System.Int32)">
      <summary>
        <para>This function is exactly like Network.Connect but can accept an array of IP addresses.</para>
      </summary>
      <param name="IPs"></param>
      <param name="remotePort"></param>
      <param name="password"></param>
    </member>
    <member name="M:UnityEngine.Network.Connect(System.String[],System.Int32,System.String)">
      <summary>
        <para>This function is exactly like Network.Connect but can accept an array of IP addresses.</para>
      </summary>
      <param name="IPs"></param>
      <param name="remotePort"></param>
      <param name="password"></param>
    </member>
    <member name="M:UnityEngine.Network.Connect(System.String)">
      <summary>
        <para>Connect to a server GUID. NAT punchthrough can only be performed this way.</para>
      </summary>
      <param name="GUID"></param>
      <param name="password"></param>
    </member>
    <member name="M:UnityEngine.Network.Connect(System.String,System.String)">
      <summary>
        <para>Connect to a server GUID. NAT punchthrough can only be performed this way.</para>
      </summary>
      <param name="GUID"></param>
      <param name="password"></param>
    </member>
    <member name="M:UnityEngine.Network.Connect(UnityEngine.HostData)">
      <summary>
        <para>Connect to the host represented by a HostData structure returned by the Master Server.</para>
      </summary>
      <param name="hostData"></param>
      <param name="password"></param>
    </member>
    <member name="M:UnityEngine.Network.Connect(UnityEngine.HostData,System.String)">
      <summary>
        <para>Connect to the host represented by a HostData structure returned by the Master Server.</para>
      </summary>
      <param name="hostData"></param>
      <param name="password"></param>
    </member>
    <member name="M:UnityEngine.Network.Destroy(UnityEngine.NetworkViewID)">
      <summary>
        <para>Destroy the object associated with this view ID across the network.</para>
      </summary>
      <param name="viewID"></param>
    </member>
    <member name="M:UnityEngine.Network.Destroy(UnityEngine.GameObject)">
      <summary>
        <para>Destroy the object across the network.</para>
      </summary>
      <param name="gameObject"></param>
    </member>
    <member name="M:UnityEngine.Network.DestroyPlayerObjects(UnityEngine.NetworkPlayer)">
      <summary>
        <para>Destroy all the objects based on view IDs belonging to this player.</para>
      </summary>
      <param name="playerID"></param>
    </member>
    <member name="M:UnityEngine.Network.Disconnect">
      <summary>
        <para>Close all open connections and shuts down the network interface.</para>
      </summary>
      <param name="timeout"></param>
    </member>
    <member name="M:UnityEngine.Network.Disconnect(System.Int32)">
      <summary>
        <para>Close all open connections and shuts down the network interface.</para>
      </summary>
      <param name="timeout"></param>
    </member>
    <member name="M:UnityEngine.Network.GetAveragePing(UnityEngine.NetworkPlayer)">
      <summary>
        <para>The last average ping time to the given player in milliseconds.</para>
      </summary>
      <param name="player"></param>
    </member>
    <member name="M:UnityEngine.Network.GetLastPing(UnityEngine.NetworkPlayer)">
      <summary>
        <para>The last ping time to the given player in milliseconds.</para>
      </summary>
      <param name="player"></param>
    </member>
    <member name="M:UnityEngine.Network.HavePublicAddress">
      <summary>
        <para>Check if this machine has a public IP address.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.InitializeSecurity">
      <summary>
        <para>Initializes security layer.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.InitializeServer(System.Int32,System.Int32)">
      <summary>
        <para>Initialize the server.</para>
      </summary>
      <param name="connections"></param>
      <param name="listenPort"></param>
      <param name="useNat"></param>
    </member>
    <member name="M:UnityEngine.Network.InitializeServer(System.Int32,System.Int32,System.Boolean)">
      <summary>
        <para>Initialize the server.</para>
      </summary>
      <param name="connections"></param>
      <param name="listenPort"></param>
      <param name="useNat"></param>
    </member>
    <member name="M:UnityEngine.Network.Instantiate(UnityEngine.Object,UnityEngine.Vector3,UnityEngine.Quaternion,System.Int32)">
      <summary>
        <para>Network instantiate a Prefab.</para>
      </summary>
      <param name="prefab"></param>
      <param name="position"></param>
      <param name="rotation"></param>
      <param name="group"></param>
    </member>
    <member name="M:UnityEngine.Network.RemoveRPCs(UnityEngine.NetworkPlayer)">
      <summary>
        <para>Remove all RPC functions which belong to this player ID.</para>
      </summary>
      <param name="playerID"></param>
    </member>
    <member name="M:UnityEngine.Network.RemoveRPCs(UnityEngine.NetworkPlayer,System.Int32)">
      <summary>
        <para>Remove all RPC functions which belong to this player ID and were sent based on the given group.</para>
      </summary>
      <param name="playerID"></param>
      <param name="group"></param>
    </member>
    <member name="M:UnityEngine.Network.RemoveRPCs(UnityEngine.NetworkViewID)">
      <summary>
        <para>Remove the RPC function calls accociated with this view ID number.</para>
      </summary>
      <param name="viewID"></param>
    </member>
    <member name="M:UnityEngine.Network.RemoveRPCsInGroup(System.Int32)">
      <summary>
        <para>Remove all RPC functions which belong to given group number.</para>
      </summary>
      <param name="group"></param>
    </member>
    <member name="M:UnityEngine.Network.SetLevelPrefix(System.Int32)">
      <summary>
        <para>Set the level prefix which will then be prefixed to all network ViewID numbers.</para>
      </summary>
      <param name="prefix"></param>
    </member>
    <member name="M:UnityEngine.Network.SetReceivingEnabled(UnityEngine.NetworkPlayer,System.Int32,System.Boolean)">
      <summary>
        <para>Enable or disables the reception of messages in a specific group number from a specific player.</para>
      </summary>
      <param name="player"></param>
      <param name="group"></param>
      <param name="enabled"></param>
    </member>
    <member name="M:UnityEngine.Network.SetSendingEnabled(System.Int32,System.Boolean)">
      <summary>
        <para>Enables or disables transmission of messages and RPC calls on a specific network group number.</para>
      </summary>
      <param name="group"></param>
      <param name="enabled"></param>
    </member>
    <member name="M:UnityEngine.Network.SetSendingEnabled(UnityEngine.NetworkPlayer,System.Int32,System.Boolean)">
      <summary>
        <para>Enable or disable transmission of messages and RPC calls based on target network player as well as the network group.</para>
      </summary>
      <param name="player"></param>
      <param name="group"></param>
      <param name="enabled"></param>
    </member>
    <member name="M:UnityEngine.Network.TestConnection">
      <summary>
        <para>Test this machines network connection.</para>
      </summary>
      <param name="forceTest"></param>
    </member>
    <member name="M:UnityEngine.Network.TestConnection(System.Boolean)">
      <summary>
        <para>Test this machines network connection.</para>
      </summary>
      <param name="forceTest"></param>
    </member>
    <member name="M:UnityEngine.Network.TestConnectionNAT">
      <summary>
        <para>Test the connection specifically for NAT punch-through connectivity.</para>
      </summary>
      <param name="forceTest"></param>
    </member>
    <member name="M:UnityEngine.Network.TestConnectionNAT(System.Boolean)">
      <summary>
        <para>Test the connection specifically for NAT punch-through connectivity.</para>
      </summary>
      <param name="forceTest"></param>
    </member>
    <member name="T:UnityEngine.NetworkConnectionError">
      <summary>
        <para>Possible status messages returned by Network.Connect and in MonoBehaviour.OnFailedToConnect|OnFailedToConnect in case the error was not immediate.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.NetworkDisconnection">
      <summary>
        <para>The reason a disconnect event occured, like in MonoBehaviour.OnDisconnectedFromServer|OnDisconnectedFromServer.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.PlayerConnection.ConnectionTarget">
      <summary>
        <para>The type of the connected target.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.PlayerConnection.ConnectionTarget.Editor">
      <summary>
        <para>The connected target is an Editor.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.PlayerConnection.ConnectionTarget.None">
      <summary>
        <para>No target is connected, this is only possible in a Player.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.PlayerConnection.ConnectionTarget.Player">
      <summary>
        <para>The connected target is a Player.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Networking.PlayerConnection.IConnectionState">
      <summary>
        <para>The state of an Editor-to-Player or Editor-to-Editor connection to be used in Networking.PlayerConnection.PlayerConnectionGUI.ConnectionTargetSelectionDropdown or Networking.PlayerConnection.PlayerConnectionGUILayout.ConnectionTargetSelectionDropdown.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.PlayerConnection.IConnectionState.connectedToTarget">
      <summary>
        <para>Supplies the type of the established connection, as in whether the target is a Player or an Editor.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.PlayerConnection.IConnectionState.connectionName">
      <summary>
        <para>The name of the connected target.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.PlayerConnection.MessageEventArgs">
      <summary>
        <para>Arguments passed to Action callbacks registered in PlayerConnection.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.PlayerConnection.MessageEventArgs.data">
      <summary>
        <para>Data that is received.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.PlayerConnection.MessageEventArgs.playerId">
      <summary>
        <para>The Player ID that the data is received from.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.PlayerConnection.PlayerConnection">
      <summary>
        <para>Used for handling the network connection from the Player to the Editor.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.PlayerConnection.PlayerConnection.instance">
      <summary>
        <para>Returns a singleton instance of a PlayerConnection.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.PlayerConnection.PlayerConnection.isConnected">
      <summary>
        <para>Returns true when the Editor is connected to the Player.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.PlayerConnection.PlayerConnection.BlockUntilRecvMsg(System.Guid,System.Int32)">
      <summary>
        <para>Blocks the calling thread until either a message with the specified messageId is received or the specified time-out elapses.</para>
      </summary>
      <param name="messageId">The type ID of the message that is sent to the Editor.</param>
      <param name="timeout">The time-out specified in milliseconds.</param>
      <returns>
        <para>Returns true when the message is received and false if the call timed out.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.PlayerConnection.PlayerConnection.DisconnectAll">
      <summary>
        <para>This disconnects all of the active connections.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.PlayerConnection.PlayerConnection.Register(System.Guid,UnityEngine.Events.UnityAction`1&lt;UnityEngine.Networking.PlayerConnection.MessageEventArgs&gt;)">
      <summary>
        <para>Registers a listener for a specific message ID, with an Action to be executed whenever that message is received by the Editor.
This ID must be the same as for messages sent from EditorConnection.Send().</para>
      </summary>
      <param name="messageId">The message ID that should cause the Action callback to be executed when received.</param>
      <param name="callback">Action that is executed when a message with ID messageId is received by the Editor.
The callback includes the data that is sent from the Player, and the Player ID.
The Player ID is always 1, because only one Editor can be connected.</param>
    </member>
    <member name="M:UnityEngine.Networking.PlayerConnection.PlayerConnection.RegisterConnection(UnityEngine.Events.UnityAction`1&lt;System.Int32&gt;)">
      <summary>
        <para>Registers a callback that is invoked when the Editor connects to the Player.</para>
      </summary>
      <param name="callback">The action that is called when the Player connects to the Editor, with the Player ID of the Editor.</param>
    </member>
    <member name="M:UnityEngine.Networking.PlayerConnection.PlayerConnection.RegisterDisconnection(UnityEngine.Events.UnityAction`1&lt;System.Int32&gt;)">
      <summary>
        <para>Registers a callback to be called when Editor disconnects.</para>
      </summary>
      <param name="callback">The Action that is called when a Player disconnects from the Editor.</param>
    </member>
    <member name="M:UnityEngine.Networking.PlayerConnection.PlayerConnection.Send(System.Guid,System.Byte[])">
      <summary>
        <para>Sends data to the Editor.</para>
      </summary>
      <param name="messageId">The type ID of the message that is sent to the Editor.</param>
      <param name="data"></param>
    </member>
    <member name="M:UnityEngine.Networking.PlayerConnection.PlayerConnection.TrySend(System.Guid,System.Byte[])">
      <summary>
        <para>Attempt to sends data to the Editor.</para>
      </summary>
      <param name="messageId">The type ID of the message that is sent to the Editor.</param>
      <param name="data"></param>
      <returns>
        <para>Returns true when the Player sends data successfully, and false when there is no space in the socket ring buffer or sending fails.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.PlayerConnection.PlayerConnection.Unregister(System.Guid,UnityEngine.Events.UnityAction`1&lt;UnityEngine.Networking.PlayerConnection.MessageEventArgs&gt;)">
      <summary>
        <para>Deregisters a message listener.</para>
      </summary>
      <param name="messageId">Message ID associated with the callback that you wish to deregister.</param>
      <param name="callback">The associated callback function you wish to deregister.</param>
    </member>
    <member name="M:UnityEngine.Networking.PlayerConnection.PlayerConnection.UnregisterConnection(UnityEngine.Events.UnityAction`1&lt;System.Int32&gt;)">
      <summary>
        <para>Unregisters the connection callback.</para>
      </summary>
      <param name="callback"></param>
    </member>
    <member name="M:UnityEngine.Networking.PlayerConnection.PlayerConnection.UnregisterDisconnection(UnityEngine.Events.UnityAction`1&lt;System.Int32&gt;)">
      <summary>
        <para>Unregisters the disconnection callback.</para>
      </summary>
      <param name="callback"></param>
    </member>
    <member name="T:UnityEngine.NetworkLogLevel">
      <summary>
        <para>Describes different levels of log information the network layer supports.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.NetworkMessageInfo">
      <summary>
        <para>This data structure contains information on a message just received from the network.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NetworkMessageInfo.networkView">
      <summary>
        <para>The NetworkView who sent this message.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NetworkMessageInfo.sender">
      <summary>
        <para>The player who sent this network message (owner).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NetworkMessageInfo.timestamp">
      <summary>
        <para>The time stamp when the Message was sent in seconds.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.NetworkPeerType">
      <summary>
        <para>Describes the status of the network interface peer type as returned by Network.peerType.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.NetworkPlayer">
      <summary>
        <para>The NetworkPlayer is a data structure with which you can locate another player over the network.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NetworkPlayer.externalIP">
      <summary>
        <para>Returns the external IP address of the network interface.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NetworkPlayer.externalPort">
      <summary>
        <para>Returns the external port of the network interface.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NetworkPlayer.guid">
      <summary>
        <para>The GUID for this player, used when connecting with NAT punchthrough.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NetworkPlayer.ipAddress">
      <summary>
        <para>The IP address of this player.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NetworkPlayer.port">
      <summary>
        <para>The port of this player.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.NetworkReachability">
      <summary>
        <para>Describes network reachability options.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NetworkReachability.NotReachable">
      <summary>
        <para>Network is not reachable.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NetworkReachability.ReachableViaCarrierDataNetwork">
      <summary>
        <para>Network is reachable via carrier data network.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NetworkReachability.ReachableViaLocalAreaNetwork">
      <summary>
        <para>Network is reachable via WiFi or cable.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.NetworkStateSynchronization">
      <summary>
        <para>Different types of synchronization for the NetworkView component.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.NetworkView">
      <summary>
        <para>The network view is the binding material of multiplayer games.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NetworkView.group">
      <summary>
        <para>The network group number of this network view.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NetworkView.isMine">
      <summary>
        <para>Is the network view controlled by this object?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NetworkView.observed">
      <summary>
        <para>The component the network view is observing.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NetworkView.owner">
      <summary>
        <para>The NetworkPlayer who owns this network view.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NetworkView.stateSynchronization">
      <summary>
        <para>The type of NetworkStateSynchronization set for this network view.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NetworkView.viewID">
      <summary>
        <para>The ViewID of this network view.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.NetworkView.RPC(System.String,UnityEngine.RPCMode,System.Object[])">
      <summary>
        <para>Call a RPC function on all connected peers.</para>
      </summary>
      <param name="name"></param>
      <param name="mode"></param>
      <param name="args"></param>
    </member>
    <member name="M:UnityEngine.NetworkView.RPC(System.String,UnityEngine.NetworkPlayer,System.Object[])">
      <summary>
        <para>Call a RPC function on a specific player.</para>
      </summary>
      <param name="name"></param>
      <param name="target"></param>
      <param name="args"></param>
    </member>
    <member name="T:UnityEngine.NetworkViewID">
      <summary>
        <para>The NetworkViewID is a unique identifier for a network view instance in a multiplayer game.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NetworkViewID.isMine">
      <summary>
        <para>True if instantiated by me.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NetworkViewID.owner">
      <summary>
        <para>The NetworkPlayer who owns the NetworkView. Could be the server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NetworkViewID.unassigned">
      <summary>
        <para>Represents an invalid network view ID.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.NonReorderableAttribute">
      <summary>
        <para>Disables reordering of an array or list in the Inspector window.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.NPOTSupport">
      <summary>
        <para>NPOT Texture2D|textures support.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NPOTSupport.Full">
      <summary>
        <para>Full NPOT support.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NPOTSupport.None">
      <summary>
        <para>NPOT textures are not supported. Will be upscaled/padded at loading time.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NPOTSupport.Restricted">
      <summary>
        <para>Limited NPOT support: no mipmaps and clamp TextureWrapMode|wrap mode will be forced.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Object">
      <summary>
        <para>Base class for all objects Unity can reference.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Object.hideFlags">
      <summary>
        <para>Should the object be hidden, saved with the Scene or modifiable by the user?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Object.name">
      <summary>
        <para>The name of the object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Object.Destroy(UnityEngine.Object)">
      <summary>
        <para>Removes a GameObject, component or asset.</para>
      </summary>
      <param name="obj">The object to destroy.</param>
      <param name="t">The optional amount of time to delay before destroying the object.</param>
    </member>
    <member name="M:UnityEngine.Object.Destroy(UnityEngine.Object,System.Single)">
      <summary>
        <para>Removes a GameObject, component or asset.</para>
      </summary>
      <param name="obj">The object to destroy.</param>
      <param name="t">The optional amount of time to delay before destroying the object.</param>
    </member>
    <member name="M:UnityEngine.Object.DestroyImmediate(UnityEngine.Object)">
      <summary>
        <para>Destroys the object obj immediately. You are strongly recommended to use Destroy instead.</para>
      </summary>
      <param name="obj">Object to be destroyed.</param>
      <param name="allowDestroyingAssets">Set to true to allow assets to be destroyed.</param>
    </member>
    <member name="M:UnityEngine.Object.DestroyImmediate(UnityEngine.Object,System.Boolean)">
      <summary>
        <para>Destroys the object obj immediately. You are strongly recommended to use Destroy instead.</para>
      </summary>
      <param name="obj">Object to be destroyed.</param>
      <param name="allowDestroyingAssets">Set to true to allow assets to be destroyed.</param>
    </member>
    <member name="M:UnityEngine.Object.DontDestroyOnLoad(UnityEngine.Object)">
      <summary>
        <para>Do not destroy the target Object when loading a new Scene.</para>
      </summary>
      <param name="target">An Object not destroyed on Scene change.</param>
    </member>
    <member name="M:UnityEngine.Object.FindObjectOfType">
      <summary>
        <para>Returns the first active loaded object of Type type.</para>
      </summary>
      <param name="type">The type of object to find.</param>
      <param name="includeInactive"></param>
      <returns>
        <para>Object The first active loaded object that matches the specified type. It returns null if no Object matches the type.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Object.FindObjectOfType(System.Boolean)">
      <summary>
        <para>Returns the first active loaded object of Type type.</para>
      </summary>
      <param name="type">The type of object to find.</param>
      <param name="includeInactive"></param>
      <returns>
        <para>Object The first active loaded object that matches the specified type. It returns null if no Object matches the type.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Object.FindObjectOfType(System.Type)">
      <summary>
        <para>Returns the first active loaded object of Type type.</para>
      </summary>
      <param name="type">The type of object to find.</param>
      <param name="includeInactive"></param>
      <returns>
        <para>Object The first active loaded object that matches the specified type. It returns null if no Object matches the type.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Object.FindObjectOfType(System.Type,System.Boolean)">
      <summary>
        <para>Returns the first active loaded object of Type type.</para>
      </summary>
      <param name="type">The type of object to find.</param>
      <param name="includeInactive"></param>
      <returns>
        <para>Object The first active loaded object that matches the specified type. It returns null if no Object matches the type.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Object.FindObjectsOfType(System.Type)">
      <summary>
        <para>Gets a list of all loaded objects of Type type.</para>
      </summary>
      <param name="type">The type of object to find.</param>
      <param name="includeInactive">If true, components attached to inactive GameObjects are also included.</param>
      <returns>
        <para>The array of objects found matching the type specified.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Object.FindObjectsOfType(System.Type,System.Boolean)">
      <summary>
        <para>Gets a list of all loaded objects of Type type.</para>
      </summary>
      <param name="type">The type of object to find.</param>
      <param name="includeInactive">If true, components attached to inactive GameObjects are also included.</param>
      <returns>
        <para>The array of objects found matching the type specified.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Object.FindObjectsOfType(System.Boolean)">
      <summary>
        <para>Gets a list of all loaded objects of Type type.</para>
      </summary>
      <param name="type">The type of object to find.</param>
      <param name="includeInactive">If true, components attached to inactive GameObjects are also included.</param>
      <returns>
        <para>The array of objects found matching the type specified.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Object.FindObjectsOfType">
      <summary>
        <para>Gets a list of all loaded objects of Type type.</para>
      </summary>
      <param name="type">The type of object to find.</param>
      <param name="includeInactive">If true, components attached to inactive GameObjects are also included.</param>
      <returns>
        <para>The array of objects found matching the type specified.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Object.FindObjectsOfTypeAll(System.Type)">
      <summary>
        <para>Returns a list of all active and inactive loaded objects of Type type.</para>
      </summary>
      <param name="type">The type of object to find.</param>
      <returns>
        <para>The array of objects found matching the type specified.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Object.FindObjectsOfTypeIncludingAssets(System.Type)">
      <summary>
        <para>Returns a list of all active and inactive loaded objects of Type type, including assets.</para>
      </summary>
      <param name="type">The type of object or asset to find.</param>
      <returns>
        <para>The array of objects and assets found matching the type specified.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Object.GetInstanceID">
      <summary>
        <para>Returns the instance id of the object.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Object.implop_bool(Object)(UnityEngine.Object)">
      <summary>
        <para>Does the object exist?</para>
      </summary>
      <param name="exists"></param>
    </member>
    <member name="M:UnityEngine.Object.Instantiate(UnityEngine.Object)">
      <summary>
        <para>Clones the object original and returns the clone.</para>
      </summary>
      <param name="original">An existing object that you want to make a copy of.</param>
      <param name="position">Position for the new object.</param>
      <param name="rotation">Orientation of the new object.</param>
      <param name="parent">Parent that will be assigned to the new object.</param>
      <param name="instantiateInWorldSpace">When you assign a parent Object, pass true to position the new object directly in world space. Pass false to set the Object’s position relative to its new parent..</param>
      <returns>
        <para>The instantiated clone.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Object.Instantiate(UnityEngine.Object,UnityEngine.Transform)">
      <summary>
        <para>Clones the object original and returns the clone.</para>
      </summary>
      <param name="original">An existing object that you want to make a copy of.</param>
      <param name="position">Position for the new object.</param>
      <param name="rotation">Orientation of the new object.</param>
      <param name="parent">Parent that will be assigned to the new object.</param>
      <param name="instantiateInWorldSpace">When you assign a parent Object, pass true to position the new object directly in world space. Pass false to set the Object’s position relative to its new parent..</param>
      <returns>
        <para>The instantiated clone.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Object.Instantiate(UnityEngine.Object,UnityEngine.Transform,System.Boolean)">
      <summary>
        <para>Clones the object original and returns the clone.</para>
      </summary>
      <param name="original">An existing object that you want to make a copy of.</param>
      <param name="position">Position for the new object.</param>
      <param name="rotation">Orientation of the new object.</param>
      <param name="parent">Parent that will be assigned to the new object.</param>
      <param name="instantiateInWorldSpace">When you assign a parent Object, pass true to position the new object directly in world space. Pass false to set the Object’s position relative to its new parent..</param>
      <returns>
        <para>The instantiated clone.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Object.Instantiate(UnityEngine.Object,UnityEngine.Vector3,UnityEngine.Quaternion)">
      <summary>
        <para>Clones the object original and returns the clone.</para>
      </summary>
      <param name="original">An existing object that you want to make a copy of.</param>
      <param name="position">Position for the new object.</param>
      <param name="rotation">Orientation of the new object.</param>
      <param name="parent">Parent that will be assigned to the new object.</param>
      <param name="instantiateInWorldSpace">When you assign a parent Object, pass true to position the new object directly in world space. Pass false to set the Object’s position relative to its new parent..</param>
      <returns>
        <para>The instantiated clone.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Object.Instantiate(UnityEngine.Object,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform)">
      <summary>
        <para>Clones the object original and returns the clone.</para>
      </summary>
      <param name="original">An existing object that you want to make a copy of.</param>
      <param name="position">Position for the new object.</param>
      <param name="rotation">Orientation of the new object.</param>
      <param name="parent">Parent that will be assigned to the new object.</param>
      <param name="instantiateInWorldSpace">When you assign a parent Object, pass true to position the new object directly in world space. Pass false to set the Object’s position relative to its new parent..</param>
      <returns>
        <para>The instantiated clone.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Object.Instantiate(T)">
      <summary>
        <para>You can also use Generics to instantiate objects. See the page for more details.</para>
      </summary>
      <param name="original">Object of type T that you want to clone.</param>
      <param name="parent"></param>
      <param name="worldPositionStays"></param>
      <param name="position"></param>
      <param name="rotation"></param>
      <returns>
        <para>Object of type T.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Object.Instantiate(T,UnityEngine.Transform)">
      <summary>
        <para>You can also use Generics to instantiate objects. See the page for more details.</para>
      </summary>
      <param name="original">Object of type T that you want to clone.</param>
      <param name="parent"></param>
      <param name="worldPositionStays"></param>
      <param name="position"></param>
      <param name="rotation"></param>
      <returns>
        <para>Object of type T.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Object.Instantiate(T,UnityEngine.Transform,System.Boolean)">
      <summary>
        <para>You can also use Generics to instantiate objects. See the page for more details.</para>
      </summary>
      <param name="original">Object of type T that you want to clone.</param>
      <param name="parent"></param>
      <param name="worldPositionStays"></param>
      <param name="position"></param>
      <param name="rotation"></param>
      <returns>
        <para>Object of type T.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Object.Instantiate(T,UnityEngine.Vector3,UnityEngine.Quaternion)">
      <summary>
        <para>You can also use Generics to instantiate objects. See the page for more details.</para>
      </summary>
      <param name="original">Object of type T that you want to clone.</param>
      <param name="parent"></param>
      <param name="worldPositionStays"></param>
      <param name="position"></param>
      <param name="rotation"></param>
      <returns>
        <para>Object of type T.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Object.Instantiate(T,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform)">
      <summary>
        <para>You can also use Generics to instantiate objects. See the page for more details.</para>
      </summary>
      <param name="original">Object of type T that you want to clone.</param>
      <param name="parent"></param>
      <param name="worldPositionStays"></param>
      <param name="position"></param>
      <param name="rotation"></param>
      <returns>
        <para>Object of type T.</para>
      </returns>
    </member>
    <member name="?:UnityEngine.Object.op_Equal(UnityEngine.Object,UnityEngine.Object)">
      <summary>
        <para>Compares two object references to see if they refer to the same object.</para>
      </summary>
      <param name="x">The first Object.</param>
      <param name="y">The Object to compare against the first.</param>
    </member>
    <member name="?:UnityEngine.Object.op_NotEqual(UnityEngine.Object,UnityEngine.Object)">
      <summary>
        <para>Compares if two objects refer to a different object.</para>
      </summary>
      <param name="x"></param>
      <param name="y"></param>
    </member>
    <member name="M:UnityEngine.Object.ToString">
      <summary>
        <para>Returns the name of the object.</para>
      </summary>
      <returns>
        <para>The name returned by ToString.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.OcclusionArea">
      <summary>
        <para>OcclusionArea is an area in which occlusion culling is performed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.OcclusionArea.center">
      <summary>
        <para>Center of the occlusion area relative to the transform.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.OcclusionArea.size">
      <summary>
        <para>Size that the occlusion area will have.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.OcclusionPortal">
      <summary>
        <para>The portal for dynamically changing occlusion at runtime.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.OcclusionPortal.open">
      <summary>
        <para>Gets / sets the portal's open state.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.OperatingSystemFamily">
      <summary>
        <para>Enumeration for SystemInfo.operatingSystemFamily.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.OperatingSystemFamily.Linux">
      <summary>
        <para>Linux operating system family.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.OperatingSystemFamily.MacOSX">
      <summary>
        <para>macOS operating system family.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.OperatingSystemFamily.Other">
      <summary>
        <para>Returned for operating systems that do not fall into any other category.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.OperatingSystemFamily.Windows">
      <summary>
        <para>Windows operating system family.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Ping">
      <summary>
        <para>Ping any given IP address (given in dot notation).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Ping.ip">
      <summary>
        <para>The IP target of the ping.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Ping.isDone">
      <summary>
        <para>Has the ping function completed?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Ping.time">
      <summary>
        <para>This property contains the ping time result after isDone returns true.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Ping.#ctor(System.String)">
      <summary>
        <para>Perform a ping to the supplied target IP address.</para>
      </summary>
      <param name="address"></param>
    </member>
    <member name="T:UnityEngine.Plane">
      <summary>
        <para>Representation of a plane in 3D space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Plane.distance">
      <summary>
        <para>The distance measured from the Plane to the origin, along the Plane's normal.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Plane.flipped">
      <summary>
        <para>Returns a copy of the plane that faces in the opposite direction.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Plane.normal">
      <summary>
        <para>Normal vector of the plane.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Plane.ClosestPointOnPlane(UnityEngine.Vector3)">
      <summary>
        <para>For a given point returns the closest point on the plane.</para>
      </summary>
      <param name="point">The point to project onto the plane.</param>
      <returns>
        <para>A point on the plane that is closest to point.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Plane.#ctor(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Creates a plane.</para>
      </summary>
      <param name="inNormal"></param>
      <param name="inPoint"></param>
    </member>
    <member name="M:UnityEngine.Plane.#ctor(UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Creates a plane.</para>
      </summary>
      <param name="inNormal"></param>
      <param name="d"></param>
    </member>
    <member name="M:UnityEngine.Plane.#ctor(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Creates a plane.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
      <param name="c"></param>
    </member>
    <member name="M:UnityEngine.Plane.Flip">
      <summary>
        <para>Makes the plane face in the opposite direction.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Plane.GetDistanceToPoint(UnityEngine.Vector3)">
      <summary>
        <para>Returns a signed distance from plane to point.</para>
      </summary>
      <param name="point"></param>
    </member>
    <member name="M:UnityEngine.Plane.GetSide(UnityEngine.Vector3)">
      <summary>
        <para>Is a point on the positive side of the plane?</para>
      </summary>
      <param name="point"></param>
    </member>
    <member name="M:UnityEngine.Plane.Raycast(UnityEngine.Ray,System.Single&amp;)">
      <summary>
        <para>Intersects a ray with the plane.</para>
      </summary>
      <param name="ray"></param>
      <param name="enter"></param>
    </member>
    <member name="M:UnityEngine.Plane.SameSide(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Are two points on the same side of the plane?</para>
      </summary>
      <param name="inPt0"></param>
      <param name="inPt1"></param>
    </member>
    <member name="M:UnityEngine.Plane.Set3Points(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Sets a plane using three points that lie within it.  The points go around clockwise as you look down on the top surface of the plane.</para>
      </summary>
      <param name="a">First point in clockwise order.</param>
      <param name="b">Second point in clockwise order.</param>
      <param name="c">Third point in clockwise order.</param>
    </member>
    <member name="M:UnityEngine.Plane.SetNormalAndPosition(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Sets a plane using a point that lies within it along with a normal to orient it.</para>
      </summary>
      <param name="inNormal">The plane's normal vector.</param>
      <param name="inPoint">A point that lies on the plane.</param>
    </member>
    <member name="M:UnityEngine.Plane.Translate(UnityEngine.Plane,UnityEngine.Vector3)">
      <summary>
        <para>Returns a copy of the given plane that is moved in space by the given translation.</para>
      </summary>
      <param name="plane">The plane to move in space.</param>
      <param name="translation">The offset in space to move the plane with.</param>
      <returns>
        <para>The translated plane.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Plane.Translate(UnityEngine.Vector3)">
      <summary>
        <para>Moves the plane in space by the translation vector.</para>
      </summary>
      <param name="translation">The offset in space to move the plane with.</param>
    </member>
    <member name="T:UnityEngine.Playables.DataStreamType">
      <summary>
        <para>Describes the type of information that flows in and out of a Playable. This also specifies that this Playable is connectable to others of the same type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Playables.DataStreamType.Animation">
      <summary>
        <para>Describes that the information flowing in and out of the Playable is of Animation type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Playables.DataStreamType.Audio">
      <summary>
        <para>Describes that the information flowing in and out of the Playable is of Audio type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Playables.DataStreamType.None">
      <summary>
        <para>Describes that the Playable does not have any particular type. This is use for Playables that execute script code, or that create their own playable graphs, such as the Sequence.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Playables.DataStreamType.Texture">
      <summary>
        <para>Describes that the information flowing in and out of the Playable is of type Texture.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Playables.DirectorUpdateMode">
      <summary>
        <para>Defines what time source is used to update a Director graph.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Playables.DirectorUpdateMode.DSPClock">
      <summary>
        <para>Update is based on DSP (Digital Sound Processing) clock. Use this for graphs that need to be synchronized with Audio.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Playables.DirectorUpdateMode.GameTime">
      <summary>
        <para>Update is based on Time.time. Use this for graphs that need to be synchronized on gameplay, and that need to be paused when the game is paused.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Playables.DirectorUpdateMode.Manual">
      <summary>
        <para>Update mode is manual. You need to manually call PlayableGraph.Evaluate with your own deltaTime. This can be useful for graphs that are completely disconnected from the rest of the game. For example, localized bullet time.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Playables.DirectorUpdateMode.UnscaledGameTime">
      <summary>
        <para>Update is based on Time.unscaledTime. Use this for graphs that need to be updated even when gameplay is paused. Example: Menus transitions need to be updated even when the game is paused.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Playables.DirectorWrapMode">
      <summary>
        <para>Wrap mode for Playables.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Playables.DirectorWrapMode.Hold">
      <summary>
        <para>Hold the last frame when the playable time reaches it's duration.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Playables.DirectorWrapMode.Loop">
      <summary>
        <para>Loop back to zero time and continue playing.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Playables.DirectorWrapMode.None">
      <summary>
        <para>Do not keep playing when the time reaches the duration.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Playables.FrameData">
      <summary>
        <para>This structure contains the frame information a Playable receives in Playable.PrepareFrame.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Playables.FrameData.deltaTime">
      <summary>
        <para>Time difference between this frame and the preceding frame.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Playables.FrameData.effectiveParentDelay">
      <summary>
        <para>The accumulated delay of the parent Playable during the PlayableGraph traversal.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Playables.FrameData.effectiveParentSpeed">
      <summary>
        <para>The accumulated speed of the parent Playable during the PlayableGraph traversal.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Playables.FrameData.effectivePlayState">
      <summary>
        <para>The accumulated play state of this playable.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Playables.FrameData.effectiveSpeed">
      <summary>
        <para>The accumulated speed of the Playable during the PlayableGraph traversal.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Playables.FrameData.effectiveWeight">
      <summary>
        <para>The accumulated weight of the Playable during the PlayableGraph traversal.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Playables.FrameData.evaluationType">
      <summary>
        <para>Indicates the type of evaluation that caused PlayableGraph.PrepareFrame to be called.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Playables.FrameData.frameId">
      <summary>
        <para>The current frame identifier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Playables.FrameData.output">
      <summary>
        <para>The PlayableOutput that initiated this graph traversal.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Playables.FrameData.seekOccurred">
      <summary>
        <para>Indicates that the local time was explicitly set.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Playables.FrameData.timeHeld">
      <summary>
        <para>Indicates the local time did not advance because it has reached the duration and the extrapolation mode is set to Hold.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Playables.FrameData.timeLooped">
      <summary>
        <para>Indicates the local time wrapped because it has reached the duration and the extrapolation mode is set to Loop.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Playables.FrameData.weight">
      <summary>
        <para>The weight of the current Playable.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Playables.FrameData.EvaluationType">
      <summary>
        <para>Describes the cause for the evaluation of a PlayableGraph.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Playables.FrameData.EvaluationType.Evaluate">
      <summary>
        <para>Indicates the graph was updated due to a call to PlayableGraph.Evaluate.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Playables.FrameData.EvaluationType.Playback">
      <summary>
        <para>Indicates the graph was called by the runtime during normal playback due to PlayableGraph.Play being called.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Playables.INotification">
      <summary>
        <para>The base interface for all notifications sent through the playable system.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Playables.INotification.id">
      <summary>
        <para>The identifier is a name that identifies this notifications, or class of notifications.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Playables.INotificationReceiver">
      <summary>
        <para>Implement this interface to create a class that will receives notifications from PlayableOutput.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Playables.INotificationReceiver.OnNotify(UnityEngine.Playables.Playable,UnityEngine.Playables.INotification,System.Object)">
      <summary>
        <para>The method called when a notification is raised.</para>
      </summary>
      <param name="origin">The playable that sent the notification.</param>
      <param name="notification">The received notification.</param>
      <param name="context">User defined data that depends on the type of notification. Uses this to pass necessary information that can change with each invocation.</param>
    </member>
    <member name="?:UnityEngine.Playables.IPlayable">
      <summary>
        <para>Interface implemented by all C# Playable implementations.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Playables.IPlayableAsset">
      <summary>
        <para>Interface that permits a class to inject playables into a graph.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Playables.IPlayableAsset.duration">
      <summary>
        <para>Duration in seconds.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Playables.IPlayableAsset.outputs">
      <summary>
        <para>A description of the PlayableOutputs generated by this asset.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Playables.IPlayableAsset.CreatePlayable(UnityEngine.Playables.PlayableGraph,UnityEngine.GameObject)">
      <summary>
        <para>Implement this method to have your asset inject playables into the given graph.</para>
      </summary>
      <param name="graph">The graph to inject playables into.</param>
      <param name="owner">The game object which initiated the build.</param>
      <returns>
        <para>The playable injected into the graph, or the root playable if multiple playables are injected.</para>
      </returns>
    </member>
    <member name="?:UnityEngine.Playables.IPlayableBehaviour">
      <summary>
        <para>Interface implemented by all C# Playable Behaviour implementations.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Playables.IPlayableOutput">
      <summary>
        <para>Interface implemented by all C# Playable output implementations.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Playables.Notification">
      <summary>
        <para>Default implementation for Playable notifications.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Playables.Notification.id">
      <summary>
        <para>The name that identifies this notification.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Playables.Notification.#ctor(System.String)">
      <summary>
        <para>Creates a new notification with the name specified in the argument.</para>
      </summary>
      <param name="name">The name that identifies this notifications.</param>
    </member>
    <member name="T:UnityEngine.Playables.Playable">
      <summary>
        <para>Playables are customizable runtime objects that can be connected together and are contained in a PlayableGraph to create complex behaviours.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Playables.Playable.Null">
      <summary>
        <para>Returns an invalid Playable.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Playables.PlayableAsset">
      <summary>
        <para>A base class for assets that can be used to instantiate a Playable at runtime.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Playables.PlayableAsset.duration">
      <summary>
        <para>The playback duration in seconds of the instantiated Playable.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Playables.PlayableAsset.outputs">
      <summary>
        <para>A description of the outputs of the instantiated Playable.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Playables.PlayableAsset.CreatePlayable(UnityEngine.Playables.PlayableGraph,UnityEngine.GameObject)">
      <summary>
        <para>Implement this method to have your asset inject playables into the given graph.</para>
      </summary>
      <param name="graph">The graph to inject playables into.</param>
      <param name="owner">The game object which initiated the build.</param>
      <returns>
        <para>The playable injected into the graph, or the root playable if multiple playables are injected.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Playables.PlayableBehaviour">
      <summary>
        <para>PlayableBehaviour is the base class from which every custom playable script derives.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Playables.PlayableBehaviour.OnBehaviourDelay(UnityEngine.Playables.Playable,UnityEngine.Playables.FrameData)">
      <summary>
        <para>This function is called when the Playable play state is changed to Playables.PlayState.Delayed.</para>
      </summary>
      <param name="playable">The Playable that owns the current PlayableBehaviour.</param>
      <param name="info">A FrameData structure that contains information about the current frame context.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableBehaviour.OnBehaviourPause(UnityEngine.Playables.Playable,UnityEngine.Playables.FrameData)">
      <summary>
        <para>This method is invoked when one of the following situations occurs:
&lt;br&gt;&lt;br&gt;
     The effective play state during traversal is changed to Playables.PlayState.Paused. This state is indicated by FrameData.effectivePlayState.&lt;br&gt;&lt;br&gt;
     The PlayableGraph is stopped while the playable play state is Playing. This state is indicated by PlayableGraph.IsPlaying returning true.</para>
      </summary>
      <param name="playable">The Playable that owns the current PlayableBehaviour.</param>
      <param name="info">A FrameData structure that contains information about the current frame context.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableBehaviour.OnBehaviourPlay(UnityEngine.Playables.Playable,UnityEngine.Playables.FrameData)">
      <summary>
        <para>This function is called when the Playable play state is changed to Playables.PlayState.Playing.</para>
      </summary>
      <param name="playable">The Playable that owns the current PlayableBehaviour.</param>
      <param name="info">A FrameData structure that contains information about the current frame context.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableBehaviour.OnGraphStart(UnityEngine.Playables.Playable)">
      <summary>
        <para>This function is called when the PlayableGraph that owns this PlayableBehaviour starts.</para>
      </summary>
      <param name="playable">The Playable that owns the current PlayableBehaviour.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableBehaviour.OnGraphStop(UnityEngine.Playables.Playable)">
      <summary>
        <para>This function is called when the PlayableGraph that owns this PlayableBehaviour stops.</para>
      </summary>
      <param name="playable">The Playable that owns the current PlayableBehaviour.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableBehaviour.OnPlayableCreate(UnityEngine.Playables.Playable)">
      <summary>
        <para>This function is called when the Playable that owns the PlayableBehaviour is created.</para>
      </summary>
      <param name="playable">The Playable that owns the current PlayableBehaviour.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableBehaviour.OnPlayableDestroy(UnityEngine.Playables.Playable)">
      <summary>
        <para>This function is called when the Playable that owns the PlayableBehaviour is destroyed.</para>
      </summary>
      <param name="playable">The Playable that owns the current PlayableBehaviour.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableBehaviour.PrepareData(UnityEngine.Playables.Playable,UnityEngine.Playables.FrameData)">
      <summary>
        <para>This function is called during the PrepareData phase of the PlayableGraph.</para>
      </summary>
      <param name="playable">The Playable that owns the current PlayableBehaviour.</param>
      <param name="info">A FrameData structure that contains information about the current frame context.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableBehaviour.PrepareFrame(UnityEngine.Playables.Playable,UnityEngine.Playables.FrameData)">
      <summary>
        <para>This function is called during the PrepareFrame phase of the PlayableGraph.</para>
      </summary>
      <param name="playable">The Playable that owns the current PlayableBehaviour.</param>
      <param name="info">A FrameData structure that contains information about the current frame context.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableBehaviour.ProcessFrame(UnityEngine.Playables.Playable,UnityEngine.Playables.FrameData,System.Object)">
      <summary>
        <para>This function is called during the ProcessFrame phase of the PlayableGraph.</para>
      </summary>
      <param name="playable">The Playable that owns the current PlayableBehaviour.</param>
      <param name="info">A FrameData structure that contains information about the current frame context.</param>
      <param name="playerData">The user data of the ScriptPlayableOutput that initiated the process pass.</param>
    </member>
    <member name="T:UnityEngine.Playables.PlayableBinding">
      <summary>
        <para>Struct that holds information regarding an output of a PlayableAsset.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Playables.PlayableBinding.outputTargetType">
      <summary>
        <para>The type of target required by the PlayableOutput for this PlayableBinding.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Playables.PlayableBinding.sourceObject">
      <summary>
        <para>A reference to a UnityEngine.Object that acts a key for this binding.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Playables.PlayableBinding.streamName">
      <summary>
        <para>The name of the output or input stream.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Playables.PlayableBinding.streamType">
      <summary>
        <para>The type of the output or input stream.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Playables.PlayableBinding.DefaultDuration">
      <summary>
        <para>The default duration used when a PlayableOutput has no fixed duration.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Playables.PlayableBinding.None">
      <summary>
        <para>A constant to represent a PlayableAsset has no bindings.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Playables.PlayableExtensions">
      <summary>
        <para>Extensions for all the types that implements IPlayable.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.AddInput(U,V,System.Int32,System.Single)">
      <summary>
        <para>Create a new input port and connect it to the output port of the given Playable.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
      <param name="sourcePlayable">The Playable to connect to.</param>
      <param name="sourceOutputIndex">The output port of the Playable.</param>
      <param name="weight">The weight of the created input port.</param>
      <returns>
        <para>The index of the newly created input port.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.ConnectInput(U,System.Int32,V,System.Int32,System.Single)">
      <summary>
        <para>Connect the output port of a Playable to one of the input ports.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
      <param name="inputIndex">The input port index.</param>
      <param name="sourcePlayable">The Playable to connect to.</param>
      <param name="sourceOutputIndex">The output port of the Playable.</param>
      <param name="weight">The weight of the input port.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.Destroy(U)">
      <summary>
        <para>Destroys the current Playable.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.DisconnectInput(U,System.Int32)">
      <summary>
        <para>Disconnect the input port of a Playable.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
      <param name="inputPort">The input port index.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.GetDelay(U)">
      <summary>
        <para>Returns the delay of the playable.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
      <returns>
        <para>The delay in seconds.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.GetDuration(U)">
      <summary>
        <para>Returns the duration of the Playable.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
      <returns>
        <para>The duration in seconds.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.GetGraph(U)">
      <summary>
        <para>Returns the PlayableGraph that owns this Playable.  A Playable can only be used in the graph that was used to create it.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
      <returns>
        <para>The PlayableGraph associated with the current Playable.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.GetInput(U,System.Int32)">
      <summary>
        <para>Returns the Playable connected at the given input port index.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
      <param name="inputPort">The port index.</param>
      <returns>
        <para>Playable connected at the index specified, or null if the index is valid but is not connected to anything. This happens if there was once a Playable connected at the index, but was disconnected via PlayableGraph.Disconnect.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.GetInputCount(U)">
      <summary>
        <para>Returns the number of inputs supported by the Playable.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
      <returns>
        <para>The count of inputs on the Playable.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.GetInputWeight(U,System.Int32)">
      <summary>
        <para>Returns the weight of the Playable connected at the given input port index.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
      <param name="inputIndex">The port index.</param>
      <returns>
        <para>The current weight of the connected Playable.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.GetLeadTime(U)">
      <summary>
        <para>Returns the Playable lead time in seconds.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.GetOutput(U,System.Int32)">
      <summary>
        <para>Returns the Playable connected at the given output port index.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
      <param name="outputPort">The port index.</param>
      <returns>
        <para>Playable connected at the output index specified, or null if the index is valid but is not connected to anything. This happens if there was once a Playable connected at the index, but was disconnected via PlayableGraph.Disconnect.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.GetOutputCount(U)">
      <summary>
        <para>Returns the number of outputs supported by the Playable.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
      <returns>
        <para>The count of outputs on the Playable.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.GetPlayState(U)">
      <summary>
        <para>Returns the current PlayState of the Playable.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
      <returns>
        <para>The current PlayState of the Playable.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.GetPreviousTime(U)">
      <summary>
        <para>Returns the previous local time of the Playable.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
      <returns>
        <para>The previous time in seconds.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.GetPropagateSetTime(U)">
      <summary>
        <para>Returns the time propagation behavior of this Playable.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
      <returns>
        <para>True if time propagation is enabled.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.GetSpeed(U)">
      <summary>
        <para>Returns the speed multiplier that is applied to the the current Playable.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
      <returns>
        <para>The current speed.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.GetTime(U)">
      <summary>
        <para>Returns the current local time of the Playable.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
      <returns>
        <para>The current time in seconds.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.GetTraversalMode(U)">
      <summary>
        <para>Returns the propagation mode for the multi-output playable.</para>
      </summary>
      <param name="playable"></param>
      <returns>
        <para>Traversal mode (Mix or Passthrough).</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.IsDelayed(U)">
      <summary>
        <para>Returns whether or not the Playable has a delay.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
      <returns>
        <para>True if the playable is delayed, false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.IsDone(U)">
      <summary>
        <para>Returns a flag indicating that a playable has completed its operation.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
      <returns>
        <para>True if the playable has completed its operation, false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.IsNull(U)">
      <summary>
        <para>Returns true if the Playable is null, false otherwise.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.IsValid(U)">
      <summary>
        <para>Returns the vality of the current Playable.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
      <returns>
        <para>True if the Playable is properly constructed by the PlayableGraph and has not been destroyed, false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.Pause(U)">
      <summary>
        <para>Tells to pause the Playable.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.Play(U)">
      <summary>
        <para>Starts to play the Playable.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.SetDelay(U,System.Double)">
      <summary>
        <para>Set a delay until the playable starts.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
      <param name="delay">The delay in seconds.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.SetDone(U,System.Boolean)">
      <summary>
        <para>Changes a flag indicating that a playable has completed its operation.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
      <param name="value">True if the operation is completed, false otherwise.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.SetDuration(U,System.Double)">
      <summary>
        <para>Changes the duration of the Playable.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
      <param name="value">The new duration in seconds, must be a positive value.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.SetInputCount(U,System.Int32)">
      <summary>
        <para>Changes the number of inputs supported by the Playable.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.SetInputWeight(U,System.Int32,System.Single)">
      <summary>
        <para>Changes the weight of the Playable connected to the current Playable.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
      <param name="input">The connected Playable to change.</param>
      <param name="weight">The weight. Should be between 0 and 1.</param>
      <param name="inputIndex"></param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.SetInputWeight(U,V,System.Single)">
      <summary>
        <para>Changes the weight of the Playable connected to the current Playable.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
      <param name="input">The connected Playable to change.</param>
      <param name="weight">The weight. Should be between 0 and 1.</param>
      <param name="inputIndex"></param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.SetLeadTime(U,System.Single)">
      <summary>
        <para>Sets the Playable lead time in seconds.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
      <param name="value">The new lead time in seconds.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.SetOutputCount(U,System.Int32)">
      <summary>
        <para>Changes the number of outputs supported by the Playable.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.SetPlayState(U,UnityEngine.Playables.PlayState)">
      <summary>
        <para>Changes the current PlayState of the Playable.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
      <param name="value">The new PlayState.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.SetPropagateSetTime(U,System.Boolean)">
      <summary>
        <para>Changes the time propagation behavior of this Playable.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
      <param name="value">True to enable time propagation.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.SetSpeed(U,System.Double)">
      <summary>
        <para>Changes the speed multiplier that is applied to the the current Playable.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
      <param name="value">The new speed.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.SetTime(U,System.Double)">
      <summary>
        <para>Changes the current local time of the Playable.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
      <param name="value">The current time in seconds.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableExtensions.SetTraversalMode(U,UnityEngine.Playables.PlayableTraversalMode)">
      <summary>
        <para>Sets the propagation mode of PrepareFrame and ProcessFrame for the multi-output playable.</para>
      </summary>
      <param name="playable">The Playable used by this operation.</param>
      <param name="mode">The new traversal mode.</param>
    </member>
    <member name="T:UnityEngine.Playables.PlayableGraph">
      <summary>
        <para>Use the PlayableGraph to manage Playable creations and destructions.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Playables.PlayableGraph.Connect(U,System.Int32,V,System.Int32)">
      <summary>
        <para>Connects two Playable instances.</para>
      </summary>
      <param name="source">The source playable or its handle.</param>
      <param name="sourceOutputPort">The port used in the source playable.</param>
      <param name="destination">The destination playable or its handle.</param>
      <param name="destinationInputPort">The port used in the destination playable.</param>
      <returns>
        <para>Returns true if connection is successful.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.PlayableGraph.Create">
      <summary>
        <para>Creates a PlayableGraph.</para>
      </summary>
      <param name="name">The name of the graph.</param>
      <returns>
        <para>The newly created PlayableGraph.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.PlayableGraph.Create(System.String)">
      <summary>
        <para>Creates a PlayableGraph.</para>
      </summary>
      <param name="name">The name of the graph.</param>
      <returns>
        <para>The newly created PlayableGraph.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.PlayableGraph.Destroy">
      <summary>
        <para>Destroys the graph.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Playables.PlayableGraph.DestroyOutput(U)">
      <summary>
        <para>Destroys the PlayableOutput.</para>
      </summary>
      <param name="output">The output to destroy.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableGraph.DestroyPlayable(U)">
      <summary>
        <para>Destroys the Playable.</para>
      </summary>
      <param name="playable">The playable to destroy.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableGraph.DestroySubgraph(U)">
      <summary>
        <para>Destroys the Playable and all its inputs, recursively.</para>
      </summary>
      <param name="playable">The Playable to destroy.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableGraph.Disconnect(U,System.Int32)">
      <summary>
        <para>Disconnects the Playable. The connections determine the topology of the PlayableGraph and how it is evaluated.</para>
      </summary>
      <param name="input">The source playabe or its handle.</param>
      <param name="inputPort">The port used in the source playable.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableGraph.Evaluate(System.Single)">
      <summary>
        <para>Evaluates all the PlayableOutputs in the graph, and updates all the connected Playables in the graph.</para>
      </summary>
      <param name="deltaTime">The time in seconds by which to advance each Playable in the graph.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableGraph.Evaluate">
      <summary>
        <para>Evaluates all the PlayableOutputs in the graph, and updates all the connected Playables in the graph.</para>
      </summary>
      <param name="deltaTime">The time in seconds by which to advance each Playable in the graph.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableGraph.GetEditorName">
      <summary>
        <para>Returns the name of the PlayableGraph.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Playables.PlayableGraph.GetOutput(System.Int32)">
      <summary>
        <para>Get PlayableOutput at the given index in the graph.</para>
      </summary>
      <param name="index">The output index.</param>
      <returns>
        <para>The PlayableOutput at this given index, otherwise null.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.PlayableGraph.GetOutputByType(System.Int32)">
      <summary>
        <para>Get PlayableOutput of the requested type at the given index in the graph.</para>
      </summary>
      <param name="index">The output index.</param>
      <returns>
        <para>The PlayableOutput at the given index among all the PlayableOutput of the same type T.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.PlayableGraph.GetOutputCount">
      <summary>
        <para>Returns the number of PlayableOutput in the graph.</para>
      </summary>
      <returns>
        <para>The number of PlayableOutput in the graph.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.PlayableGraph.GetOutputCountByType">
      <summary>
        <para>Get the number of PlayableOutput of the requested type in the graph.</para>
      </summary>
      <returns>
        <para>The number of PlayableOutput of the same type T in the graph.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.PlayableGraph.GetPlayableCount">
      <summary>
        <para>Returns the number of Playable owned by the Graph.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Playables.PlayableGraph.GetResolver">
      <summary>
        <para>Returns the table used by the graph to resolve ExposedReferences.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Playables.PlayableGraph.GetRootPlayable(System.Int32)">
      <summary>
        <para>Returns the Playable with no output connections at the given index.</para>
      </summary>
      <param name="index">The index of the root Playable.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableGraph.GetRootPlayableCount">
      <summary>
        <para>Returns the number of Playable owned by the Graph that have no connected outputs.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Playables.PlayableGraph.GetTimeUpdateMode">
      <summary>
        <para>Returns how time is incremented when playing back.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Playables.PlayableGraph.IsDone">
      <summary>
        <para>Indicates that a graph has completed its operations.</para>
      </summary>
      <returns>
        <para>A boolean indicating if the graph is done playing or not.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.PlayableGraph.IsPlaying">
      <summary>
        <para>Indicates that a graph is presently running.</para>
      </summary>
      <returns>
        <para>A boolean indicating if the graph is playing or not.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.PlayableGraph.IsValid">
      <summary>
        <para>Returns true if the PlayableGraph has been properly constructed using PlayableGraph.CreateGraph and is not deleted.</para>
      </summary>
      <returns>
        <para>A boolean indicating if the graph is invalid or not.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.PlayableGraph.Play">
      <summary>
        <para>Plays the graph.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Playables.PlayableGraph.SetResolver(UnityEngine.IExposedPropertyTable)">
      <summary>
        <para>Changes the table used by the graph to resolve ExposedReferences.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableGraph.SetTimeUpdateMode(UnityEngine.Playables.DirectorUpdateMode)">
      <summary>
        <para>Changes how time is incremented when playing back.</para>
      </summary>
      <param name="value">The new DirectorUpdateMode.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableGraph.Stop">
      <summary>
        <para>Stops the graph, if it is playing.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Playables.PlayableOutput">
      <summary>
        <para>See: Playables.IPlayableOutput.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Playables.PlayableOutput.Null">
      <summary>
        <para>Returns an invalid PlayableOutput.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Playables.PlayableOutputExtensions">
      <summary>
        <para>Extensions for all the types that implements IPlayableOutput.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Playables.PlayableOutputExtensions.AddNotificationReceiver(U,UnityEngine.Playables.INotificationReceiver)">
      <summary>
        <para>Registers a new receiver that listens for notifications.</para>
      </summary>
      <param name="output">The target output.</param>
      <param name="receiver">The receiver to register.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableOutputExtensions.GetNotificationReceivers(U)">
      <summary>
        <para>Retrieves the list of notification receivers currently registered on the output.</para>
      </summary>
      <param name="output">The output holding the receivers.</param>
      <returns>
        <para>Returns the list of registered receivers.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.PlayableOutputExtensions.GetSourceOutputPort(U)">
      <summary>
        <para>Returns the source playable's output connection index.</para>
      </summary>
      <param name="output">The PlayableOutput used by this operation.</param>
      <returns>
        <para>The output port.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.PlayableOutputExtensions.GetSourcePlayable(U)">
      <summary>
        <para>Returns the source playable.</para>
      </summary>
      <param name="output">The PlayableOutput used by this operation.</param>
      <returns>
        <para>The source playable.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.PlayableOutputExtensions.GetUserData(U)">
      <summary>
        <para>Returns the opaque user data. This is the same value as the last last argument of ProcessFrame.</para>
      </summary>
      <param name="output">The PlayableOutput used by this operation.</param>
      <returns>
        <para>The user data.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.PlayableOutputExtensions.GetWeight(U)">
      <summary>
        <para>Returns the weight of the connection from the PlayableOutput to the source playable.</para>
      </summary>
      <param name="output">The PlayableOutput used by this operation.</param>
      <returns>
        <para>The weight of the connection to the source playable.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.PlayableOutputExtensions.IsOutputNull(U)">
      <summary>
        <para>Returns true if the PlayableOutput is null, false otherwise.</para>
      </summary>
      <param name="output">The PlayableOutput used by this operation.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableOutputExtensions.IsOutputValid(U)">
      <summary>
        <para></para>
      </summary>
      <param name="output">The PlayableOutput used by this operation.</param>
      <returns>
        <para>True if the PlayableOutput has not yet been destroyed and false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Playables.PlayableOutputExtensions.PushNotification(U,UnityEngine.Playables.Playable,UnityEngine.Playables.INotification,System.Object)">
      <summary>
        <para>Queues a notification to be sent through the Playable system.</para>
      </summary>
      <param name="output">The output sending the notification.</param>
      <param name="origin">The originating playable of the notification.</param>
      <param name="notification">The notification to be sent.</param>
      <param name="context">Extra information about the state when the notification was fired.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableOutputExtensions.RemoveNotificationReceiver(U,UnityEngine.Playables.INotificationReceiver)">
      <summary>
        <para>Unregisters a receiver on the output.</para>
      </summary>
      <param name="output">The target output.</param>
      <param name="receiver">The receiver to unregister.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableOutputExtensions.SetReferenceObject(U,UnityEngine.Object)">
      <summary>
        <para>Sets the bound object to a new value. Used to associate an output to an object (Track asset in case of Timeline).</para>
      </summary>
      <param name="output">The PlayableOutput used by this operation.</param>
      <param name="value">The new reference object value.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableOutputExtensions.SetSourceOutputPort(U,System.Int32)">
      <summary>
        <para>Sets the source playable's output connection index. For playables with multiple outputs, this determines which sub-branch of the source playable generates this output.</para>
      </summary>
      <param name="output">The PlayableOutput used by this operation.</param>
      <param name="value">The new output port value.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableOutputExtensions.SetSourcePlayable(U,V,System.Int32)">
      <summary>
        <para>Sets which playable that computes the output and which sub-tree index.</para>
      </summary>
      <param name="output">The PlayableOutput used by this operation.</param>
      <param name="value">The new source Playable.</param>
      <param name="port">The new output port value.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableOutputExtensions.SetSourcePlayable(U,V)">
      <summary>
        <para>Sets which playable that computes the output.</para>
      </summary>
      <param name="output">The PlayableOutput used by this operation.</param>
      <param name="value">The new source Playable.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableOutputExtensions.SetUserData(U,UnityEngine.Object)">
      <summary>
        <para>Sets the opaque user data. This same data is passed as the last argument to ProcessFrame.</para>
      </summary>
      <param name="output">The PlayableOutput used by this operation.</param>
      <param name="value">The new user data.</param>
    </member>
    <member name="M:UnityEngine.Playables.PlayableOutputExtensions.SetWeight(U,System.Single)">
      <summary>
        <para>Sets the weight of the connection from the PlayableOutput to the source playable.</para>
      </summary>
      <param name="output">The PlayableOutput used by this operation.</param>
      <param name="value">The new weight.</param>
    </member>
    <member name="T:UnityEngine.Playables.PlayableTraversalMode">
      <summary>
        <para>Traversal mode for Playables.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Playables.PlayableTraversalMode.Mix">
      <summary>
        <para>Causes the Playable to prepare and process it's inputs when demanded by an output.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Playables.PlayableTraversalMode.Passthrough">
      <summary>
        <para>Causes the Playable to act as a passthrough for PrepareFrame and ProcessFrame. If the PlayableOutput being processed is connected to the n-th input port of the Playable, the Playable only propagates the n-th output port. Use this enum value in conjunction with PlayableOutput SetSourceOutputPort.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Playables.PlayState">
      <summary>
        <para>Status of a Playable.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Playables.PlayState.Delayed">
      <summary>
        <para>The Playable has been delayed, using PlayableExtensions.SetDelay. It will not start until the delay is entirely consumed.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Playables.PlayState.Paused">
      <summary>
        <para>The Playable has been paused. Its local time will not advance.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Playables.PlayState.Playing">
      <summary>
        <para>The Playable is currently Playing.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Playables.ScriptPlayable`1">
      <summary>
        <para>A IPlayable implementation that contains a PlayableBehaviour for the PlayableGraph. PlayableBehaviour can be used to write custom Playable that implement their own PrepareFrame callback.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Playables.ScriptPlayableBinding">
      <summary>
        <para>A PlayableBinding that contains information representing a ScriptingPlayableOutput.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Playables.ScriptPlayableBinding.Create(System.String,UnityEngine.Object,System.Type)">
      <summary>
        <para>Creates a PlayableBinding that contains information representing a ScriptPlayableOutput.</para>
      </summary>
      <param name="key">A reference to a UnityEngine.Object that acts as a key for this binding.</param>
      <param name="type">The type of object that will be bound to the ScriptPlayableOutput.</param>
      <param name="name">The name of the ScriptPlayableOutput.</param>
      <returns>
        <para>Returns a PlayableBinding that contains information that is used to create a ScriptPlayableOutput.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Playables.ScriptPlayableOutput">
      <summary>
        <para>A IPlayableOutput implementation that contains a script output for the a PlayableGraph.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Playables.ScriptPlayableOutput.Create(UnityEngine.Playables.PlayableGraph,System.String)">
      <summary>
        <para>Creates a new ScriptPlayableOutput in the associated PlayableGraph.</para>
      </summary>
      <param name="graph">The PlayableGraph that will contain the ScriptPlayableOutput.</param>
      <param name="name">The name of this ScriptPlayableOutput.</param>
      <returns>
        <para>The created ScriptPlayableOutput.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.Playables.ScriptPlayableOutput.Null">
      <summary>
        <para>Returns an invalid ScriptPlayableOutput.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.EarlyUpdate">
      <summary>
        <para>Update phase in the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.EarlyUpdate.AnalyticsCoreStatsUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.EarlyUpdate.ARCoreUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.EarlyUpdate.ClearIntermediateRenderers">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.EarlyUpdate.ClearLines">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.EarlyUpdate.DeliverIosPlatformEvents">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.EarlyUpdate.DispatchEventQueueEvents">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.EarlyUpdate.ExecuteMainThreadJobs">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.EarlyUpdate.GpuTimestamp">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.EarlyUpdate.PerformanceAnalyticsUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.EarlyUpdate.PhysicsResetInterpolatedTransformPosition">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.EarlyUpdate.PlayerCleanupCachedData">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.EarlyUpdate.PollHtcsPlayerConnection">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.EarlyUpdate.PollPlayerConnection">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.EarlyUpdate.PresentBeforeUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.EarlyUpdate.ProcessMouseInWindow">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.EarlyUpdate.ProcessRemoteInput">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.EarlyUpdate.ProfilerStartFrame">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.EarlyUpdate.RendererNotifyInvisible">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.EarlyUpdate.ResetFrameStatsAfterPresent">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.EarlyUpdate.ScriptRunDelayedStartupFrame">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.EarlyUpdate.SpriteAtlasManagerUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.EarlyUpdate.UnityWebRequestUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.EarlyUpdate.UpdateAsyncReadbackManager">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.EarlyUpdate.UpdateCanvasRectTransform">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.EarlyUpdate.UpdateInputManager">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.EarlyUpdate.UpdateKinect">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.EarlyUpdate.UpdateMainGameViewRect">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.EarlyUpdate.UpdatePreloading">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.EarlyUpdate.UpdateStreamingManager">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.EarlyUpdate.UpdateTextureStreamingManager">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.EarlyUpdate.XRUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.FixedUpdate">
      <summary>
        <para>Update phase in the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.FixedUpdate.AudioFixedUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.FixedUpdate.ClearLines">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.FixedUpdate.DirectorFixedSampleTime">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.FixedUpdate.DirectorFixedUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.FixedUpdate.DirectorFixedUpdatePostPhysics">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.FixedUpdate.LegacyFixedAnimationUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.FixedUpdate.NewInputFixedUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.FixedUpdate.Physics2DFixedUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.FixedUpdate.PhysicsFixedUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.FixedUpdate.ScriptRunBehaviourFixedUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.FixedUpdate.ScriptRunDelayedFixedFrameRate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.FixedUpdate.XRFixedUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.Initialization">
      <summary>
        <para>Update phase in the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.Initialization.AsyncUploadTimeSlicedUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.Initialization.DirectorSampleTime">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.Initialization.SynchronizeInputs">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.Initialization.SynchronizeState">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.Initialization.UpdateCameraMotionVectors">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.Initialization.XREarlyUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate">
      <summary>
        <para>Update phase in the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.BatchModeUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.ClearImmediateRenderers">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.DirectorLateUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.DirectorRenderImage">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.EndGraphicsJobsAfterScriptLateUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.EnlightenRuntimeUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.ExecuteGameCenterCallbacks">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.FinishFrameRendering">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.GUIClearEvents">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.InputEndFrame">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.MemoryFrameMaintenance">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.ParticleSystemEndUpdateAll">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.PhysicsSkinnedClothBeginUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.PhysicsSkinnedClothFinishUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.PlayerEmitCanvasGeometry">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.PlayerSendFrameComplete">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.PlayerSendFramePostPresent">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.PlayerSendFrameStarted">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.PlayerUpdateCanvases">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.PresentAfterDraw">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.ProcessWebSendMessages">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.ProfilerEndFrame">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.ProfilerSynchronizeStats">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.ResetInputAxis">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.ScriptRunDelayedDynamicFrameRate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.ShaderHandleErrors">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.SortingGroupsUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.ThreadedLoadingDebug">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.TriggerEndOfFrameCallbacks">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.UpdateAllRenderers">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.UpdateAllSkinnedMeshes">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.UpdateAudio">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.UpdateCanvasRectTransform">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.UpdateCaptureScreenshot">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.UpdateCustomRenderTextures">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.UpdateLightProbeProxyVolumes">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.UpdateRectTransform">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.UpdateResolution">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.UpdateSubstance">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.UpdateVideo">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.UpdateVideoTextures">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.XRPostLateUpdate">
      <summary>
        <para>Native engine system updated by the Player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.XRPostPresent">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PostLateUpdate.XRPreEndFrame">
      <summary>
        <para>Native engine system updated by the Player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PreLateUpdate">
      <summary>
        <para>Update phase in the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PreLateUpdate.AIUpdatePostScript">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PreLateUpdate.ConstraintManagerUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PreLateUpdate.DirectorDeferredEvaluate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PreLateUpdate.DirectorUpdateAnimationBegin">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PreLateUpdate.DirectorUpdateAnimationEnd">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PreLateUpdate.EndGraphicsJobsAfterScriptUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PreLateUpdate.LegacyAnimationUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PreLateUpdate.ParticleSystemBeginUpdateAll">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PreLateUpdate.Physics2DLateUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PreLateUpdate.ScriptRunBehaviourLateUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PreLateUpdate.UIElementsUpdatePanels">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PreLateUpdate.UNetUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PreLateUpdate.UpdateMasterServerInterface">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PreLateUpdate.UpdateNetworkManager">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PreUpdate">
      <summary>
        <para>Update phase in the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PreUpdate.AIUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PreUpdate.CheckTexFieldInput">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PreUpdate.IMGUISendQueuedEvents">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PreUpdate.NewInputUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PreUpdate.Physics2DUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PreUpdate.PhysicsUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PreUpdate.SendMouseEvents">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PreUpdate.UpdateVideo">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.PreUpdate.WindUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.TimeUpdate">
      <summary>
        <para>Update phase in the native player loop that waits for the operating system (OS) to flip the back buffer to the display and update the time in the engine.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.TimeUpdate.WaitForLastPresentationAndUpdateTime">
      <summary>
        <para>Waits for the operating system (OS) to flip the back buffer to the display and update the time in the engine.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.Update">
      <summary>
        <para>Update phase in the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.Update.DirectorUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.Update.ScriptRunBehaviourUpdate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.Update.ScriptRunDelayedDynamicFrameRate">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerLoop.Update.ScriptRunDelayedTasks">
      <summary>
        <para>Native engine system updated by the native player loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerPrefs">
      <summary>
        <para>`PlayerPrefs` is a class that stores Player preferences between game sessions. It can store string, float and integer values into the user’s platform registry.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.PlayerPrefs.DeleteAll">
      <summary>
        <para>Removes all keys and values from the preferences. Use with caution.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.PlayerPrefs.DeleteKey(System.String)">
      <summary>
        <para>Removes the given key from the PlayerPrefs. If the key does not exist, DeleteKey has no impact.</para>
      </summary>
      <param name="key"></param>
    </member>
    <member name="M:UnityEngine.PlayerPrefs.GetFloat(System.String)">
      <summary>
        <para>Returns the value corresponding to key in the preference file if it exists.</para>
      </summary>
      <param name="key"></param>
      <param name="defaultValue"></param>
    </member>
    <member name="M:UnityEngine.PlayerPrefs.GetFloat(System.String,System.Single)">
      <summary>
        <para>Returns the value corresponding to key in the preference file if it exists.</para>
      </summary>
      <param name="key"></param>
      <param name="defaultValue"></param>
    </member>
    <member name="M:UnityEngine.PlayerPrefs.GetInt(System.String)">
      <summary>
        <para>Returns the value corresponding to key in the preference file if it exists.</para>
      </summary>
      <param name="key"></param>
      <param name="defaultValue"></param>
    </member>
    <member name="M:UnityEngine.PlayerPrefs.GetInt(System.String,System.Int32)">
      <summary>
        <para>Returns the value corresponding to key in the preference file if it exists.</para>
      </summary>
      <param name="key"></param>
      <param name="defaultValue"></param>
    </member>
    <member name="M:UnityEngine.PlayerPrefs.GetString(System.String)">
      <summary>
        <para>Returns the value corresponding to key in the preference file if it exists.</para>
      </summary>
      <param name="key"></param>
      <param name="defaultValue"></param>
    </member>
    <member name="M:UnityEngine.PlayerPrefs.GetString(System.String,System.String)">
      <summary>
        <para>Returns the value corresponding to key in the preference file if it exists.</para>
      </summary>
      <param name="key"></param>
      <param name="defaultValue"></param>
    </member>
    <member name="M:UnityEngine.PlayerPrefs.HasKey(System.String)">
      <summary>
        <para>Returns true if the given key exists in PlayerPrefs, otherwise returns false.</para>
      </summary>
      <param name="key"></param>
    </member>
    <member name="M:UnityEngine.PlayerPrefs.Save">
      <summary>
        <para>Writes all modified preferences to disk.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.PlayerPrefs.SetFloat(System.String,System.Single)">
      <summary>
        <para>Sets the float value of the preference identified by the given key. You can use PlayerPrefs.GetFloat to retrieve this value.</para>
      </summary>
      <param name="key"></param>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.PlayerPrefs.SetInt(System.String,System.Int32)">
      <summary>
        <para>Sets a single integer value for the preference identified by the given key. You can use PlayerPrefs.GetInt to retrieve this value.</para>
      </summary>
      <param name="key"></param>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.PlayerPrefs.SetString(System.String,System.String)">
      <summary>
        <para>Sets a single string value for the preference identified by the given key. You can use PlayerPrefs.GetString to retrieve this value.</para>
      </summary>
      <param name="key"></param>
      <param name="value"></param>
    </member>
    <member name="T:UnityEngine.PlayerPrefsException">
      <summary>
        <para>An exception thrown by the PlayerPrefs class in a  web player build.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Pose">
      <summary>
        <para>Representation of a Position, and a Rotation in 3D Space</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Pose.forward">
      <summary>
        <para>Returns the forward vector of the pose.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Pose.identity">
      <summary>
        <para>Shorthand for pose which represents zero position, and an identity rotation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Pose.position">
      <summary>
        <para>The position component of the pose.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Pose.right">
      <summary>
        <para>Returns the right vector of the pose.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Pose.rotation">
      <summary>
        <para>The rotation component of the pose.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Pose.up">
      <summary>
        <para>Returns the up vector of the pose.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Pose.#ctor">
      <summary>
        <para>Creates a new pose with the given vector, and quaternion values.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Pose.GetTransformedBy(UnityEngine.Pose)">
      <summary>
        <para>Transforms the current pose into the local space of the provided pose.</para>
      </summary>
      <param name="lhs"></param>
    </member>
    <member name="M:UnityEngine.Pose.GetTransformedBy(UnityEngine.Transform)">
      <summary>
        <para>Transforms the current pose into the local space of the provided pose.</para>
      </summary>
      <param name="lhs"></param>
    </member>
    <member name="?:UnityEngine.Pose.op_Equal(UnityEngine.Pose,UnityEngine.Pose)">
      <summary>
        <para>Returns true if two poses are equal.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="?:UnityEngine.Pose.op_NotEqual(UnityEngine.Pose,UnityEngine.Pose)">
      <summary>
        <para>Returns true if two poses are not equal.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="T:UnityEngine.PreferBinarySerialization">
      <summary>
        <para>Prefer ScriptableObject derived type to use binary serialization regardless of project's asset serialization mode.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PrimitiveType">
      <summary>
        <para>The various primitives that can be created using the GameObject.CreatePrimitive function.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.PrimitiveType.Capsule">
      <summary>
        <para>A capsule primitive.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.PrimitiveType.Cube">
      <summary>
        <para>A cube primitive.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.PrimitiveType.Cylinder">
      <summary>
        <para>A cylinder primitive.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.PrimitiveType.Plane">
      <summary>
        <para>A plane primitive.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.PrimitiveType.Quad">
      <summary>
        <para>A quad primitive.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.PrimitiveType.Sphere">
      <summary>
        <para>A sphere primitive.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Profiling.CustomSampler">
      <summary>
        <para>Custom CPU Profiler label used for profiling arbitrary code blocks.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Profiling.CustomSampler.Begin">
      <summary>
        <para>Begin profiling a piece of code with a custom label defined by this instance of CustomSampler.</para>
      </summary>
      <param name="targetObject"></param>
    </member>
    <member name="M:UnityEngine.Profiling.CustomSampler.Begin(UnityEngine.Object)">
      <summary>
        <para>Begin profiling a piece of code with a custom label defined by this instance of CustomSampler.</para>
      </summary>
      <param name="targetObject"></param>
    </member>
    <member name="M:UnityEngine.Profiling.CustomSampler.Create(System.String)">
      <summary>
        <para>Creates a new CustomSampler for profiling parts of your code.</para>
      </summary>
      <param name="name">Name of the Sampler.</param>
      <param name="collectGpuData">Specifies whether this Sampler records GPU timings. If you want the Sampler to record GPU timings, set this to true.</param>
      <returns>
        <para>CustomSampler object or null if a built-in Sampler with the same name exists.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Profiling.CustomSampler.Create(System.String,System.Boolean)">
      <summary>
        <para>Creates a new CustomSampler for profiling parts of your code.</para>
      </summary>
      <param name="name">Name of the Sampler.</param>
      <param name="collectGpuData">Specifies whether this Sampler records GPU timings. If you want the Sampler to record GPU timings, set this to true.</param>
      <returns>
        <para>CustomSampler object or null if a built-in Sampler with the same name exists.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Profiling.CustomSampler.End">
      <summary>
        <para>End profiling a piece of code with a custom label.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Profiling.Experimental.DebugScreenCapture">
      <summary>
        <para>A raw data representation of a screenshot.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Profiling.Experimental.DebugScreenCapture.height">
      <summary>
        <para>Height of the image.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Profiling.Experimental.DebugScreenCapture.imageFormat">
      <summary>
        <para>The format in which the image was captured.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Profiling.Experimental.DebugScreenCapture.rawImageDataReference">
      <summary>
        <para>A non-owning reference to the image data.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Profiling.Experimental.DebugScreenCapture.width">
      <summary>
        <para>Width of the image.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Profiling.Memory.Experimental.CaptureFlags">
      <summary>
        <para>Flags that specify which fields to capture in a snapshot.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Profiling.Memory.Experimental.CaptureFlags.ManagedObjects">
      <summary>
        <para>Corresponds to the ManagedHeapSections, ManagedStacks, Connections, TypeDescriptions fields in a Memory Snapshot.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Profiling.Memory.Experimental.CaptureFlags.NativeAllocations">
      <summary>
        <para>Corresponds to the NativeAllocations, NativeMemoryRegions, NativeRootReferences, and NativeMemoryLabels fields in a Memory Snapshot.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Profiling.Memory.Experimental.CaptureFlags.NativeAllocationSites">
      <summary>
        <para>Corresponds to the NativeAllocationSite field in a Memory Snapshot.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Profiling.Memory.Experimental.CaptureFlags.NativeObjects">
      <summary>
        <para>Corresponds to the NativeObject and NativeType fields in a Memory Snapshot.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Profiling.Memory.Experimental.CaptureFlags.NativeStackTraces">
      <summary>
        <para>Corresponds to the NativeCallstackSymbol field in a Memory Snapshot.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Profiling.Memory.Experimental.MemoryProfiler">
      <summary>
        <para>Memory profiling API container class.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Profiling.Memory.Experimental.MemoryProfiler.createMetaData(System.Action`1&lt;UnityEngine.Profiling.Memory.Experimental.MetaData&gt;)">
      <summary>
        <para>A metadata event that collection methods can subscribe to.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.Profiling.Memory.Experimental.MemoryProfiler.TakeSnapshot(System.String,System.Action`2&lt;System.String,System.Boolean&gt;,UnityEngine.Profiling.Memory.Experimental.CaptureFlags)">
      <summary>
        <para>Triggers a memory snapshot capture.</para>
      </summary>
      <param name="path">Destination path for the memory snapshot file.</param>
      <param name="finishCallback">Event that is fired once the memory snapshot has finished the process of capturing data.</param>
      <param name="captureFlags">Flag mask defining the content of the memory snapshot.</param>
      <param name="screenshotCallback">Event that you can specify to retrieve a screengrab after the snapshot has finished.</param>
    </member>
    <member name="M:UnityEngine.Profiling.Memory.Experimental.MemoryProfiler.TakeSnapshot(System.String,System.Action`2&lt;System.String,System.Boolean&gt;,System.Action`3&lt;System.String,System.Boolean,UnityEngine.Profiling.Experimental.DebugScreenCapture&gt;,UnityEngine.Profiling.Memory.Experimental.CaptureFlags)">
      <summary>
        <para>Triggers a memory snapshot capture.</para>
      </summary>
      <param name="path">Destination path for the memory snapshot file.</param>
      <param name="finishCallback">Event that is fired once the memory snapshot has finished the process of capturing data.</param>
      <param name="captureFlags">Flag mask defining the content of the memory snapshot.</param>
      <param name="screenshotCallback">Event that you can specify to retrieve a screengrab after the snapshot has finished.</param>
    </member>
    <member name="M:UnityEngine.Profiling.Memory.Experimental.MemoryProfiler.TakeTempSnapshot(System.Action`2&lt;System.String,System.Boolean&gt;,UnityEngine.Profiling.Memory.Experimental.CaptureFlags)">
      <summary>
        <para>Triggers a memory snapshot capture to the Application.temporaryCachePath folder.</para>
      </summary>
      <param name="finishCallback">Event that is fired once the memory snapshot has finished the process of capturing data.</param>
      <param name="captureFlags">Flag mask defining the content of the memory snapshot.</param>
    </member>
    <member name="T:UnityEngine.Profiling.Memory.Experimental.MetaData">
      <summary>
        <para>Container for memory snapshot meta data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Profiling.Memory.Experimental.MetaData.content">
      <summary>
        <para>User defined meta data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Profiling.Memory.Experimental.MetaData.platform">
      <summary>
        <para>Memory snapshot meta data containing platform information.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Profiling.Profiler">
      <summary>
        <para>Controls the from script.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Profiling.Profiler.areaCount">
      <summary>
        <para>The number of ProfilerArea|Profiler Areas that you can profile.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Profiling.Profiler.enableAllocationCallstacks">
      <summary>
        <para>Enables the recording of callstacks for managed allocations.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Profiling.Profiler.enableBinaryLog">
      <summary>
        <para>Enables the logging of profiling data to a file.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Profiling.Profiler.enabled">
      <summary>
        <para>Enables the Profiler.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Profiling.Profiler.logFile">
      <summary>
        <para>Specifies the file to use when writing profiling data.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Profiling.Profiler.maxNumberOfSamplesPerFrame">
      <summary>
        <para>Resize the profiler sample buffers to allow the desired amount of samples per thread.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Profiling.Profiler.maxUsedMemory">
      <summary>
        <para>Sets the maximum amount of memory that Profiler uses for buffering data. This property is expressed in bytes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Profiling.Profiler.usedHeapSize">
      <summary>
        <para>Heap size used by the program.</para>
      </summary>
      <returns>
        <para>Size of the used heap in bytes, (or 0 if the profiler is disabled).</para>
      </returns>
    </member>
    <member name="P:UnityEngine.Profiling.Profiler.usedHeapSizeLong">
      <summary>
        <para>Returns the number of bytes that Unity has allocated. This does not include bytes allocated by external libraries or drivers.</para>
      </summary>
      <returns>
        <para>Size of the memory allocated by Unity (or 0 if the profiler is disabled).</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Profiling.Profiler.AddFramesFromFile(System.String)">
      <summary>
        <para>Displays the recorded profile data in the profiler.</para>
      </summary>
      <param name="file">The name of the file containing the frame data, including extension.</param>
    </member>
    <member name="M:UnityEngine.Profiling.Profiler.BeginSample(System.String)">
      <summary>
        <para>Begin profiling a piece of code with a custom label.</para>
      </summary>
      <param name="name">A string to identify the sample in the Profiler window.</param>
      <param name="targetObject">An object that provides context to the sample,.</param>
    </member>
    <member name="M:UnityEngine.Profiling.Profiler.BeginSample(System.String,UnityEngine.Object)">
      <summary>
        <para>Begin profiling a piece of code with a custom label.</para>
      </summary>
      <param name="name">A string to identify the sample in the Profiler window.</param>
      <param name="targetObject">An object that provides context to the sample,.</param>
    </member>
    <member name="M:UnityEngine.Profiling.Profiler.BeginThreadProfiling(System.String,System.String)">
      <summary>
        <para>Enables profiling on the thread from which you call this method.</para>
      </summary>
      <param name="threadGroupName">The name of the thread group to which the thread belongs.</param>
      <param name="threadName">The name of the thread.</param>
    </member>
    <member name="M:UnityEngine.Profiling.Profiler.EmitFrameMetaData(System.Guid,System.Int32,System.Array)">
      <summary>
        <para>Write metadata associated with the current frame to the Profiler stream.</para>
      </summary>
      <param name="id">Module identifier. Used to distinguish metadata streams between different plugins, packages or modules.</param>
      <param name="tag">Data stream index.</param>
      <param name="data">Binary data.</param>
    </member>
    <member name="M:UnityEngine.Profiling.Profiler.EmitFrameMetaData(System.Guid,System.Int32,System.Collections.Generic.List`1&lt;T&gt;)">
      <summary>
        <para>Write metadata associated with the current frame to the Profiler stream.</para>
      </summary>
      <param name="id">Module identifier. Used to distinguish metadata streams between different plugins, packages or modules.</param>
      <param name="tag">Data stream index.</param>
      <param name="data">Binary data.</param>
    </member>
    <member name="M:UnityEngine.Profiling.Profiler.EmitFrameMetaData(System.Guid,System.Int32,Unity.Collections.NativeArray`1&lt;T&gt;)">
      <summary>
        <para>Write metadata associated with the current frame to the Profiler stream.</para>
      </summary>
      <param name="id">Module identifier. Used to distinguish metadata streams between different plugins, packages or modules.</param>
      <param name="tag">Data stream index.</param>
      <param name="data">Binary data.</param>
    </member>
    <member name="M:UnityEngine.Profiling.Profiler.EndSample">
      <summary>
        <para>Ends the current profiling sample.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Profiling.Profiler.EndThreadProfiling">
      <summary>
        <para>Frees the internal resources used by the Profiler for the thread.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Profiling.Profiler.GetAllocatedMemoryForGraphicsDriver">
      <summary>
        <para>Returns the amount of allocated memory for the graphics driver, in bytes.

Only available in development players and editor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Profiling.Profiler.GetAreaEnabled(UnityEngine.Profiling.ProfilerArea)">
      <summary>
        <para>Returns whether or not a given ProfilerArea is currently enabled.</para>
      </summary>
      <param name="area">Which area you want to check the state of.</param>
      <returns>
        <para>Returns whether or not a given ProfilerArea is currently enabled.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Profiling.Profiler.GetMonoHeapSize">
      <summary>
        <para>Returns the size of the mono heap.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Profiling.Profiler.GetMonoHeapSizeLong">
      <summary>
        <para>Returns the size of the reserved space for managed-memory.</para>
      </summary>
      <returns>
        <para>The size of the managed heap.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Profiling.Profiler.GetMonoUsedSize">
      <summary>
        <para>Returns the used size from mono.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Profiling.Profiler.GetMonoUsedSizeLong">
      <summary>
        <para>Gets the allocated managed memory for live objects and non-collected objects.</para>
      </summary>
      <returns>
        <para>Returns a long integer value of the memory in use.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Profiling.Profiler.GetRuntimeMemorySize(UnityEngine.Object)">
      <summary>
        <para>Returns the runtime memory usage of the resource.</para>
      </summary>
      <param name="o"></param>
    </member>
    <member name="M:UnityEngine.Profiling.Profiler.GetRuntimeMemorySizeLong(UnityEngine.Object)">
      <summary>
        <para>Gathers the native-memory used by a Unity object.</para>
      </summary>
      <param name="o">The target Unity object.</param>
      <returns>
        <para>The amount of native-memory used by a Unity object. This returns 0 if the Profiler is not available.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Profiling.Profiler.GetTempAllocatorSize">
      <summary>
        <para>Returns the size of the temp allocator.</para>
      </summary>
      <returns>
        <para>Size in bytes.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Profiling.Profiler.GetTotalAllocatedMemory">
      <summary>
        <para>Returns the amount of allocated and used system memory.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Profiling.Profiler.GetTotalAllocatedMemoryLong">
      <summary>
        <para>The total memory allocated by the internal allocators in Unity. Unity reserves large pools of memory from the system. This function returns the amount of used memory in those pools.</para>
      </summary>
      <returns>
        <para>The amount of memory allocated by Unity. This returns 0 if the Profiler is not available.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Profiling.Profiler.GetTotalFragmentationInfo(Unity.Collections.NativeArray`1&lt;System.Int32&gt;)">
      <summary>
        <para>Returns heap memory fragmentation information.</para>
      </summary>
      <param name="stats">An array to receive the count of free blocks grouped by power of two sizes. Given a small array, Unity counts the larger free blocks together in the final array element.</param>
      <returns>
        <para>Returns the total number of free blocks in the dynamic heap.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Profiling.Profiler.GetTotalReservedMemory">
      <summary>
        <para>Returns the amount of reserved system memory.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Profiling.Profiler.GetTotalReservedMemoryLong">
      <summary>
        <para>The total memory Unity has reserved.</para>
      </summary>
      <returns>
        <para>Memory reserved by Unity in bytes. This returns 0 if the Profiler is not available.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Profiling.Profiler.GetTotalUnusedReservedMemory">
      <summary>
        <para>Returns the amount of reserved but not used system memory.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Profiling.Profiler.GetTotalUnusedReservedMemoryLong">
      <summary>
        <para>Unity allocates memory in pools for usage when unity needs to allocate memory. This function returns the amount of unused memory in these pools.</para>
      </summary>
      <returns>
        <para>The amount of unused memory in the reserved pools. This returns 0 if the Profiler is not available.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Profiling.Profiler.SetAreaEnabled(UnityEngine.Profiling.ProfilerArea,System.Boolean)">
      <summary>
        <para>Enable or disable a given ProfilerArea.</para>
      </summary>
      <param name="area">The area you want to enable or disable.</param>
      <param name="enabled">Enable or disable the collection of data for this area.</param>
    </member>
    <member name="M:UnityEngine.Profiling.Profiler.SetTempAllocatorRequestedSize(System.UInt32)">
      <summary>
        <para>Sets the size of the temp allocator.</para>
      </summary>
      <param name="size">Size in bytes.</param>
      <returns>
        <para>Returns true if requested size was successfully set. Will return false if value is disallowed (too small).</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Profiling.ProfilerArea">
      <summary>
        <para>The different areas of profiling, corresponding to the charts in ProfilerWindow.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Profiling.ProfilerArea.Audio">
      <summary>
        <para>Audio statistics.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Profiling.ProfilerArea.CPU">
      <summary>
        <para>CPU statistics.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Profiling.ProfilerArea.GlobalIllumination">
      <summary>
        <para>Global Illumination statistics.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Profiling.ProfilerArea.GPU">
      <summary>
        <para>GPU statistics.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Profiling.ProfilerArea.Memory">
      <summary>
        <para>Memory statistics.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Profiling.ProfilerArea.NetworkMessages">
      <summary>
        <para>Network messages statistics.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Profiling.ProfilerArea.NetworkOperations">
      <summary>
        <para>Network operations statistics.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Profiling.ProfilerArea.Physics">
      <summary>
        <para>3D Physics statistics.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Profiling.ProfilerArea.Physics2D">
      <summary>
        <para>2D physics statistics.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Profiling.ProfilerArea.Rendering">
      <summary>
        <para>Rendering statistics.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Profiling.ProfilerArea.UI">
      <summary>
        <para>UI statistics.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Profiling.ProfilerArea.UIDetails">
      <summary>
        <para>Detailed UI statistics.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Profiling.ProfilerArea.Video">
      <summary>
        <para>Video playback statistics.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Profiling.ProfilerArea.VirtualTexturing">
      <summary>
        <para>Virtual Texturing statistics.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Profiling.Recorder">
      <summary>
        <para>Records profiling data produced by a specific Sampler.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Profiling.Recorder.elapsedNanoseconds">
      <summary>
        <para>Accumulated time of Begin/End pairs for the previous frame in nanoseconds. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Profiling.Recorder.enabled">
      <summary>
        <para>Enables recording.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Profiling.Recorder.gpuElapsedNanoseconds">
      <summary>
        <para>Gets the accumulated GPU time, in nanoseconds, for a frame. The Recorder has a three frame delay so this gives the timings for the frame that was three frames before the one that you access this property on. (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Profiling.Recorder.gpuSampleBlockCount">
      <summary>
        <para>Gets the number of Begin/End time pairs that the GPU executed during a frame. The Recorder has a three frame delay so this gives the timings for the frame that was three frames before the one that you access this property on. (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Profiling.Recorder.isValid">
      <summary>
        <para>Returns true if Recorder is valid and can collect data. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Profiling.Recorder.sampleBlockCount">
      <summary>
        <para>Number of time Begin/End pairs was called during the previous frame. (Read Only)</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Profiling.Recorder.CollectFromAllThreads">
      <summary>
        <para>Configures the recorder to collect samples from all threads.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Profiling.Recorder.FilterToCurrentThread">
      <summary>
        <para>Configures the recorder to only collect data from the current thread.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Profiling.Recorder.Get(System.String)">
      <summary>
        <para>Use this function to get a Recorder for the specific Profiler label.</para>
      </summary>
      <param name="samplerName">Sampler name.</param>
      <returns>
        <para>Recorder object for the specified Sampler.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Profiling.Sampler">
      <summary>
        <para>Provides control over a CPU Profiler label.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Profiling.Sampler.isValid">
      <summary>
        <para>Returns true if Sampler is valid. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Profiling.Sampler.name">
      <summary>
        <para>Sampler name. (Read Only)</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Profiling.Sampler.Get(System.String)">
      <summary>
        <para>Returns Sampler object for the specific CPU Profiler label.</para>
      </summary>
      <param name="name">Profiler Sampler name.</param>
      <returns>
        <para>Sampler object which represents specific profiler label.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Profiling.Sampler.GetNames(System.Collections.Generic.List`1&lt;System.String&gt;)">
      <summary>
        <para>Returns number and names of all registered Profiler labels.</para>
      </summary>
      <param name="names">Preallocated list the Sampler names are written to. Or null if you want to get number of Samplers only.</param>
      <returns>
        <para>Number of active Samplers.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Profiling.Sampler.GetRecorder">
      <summary>
        <para>Returns Recorder associated with the Sampler.</para>
      </summary>
      <returns>
        <para>Recorder object associated with the Sampler.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Projector">
      <summary>
        <para>A script interface for a.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Projector.aspectRatio">
      <summary>
        <para>The aspect ratio of the projection.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Projector.farClipPlane">
      <summary>
        <para>The far clipping plane distance.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Projector.fieldOfView">
      <summary>
        <para>The field of view of the projection in degrees.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Projector.ignoreLayers">
      <summary>
        <para>Which object layers are ignored by the projector.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Projector.material">
      <summary>
        <para>The material that will be projected onto every object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Projector.nearClipPlane">
      <summary>
        <para>The near clipping plane distance.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Projector.orthographic">
      <summary>
        <para>Is the projection orthographic (true) or perspective (false)?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Projector.orthographicSize">
      <summary>
        <para>Projection's half-size when in orthographic mode.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PropertyAttribute">
      <summary>
        <para>Base class to derive custom property attributes from. Use this to create custom attributes for script variables.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PropertyAttribute.order">
      <summary>
        <para>Optional field to specify the order that multiple DecorationDrawers should be drawn in.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PropertyName">
      <summary>
        <para>Represents a string as an int for efficient lookup and comparison. Use this for common PropertyNames.

Internally stores just an int to represent the string. A PropertyName can be created from a string but can not be converted back to a string. The same string always results in the same int representing that string. Thus this is a very efficient string representation in both memory and speed when all you need is comparison.

PropertyName is serializable.

ToString() is only implemented for debugging purposes in the editor it returns "theName:3737" in the player it returns "Unknown:3737".</para>
      </summary>
    </member>
    <member name="M:UnityEngine.PropertyName.#ctor(System.String)">
      <summary>
        <para>Initializes the PropertyName using a string.</para>
      </summary>
      <param name="name"></param>
    </member>
    <member name="M:UnityEngine.PropertyName.Equals(System.Object)">
      <summary>
        <para>Determines whether this instance and a specified object, which must also be a PropertyName object, have the same value.</para>
      </summary>
      <param name="other"></param>
    </member>
    <member name="M:UnityEngine.PropertyName.GetHashCode">
      <summary>
        <para>Returns the hash code for this PropertyName.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.PropertyName.implop_PropertyName(string)(System.String)">
      <summary>
        <para>Converts the string passed into a PropertyName. See Also: PropertyName.ctor(System.String).</para>
      </summary>
      <param name="name"></param>
    </member>
    <member name="M:UnityEngine.PropertyName.IsNullOrEmpty(UnityEngine.PropertyName)">
      <summary>
        <para>Indicates whether the specified PropertyName is an Empty string.</para>
      </summary>
      <param name="prop"></param>
    </member>
    <member name="?:UnityEngine.PropertyName.op_Equal(UnityEngine.PropertyName,UnityEngine.PropertyName)">
      <summary>
        <para>Determines whether two specified PropertyName have the same string value. Because two PropertyNames initialized with the same string value always have the same name index, we can simply perform a comparison of two ints to find out if the string value equals.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member name="?:UnityEngine.PropertyName.op_NotEqual(UnityEngine.PropertyName,UnityEngine.PropertyName)">
      <summary>
        <para>Determines whether two specified PropertyName have a different string value.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member name="M:UnityEngine.PropertyName.ToString">
      <summary>
        <para>For debugging purposes only. Returns the string value representing the string in the Editor.
Returns "UnityEngine.PropertyName" in the player.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.QualitySettings">
      <summary>
        <para>Script interface for.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.activeColorSpace">
      <summary>
        <para>Active color space (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.anisotropicFiltering">
      <summary>
        <para>Global anisotropic filtering mode.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.antiAliasing">
      <summary>
        <para>Set The AA Filtering option.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.asyncUploadBufferSize">
      <summary>
        <para>Asynchronous texture and mesh data upload provides timesliced async texture and mesh data upload on the render thread with tight control over memory and timeslicing. There are no allocations except for the ones which driver has to do. To read data and upload texture and mesh data, Unity re-uses a ringbuffer whose size can be controlled.

Use asyncUploadBufferSize to set the buffer size for asynchronous texture and mesh data uploads. The size is in megabytes. The minimum value is 2 and the maximum value is 512. The buffer resizes automatically to fit the largest texture currently loading. To avoid re-sizing of the buffer, which can incur performance cost, set the value approximately to the size of biggest texture used in the Scene.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.asyncUploadPersistentBuffer">
      <summary>
        <para>This flag controls if the async upload pipeline's ring buffer remains allocated when there are no active loading operations.
Set this to true, to make the ring buffer allocation persist after all upload operations have completed.
If you have issues with excessive memory usage, you can set this to false. This means you reduce the runtime memory footprint, but memory fragmentation can occur.
The default value is true.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.asyncUploadTimeSlice">
      <summary>
        <para>Async texture upload provides timesliced async texture upload on the render thread with tight control over memory and timeslicing. There are no allocations except for the ones which driver has to do. To read data and upload texture data a ringbuffer whose size can be controlled is re-used.

Use asyncUploadTimeSlice to set the time-slice in milliseconds for asynchronous texture uploads per
frame. Minimum value is 1 and maximum is 33.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.billboardsFaceCameraPosition">
      <summary>
        <para>If enabled, billboards will face towards camera position rather than camera orientation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.desiredColorSpace">
      <summary>
        <para>Desired color space (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.lodBias">
      <summary>
        <para>Global multiplier for the LOD's switching distance.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.masterTextureLimit">
      <summary>
        <para>A texture size limit applied to all textures.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.maximumLODLevel">
      <summary>
        <para>A maximum LOD level. All LOD groups.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.maxQueuedFrames">
      <summary>
        <para>Maximum number of frames queued up by graphics driver.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.names">
      <summary>
        <para>The indexed list of available Quality Settings.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.particleRaycastBudget">
      <summary>
        <para>Budget for how many ray casts can be performed per frame for approximate collision testing.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.pixelLightCount">
      <summary>
        <para>The maximum number of pixel lights that should affect any object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.realtimeReflectionProbes">
      <summary>
        <para>Enables realtime reflection probes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.renderPipeline">
      <summary>
        <para>The RenderPipelineAsset for this quality level</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.resolutionScalingFixedDPIFactor">
      <summary>
        <para>In resolution scaling mode, this factor is used to multiply with the target Fixed DPI specified to get the actual Fixed DPI to use for this quality setting.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.shadowCascade2Split">
      <summary>
        <para>The normalized cascade distribution for a 2 cascade setup. The value defines the position of the cascade with respect to Zero.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.shadowCascade4Split">
      <summary>
        <para>The normalized cascade start position for a 4 cascade setup. Each member of the vector defines the normalized position of the coresponding cascade with respect to Zero.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.shadowCascades">
      <summary>
        <para>Number of cascades to use for directional light shadows.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.shadowDistance">
      <summary>
        <para>Shadow drawing distance.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.shadowmaskMode">
      <summary>
        <para>The rendering mode of Shadowmask.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.shadowNearPlaneOffset">
      <summary>
        <para>Offset shadow frustum near plane.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.shadowProjection">
      <summary>
        <para>Directional light shadow projection.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.shadowResolution">
      <summary>
        <para>The default resolution of the shadow maps.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.shadows">
      <summary>
        <para>Realtime Shadows type to be used.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.skinWeights">
      <summary>
        <para>The maximum number of bones per vertex that are taken into account during skinning, for all meshes in the project.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.softParticles">
      <summary>
        <para>Should soft blending be used for particles?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.softVegetation">
      <summary>
        <para>Use a two-pass shader for the vegetation in the terrain engine.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.streamingMipmapsActive">
      <summary>
        <para>Enable automatic streaming of texture mipmap levels based on their distance from all active cameras.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.streamingMipmapsAddAllCameras">
      <summary>
        <para>Process all enabled Cameras for texture streaming (rather than just those with StreamingController components).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.streamingMipmapsMaxFileIORequests">
      <summary>
        <para>The maximum number of active texture file IO requests from the texture streaming system.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.streamingMipmapsMaxLevelReduction">
      <summary>
        <para>The maximum number of mipmap levels to discard for each texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.streamingMipmapsMemoryBudget">
      <summary>
        <para>The total amount of memory to be used by streaming and non-streaming textures.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.streamingMipmapsRenderersPerFrame">
      <summary>
        <para>The number of renderer instances that are processed each frame when calculating which texture mipmap levels should be streamed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.vSyncCount">
      <summary>
        <para>The VSync Count.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.QualitySettings.DecreaseLevel(System.Boolean)">
      <summary>
        <para>Decrease the current quality level.</para>
      </summary>
      <param name="applyExpensiveChanges">Should expensive changes be applied (Anti-aliasing etc).</param>
    </member>
    <member name="M:UnityEngine.QualitySettings.GetQualityLevel">
      <summary>
        <para>Returns the current graphics quality level.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.QualitySettings.GetRenderPipelineAssetAt(System.Int32)">
      <summary>
        <para>Get the Render Pipeline Asset assigned at the specified quality level.</para>
      </summary>
      <param name="index">Index of the quality level to check.</param>
      <returns>
        <para>Null if the quality level was not found or there is no assigned SRP Asset for this level, otherwise the SRP Asset assigned for this quality level.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.QualitySettings.IncreaseLevel(System.Boolean)">
      <summary>
        <para>Increase the current quality level.</para>
      </summary>
      <param name="applyExpensiveChanges">Should expensive changes be applied (Anti-aliasing etc).</param>
    </member>
    <member name="M:UnityEngine.QualitySettings.SetQualityLevel(System.Int32,System.Boolean)">
      <summary>
        <para>Sets a new graphics quality level.</para>
      </summary>
      <param name="index">Quality index to set.</param>
      <param name="applyExpensiveChanges">Should expensive changes be applied (Anti-aliasing etc).</param>
    </member>
    <member name="T:UnityEngine.Quaternion">
      <summary>
        <para>Quaternions are used to represent rotations.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Quaternion.eulerAngles">
      <summary>
        <para>Returns or sets the euler angle representation of the rotation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Quaternion.identity">
      <summary>
        <para>The identity rotation (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Quaternion.normalized">
      <summary>
        <para>Returns this quaternion with a magnitude of 1 (Read Only).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Quaternion.w">
      <summary>
        <para>W component of the Quaternion. Do not directly modify quaternions.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Quaternion.x">
      <summary>
        <para>X component of the Quaternion. Don't modify this directly unless you know quaternions inside out.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Quaternion.y">
      <summary>
        <para>Y component of the Quaternion. Don't modify this directly unless you know quaternions inside out.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Quaternion.z">
      <summary>
        <para>Z component of the Quaternion. Don't modify this directly unless you know quaternions inside out.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Quaternion.Angle(UnityEngine.Quaternion,UnityEngine.Quaternion)">
      <summary>
        <para>Returns the angle in degrees between two rotations a and b.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="M:UnityEngine.Quaternion.AngleAxis(System.Single,UnityEngine.Vector3)">
      <summary>
        <para>Creates a rotation which rotates angle degrees around axis.</para>
      </summary>
      <param name="angle"></param>
      <param name="axis"></param>
    </member>
    <member name="M:UnityEngine.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Constructs new Quaternion with given x,y,z,w components.</para>
      </summary>
      <param name="x"></param>
      <param name="y"></param>
      <param name="z"></param>
      <param name="w"></param>
    </member>
    <member name="M:UnityEngine.Quaternion.Dot(UnityEngine.Quaternion,UnityEngine.Quaternion)">
      <summary>
        <para>The dot product between two rotations.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="M:UnityEngine.Quaternion.Euler(System.Single,System.Single,System.Single)">
      <summary>
        <para>Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis; applied in that order.</para>
      </summary>
      <param name="x"></param>
      <param name="y"></param>
      <param name="z"></param>
    </member>
    <member name="M:UnityEngine.Quaternion.Euler(UnityEngine.Vector3)">
      <summary>
        <para>Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis.</para>
      </summary>
      <param name="euler"></param>
    </member>
    <member name="M:UnityEngine.Quaternion.FromToRotation(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Creates a rotation which rotates from fromDirection to toDirection.</para>
      </summary>
      <param name="fromDirection"></param>
      <param name="toDirection"></param>
    </member>
    <member name="M:UnityEngine.Quaternion.Inverse(UnityEngine.Quaternion)">
      <summary>
        <para>Returns the Inverse of rotation.</para>
      </summary>
      <param name="rotation"></param>
    </member>
    <member name="M:UnityEngine.Quaternion.Lerp(UnityEngine.Quaternion,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Interpolates between a and b by t and normalizes the result afterwards. The parameter t is clamped to the range [0, 1].</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
      <param name="t"></param>
    </member>
    <member name="M:UnityEngine.Quaternion.LerpUnclamped(UnityEngine.Quaternion,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Interpolates between a and b by t and normalizes the result afterwards. The parameter t is not clamped.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
      <param name="t"></param>
    </member>
    <member name="M:UnityEngine.Quaternion.LookRotation(UnityEngine.Vector3)">
      <summary>
        <para>Creates a rotation with the specified forward and upwards directions.</para>
      </summary>
      <param name="forward">The direction to look in.</param>
      <param name="upwards">The vector that defines in which direction up is.</param>
    </member>
    <member name="M:UnityEngine.Quaternion.LookRotation(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Creates a rotation with the specified forward and upwards directions.</para>
      </summary>
      <param name="forward">The direction to look in.</param>
      <param name="upwards">The vector that defines in which direction up is.</param>
    </member>
    <member name="M:UnityEngine.Quaternion.Normalize(UnityEngine.Quaternion)">
      <summary>
        <para>Converts this quaternion to one with the same orientation but with a magnitude of 1.</para>
      </summary>
      <param name="q"></param>
    </member>
    <member name="?:UnityEngine.Quaternion.op_Equal(UnityEngine.Quaternion,UnityEngine.Quaternion)">
      <summary>
        <para>Are two quaternions equal to each other?</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member name="?:UnityEngine.Quaternion.op_Multiply(UnityEngine.Quaternion,UnityEngine.Quaternion)">
      <summary>
        <para>Combines rotations lhs and rhs.</para>
      </summary>
      <param name="lhs">Left-hand side quaternion.</param>
      <param name="rhs">Right-hand side quaternion.</param>
    </member>
    <member name="?:UnityEngine.Quaternion.op_Multiply(UnityEngine.Quaternion,UnityEngine.Vector3)">
      <summary>
        <para>Rotates the point point with rotation.</para>
      </summary>
      <param name="rotation"></param>
      <param name="point"></param>
    </member>
    <member name="M:UnityEngine.Quaternion.RotateTowards(UnityEngine.Quaternion,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Rotates a rotation from towards to.</para>
      </summary>
      <param name="from"></param>
      <param name="to"></param>
      <param name="maxDegreesDelta"></param>
    </member>
    <member name="M:UnityEngine.Quaternion.Set(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Set x, y, z and w components of an existing Quaternion.</para>
      </summary>
      <param name="newX"></param>
      <param name="newY"></param>
      <param name="newZ"></param>
      <param name="newW"></param>
    </member>
    <member name="M:UnityEngine.Quaternion.SetFromToRotation(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Creates a rotation which rotates from fromDirection to toDirection.</para>
      </summary>
      <param name="fromDirection"></param>
      <param name="toDirection"></param>
    </member>
    <member name="M:UnityEngine.Quaternion.SetLookRotation(UnityEngine.Vector3)">
      <summary>
        <para>Creates a rotation with the specified forward and upwards directions.</para>
      </summary>
      <param name="view">The direction to look in.</param>
      <param name="up">The vector that defines in which direction up is.</param>
    </member>
    <member name="M:UnityEngine.Quaternion.SetLookRotation(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Creates a rotation with the specified forward and upwards directions.</para>
      </summary>
      <param name="view">The direction to look in.</param>
      <param name="up">The vector that defines in which direction up is.</param>
    </member>
    <member name="M:UnityEngine.Quaternion.Slerp(UnityEngine.Quaternion,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Spherically interpolates between quaternions a and b by ratio t. The parameter t is clamped to the range [0, 1].</para>
      </summary>
      <param name="a">Start value, returned when t = 0.</param>
      <param name="b">End value, returned when t = 1.</param>
      <param name="t">Interpolation ratio.</param>
      <returns>
        <para>A quaternion spherically interpolated between quaternions a and b.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Quaternion.SlerpUnclamped(UnityEngine.Quaternion,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Spherically interpolates between a and b by t. The parameter t is not clamped.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
      <param name="t"></param>
    </member>
    <member name="P:UnityEngine.Quaternion.this">
      <summary>
        <para>Access the x, y, z, w components using [0], [1], [2], [3] respectively.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Quaternion.ToAngleAxis(System.Single&amp;,UnityEngine.Vector3&amp;)">
      <summary>
        <para>Converts a rotation to angle-axis representation (angles in degrees).</para>
      </summary>
      <param name="angle"></param>
      <param name="axis"></param>
    </member>
    <member name="M:UnityEngine.Quaternion.ToString">
      <summary>
        <para>Returns a formatted string of the Quaternion.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="M:UnityEngine.Quaternion.ToString(System.String)">
      <summary>
        <para>Returns a formatted string of the Quaternion.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="M:UnityEngine.Quaternion.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Returns a formatted string of the Quaternion.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="T:UnityEngine.Random">
      <summary>
        <para>Easily generate random data for games.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Random.insideUnitCircle">
      <summary>
        <para>Returns a random point inside or on a circle with radius 1.0 (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Random.insideUnitSphere">
      <summary>
        <para>Returns a random point inside or on a sphere with radius 1.0 (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Random.onUnitSphere">
      <summary>
        <para>Returns a random point on the surface of a sphere with radius 1.0 (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Random.rotation">
      <summary>
        <para>Returns a random rotation (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Random.rotationUniform">
      <summary>
        <para>Returns a random rotation with uniform distribution (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Random.state">
      <summary>
        <para>Gets or sets the full internal state of the random number generator.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Random.value">
      <summary>
        <para>Returns a random float within [0.0..1.0] (range is inclusive) (Read Only).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Random.ColorHSV">
      <summary>
        <para>Generates a random color from HSV and alpha ranges.</para>
      </summary>
      <param name="hueMin">Minimum hue [0..1].</param>
      <param name="hueMax">Maximum hue [0..1].</param>
      <param name="saturationMin">Minimum saturation [0..1].</param>
      <param name="saturationMax">Maximum saturation [0..1].</param>
      <param name="valueMin">Minimum value [0..1].</param>
      <param name="valueMax">Maximum value [0..1].</param>
      <param name="alphaMin">Minimum alpha [0..1].</param>
      <param name="alphaMax">Maximum alpha [0..1].</param>
      <returns>
        <para>A random color with HSV and alpha values in the (inclusive) input ranges. Values for each component are derived via linear interpolation of value.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Random.ColorHSV(System.Single,System.Single)">
      <summary>
        <para>Generates a random color from HSV and alpha ranges.</para>
      </summary>
      <param name="hueMin">Minimum hue [0..1].</param>
      <param name="hueMax">Maximum hue [0..1].</param>
      <param name="saturationMin">Minimum saturation [0..1].</param>
      <param name="saturationMax">Maximum saturation [0..1].</param>
      <param name="valueMin">Minimum value [0..1].</param>
      <param name="valueMax">Maximum value [0..1].</param>
      <param name="alphaMin">Minimum alpha [0..1].</param>
      <param name="alphaMax">Maximum alpha [0..1].</param>
      <returns>
        <para>A random color with HSV and alpha values in the (inclusive) input ranges. Values for each component are derived via linear interpolation of value.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Random.ColorHSV(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Generates a random color from HSV and alpha ranges.</para>
      </summary>
      <param name="hueMin">Minimum hue [0..1].</param>
      <param name="hueMax">Maximum hue [0..1].</param>
      <param name="saturationMin">Minimum saturation [0..1].</param>
      <param name="saturationMax">Maximum saturation [0..1].</param>
      <param name="valueMin">Minimum value [0..1].</param>
      <param name="valueMax">Maximum value [0..1].</param>
      <param name="alphaMin">Minimum alpha [0..1].</param>
      <param name="alphaMax">Maximum alpha [0..1].</param>
      <returns>
        <para>A random color with HSV and alpha values in the (inclusive) input ranges. Values for each component are derived via linear interpolation of value.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Random.ColorHSV(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Generates a random color from HSV and alpha ranges.</para>
      </summary>
      <param name="hueMin">Minimum hue [0..1].</param>
      <param name="hueMax">Maximum hue [0..1].</param>
      <param name="saturationMin">Minimum saturation [0..1].</param>
      <param name="saturationMax">Maximum saturation [0..1].</param>
      <param name="valueMin">Minimum value [0..1].</param>
      <param name="valueMax">Maximum value [0..1].</param>
      <param name="alphaMin">Minimum alpha [0..1].</param>
      <param name="alphaMax">Maximum alpha [0..1].</param>
      <returns>
        <para>A random color with HSV and alpha values in the (inclusive) input ranges. Values for each component are derived via linear interpolation of value.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Random.ColorHSV(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Generates a random color from HSV and alpha ranges.</para>
      </summary>
      <param name="hueMin">Minimum hue [0..1].</param>
      <param name="hueMax">Maximum hue [0..1].</param>
      <param name="saturationMin">Minimum saturation [0..1].</param>
      <param name="saturationMax">Maximum saturation [0..1].</param>
      <param name="valueMin">Minimum value [0..1].</param>
      <param name="valueMax">Maximum value [0..1].</param>
      <param name="alphaMin">Minimum alpha [0..1].</param>
      <param name="alphaMax">Maximum alpha [0..1].</param>
      <returns>
        <para>A random color with HSV and alpha values in the (inclusive) input ranges. Values for each component are derived via linear interpolation of value.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Random.InitState(System.Int32)">
      <summary>
        <para>Initializes the random number generator state with a seed.</para>
      </summary>
      <param name="seed">Seed used to initialize the random number generator.</param>
    </member>
    <member name="M:UnityEngine.Random.Range(System.Single,System.Single)">
      <summary>
        <para>Returns a random float within [minInclusive..maxInclusive] (range is inclusive).</para>
      </summary>
      <param name="minInclusive"></param>
      <param name="maxInclusive"></param>
    </member>
    <member name="M:UnityEngine.Random.Range(System.Int32,System.Int32)">
      <summary>
        <para>Return a random int within [minInclusive..maxExclusive) (Read Only).</para>
      </summary>
      <param name="minInclusive"></param>
      <param name="maxExclusive"></param>
    </member>
    <member name="T:UnityEngine.Random.State">
      <summary>
        <para>Serializable structure used to hold the full internal state of the random number generator. See Also: Random.state.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RangeAttribute">
      <summary>
        <para>Attribute used to make a float or int variable in a script be restricted to a specific range.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RangeAttribute.#ctor(System.Single,System.Single)">
      <summary>
        <para>Attribute used to make a float or int variable in a script be restricted to a specific range.</para>
      </summary>
      <param name="min">The minimum allowed value.</param>
      <param name="max">The maximum allowed value.</param>
    </member>
    <member name="T:UnityEngine.RangeInt">
      <summary>
        <para>Describes an integer range.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RangeInt.end">
      <summary>
        <para>The end index of the range (not inclusive).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RangeInt.length">
      <summary>
        <para>The length of the range.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RangeInt.start">
      <summary>
        <para>The starting index of the range, where 0 is the first position, 1 is the second, 2 is the third, and so on.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RangeInt.#ctor(System.Int32,System.Int32)">
      <summary>
        <para>Constructs a new RangeInt with given start, length values.</para>
      </summary>
      <param name="start">The starting index of the range.</param>
      <param name="length">The length of the range.</param>
    </member>
    <member name="T:UnityEngine.Ray">
      <summary>
        <para>Representation of rays.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Ray.direction">
      <summary>
        <para>The direction of the ray.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Ray.origin">
      <summary>
        <para>The origin point of the ray.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Ray.#ctor(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Creates a ray starting at origin along direction.</para>
      </summary>
      <param name="origin"></param>
      <param name="direction"></param>
    </member>
    <member name="M:UnityEngine.Ray.GetPoint(System.Single)">
      <summary>
        <para>Returns a point at distance units along the ray.</para>
      </summary>
      <param name="distance"></param>
    </member>
    <member name="M:UnityEngine.Ray.ToString">
      <summary>
        <para>Returns a formatted string for this ray.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="M:UnityEngine.Ray.ToString(System.String)">
      <summary>
        <para>Returns a formatted string for this ray.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="M:UnityEngine.Ray.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Returns a formatted string for this ray.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="T:UnityEngine.Ray2D">
      <summary>
        <para>A ray in 2D space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Ray2D.direction">
      <summary>
        <para>The direction of the ray in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Ray2D.origin">
      <summary>
        <para>The starting point of the ray in world space.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Ray2D.#ctor(UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Creates a 2D ray starting at origin along direction.</para>
      </summary>
      <param name="Vector2">Origin.</param>
      <param name="Vector2">Direction.</param>
      <param name="origin"></param>
      <param name="direction"></param>
    </member>
    <member name="M:UnityEngine.Ray2D.GetPoint(System.Single)">
      <summary>
        <para>Get a point that lies a given distance along a ray.</para>
      </summary>
      <param name="distance">Distance of the desired point along the path of the ray.</param>
    </member>
    <member name="M:UnityEngine.Ray2D.ToString">
      <summary>
        <para>Returns a formatted string for this 2D ray.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="M:UnityEngine.Ray2D.ToString(System.String)">
      <summary>
        <para>Returns a formatted string for this 2D ray.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="M:UnityEngine.Ray2D.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Returns a formatted string for this 2D ray.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="T:UnityEngine.ReceiveGI">
      <summary>
        <para>This property only takes effect if you enable a global illumination setting such as for the GameObject associated with the target Mesh Renderer. Otherwise this property defaults to the Light Probes setting.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ReceiveGI.Lightmaps">
      <summary>
        <para>Makes the GameObject use lightmaps to receive Global Illumination.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ReceiveGI.LightProbes">
      <summary>
        <para>The object will have the option to use Light Probes to receive Global Illumination. See Rendering.LightProbeUsage.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rect">
      <summary>
        <para>A 2D Rectangle defined by X and Y position, width and height.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rect.center">
      <summary>
        <para>The position of the center of the rectangle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rect.height">
      <summary>
        <para>The height of the rectangle, measured from the Y position.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rect.max">
      <summary>
        <para>The position of the maximum corner of the rectangle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rect.min">
      <summary>
        <para>The position of the minimum corner of the rectangle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rect.position">
      <summary>
        <para>The X and Y position of the rectangle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rect.size">
      <summary>
        <para>The width and height of the rectangle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rect.width">
      <summary>
        <para>The width of the rectangle, measured from the X position.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rect.x">
      <summary>
        <para>The X coordinate of the rectangle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rect.xMax">
      <summary>
        <para>The maximum X coordinate of the rectangle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rect.xMin">
      <summary>
        <para>The minimum X coordinate of the rectangle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rect.y">
      <summary>
        <para>The Y coordinate of the rectangle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rect.yMax">
      <summary>
        <para>The maximum Y coordinate of the rectangle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rect.yMin">
      <summary>
        <para>The minimum Y coordinate of the rectangle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rect.zero">
      <summary>
        <para>Shorthand for writing new Rect(0,0,0,0).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rect.Contains(UnityEngine.Vector2)">
      <summary>
        <para>Returns true if the x and y components of point is a point inside this rectangle. If allowInverse is present and true, the width and height of the Rect are allowed to take negative values (ie, the min value is greater than the max), and the test will still work.</para>
      </summary>
      <param name="point">Point to test.</param>
      <param name="allowInverse">Does the test allow the Rect's width and height to be negative?</param>
      <returns>
        <para>True if the point lies within the specified rectangle.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rect.Contains(UnityEngine.Vector3)">
      <summary>
        <para>Returns true if the x and y components of point is a point inside this rectangle. If allowInverse is present and true, the width and height of the Rect are allowed to take negative values (ie, the min value is greater than the max), and the test will still work.</para>
      </summary>
      <param name="point">Point to test.</param>
      <param name="allowInverse">Does the test allow the Rect's width and height to be negative?</param>
      <returns>
        <para>True if the point lies within the specified rectangle.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rect.Contains(UnityEngine.Vector3,System.Boolean)">
      <summary>
        <para>Returns true if the x and y components of point is a point inside this rectangle. If allowInverse is present and true, the width and height of the Rect are allowed to take negative values (ie, the min value is greater than the max), and the test will still work.</para>
      </summary>
      <param name="point">Point to test.</param>
      <param name="allowInverse">Does the test allow the Rect's width and height to be negative?</param>
      <returns>
        <para>True if the point lies within the specified rectangle.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rect.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Creates a new rectangle.</para>
      </summary>
      <param name="x">The X value the rect is measured from.</param>
      <param name="y">The Y value the rect is measured from.</param>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
    </member>
    <member name="M:UnityEngine.Rect.#ctor(UnityEngine.Rect)">
      <summary>
        <para></para>
      </summary>
      <param name="source"></param>
    </member>
    <member name="M:UnityEngine.Rect.#ctor(UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Creates a rectangle given a size and position.</para>
      </summary>
      <param name="position">The position of the minimum corner of the rect.</param>
      <param name="size">The width and height of the rect.</param>
    </member>
    <member name="M:UnityEngine.Rect.MinMaxRect(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Creates a rectangle from min/max coordinate values.</para>
      </summary>
      <param name="xmin">The minimum X coordinate.</param>
      <param name="ymin">The minimum Y coordinate.</param>
      <param name="xmax">The maximum X coordinate.</param>
      <param name="ymax">The maximum Y coordinate.</param>
      <returns>
        <para>A rectangle matching the specified coordinates.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rect.NormalizedToPoint(UnityEngine.Rect,UnityEngine.Vector2)">
      <summary>
        <para>Returns a point inside a rectangle, given normalized coordinates.</para>
      </summary>
      <param name="rectangle">Rectangle to get a point inside.</param>
      <param name="normalizedRectCoordinates">Normalized coordinates to get a point for.</param>
    </member>
    <member name="?:UnityEngine.Rect.op_Equal(UnityEngine.Rect,UnityEngine.Rect)">
      <summary>
        <para>Returns true if the rectangles are the same.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member name="M:UnityEngine.Rect.Overlaps(UnityEngine.Rect)">
      <summary>
        <para>Returns true if the other rectangle overlaps this one. If allowInverse is present and true, the widths and heights of the Rects are allowed to take negative values (ie, the min value is greater than the max), and the test will still work.</para>
      </summary>
      <param name="other">Other rectangle to test overlapping with.</param>
      <param name="allowInverse">Does the test allow the widths and heights of the Rects to be negative?</param>
    </member>
    <member name="M:UnityEngine.Rect.Overlaps(UnityEngine.Rect,System.Boolean)">
      <summary>
        <para>Returns true if the other rectangle overlaps this one. If allowInverse is present and true, the widths and heights of the Rects are allowed to take negative values (ie, the min value is greater than the max), and the test will still work.</para>
      </summary>
      <param name="other">Other rectangle to test overlapping with.</param>
      <param name="allowInverse">Does the test allow the widths and heights of the Rects to be negative?</param>
    </member>
    <member name="M:UnityEngine.Rect.PointToNormalized(UnityEngine.Rect,UnityEngine.Vector2)">
      <summary>
        <para>Returns the normalized coordinates cooresponding the the point.</para>
      </summary>
      <param name="rectangle">Rectangle to get normalized coordinates inside.</param>
      <param name="point">A point inside the rectangle to get normalized coordinates for.</param>
    </member>
    <member name="M:UnityEngine.Rect.Set(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Set components of an existing Rect.</para>
      </summary>
      <param name="x"></param>
      <param name="y"></param>
      <param name="width"></param>
      <param name="height"></param>
    </member>
    <member name="M:UnityEngine.Rect.ToString">
      <summary>
        <para>Returns a formatted string for this Rect.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="M:UnityEngine.Rect.ToString(System.String)">
      <summary>
        <para>Returns a formatted string for this Rect.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="M:UnityEngine.Rect.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Returns a formatted string for this Rect.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="T:UnityEngine.RectInt">
      <summary>
        <para>A 2D Rectangle defined by x, y, width, height with integers.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectInt.allPositionsWithin">
      <summary>
        <para>A RectInt.PositionCollection that contains all positions within the RectInt.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectInt.center">
      <summary>
        <para>Center coordinate of the rectangle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectInt.height">
      <summary>
        <para>Height of the rectangle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectInt.max">
      <summary>
        <para>The upper right corner of the rectangle; which is the maximal position of the rectangle along the x- and y-axes, when it is aligned to both axes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectInt.min">
      <summary>
        <para>The lower left corner of the rectangle; which is the minimal position of the rectangle along the x- and y-axes, when it is aligned to both axes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectInt.position">
      <summary>
        <para>Returns the position (x, y) of the RectInt.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectInt.size">
      <summary>
        <para>Returns the width and height of the RectInt.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectInt.width">
      <summary>
        <para>Width of the rectangle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectInt.x">
      <summary>
        <para>Left coordinate of the rectangle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectInt.xMax">
      <summary>
        <para>Shows the maximum X value of the RectInt.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectInt.xMin">
      <summary>
        <para>Shows the minimum X value of the RectInt.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectInt.y">
      <summary>
        <para>Top coordinate of the rectangle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectInt.yMax">
      <summary>
        <para>Shows the maximum Y value of the RectInt.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectInt.yMin">
      <summary>
        <para>Show the minimum Y value of the RectInt.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RectInt.ClampToBounds(UnityEngine.RectInt)">
      <summary>
        <para>Clamps the position and size of the RectInt to the given bounds.</para>
      </summary>
      <param name="bounds">Bounds to clamp the RectInt.</param>
    </member>
    <member name="M:UnityEngine.RectInt.Contains(UnityEngine.Vector2Int)">
      <summary>
        <para>Returns true if the given position is within the RectInt.</para>
      </summary>
      <param name="position">Position to check.</param>
      <returns>
        <para>Whether the position is within the RectInt.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.RectInt.Equals(UnityEngine.RectInt)">
      <summary>
        <para>Returns true if the given RectInt is equal to this RectInt.</para>
      </summary>
      <param name="other"></param>
    </member>
    <member name="M:UnityEngine.RectInt.Overlaps(UnityEngine.RectInt)">
      <summary>
        <para>RectInts overlap if each RectInt Contains a shared point.</para>
      </summary>
      <param name="other">Other rectangle to test overlapping with.</param>
      <returns>
        <para>True if the other rectangle overlaps this one.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.RectInt.PositionEnumerator">
      <summary>
        <para>An iterator that allows you to iterate over all positions within the RectInt.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectInt.PositionEnumerator.Current">
      <summary>
        <para>Current position of the enumerator.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RectInt.PositionEnumerator.GetEnumerator">
      <summary>
        <para>Returns this as an iterator that allows you to iterate over all positions within the RectInt.</para>
      </summary>
      <returns>
        <para>This RectInt.PositionEnumerator.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.RectInt.PositionEnumerator.MoveNext">
      <summary>
        <para>Moves the enumerator to the next position.</para>
      </summary>
      <returns>
        <para>Whether the enumerator has successfully moved to the next position.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.RectInt.PositionEnumerator.Reset">
      <summary>
        <para>Resets this enumerator to its starting state.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RectInt.SetMinMax(UnityEngine.Vector2Int,UnityEngine.Vector2Int)">
      <summary>
        <para>Sets the bounds to the min and max value of the rect.</para>
      </summary>
      <param name="minPosition"></param>
      <param name="maxPosition"></param>
    </member>
    <member name="M:UnityEngine.RectInt.ToString">
      <summary>
        <para>Returns the x, y, width and height of the RectInt.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="M:UnityEngine.RectInt.ToString(System.String)">
      <summary>
        <para>Returns the x, y, width and height of the RectInt.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="M:UnityEngine.RectInt.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Returns the x, y, width and height of the RectInt.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="T:UnityEngine.RectOffset">
      <summary>
        <para>Offsets for rectangles, borders, etc.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectOffset.bottom">
      <summary>
        <para>Bottom edge size.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectOffset.horizontal">
      <summary>
        <para>Shortcut for left + right. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectOffset.left">
      <summary>
        <para>Left edge size.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectOffset.right">
      <summary>
        <para>Right edge size.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectOffset.top">
      <summary>
        <para>Top edge size.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectOffset.vertical">
      <summary>
        <para>Shortcut for top + bottom. (Read Only)</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RectOffset.Add(UnityEngine.Rect)">
      <summary>
        <para>Add the border offsets to a rect.</para>
      </summary>
      <param name="rect"></param>
    </member>
    <member name="M:UnityEngine.RectOffset.#ctor">
      <summary>
        <para>Creates a new rectangle with offsets.</para>
      </summary>
      <param name="left"></param>
      <param name="right"></param>
      <param name="top"></param>
      <param name="bottom"></param>
    </member>
    <member name="M:UnityEngine.RectOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Creates a new rectangle with offsets.</para>
      </summary>
      <param name="left"></param>
      <param name="right"></param>
      <param name="top"></param>
      <param name="bottom"></param>
    </member>
    <member name="M:UnityEngine.RectOffset.Remove(UnityEngine.Rect)">
      <summary>
        <para>Remove the border offsets from a rect.</para>
      </summary>
      <param name="rect"></param>
    </member>
    <member name="M:UnityEngine.RectOffset.ToString">
      <summary>
        <para>Returns a formatted string for this RectOffset.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="M:UnityEngine.RectOffset.ToString(System.String)">
      <summary>
        <para>Returns a formatted string for this RectOffset.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="M:UnityEngine.RectOffset.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Returns a formatted string for this RectOffset.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="T:UnityEngine.RectTransform">
      <summary>
        <para>Position, size, anchor and pivot information for a rectangle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectTransform.anchoredPosition">
      <summary>
        <para>The position of the pivot of this RectTransform relative to the anchor reference point.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectTransform.anchoredPosition3D">
      <summary>
        <para>The 3D position of the pivot of this RectTransform relative to the anchor reference point.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectTransform.anchorMax">
      <summary>
        <para>The normalized position in the parent RectTransform that the upper right corner is anchored to.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectTransform.anchorMin">
      <summary>
        <para>The normalized position in the parent RectTransform that the lower left corner is anchored to.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectTransform.offsetMax">
      <summary>
        <para>The offset of the upper right corner of the rectangle relative to the upper right anchor.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectTransform.offsetMin">
      <summary>
        <para>The offset of the lower left corner of the rectangle relative to the lower left anchor.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectTransform.pivot">
      <summary>
        <para>The normalized position in this RectTransform that it rotates around.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.RectTransform.reapplyDrivenProperties(UnityEngine.RectTransform/ReapplyDrivenProperties)">
      <summary>
        <para>Event that is invoked for RectTransforms that need to have their driven properties reapplied.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="P:UnityEngine.RectTransform.rect">
      <summary>
        <para>The calculated rectangle in the local space of the Transform.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectTransform.sizeDelta">
      <summary>
        <para>The size of this RectTransform relative to the distances between the anchors.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RectTransform.Axis">
      <summary>
        <para>An axis that can be horizontal or vertical.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RectTransform.Axis.Horizontal">
      <summary>
        <para>Horizontal.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RectTransform.Axis.Vertical">
      <summary>
        <para>Vertical.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RectTransform.Edge">
      <summary>
        <para>Enum used to specify one edge of a rectangle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RectTransform.Edge.Bottom">
      <summary>
        <para>The bottom edge.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RectTransform.Edge.Left">
      <summary>
        <para>The left edge.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RectTransform.Edge.Right">
      <summary>
        <para>The right edge.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RectTransform.Edge.Top">
      <summary>
        <para>The top edge.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RectTransform.ForceUpdateRectTransforms">
      <summary>
        <para>Force the recalculation of RectTransforms internal data.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RectTransform.GetLocalCorners(UnityEngine.Vector3[])">
      <summary>
        <para>Get the corners of the calculated rectangle in the local space of its Transform.</para>
      </summary>
      <param name="fourCornersArray">The array that corners are filled into.</param>
    </member>
    <member name="M:UnityEngine.RectTransform.GetWorldCorners(UnityEngine.Vector3[])">
      <summary>
        <para>Get the corners of the calculated rectangle in world space.</para>
      </summary>
      <param name="fourCornersArray">The array that corners are filled into.</param>
    </member>
    <member name="T:UnityEngine.RectTransform.ReapplyDrivenProperties">
      <summary>
        <para>Delegate used for the reapplyDrivenProperties event.</para>
      </summary>
      <param name="driven"></param>
    </member>
    <member name="M:UnityEngine.RectTransform.SetInsetAndSizeFromParentEdge(UnityEngine.RectTransform/Edge,System.Single,System.Single)">
      <summary>
        <para>Set the distance of this rectangle relative to a specified edge of the parent rectangle, while also setting its size.</para>
      </summary>
      <param name="edge">The edge of the parent rectangle to inset from.</param>
      <param name="inset">The inset distance.</param>
      <param name="size">The size of the rectangle along the same direction of the inset.</param>
    </member>
    <member name="M:UnityEngine.RectTransform.SetSizeWithCurrentAnchors(UnityEngine.RectTransform/Axis,System.Single)">
      <summary>
        <para>Makes the RectTransform calculated rect be a given size on the specified axis.</para>
      </summary>
      <param name="axis">The axis to specify the size along.</param>
      <param name="size">The desired size along the specified axis.</param>
    </member>
    <member name="T:UnityEngine.ReflectionProbe">
      <summary>
        <para>The reflection probe is used to capture the surroundings into a texture which is passed to the shaders and used for reflections.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ReflectionProbe.backgroundColor">
      <summary>
        <para>The color with which the texture of reflection probe will be cleared.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ReflectionProbe.bakedTexture">
      <summary>
        <para>Reference to the baked texture of the reflection probe's surrounding.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ReflectionProbe.blendDistance">
      <summary>
        <para>Distance around probe used for blending (used in deferred probes).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ReflectionProbe.bounds">
      <summary>
        <para>The bounding volume of the reflection probe (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ReflectionProbe.boxProjection">
      <summary>
        <para>Should this reflection probe use box projection?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ReflectionProbe.center">
      <summary>
        <para>The center of the box area in which reflections will be applied to the objects. Measured in the probes's local space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ReflectionProbe.clearFlags">
      <summary>
        <para>How the reflection probe clears the background.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ReflectionProbe.cullingMask">
      <summary>
        <para>This is used to render parts of the reflecion probe's surrounding selectively.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ReflectionProbe.customBakedTexture">
      <summary>
        <para>Reference to the baked texture of the reflection probe's surrounding. Use this to assign custom reflection texture.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.ReflectionProbe.defaultReflectionSet(System.Action`1&lt;UnityEngine.Cubemap&gt;)">
      <summary>
        <para>Adds a delegate to get notifications when the default specular Cubemap is changed.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="P:UnityEngine.ReflectionProbe.defaultTexture">
      <summary>
        <para>Texture which is used outside of all reflection probes (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ReflectionProbe.defaultTextureHDRDecodeValues">
      <summary>
        <para>HDR decode values of the default reflection probe texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ReflectionProbe.farClipPlane">
      <summary>
        <para>The far clipping plane distance when rendering the probe.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ReflectionProbe.hdr">
      <summary>
        <para>Should this reflection probe use HDR rendering?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ReflectionProbe.importance">
      <summary>
        <para>Reflection probe importance.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ReflectionProbe.intensity">
      <summary>
        <para>The intensity modifier that is applied to the texture of reflection probe in the shader.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ReflectionProbe.mode">
      <summary>
        <para>Should reflection probe texture be generated in the Editor (ReflectionProbeMode.Baked) or should probe use custom specified texure (ReflectionProbeMode.Custom)?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ReflectionProbe.nearClipPlane">
      <summary>
        <para>The near clipping plane distance when rendering the probe.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ReflectionProbe.realtimeTexture">
      <summary>
        <para>Reference to the realtime texture of the reflection probe's surroundings. Use this to assign a RenderTexture to use for realtime reflection.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.ReflectionProbe.reflectionProbeChanged(System.Action`2&lt;UnityEngine.ReflectionProbe,UnityEngine.ReflectionProbe/ReflectionProbeEvent&gt;)">
      <summary>
        <para>Adds a delegate to get notifications when a Reflection Probe is added to a Scene or removed from a Scene.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="P:UnityEngine.ReflectionProbe.refreshMode">
      <summary>
        <para>Sets the way the probe will refresh.

See Also: ReflectionProbeRefreshMode.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ReflectionProbe.renderDynamicObjects">
      <summary>
        <para>Specifies whether Unity should render non-static GameObjects into the Reflection Probe. If you set this to true, Unity renders non-static GameObjects into the Reflection Probe. If you set this to false, Unity does not render non-static GameObjects into the Reflection Probe. Unity only takes this property into account if the Reflection Probe's Type is Custom.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ReflectionProbe.resolution">
      <summary>
        <para>Resolution of the underlying reflection texture in pixels.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ReflectionProbe.shadowDistance">
      <summary>
        <para>Shadow drawing distance when rendering the probe.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ReflectionProbe.size">
      <summary>
        <para>The size of the box area in which reflections will be applied to the objects. Measured in the probes's local space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ReflectionProbe.texture">
      <summary>
        <para>Texture which is passed to the shader of the objects in the vicinity of the reflection probe (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ReflectionProbe.textureHDRDecodeValues">
      <summary>
        <para>HDR decode values of the reflection probe texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ReflectionProbe.timeSlicingMode">
      <summary>
        <para>Sets this probe time-slicing mode

See Also: ReflectionProbeTimeSlicingMode.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ReflectionProbe.BlendCubemap(UnityEngine.Texture,UnityEngine.Texture,System.Single,UnityEngine.RenderTexture)">
      <summary>
        <para>Utility method to blend 2 cubemaps into a target render texture.</para>
      </summary>
      <param name="src">Cubemap to blend from.</param>
      <param name="dst">Cubemap to blend to.</param>
      <param name="blend">Blend weight.</param>
      <param name="target">RenderTexture which will hold the result of the blend.</param>
      <returns>
        <para>Returns trues if cubemaps were blended, false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.ReflectionProbe.IsFinishedRendering(System.Int32)">
      <summary>
        <para>Checks if a probe has finished a time-sliced render.</para>
      </summary>
      <param name="renderId">An integer representing the RenderID as returned by the RenderProbe method.</param>
      <returns>
        <para>
          True if the render has finished, false otherwise.

          See Also: timeSlicingMode
        </para>
      </returns>
    </member>
    <member name="T:UnityEngine.ReflectionProbe.ReflectionProbeEvent">
      <summary>
        <para>Types of events that occur when ReflectionProbe components are used in a Scene.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ReflectionProbe.ReflectionProbeEvent.ReflectionProbeAdded">
      <summary>
        <para>An event that occurs when a Reflection Probe component is added to a Scene or enabled in a Scene.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ReflectionProbe.ReflectionProbeEvent.ReflectionProbeRemoved">
      <summary>
        <para>An event that occurs when a Reflection Probe component is unloaded from a Scene or disabled in a Scene.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ReflectionProbe.RenderProbe(UnityEngine.RenderTexture)">
      <summary>
        <para>Refreshes the probe's cubemap.</para>
      </summary>
      <param name="targetTexture">Target RendeTexture in which rendering should be done. Specifying null will update the probe's default texture.</param>
      <returns>
        <para>
          An integer representing a RenderID which can subsequently be used to check if the probe has finished rendering while rendering in time-slice mode.

          See Also: IsFinishedRendering
          See Also: timeSlicingMode
        </para>
      </returns>
    </member>
    <member name="M:UnityEngine.ReflectionProbe.Reset">
      <summary>
        <para>Revert all ReflectionProbe parameters to default.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RenderBuffer">
      <summary>
        <para>Color or depth buffer part of a RenderTexture.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RenderBuffer.GetNativeRenderBufferPtr">
      <summary>
        <para>Returns native RenderBuffer. Be warned this is not native Texture, but rather pointer to unity struct that can be used with native unity API. Currently such API exists only on iOS.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Renderer">
      <summary>
        <para>General functionality for all renderers.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.allowOcclusionWhenDynamic">
      <summary>
        <para>Controls if dynamic occlusion culling should be performed for this renderer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.bounds">
      <summary>
        <para>The bounding volume of the renderer (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.enabled">
      <summary>
        <para>Makes the rendered 3D object visible if enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.forceRenderingOff">
      <summary>
        <para>Allows turning off rendering for a specific component.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.isPartOfStaticBatch">
      <summary>
        <para>Has this renderer been statically batched with any other renderers?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.isVisible">
      <summary>
        <para>Is this renderer visible in any camera? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.lightmapIndex">
      <summary>
        <para>The index of the baked lightmap applied to this renderer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.lightmapScaleOffset">
      <summary>
        <para>The UV scale &amp; offset used for a lightmap.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.lightProbeProxyVolumeOverride">
      <summary>
        <para>If set, the Renderer will use the Light Probe Proxy Volume component attached to the source GameObject.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.lightProbeUsage">
      <summary>
        <para>The light probe interpolation type.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.localToWorldMatrix">
      <summary>
        <para>Matrix that transforms a point from local space into world space (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.material">
      <summary>
        <para>Returns the first instantiated Material assigned to the renderer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.materials">
      <summary>
        <para>Returns all the instantiated materials of this object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.motionVectorGenerationMode">
      <summary>
        <para>Specifies the mode for motion vector rendering.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.motionVectors">
      <summary>
        <para>Specifies whether this renderer has a per-object motion vector pass.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.probeAnchor">
      <summary>
        <para>If set, Renderer will use this Transform's position to find the light or reflection probe.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.rayTracingMode">
      <summary>
        <para>Describes how this renderer is updated for ray tracing.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.realtimeLightmapIndex">
      <summary>
        <para>The index of the realtime lightmap applied to this renderer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.realtimeLightmapScaleOffset">
      <summary>
        <para>The UV scale &amp; offset used for a realtime lightmap.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.receiveShadows">
      <summary>
        <para>Does this object receive shadows?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.reflectionProbeUsage">
      <summary>
        <para>Should reflection probes be used for this Renderer?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.rendererPriority">
      <summary>
        <para>This value sorts renderers by priority. Lower values are rendered first and higher values are rendered last.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.renderingLayerMask">
      <summary>
        <para>Determines which rendering layer this renderer lives on.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.shadowCastingMode">
      <summary>
        <para>Does this object cast shadows?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.sharedMaterial">
      <summary>
        <para>The shared material of this object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.sharedMaterials">
      <summary>
        <para>All the shared materials of this object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.sortingLayerID">
      <summary>
        <para>Unique ID of the Renderer's sorting layer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.sortingLayerName">
      <summary>
        <para>Name of the Renderer's sorting layer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.sortingOrder">
      <summary>
        <para>Renderer's order within a sorting layer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.useLightProbes">
      <summary>
        <para>Should light probes be used for this Renderer?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.worldToLocalMatrix">
      <summary>
        <para>Matrix that transforms a point from world space into local space (Read Only).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Renderer.GetClosestReflectionProbes(System.Collections.Generic.List`1&lt;UnityEngine.Rendering.ReflectionProbeBlendInfo&gt;)">
      <summary>
        <para>Returns an array of closest reflection probes with weights, weight shows how much influence the probe has on the renderer, this value is also used when blending between reflection probes occur.</para>
      </summary>
      <param name="result"></param>
    </member>
    <member name="M:UnityEngine.Renderer.GetMaterials(System.Collections.Generic.List`1&lt;UnityEngine.Material&gt;)">
      <summary>
        <para>Returns all the instantiated materials of this object.</para>
      </summary>
      <param name="m">A list of materials to populate.</param>
    </member>
    <member name="M:UnityEngine.Renderer.GetPropertyBlock(UnityEngine.MaterialPropertyBlock)">
      <summary>
        <para>Get per-Renderer or per-Material property block.</para>
      </summary>
      <param name="properties">Material parameters to retrieve.</param>
      <param name="materialIndex">The index of the Material you want to get overridden parameters from. The index ranges from 0 to Renderer.sharedMaterials.Length-1.</param>
    </member>
    <member name="M:UnityEngine.Renderer.GetPropertyBlock(UnityEngine.MaterialPropertyBlock,System.Int32)">
      <summary>
        <para>Get per-Renderer or per-Material property block.</para>
      </summary>
      <param name="properties">Material parameters to retrieve.</param>
      <param name="materialIndex">The index of the Material you want to get overridden parameters from. The index ranges from 0 to Renderer.sharedMaterials.Length-1.</param>
    </member>
    <member name="M:UnityEngine.Renderer.GetSharedMaterials(System.Collections.Generic.List`1&lt;UnityEngine.Material&gt;)">
      <summary>
        <para>Returns all the shared materials of this object.</para>
      </summary>
      <param name="m">A list of materials to populate.</param>
    </member>
    <member name="M:UnityEngine.Renderer.HasPropertyBlock">
      <summary>
        <para>Returns true if the Renderer has a material property block attached via SetPropertyBlock.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Renderer.SetPropertyBlock(UnityEngine.MaterialPropertyBlock)">
      <summary>
        <para>Lets you set or clear per-renderer or per-material parameter overrides.</para>
      </summary>
      <param name="properties">Property block with values you want to override.</param>
      <param name="materialIndex">The index of the Material you want to override the parameters of. The index ranges from 0 to Renderer.sharedMaterial.Length-1.</param>
    </member>
    <member name="M:UnityEngine.Renderer.SetPropertyBlock(UnityEngine.MaterialPropertyBlock,System.Int32)">
      <summary>
        <para>Lets you set or clear per-renderer or per-material parameter overrides.</para>
      </summary>
      <param name="properties">Property block with values you want to override.</param>
      <param name="materialIndex">The index of the Material you want to override the parameters of. The index ranges from 0 to Renderer.sharedMaterial.Length-1.</param>
    </member>
    <member name="T:UnityEngine.RendererExtensions">
      <summary>
        <para>Extension methods to the Renderer class, used only for the UpdateGIMaterials method used by the Global Illumination System.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RendererExtensions.UpdateGIMaterials(UnityEngine.Renderer)">
      <summary>
        <para>Schedules an update of the albedo and emissive Textures of a system that contains the Renderer.</para>
      </summary>
      <param name="renderer"></param>
    </member>
    <member name="T:UnityEngine.Rendering.AmbientMode">
      <summary>
        <para>Ambient lighting mode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.AmbientMode.Custom">
      <summary>
        <para>Ambient lighting is defined by a custom cubemap.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.AmbientMode.Flat">
      <summary>
        <para>Flat ambient lighting.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.AmbientMode.Skybox">
      <summary>
        <para>Skybox-based or custom ambient lighting.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.AmbientMode.Trilight">
      <summary>
        <para>Trilight ambient lighting.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.AsyncGPUReadback">
      <summary>
        <para>Allows the asynchronous read back of GPU resources.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.AsyncGPUReadback.Request(UnityEngine.ComputeBuffer,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Retrieves data asynchronously from a GPU resource.</para>
      </summary>
      <param name="src">Resource to read the data from.</param>
      <param name="size">Size in bytes of the data to be retrieved from the ComputeBuffer or GraphicsBuffer.</param>
      <param name="offset">Offset in bytes in the ComputeBuffer or GraphicsBuffer.</param>
      <param name="mipIndex">Index of the mipmap to be fetched.</param>
      <param name="dstFormat">Target TextureFormat of the data. If the target format is different from the format stored on the GPU, the conversion is automatic.</param>
      <param name="x">Starting X coordinate in pixels of the Texture data to be fetched.</param>
      <param name="width">Width in pixels of the Texture data to be fetched.</param>
      <param name="y">Starting Y coordinate in pixels of the Texture data to be fetched.</param>
      <param name="height">Height in pixels of the Texture data to be fetched.</param>
      <param name="z">Start Z coordinate in pixels for the Texture3D being fetched. Index of Start layer for TextureCube, Texture2DArray and TextureCubeArray being fetched.</param>
      <param name="depth">Depth in pixels for Texture3D being fetched. Number of layers for TextureCube, TextureArray and TextureCubeArray.</param>
      <param name="callback">An optional delegate System.Action called once the request is fullfilled. The completed request is passed as parameter to the System.Action.</param>
      <returns>
        <para>Returns an AsyncGPUReadbackRequest that you can use to determine when the data is available. Otherwise, a request with an error is returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.AsyncGPUReadback.Request(UnityEngine.ComputeBuffer,System.Int32,System.Int32,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Retrieves data asynchronously from a GPU resource.</para>
      </summary>
      <param name="src">Resource to read the data from.</param>
      <param name="size">Size in bytes of the data to be retrieved from the ComputeBuffer or GraphicsBuffer.</param>
      <param name="offset">Offset in bytes in the ComputeBuffer or GraphicsBuffer.</param>
      <param name="mipIndex">Index of the mipmap to be fetched.</param>
      <param name="dstFormat">Target TextureFormat of the data. If the target format is different from the format stored on the GPU, the conversion is automatic.</param>
      <param name="x">Starting X coordinate in pixels of the Texture data to be fetched.</param>
      <param name="width">Width in pixels of the Texture data to be fetched.</param>
      <param name="y">Starting Y coordinate in pixels of the Texture data to be fetched.</param>
      <param name="height">Height in pixels of the Texture data to be fetched.</param>
      <param name="z">Start Z coordinate in pixels for the Texture3D being fetched. Index of Start layer for TextureCube, Texture2DArray and TextureCubeArray being fetched.</param>
      <param name="depth">Depth in pixels for Texture3D being fetched. Number of layers for TextureCube, TextureArray and TextureCubeArray.</param>
      <param name="callback">An optional delegate System.Action called once the request is fullfilled. The completed request is passed as parameter to the System.Action.</param>
      <returns>
        <para>Returns an AsyncGPUReadbackRequest that you can use to determine when the data is available. Otherwise, a request with an error is returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.AsyncGPUReadback.Request(UnityEngine.Texture,System.Int32,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Retrieves data asynchronously from a GPU resource.</para>
      </summary>
      <param name="src">Resource to read the data from.</param>
      <param name="size">Size in bytes of the data to be retrieved from the ComputeBuffer or GraphicsBuffer.</param>
      <param name="offset">Offset in bytes in the ComputeBuffer or GraphicsBuffer.</param>
      <param name="mipIndex">Index of the mipmap to be fetched.</param>
      <param name="dstFormat">Target TextureFormat of the data. If the target format is different from the format stored on the GPU, the conversion is automatic.</param>
      <param name="x">Starting X coordinate in pixels of the Texture data to be fetched.</param>
      <param name="width">Width in pixels of the Texture data to be fetched.</param>
      <param name="y">Starting Y coordinate in pixels of the Texture data to be fetched.</param>
      <param name="height">Height in pixels of the Texture data to be fetched.</param>
      <param name="z">Start Z coordinate in pixels for the Texture3D being fetched. Index of Start layer for TextureCube, Texture2DArray and TextureCubeArray being fetched.</param>
      <param name="depth">Depth in pixels for Texture3D being fetched. Number of layers for TextureCube, TextureArray and TextureCubeArray.</param>
      <param name="callback">An optional delegate System.Action called once the request is fullfilled. The completed request is passed as parameter to the System.Action.</param>
      <returns>
        <para>Returns an AsyncGPUReadbackRequest that you can use to determine when the data is available. Otherwise, a request with an error is returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.AsyncGPUReadback.Request(UnityEngine.Texture,System.Int32,UnityEngine.TextureFormat,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Retrieves data asynchronously from a GPU resource.</para>
      </summary>
      <param name="src">Resource to read the data from.</param>
      <param name="size">Size in bytes of the data to be retrieved from the ComputeBuffer or GraphicsBuffer.</param>
      <param name="offset">Offset in bytes in the ComputeBuffer or GraphicsBuffer.</param>
      <param name="mipIndex">Index of the mipmap to be fetched.</param>
      <param name="dstFormat">Target TextureFormat of the data. If the target format is different from the format stored on the GPU, the conversion is automatic.</param>
      <param name="x">Starting X coordinate in pixels of the Texture data to be fetched.</param>
      <param name="width">Width in pixels of the Texture data to be fetched.</param>
      <param name="y">Starting Y coordinate in pixels of the Texture data to be fetched.</param>
      <param name="height">Height in pixels of the Texture data to be fetched.</param>
      <param name="z">Start Z coordinate in pixels for the Texture3D being fetched. Index of Start layer for TextureCube, Texture2DArray and TextureCubeArray being fetched.</param>
      <param name="depth">Depth in pixels for Texture3D being fetched. Number of layers for TextureCube, TextureArray and TextureCubeArray.</param>
      <param name="callback">An optional delegate System.Action called once the request is fullfilled. The completed request is passed as parameter to the System.Action.</param>
      <returns>
        <para>Returns an AsyncGPUReadbackRequest that you can use to determine when the data is available. Otherwise, a request with an error is returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.AsyncGPUReadback.Request(UnityEngine.Texture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Retrieves data asynchronously from a GPU resource.</para>
      </summary>
      <param name="src">Resource to read the data from.</param>
      <param name="size">Size in bytes of the data to be retrieved from the ComputeBuffer or GraphicsBuffer.</param>
      <param name="offset">Offset in bytes in the ComputeBuffer or GraphicsBuffer.</param>
      <param name="mipIndex">Index of the mipmap to be fetched.</param>
      <param name="dstFormat">Target TextureFormat of the data. If the target format is different from the format stored on the GPU, the conversion is automatic.</param>
      <param name="x">Starting X coordinate in pixels of the Texture data to be fetched.</param>
      <param name="width">Width in pixels of the Texture data to be fetched.</param>
      <param name="y">Starting Y coordinate in pixels of the Texture data to be fetched.</param>
      <param name="height">Height in pixels of the Texture data to be fetched.</param>
      <param name="z">Start Z coordinate in pixels for the Texture3D being fetched. Index of Start layer for TextureCube, Texture2DArray and TextureCubeArray being fetched.</param>
      <param name="depth">Depth in pixels for Texture3D being fetched. Number of layers for TextureCube, TextureArray and TextureCubeArray.</param>
      <param name="callback">An optional delegate System.Action called once the request is fullfilled. The completed request is passed as parameter to the System.Action.</param>
      <returns>
        <para>Returns an AsyncGPUReadbackRequest that you can use to determine when the data is available. Otherwise, a request with an error is returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.AsyncGPUReadback.Request(UnityEngine.Texture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.TextureFormat,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Retrieves data asynchronously from a GPU resource.</para>
      </summary>
      <param name="src">Resource to read the data from.</param>
      <param name="size">Size in bytes of the data to be retrieved from the ComputeBuffer or GraphicsBuffer.</param>
      <param name="offset">Offset in bytes in the ComputeBuffer or GraphicsBuffer.</param>
      <param name="mipIndex">Index of the mipmap to be fetched.</param>
      <param name="dstFormat">Target TextureFormat of the data. If the target format is different from the format stored on the GPU, the conversion is automatic.</param>
      <param name="x">Starting X coordinate in pixels of the Texture data to be fetched.</param>
      <param name="width">Width in pixels of the Texture data to be fetched.</param>
      <param name="y">Starting Y coordinate in pixels of the Texture data to be fetched.</param>
      <param name="height">Height in pixels of the Texture data to be fetched.</param>
      <param name="z">Start Z coordinate in pixels for the Texture3D being fetched. Index of Start layer for TextureCube, Texture2DArray and TextureCubeArray being fetched.</param>
      <param name="depth">Depth in pixels for Texture3D being fetched. Number of layers for TextureCube, TextureArray and TextureCubeArray.</param>
      <param name="callback">An optional delegate System.Action called once the request is fullfilled. The completed request is passed as parameter to the System.Action.</param>
      <returns>
        <para>Returns an AsyncGPUReadbackRequest that you can use to determine when the data is available. Otherwise, a request with an error is returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.AsyncGPUReadback.RequestIntoNativeArray(Unity.Collections.NativeArray`1&lt;T&gt;&amp;,UnityEngine.Texture,System.Int32,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Retrieves data asynchronously from a GPU Texture resource.</para>
      </summary>
      <param name="output">Reference to the NativeArray to write the data into.</param>
      <param name="src">The Texture resource to read the data from.</param>
      <param name="mipIndex">The index of the mipmap to fetch.</param>
      <param name="dstFormat">The target TextureFormat of the data. Conversion happens automatically if this format is different from the format stored on the GPU.</param>
      <param name="x">The starting x-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="width">The width, in pixels, of the Texture data to fetch.</param>
      <param name="y">The starting y-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="height">The height, in pixels, of the Texture data to fetch.</param>
      <param name="z">The starting z-coordinate, in pixels, of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the index of the start layer.</param>
      <param name="depth">The depth, in pixels of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the number of layers to retrieve.</param>
      <param name="callback">An optional delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
      <returns>
        <para>Returns an AsyncGPUReadbackRequest that you can use to determine when the data is available. Otherwise, returns a request with an error.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.AsyncGPUReadback.RequestIntoNativeArray(Unity.Collections.NativeArray`1&lt;T&gt;&amp;,UnityEngine.Texture,System.Int32,UnityEngine.TextureFormat,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Retrieves data asynchronously from a GPU Texture resource.</para>
      </summary>
      <param name="output">Reference to the NativeArray to write the data into.</param>
      <param name="src">The Texture resource to read the data from.</param>
      <param name="mipIndex">The index of the mipmap to fetch.</param>
      <param name="dstFormat">The target TextureFormat of the data. Conversion happens automatically if this format is different from the format stored on the GPU.</param>
      <param name="x">The starting x-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="width">The width, in pixels, of the Texture data to fetch.</param>
      <param name="y">The starting y-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="height">The height, in pixels, of the Texture data to fetch.</param>
      <param name="z">The starting z-coordinate, in pixels, of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the index of the start layer.</param>
      <param name="depth">The depth, in pixels of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the number of layers to retrieve.</param>
      <param name="callback">An optional delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
      <returns>
        <para>Returns an AsyncGPUReadbackRequest that you can use to determine when the data is available. Otherwise, returns a request with an error.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.AsyncGPUReadback.RequestIntoNativeArray(Unity.Collections.NativeArray`1&lt;T&gt;&amp;,UnityEngine.Texture,System.Int32,UnityEngine.Experimental.Rendering.GraphicsFormat,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Retrieves data asynchronously from a GPU Texture resource.</para>
      </summary>
      <param name="output">Reference to the NativeArray to write the data into.</param>
      <param name="src">The Texture resource to read the data from.</param>
      <param name="mipIndex">The index of the mipmap to fetch.</param>
      <param name="dstFormat">The target TextureFormat of the data. Conversion happens automatically if this format is different from the format stored on the GPU.</param>
      <param name="x">The starting x-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="width">The width, in pixels, of the Texture data to fetch.</param>
      <param name="y">The starting y-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="height">The height, in pixels, of the Texture data to fetch.</param>
      <param name="z">The starting z-coordinate, in pixels, of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the index of the start layer.</param>
      <param name="depth">The depth, in pixels of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the number of layers to retrieve.</param>
      <param name="callback">An optional delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
      <returns>
        <para>Returns an AsyncGPUReadbackRequest that you can use to determine when the data is available. Otherwise, returns a request with an error.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.AsyncGPUReadback.RequestIntoNativeArray(Unity.Collections.NativeArray`1&lt;T&gt;&amp;,UnityEngine.Texture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.TextureFormat,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Retrieves data asynchronously from a GPU Texture resource.</para>
      </summary>
      <param name="output">Reference to the NativeArray to write the data into.</param>
      <param name="src">The Texture resource to read the data from.</param>
      <param name="mipIndex">The index of the mipmap to fetch.</param>
      <param name="dstFormat">The target TextureFormat of the data. Conversion happens automatically if this format is different from the format stored on the GPU.</param>
      <param name="x">The starting x-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="width">The width, in pixels, of the Texture data to fetch.</param>
      <param name="y">The starting y-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="height">The height, in pixels, of the Texture data to fetch.</param>
      <param name="z">The starting z-coordinate, in pixels, of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the index of the start layer.</param>
      <param name="depth">The depth, in pixels of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the number of layers to retrieve.</param>
      <param name="callback">An optional delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
      <returns>
        <para>Returns an AsyncGPUReadbackRequest that you can use to determine when the data is available. Otherwise, returns a request with an error.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.AsyncGPUReadback.RequestIntoNativeArray(Unity.Collections.NativeArray`1&lt;T&gt;&amp;,UnityEngine.Texture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Experimental.Rendering.GraphicsFormat,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Retrieves data asynchronously from a GPU Texture resource.</para>
      </summary>
      <param name="output">Reference to the NativeArray to write the data into.</param>
      <param name="src">The Texture resource to read the data from.</param>
      <param name="mipIndex">The index of the mipmap to fetch.</param>
      <param name="dstFormat">The target TextureFormat of the data. Conversion happens automatically if this format is different from the format stored on the GPU.</param>
      <param name="x">The starting x-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="width">The width, in pixels, of the Texture data to fetch.</param>
      <param name="y">The starting y-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="height">The height, in pixels, of the Texture data to fetch.</param>
      <param name="z">The starting z-coordinate, in pixels, of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the index of the start layer.</param>
      <param name="depth">The depth, in pixels of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the number of layers to retrieve.</param>
      <param name="callback">An optional delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
      <returns>
        <para>Returns an AsyncGPUReadbackRequest that you can use to determine when the data is available. Otherwise, returns a request with an error.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.AsyncGPUReadback.RequestIntoNativeArray(Unity.Collections.NativeArray`1&lt;T&gt;&amp;,UnityEngine.ComputeBuffer,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Retrieves data asynchronously from a GPU Graphics Buffer resource.</para>
      </summary>
      <param name="output">Reference to the NativeArray to write the data into.</param>
      <param name="src">The GraphicsBuffer to read the data from.</param>
      <param name="size">The size, in bytes, of the data to retrieve from the GraphicsBuffer.</param>
      <param name="offset">Offset in bytes in the GraphicsBuffer.</param>
      <param name="callback">An optional delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
      <returns>
        <para>Returns an AsyncGPUReadbackRequest that you can use to determine when the data is available. Otherwise, returns a request with an error.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.AsyncGPUReadback.RequestIntoNativeArray(Unity.Collections.NativeArray`1&lt;T&gt;&amp;,UnityEngine.ComputeBuffer,System.Int32,System.Int32,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Retrieves data asynchronously from a GPU Graphics Buffer resource.</para>
      </summary>
      <param name="output">Reference to the NativeArray to write the data into.</param>
      <param name="src">The GraphicsBuffer to read the data from.</param>
      <param name="size">The size, in bytes, of the data to retrieve from the GraphicsBuffer.</param>
      <param name="offset">Offset in bytes in the GraphicsBuffer.</param>
      <param name="callback">An optional delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
      <returns>
        <para>Returns an AsyncGPUReadbackRequest that you can use to determine when the data is available. Otherwise, returns a request with an error.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.AsyncGPUReadback.RequestIntoNativeArray(Unity.Collections.NativeArray`1&lt;T&gt;&amp;,UnityEngine.GraphicsBuffer,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Retrieves data asynchronously from a GPU Graphics Buffer resource.</para>
      </summary>
      <param name="output">Reference to the NativeArray to write the data into.</param>
      <param name="src">The GraphicsBuffer to read the data from.</param>
      <param name="size">The size, in bytes, of the data to retrieve from the GraphicsBuffer.</param>
      <param name="offset">Offset in bytes in the GraphicsBuffer.</param>
      <param name="callback">An optional delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
      <returns>
        <para>Returns an AsyncGPUReadbackRequest that you can use to determine when the data is available. Otherwise, returns a request with an error.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.AsyncGPUReadback.RequestIntoNativeArray(Unity.Collections.NativeArray`1&lt;T&gt;&amp;,UnityEngine.GraphicsBuffer,System.Int32,System.Int32,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Retrieves data asynchronously from a GPU Graphics Buffer resource.</para>
      </summary>
      <param name="output">Reference to the NativeArray to write the data into.</param>
      <param name="src">The GraphicsBuffer to read the data from.</param>
      <param name="size">The size, in bytes, of the data to retrieve from the GraphicsBuffer.</param>
      <param name="offset">Offset in bytes in the GraphicsBuffer.</param>
      <param name="callback">An optional delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
      <returns>
        <para>Returns an AsyncGPUReadbackRequest that you can use to determine when the data is available. Otherwise, returns a request with an error.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.AsyncGPUReadback.RequestIntoNativeSlice(Unity.Collections.NativeSlice`1&lt;T&gt;&amp;,UnityEngine.Texture,System.Int32,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Retrieves data asynchronously from a GPU Texture resource.</para>
      </summary>
      <param name="output">Reference to the NativeSlice to write the data into.</param>
      <param name="src">The Texture resource to read the data from.</param>
      <param name="mipIndex">The index of the mipmap to fetch.</param>
      <param name="dstFormat">The target TextureFormat of the data. Conversion happens automatically if this format is different from the format stored on the GPU.</param>
      <param name="x">The starting x-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="width">The width, in pixels, of the Texture data to fetch.</param>
      <param name="y">The starting y-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="height">The height, in pixels, of the Texture data to fetch.</param>
      <param name="z">The starting z-coordinate, in pixels, of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the index of the start layer.</param>
      <param name="depth">The depth, in pixels of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the number of layers to retrieve.</param>
      <param name="callback">An optional delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
      <returns>
        <para>Returns an AsyncGPUReadbackRequest that you can use to determine when the data is available. Otherwise, returns a request with an error.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.AsyncGPUReadback.RequestIntoNativeSlice(Unity.Collections.NativeSlice`1&lt;T&gt;&amp;,UnityEngine.Texture,System.Int32,UnityEngine.TextureFormat,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Retrieves data asynchronously from a GPU Texture resource.</para>
      </summary>
      <param name="output">Reference to the NativeSlice to write the data into.</param>
      <param name="src">The Texture resource to read the data from.</param>
      <param name="mipIndex">The index of the mipmap to fetch.</param>
      <param name="dstFormat">The target TextureFormat of the data. Conversion happens automatically if this format is different from the format stored on the GPU.</param>
      <param name="x">The starting x-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="width">The width, in pixels, of the Texture data to fetch.</param>
      <param name="y">The starting y-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="height">The height, in pixels, of the Texture data to fetch.</param>
      <param name="z">The starting z-coordinate, in pixels, of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the index of the start layer.</param>
      <param name="depth">The depth, in pixels of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the number of layers to retrieve.</param>
      <param name="callback">An optional delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
      <returns>
        <para>Returns an AsyncGPUReadbackRequest that you can use to determine when the data is available. Otherwise, returns a request with an error.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.AsyncGPUReadback.RequestIntoNativeSlice(Unity.Collections.NativeSlice`1&lt;T&gt;&amp;,UnityEngine.Texture,System.Int32,UnityEngine.Experimental.Rendering.GraphicsFormat,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Retrieves data asynchronously from a GPU Texture resource.</para>
      </summary>
      <param name="output">Reference to the NativeSlice to write the data into.</param>
      <param name="src">The Texture resource to read the data from.</param>
      <param name="mipIndex">The index of the mipmap to fetch.</param>
      <param name="dstFormat">The target TextureFormat of the data. Conversion happens automatically if this format is different from the format stored on the GPU.</param>
      <param name="x">The starting x-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="width">The width, in pixels, of the Texture data to fetch.</param>
      <param name="y">The starting y-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="height">The height, in pixels, of the Texture data to fetch.</param>
      <param name="z">The starting z-coordinate, in pixels, of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the index of the start layer.</param>
      <param name="depth">The depth, in pixels of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the number of layers to retrieve.</param>
      <param name="callback">An optional delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
      <returns>
        <para>Returns an AsyncGPUReadbackRequest that you can use to determine when the data is available. Otherwise, returns a request with an error.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.AsyncGPUReadback.RequestIntoNativeSlice(Unity.Collections.NativeSlice`1&lt;T&gt;&amp;,UnityEngine.Texture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.TextureFormat,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Retrieves data asynchronously from a GPU Texture resource.</para>
      </summary>
      <param name="output">Reference to the NativeSlice to write the data into.</param>
      <param name="src">The Texture resource to read the data from.</param>
      <param name="mipIndex">The index of the mipmap to fetch.</param>
      <param name="dstFormat">The target TextureFormat of the data. Conversion happens automatically if this format is different from the format stored on the GPU.</param>
      <param name="x">The starting x-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="width">The width, in pixels, of the Texture data to fetch.</param>
      <param name="y">The starting y-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="height">The height, in pixels, of the Texture data to fetch.</param>
      <param name="z">The starting z-coordinate, in pixels, of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the index of the start layer.</param>
      <param name="depth">The depth, in pixels of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the number of layers to retrieve.</param>
      <param name="callback">An optional delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
      <returns>
        <para>Returns an AsyncGPUReadbackRequest that you can use to determine when the data is available. Otherwise, returns a request with an error.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.AsyncGPUReadback.RequestIntoNativeSlice(Unity.Collections.NativeSlice`1&lt;T&gt;&amp;,UnityEngine.Texture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Experimental.Rendering.GraphicsFormat,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Retrieves data asynchronously from a GPU Texture resource.</para>
      </summary>
      <param name="output">Reference to the NativeSlice to write the data into.</param>
      <param name="src">The Texture resource to read the data from.</param>
      <param name="mipIndex">The index of the mipmap to fetch.</param>
      <param name="dstFormat">The target TextureFormat of the data. Conversion happens automatically if this format is different from the format stored on the GPU.</param>
      <param name="x">The starting x-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="width">The width, in pixels, of the Texture data to fetch.</param>
      <param name="y">The starting y-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="height">The height, in pixels, of the Texture data to fetch.</param>
      <param name="z">The starting z-coordinate, in pixels, of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the index of the start layer.</param>
      <param name="depth">The depth, in pixels of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the number of layers to retrieve.</param>
      <param name="callback">An optional delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
      <returns>
        <para>Returns an AsyncGPUReadbackRequest that you can use to determine when the data is available. Otherwise, returns a request with an error.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.AsyncGPUReadback.RequestIntoNativeSlice(Unity.Collections.NativeSlice`1&lt;T&gt;&amp;,UnityEngine.ComputeBuffer,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Retrieves data asynchronously from a GPU Graphics Buffer resource.</para>
      </summary>
      <param name="output">Reference to the NativeSlice to write the data into.</param>
      <param name="src">The GraphicsBuffer to read the data from.</param>
      <param name="size">The size, in bytes, of the data to retrieve from the GraphicsBuffer.</param>
      <param name="offset">Offset in bytes in the GraphicsBuffer.</param>
      <param name="callback">An optional delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
      <returns>
        <para>Returns an AsyncGPUReadbackRequest that you can use to determine when the data is available. Otherwise, returns a request with an error.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.AsyncGPUReadback.RequestIntoNativeSlice(Unity.Collections.NativeSlice`1&lt;T&gt;&amp;,UnityEngine.ComputeBuffer,System.Int32,System.Int32,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Retrieves data asynchronously from a GPU Graphics Buffer resource.</para>
      </summary>
      <param name="output">Reference to the NativeSlice to write the data into.</param>
      <param name="src">The GraphicsBuffer to read the data from.</param>
      <param name="size">The size, in bytes, of the data to retrieve from the GraphicsBuffer.</param>
      <param name="offset">Offset in bytes in the GraphicsBuffer.</param>
      <param name="callback">An optional delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
      <returns>
        <para>Returns an AsyncGPUReadbackRequest that you can use to determine when the data is available. Otherwise, returns a request with an error.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.AsyncGPUReadback.RequestIntoNativeSlice(Unity.Collections.NativeSlice`1&lt;T&gt;&amp;,UnityEngine.GraphicsBuffer,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Retrieves data asynchronously from a GPU Graphics Buffer resource.</para>
      </summary>
      <param name="output">Reference to the NativeSlice to write the data into.</param>
      <param name="src">The GraphicsBuffer to read the data from.</param>
      <param name="size">The size, in bytes, of the data to retrieve from the GraphicsBuffer.</param>
      <param name="offset">Offset in bytes in the GraphicsBuffer.</param>
      <param name="callback">An optional delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
      <returns>
        <para>Returns an AsyncGPUReadbackRequest that you can use to determine when the data is available. Otherwise, returns a request with an error.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.AsyncGPUReadback.RequestIntoNativeSlice(Unity.Collections.NativeSlice`1&lt;T&gt;&amp;,UnityEngine.GraphicsBuffer,System.Int32,System.Int32,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Retrieves data asynchronously from a GPU Graphics Buffer resource.</para>
      </summary>
      <param name="output">Reference to the NativeSlice to write the data into.</param>
      <param name="src">The GraphicsBuffer to read the data from.</param>
      <param name="size">The size, in bytes, of the data to retrieve from the GraphicsBuffer.</param>
      <param name="offset">Offset in bytes in the GraphicsBuffer.</param>
      <param name="callback">An optional delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
      <returns>
        <para>Returns an AsyncGPUReadbackRequest that you can use to determine when the data is available. Otherwise, returns a request with an error.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.AsyncGPUReadback.WaitAllRequests">
      <summary>
        <para>Waits until the completion of every request.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.AsyncGPUReadbackRequest">
      <summary>
        <para>Represents an asynchronous request for a GPU resource.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.AsyncGPUReadbackRequest.depth">
      <summary>
        <para>When reading data from a ComputeBuffer, depth is 1, otherwise, the property takes the value of the requested depth from the texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.AsyncGPUReadbackRequest.done">
      <summary>
        <para>Checks whether the request has been processed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.AsyncGPUReadbackRequest.hasError">
      <summary>
        <para>This property is true if the request has encountered an error.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.AsyncGPUReadbackRequest.height">
      <summary>
        <para>When reading data from a ComputeBuffer, height is 1, otherwise, the property takes the value of the requested height from the texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.AsyncGPUReadbackRequest.layerCount">
      <summary>
        <para>Number of layers in the current request.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.AsyncGPUReadbackRequest.layerDataSize">
      <summary>
        <para>The size in bytes of one layer of the readback data.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.AsyncGPUReadbackRequest.width">
      <summary>
        <para>The width of the requested GPU data.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.AsyncGPUReadbackRequest.GetData(System.Int32)">
      <summary>
        <para>Fetches the data of a successful request.</para>
      </summary>
      <param name="layer">The index of the layer to retrieve.</param>
    </member>
    <member name="M:UnityEngine.Rendering.AsyncGPUReadbackRequest.Update">
      <summary>
        <para>Triggers an update of the request.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.AsyncGPUReadbackRequest.WaitForCompletion">
      <summary>
        <para>Waits for completion of the request.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.AttachmentDescriptor">
      <summary>
        <para>A declaration of a single color or depth rendering surface to be attached into a RenderPass.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.AttachmentDescriptor.clearColor">
      <summary>
        <para>The currently assigned clear color for this attachment. Default is black.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.AttachmentDescriptor.clearDepth">
      <summary>
        <para>Currently assigned depth clear value for this attachment. Default value is 1.0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.AttachmentDescriptor.clearStencil">
      <summary>
        <para>Currently assigned stencil clear value for this attachment. Default is 0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.AttachmentDescriptor.format">
      <summary>
        <para>The format of this attachment.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.AttachmentDescriptor.graphicsFormat">
      <summary>
        <para>The GraphicsFormat of this attachment. To use in place of format.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.AttachmentDescriptor.loadAction">
      <summary>
        <para>The load action to be used on this attachment when the RenderPass starts.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.AttachmentDescriptor.loadStoreTarget">
      <summary>
        <para>The surface to use as the backing storage for this AttachmentDescriptor.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.AttachmentDescriptor.resolveTarget">
      <summary>
        <para>When the renderpass that uses this attachment ends, resolve the MSAA surface into the given target.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.AttachmentDescriptor.storeAction">
      <summary>
        <para>The store action to use with this attachment when the RenderPass ends. Only used when either ConfigureTarget or ConfigureResolveTarget has been called.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.AttachmentDescriptor.ConfigureClear(UnityEngine.Color,System.Single,System.UInt32)">
      <summary>
        <para>When the RenderPass starts, clear this attachment into the color or depth/stencil values given (depending on the format of this attachment). Changes loadAction to RenderBufferLoadAction.Clear.</para>
      </summary>
      <param name="clearCol">Color clear value. Ignored on depth/stencil attachments.</param>
      <param name="clearDep">Depth clear value. Ignored on color surfaces.</param>
      <param name="clearStenc">Stencil clear value. Ignored on color or depth-only surfaces.</param>
      <param name="clearColor"></param>
      <param name="clearDepth"></param>
      <param name="clearStencil"></param>
    </member>
    <member name="M:UnityEngine.Rendering.AttachmentDescriptor.ConfigureResolveTarget(UnityEngine.Rendering.RenderTargetIdentifier)">
      <summary>
        <para>When the renderpass that uses this attachment ends, resolve the MSAA surface into the given target.</para>
      </summary>
      <param name="tgt">The target surface to receive the MSAA-resolved pixels.</param>
      <param name="target"></param>
    </member>
    <member name="M:UnityEngine.Rendering.AttachmentDescriptor.ConfigureTarget(UnityEngine.Rendering.RenderTargetIdentifier,System.Boolean,System.Boolean)">
      <summary>
        <para>Binds this AttachmentDescriptor to the given target surface.</para>
      </summary>
      <param name="tgt">The surface to use as the backing storage for this AttachmentDescriptor.</param>
      <param name="loadExistingContents">Whether to read in the existing contents of the surface when the RenderPass starts.</param>
      <param name="storeResults">Whether to store the rendering results of the attachment when the RenderPass ends.</param>
      <param name="target"></param>
    </member>
    <member name="M:UnityEngine.Rendering.AttachmentDescriptor.#ctor(UnityEngine.RenderTextureFormat)">
      <summary>
        <para>Create a AttachmentDescriptor to be used with RenderPass.</para>
      </summary>
      <param name="fmt">The format of this attachment.</param>
      <param name="format"></param>
    </member>
    <member name="T:UnityEngine.Rendering.BatchCullingContext">
      <summary>
        <para>Culling context for a batch.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BatchCullingContext.batchVisibility">
      <summary>
        <para>Visibility information for the batch.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BatchCullingContext.cullingMatrix">
      <summary>
        <para>Culling matrix.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BatchCullingContext.cullingPlanes">
      <summary>
        <para>Planes to cull against.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BatchCullingContext.lodParameters">
      <summary>
        <para>See Also: LODParameters.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BatchCullingContext.nearPlane">
      <summary>
        <para>The near frustum plane for this culling context.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BatchCullingContext.visibleIndices">
      <summary>
        <para>Array of visible indices for all the batches in the group.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BatchCullingContext.visibleIndicesY">
      <summary>
        <para>Array of uints containing extra data for the visible indices for all the batches in the group. Elements in this array correspond to elements in Rendering.BatchCullingContext.visibleIndices.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.BatchRendererGroup">
      <summary>
        <para>A group of batches.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.BatchRendererGroup.AddBatch(UnityEngine.Mesh,System.Int32,UnityEngine.Material,System.Int32,UnityEngine.Rendering.ShadowCastingMode,System.Boolean,System.Boolean,UnityEngine.Bounds,System.Int32,UnityEngine.MaterialPropertyBlock,UnityEngine.GameObject)">
      <summary>
        <para>Adds a new batch to the group.</para>
      </summary>
      <param name="mesh">The Mesh to draw.</param>
      <param name="subMeshIndex">Specifies which subset of the mesh to draw. This applies only to meshes that are composed of several materials.</param>
      <param name="material">Material to use.</param>
      <param name="layer"> to use.</param>
      <param name="castShadows">Whether the meshes cast shadows.</param>
      <param name="receiveShadows">Whether the meshes receive shadows.</param>
      <param name="invertCulling">Specify whether to invert the backface culling (true) or not (false). This flag can "flip" the culling mode of all rendered objects. Major use case: rendering reflections for mirrors, water etc. Since virtual camera for rendering the reflection is mirrored, the culling order has to be inverted. You can see how the Water script in Effects standard package does that.</param>
      <param name="bounds">Bounds to use. Should specify the combined bounds of all the instances.</param>
      <param name="instanceCount">The number of instances to draw.</param>
      <param name="customProps">Additional material properties to apply. See MaterialPropertyBlock.</param>
      <param name="associatedSceneObject">The GameObject to select when you pick an object that the batch renders.</param>
      <param name="sceneCullingMask">Additional culling mask usually used for scene based culling. See Also: EditorSceneManager.GetSceneCullingMask.</param>
      <param name="renderingLayerMask">Rendering layer this batch lives on. See Also: Renderer.renderingLayerMask.</param>
      <returns>
        <para>The batch's index in the BatchedRendererGroup.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.BatchRendererGroup.AddBatch(UnityEngine.Mesh,System.Int32,UnityEngine.Material,System.Int32,UnityEngine.Rendering.ShadowCastingMode,System.Boolean,System.Boolean,UnityEngine.Bounds,System.Int32,UnityEngine.MaterialPropertyBlock,UnityEngine.GameObject,System.UInt64)">
      <summary>
        <para>Adds a new batch to the group.</para>
      </summary>
      <param name="mesh">The Mesh to draw.</param>
      <param name="subMeshIndex">Specifies which subset of the mesh to draw. This applies only to meshes that are composed of several materials.</param>
      <param name="material">Material to use.</param>
      <param name="layer"> to use.</param>
      <param name="castShadows">Whether the meshes cast shadows.</param>
      <param name="receiveShadows">Whether the meshes receive shadows.</param>
      <param name="invertCulling">Specify whether to invert the backface culling (true) or not (false). This flag can "flip" the culling mode of all rendered objects. Major use case: rendering reflections for mirrors, water etc. Since virtual camera for rendering the reflection is mirrored, the culling order has to be inverted. You can see how the Water script in Effects standard package does that.</param>
      <param name="bounds">Bounds to use. Should specify the combined bounds of all the instances.</param>
      <param name="instanceCount">The number of instances to draw.</param>
      <param name="customProps">Additional material properties to apply. See MaterialPropertyBlock.</param>
      <param name="associatedSceneObject">The GameObject to select when you pick an object that the batch renders.</param>
      <param name="sceneCullingMask">Additional culling mask usually used for scene based culling. See Also: EditorSceneManager.GetSceneCullingMask.</param>
      <param name="renderingLayerMask">Rendering layer this batch lives on. See Also: Renderer.renderingLayerMask.</param>
      <returns>
        <para>The batch's index in the BatchedRendererGroup.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.BatchRendererGroup.#ctor(UnityEngine.Rendering.BatchRendererGroup/OnPerformCulling)">
      <summary>
        <para>Creates a new Rendering.BatchRendererGroup.</para>
      </summary>
      <param name="cullingCallback">The delegate to call for performing culling.
See Also: BatchRendererGroup.OnPerformCulling.</param>
    </member>
    <member name="M:UnityEngine.Rendering.BatchRendererGroup.Dispose">
      <summary>
        <para>Deletes a group.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.BatchRendererGroup.EnableVisibleIndicesYArray(System.Boolean)">
      <summary>
        <para>Enables or disables Rendering.BatchCullingContext.visibleIndicesY.</para>
      </summary>
      <param name="enabled">Pass true to enable the array, or false to disable it.</param>
    </member>
    <member name="M:UnityEngine.Rendering.BatchRendererGroup.GetBatchMatrices(System.Int32)">
      <summary>
        <para>Retrieves the matrices associated with one batch.</para>
      </summary>
      <param name="batchIndex">Batch index.</param>
      <returns>
        <para>Matrices associated with the batch specified by batchIndex.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.BatchRendererGroup.GetBatchMatrixArray(System.Int32,System.String)">
      <summary>
        <para>Retrieves an array of instanced vector properties for a given batch.</para>
      </summary>
      <param name="batchIndex">Batch index.</param>
      <param name="propertyName">Property name.</param>
      <returns>
        <para>An array of writable matrix properties for the batch specified by batchIndex.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.BatchRendererGroup.GetBatchMatrixArray(System.Int32,System.Int32)">
      <summary>
        <para>Retrieves an array of instanced vector properties for a given batch.</para>
      </summary>
      <param name="batchIndex">Batch index.</param>
      <param name="propertyName">Property name.</param>
      <returns>
        <para>An array of writable matrix properties for the batch specified by batchIndex.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.BatchRendererGroup.GetBatchScalarArray(System.Int32,System.String)">
      <summary>
        <para>Retrieves an array of instanced float properties for a given batch.</para>
      </summary>
      <param name="batchIndex">Batch index.</param>
      <param name="propertyName">Property name.</param>
      <returns>
        <para>An array of writable float properties for the batch specified by batchIndex.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.BatchRendererGroup.GetBatchScalarArray(System.Int32,System.Int32)">
      <summary>
        <para>Retrieves an array of instanced float properties for a given batch.</para>
      </summary>
      <param name="batchIndex">Batch index.</param>
      <param name="propertyName">Property name.</param>
      <returns>
        <para>An array of writable float properties for the batch specified by batchIndex.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.BatchRendererGroup.GetBatchScalarArrayInt(System.Int32,System.String)">
      <summary>
        <para>Retrieves an array of instanced int properties for a given batch.</para>
      </summary>
      <param name="batchIndex">Batch index.</param>
      <param name="propertyName">Property name.</param>
      <returns>
        <para>An array of writable int properties for the batch specified by batchIndex.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.BatchRendererGroup.GetBatchScalarArrayInt(System.Int32,System.Int32)">
      <summary>
        <para>Retrieves an array of instanced int properties for a given batch.</para>
      </summary>
      <param name="batchIndex">Batch index.</param>
      <param name="propertyName">Property name.</param>
      <returns>
        <para>An array of writable int properties for the batch specified by batchIndex.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.BatchRendererGroup.GetBatchVectorArray(System.Int32,System.String)">
      <summary>
        <para>Retrieves an array of instanced vector properties for a given batch.</para>
      </summary>
      <param name="batchIndex">Batch index.</param>
      <param name="propertyName">Property name.</param>
      <returns>
        <para>An array of writable vector properties for the batch specified by batchIndex.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.BatchRendererGroup.GetBatchVectorArray(System.Int32,System.Int32)">
      <summary>
        <para>Retrieves an array of instanced vector properties for a given batch.</para>
      </summary>
      <param name="batchIndex">Batch index.</param>
      <param name="propertyName">Property name.</param>
      <returns>
        <para>An array of writable vector properties for the batch specified by batchIndex.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.BatchRendererGroup.GetBatchVectorArrayInt(System.Int32,System.String)">
      <summary>
        <para>Retrieves an array of instanced int vector properties for a given batch.</para>
      </summary>
      <param name="batchIndex">Batch index.</param>
      <param name="propertyName">Property name.</param>
      <returns>
        <para>An array of writable vector properties for the batch specified by batchIndex, arranged linearly as individual int elements.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.BatchRendererGroup.GetBatchVectorArrayInt(System.Int32,System.Int32)">
      <summary>
        <para>Retrieves an array of instanced int vector properties for a given batch.</para>
      </summary>
      <param name="batchIndex">Batch index.</param>
      <param name="propertyName">Property name.</param>
      <returns>
        <para>An array of writable vector properties for the batch specified by batchIndex, arranged linearly as individual int elements.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.BatchRendererGroup.GetNumBatches">
      <summary>
        <para>Retrieves the number of batches added to the group.</para>
      </summary>
      <returns>
        <para>Number of batches inside the group.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Rendering.BatchRendererGroup.OnPerformCulling">
      <summary>
        <para>Culling callback function.</para>
      </summary>
      <param name="rendererGroup">Group to cull.</param>
      <param name="cullingContext">Culling context.</param>
    </member>
    <member name="M:UnityEngine.Rendering.BatchRendererGroup.RemoveBatch(System.Int32)">
      <summary>
        <para>Removes a batch from the group.
                    Note: For performance reasons, the removal is done via emplace_back() which will simply replace the removed batch index with the last index in the array and will decrement the size.
                    If you're holding your own array of batch indices, you'll have to either regenerate it or apply the same emplace_back() mechanism as RemoveBatch does.</para>
      </summary>
      <param name="index">Batch index.</param>
    </member>
    <member name="M:UnityEngine.Rendering.BatchRendererGroup.SetBatchBounds(System.Int32,UnityEngine.Bounds)">
      <summary>
        <para>Sets the bounding box of the batch.</para>
      </summary>
      <param name="batchIndex">Batch index.</param>
      <param name="bounds">The new bounds for the batch specified by batchIndex.</param>
    </member>
    <member name="M:UnityEngine.Rendering.BatchRendererGroup.SetBatchFlags(System.Int32,System.UInt64)">
      <summary>
        <para>Sets flag bits that enable special behavior for this Hybrid Renderer V2 batch.</para>
      </summary>
      <param name="batchIndex">Batch index. Must be a Hybrid Renderer V2 batch.</param>
      <param name="flags">Flag bits to set for the batch.</param>
    </member>
    <member name="M:UnityEngine.Rendering.BatchRendererGroup.SetBatchPropertyMetadata(System.Int32,Unity.Collections.NativeArray`1&lt;System.Int32&gt;,Unity.Collections.NativeArray`1&lt;System.Int32&gt;)">
      <summary>
        <para>Sets all Hybrid Renderer DOTS instancing metadata for this batch, and marks it as a Hybrid Renderer V2 batch.</para>
      </summary>
      <param name="batchIndex">Batch index.</param>
      <param name="cbufferLengths">One int for each DOTS instancing metadata constant buffer that describes how many metadata ints are in each of them.</param>
      <param name="cbufferMetadata">Metadata ints for all DOTS instancing metadata constant buffers, laid out one after another. cbufferLengths describes which ints belong to which constant buffer.</param>
    </member>
    <member name="M:UnityEngine.Rendering.BatchRendererGroup.SetInstancingData(System.Int32,System.Int32,UnityEngine.MaterialPropertyBlock)">
      <summary>
        <para>Updates a batch.</para>
      </summary>
      <param name="batchIndex">Batch index.</param>
      <param name="instanceCount">New number of instances in the batch.</param>
      <param name="customProps">Additional material properties to apply. See MaterialPropertyBlock.</param>
    </member>
    <member name="T:UnityEngine.Rendering.BatchVisibility">
      <summary>
        <para>Describes the visibility for a batch.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BatchVisibility.instancesCount">
      <summary>
        <para>Input property specifying the total number of instances in the batch. (readonly).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BatchVisibility.offset">
      <summary>
        <para>Input property specifying the offset into the BatchCullingContext.visibleIndices where the batch's visibile indices start. (readonly).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BatchVisibility.visibleCount">
      <summary>
        <para>Output property that has to be set to the number of visible instances in the batch after culling.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.BlendMode">
      <summary>
        <para>Blend mode for controlling the blending.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendMode.DstAlpha">
      <summary>
        <para>Blend factor is (Ad, Ad, Ad, Ad).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendMode.DstColor">
      <summary>
        <para>Blend factor is (Rd, Gd, Bd, Ad).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendMode.One">
      <summary>
        <para>Blend factor is (1, 1, 1, 1).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendMode.OneMinusDstAlpha">
      <summary>
        <para>Blend factor is (1 - Ad, 1 - Ad, 1 - Ad, 1 - Ad).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendMode.OneMinusDstColor">
      <summary>
        <para>Blend factor is (1 - Rd, 1 - Gd, 1 - Bd, 1 - Ad).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendMode.OneMinusSrcAlpha">
      <summary>
        <para>Blend factor is (1 - As, 1 - As, 1 - As, 1 - As).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendMode.OneMinusSrcColor">
      <summary>
        <para>Blend factor is (1 - Rs, 1 - Gs, 1 - Bs, 1 - As).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendMode.SrcAlpha">
      <summary>
        <para>Blend factor is (As, As, As, As).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendMode.SrcAlphaSaturate">
      <summary>
        <para>Blend factor is (f, f, f, 1); where f = min(As, 1 - Ad).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendMode.SrcColor">
      <summary>
        <para>Blend factor is (Rs, Gs, Bs, As).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendMode.Zero">
      <summary>
        <para>Blend factor is  (0, 0, 0, 0).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.BlendOp">
      <summary>
        <para>Blend operation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.Add">
      <summary>
        <para>Add (s + d).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.ColorBurn">
      <summary>
        <para>Color burn (Advanced OpenGL blending).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.ColorDodge">
      <summary>
        <para>Color dodge (Advanced OpenGL blending).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.Darken">
      <summary>
        <para>Darken (Advanced OpenGL blending).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.Difference">
      <summary>
        <para>Difference (Advanced OpenGL blending).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.Exclusion">
      <summary>
        <para>Exclusion (Advanced OpenGL blending).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.HardLight">
      <summary>
        <para>Hard light (Advanced OpenGL blending).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.HSLColor">
      <summary>
        <para>HSL color (Advanced OpenGL blending).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.HSLHue">
      <summary>
        <para>HSL Hue (Advanced OpenGL blending).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.HSLLuminosity">
      <summary>
        <para>HSL luminosity (Advanced OpenGL blending).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.HSLSaturation">
      <summary>
        <para>HSL saturation (Advanced OpenGL blending).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.Lighten">
      <summary>
        <para>Lighten (Advanced OpenGL blending).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.LogicalAnd">
      <summary>
        <para>Logical AND (s &amp; d) (D3D11.1 only).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.LogicalAndInverted">
      <summary>
        <para>Logical inverted AND (!s &amp; d) (D3D11.1 only).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.LogicalAndReverse">
      <summary>
        <para>Logical reverse AND (s &amp; !d) (D3D11.1 only).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.LogicalClear">
      <summary>
        <para>Logical Clear (0).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.LogicalCopy">
      <summary>
        <para>Logical Copy (s) (D3D11.1 only).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.LogicalCopyInverted">
      <summary>
        <para>Logical inverted Copy (!s) (D3D11.1 only).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.LogicalEquivalence">
      <summary>
        <para>Logical Equivalence !(s XOR d) (D3D11.1 only).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.LogicalInvert">
      <summary>
        <para>Logical Inverse (!d) (D3D11.1 only).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.LogicalNand">
      <summary>
        <para>Logical NAND !(s &amp; d). D3D11.1 only.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.LogicalNoop">
      <summary>
        <para>Logical No-op (d) (D3D11.1 only).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.LogicalNor">
      <summary>
        <para>Logical NOR !(s | d) (D3D11.1 only).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.LogicalOr">
      <summary>
        <para>Logical OR (s | d) (D3D11.1 only).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.LogicalOrInverted">
      <summary>
        <para>Logical inverted OR (!s | d) (D3D11.1 only).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.LogicalOrReverse">
      <summary>
        <para>Logical reverse OR (s | !d) (D3D11.1 only).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.LogicalSet">
      <summary>
        <para>Logical SET (1) (D3D11.1 only).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.LogicalXor">
      <summary>
        <para>Logical XOR (s XOR d) (D3D11.1 only).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.Max">
      <summary>
        <para>Max.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.Min">
      <summary>
        <para>Min.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.Multiply">
      <summary>
        <para>Multiply (Advanced OpenGL blending).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.Overlay">
      <summary>
        <para>Overlay (Advanced OpenGL blending).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.ReverseSubtract">
      <summary>
        <para>Reverse subtract.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.Screen">
      <summary>
        <para>Screen (Advanced OpenGL blending).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.SoftLight">
      <summary>
        <para>Soft light (Advanced OpenGL blending).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.Subtract">
      <summary>
        <para>Subtract.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.BlendState">
      <summary>
        <para>Values for the blend state.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.BlendState.alphaToMask">
      <summary>
        <para>Turns on alpha-to-coverage.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.BlendState.blendState0">
      <summary>
        <para>Blend state for render target 0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.BlendState.blendState1">
      <summary>
        <para>Blend state for render target 1.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.BlendState.blendState2">
      <summary>
        <para>Blend state for render target 2.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.BlendState.blendState3">
      <summary>
        <para>Blend state for render target 3.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.BlendState.blendState4">
      <summary>
        <para>Blend state for render target 4.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.BlendState.blendState5">
      <summary>
        <para>Blend state for render target 5.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.BlendState.blendState6">
      <summary>
        <para>Blend state for render target 6.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.BlendState.blendState7">
      <summary>
        <para>Blend state for render target 7.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.BlendState.defaultValue">
      <summary>
        <para>Default values for the blend state.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.BlendState.separateMRTBlendStates">
      <summary>
        <para>Determines whether each render target uses a separate blend state.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.BlendState.#ctor(System.Boolean,System.Boolean)">
      <summary>
        <para>Creates a new blend state with the specified values.</para>
      </summary>
      <param name="separateMRTBlend">Determines whether each render target uses a separate blend state.</param>
      <param name="alphaToMask">Turns on alpha-to-coverage.</param>
    </member>
    <member name="T:UnityEngine.Rendering.BuiltinRenderTextureType">
      <summary>
        <para>Built-in temporary render textures produced during camera's rendering.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinRenderTextureType.BufferPtr">
      <summary>
        <para>The raw RenderBuffer pointer to be used.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinRenderTextureType.CameraTarget">
      <summary>
        <para>Target texture of currently rendering camera.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinRenderTextureType.CurrentActive">
      <summary>
        <para>Currently active render target.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinRenderTextureType.Depth">
      <summary>
        <para>Camera's depth texture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinRenderTextureType.DepthNormals">
      <summary>
        <para>Camera's depth+normals texture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinRenderTextureType.GBuffer0">
      <summary>
        <para>Deferred shading G-buffer #0 (typically diffuse color).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinRenderTextureType.GBuffer1">
      <summary>
        <para>Deferred shading G-buffer #1 (typically specular + roughness).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinRenderTextureType.GBuffer2">
      <summary>
        <para>Deferred shading G-buffer #2 (typically normals).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinRenderTextureType.GBuffer3">
      <summary>
        <para>Deferred shading G-buffer #3 (typically emission/lighting).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinRenderTextureType.GBuffer4">
      <summary>
        <para>Deferred shading G-buffer #4 (typically occlusion mask for static lights if any).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinRenderTextureType.GBuffer5">
      <summary>
        <para>G-buffer #5 Available.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinRenderTextureType.GBuffer6">
      <summary>
        <para>G-buffer #6 Available.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinRenderTextureType.GBuffer7">
      <summary>
        <para>G-buffer #7 Available.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinRenderTextureType.MotionVectors">
      <summary>
        <para>Motion Vectors generated when the camera has motion vectors enabled.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinRenderTextureType.PrepassLight">
      <summary>
        <para>Deferred lighting light buffer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinRenderTextureType.PrepassLightSpec">
      <summary>
        <para>Deferred lighting HDR specular light buffer (Xbox 360 only).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinRenderTextureType.PrepassNormalsSpec">
      <summary>
        <para>Deferred lighting (normals+specular) G-buffer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinRenderTextureType.PropertyName">
      <summary>
        <para>A globally set property name.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinRenderTextureType.Reflections">
      <summary>
        <para>Reflections gathered from default reflection and reflections probes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinRenderTextureType.RenderTexture">
      <summary>
        <para>The given RenderTexture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinRenderTextureType.ResolvedDepth">
      <summary>
        <para>Resolved depth buffer from deferred.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.BuiltinShaderDefine">
      <summary>
        <para>Defines set by editor when compiling shaders, depending on target platform and tier. You can only set a GraphicsTier in the Built-in Render Pipeline.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderDefine.SHADER_API_DESKTOP">
      <summary>
        <para>SHADER_API_DESKTOP is set when compiling shader for "desktop" platforms.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderDefine.SHADER_API_GLES30">
      <summary>
        <para>SHADER_API_ES30 is set when the Graphics API is OpenGL ES 3 and the minimum supported OpenGL ES 3 version is OpenGL ES 3.0.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderDefine.SHADER_API_MOBILE">
      <summary>
        <para>SHADER_API_MOBILE is set when compiling shader for mobile platforms.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderDefine.UNITY_ASTC_NORMALMAP_ENCODING">
      <summary>
        <para>Unity enables UNITY_ASTC_NORMALMAP_ENCODING when DXT5nm-style normal maps are used on Android, iOS or tvOS.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderDefine.UNITY_COLORSPACE_GAMMA">
      <summary>
        <para>UNITY_COLORSPACE_GAMMA is set when compiling shaders for Gamma Color Space.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderDefine.UNITY_ENABLE_DETAIL_NORMALMAP">
      <summary>
        <para>UNITY_ENABLE_DETAIL_NORMALMAP is set if Detail Normal Map should be sampled if assigned.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderDefine.UNITY_ENABLE_NATIVE_SHADOW_LOOKUPS">
      <summary>
        <para>UNITY_ENABLE_NATIVE_SHADOW_LOOKUPS enables use of built-in shadow comparison samplers on OpenGL ES 2.0.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderDefine.UNITY_ENABLE_REFLECTION_BUFFERS">
      <summary>
        <para>UNITY_ENABLE_REFLECTION_BUFFERS is set when deferred shading renders reflection probes in deferred mode. With this option set reflections are rendered into a per-pixel buffer. This is similar to the way lights are rendered into a per-pixel buffer. UNITY_ENABLE_REFLECTION_BUFFERS is on by default when using deferred shading, but you can turn it off by setting “No support” for the Deferred Reflections shader option in Graphics Settings. When the setting is off, reflection probes are rendered per-object, similar to the way forward rendering works.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderDefine.UNITY_FRAMEBUFFER_FETCH_AVAILABLE">
      <summary>
        <para>UNITY_FRAMEBUFFER_FETCH_AVAILABLE is set when compiling shaders for platforms where framebuffer fetch is potentially available.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderDefine.UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS">
      <summary>
        <para>UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS is set automatically for platforms that don't require full floating-point precision support in fragment shaders.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderDefine.UNITY_HARDWARE_TIER1">
      <summary>
        <para>UNITY_HARDWARE_TIER1 is set when compiling shaders for GraphicsTier.Tier1.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderDefine.UNITY_HARDWARE_TIER2">
      <summary>
        <para>UNITY_HARDWARE_TIER2 is set when compiling shaders for GraphicsTier.Tier2.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderDefine.UNITY_HARDWARE_TIER3">
      <summary>
        <para>UNITY_HARDWARE_TIER3 is set when compiling shaders for GraphicsTier.Tier3.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderDefine.UNITY_LIGHT_PROBE_PROXY_VOLUME">
      <summary>
        <para>UNITY_LIGHT_PROBE_PROXY_VOLUME is set when Light Probe Proxy Volume feature is supported by the current graphics API and is enabled in the. You can only set a Graphics Tier in the Built-in Render Pipeline.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderDefine.UNITY_LIGHTMAP_DLDR_ENCODING">
      <summary>
        <para>UNITY_LIGHTMAP_DLDR_ENCODING is set when lightmap textures are using double LDR encoding to store the values in the texture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderDefine.UNITY_LIGHTMAP_FULL_HDR">
      <summary>
        <para>UNITY_LIGHTMAP_FULL_HDR is set when lightmap textures are not using any encoding to store the values in the texture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderDefine.UNITY_LIGHTMAP_RGBM_ENCODING">
      <summary>
        <para>UNITY_LIGHTMAP_RGBM_ENCODING is set when lightmap textures are using RGBM encoding to store the values in the texture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderDefine.UNITY_METAL_SHADOWS_USE_POINT_FILTERING">
      <summary>
        <para>UNITY_METAL_SHADOWS_USE_POINT_FILTERING is set if shadow sampler should use point filtering on iOS Metal.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderDefine.UNITY_NO_DXT5nm">
      <summary>
        <para>UNITY_NO_DXT5nm is set when compiling shader for platform that do not support DXT5NM, meaning that normal maps will be encoded in RGB instead.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderDefine.UNITY_NO_FULL_STANDARD_SHADER">
      <summary>
        <para>UNITY_NO_FULL_STANDARD_SHADER is set if Standard shader BRDF3 with extra simplifications should be used.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderDefine.UNITY_NO_RGBM">
      <summary>
        <para>UNITY_NO_RGBM is set when compiling shader for platform that do not support RGBM, so dLDR will be used instead.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderDefine.UNITY_NO_SCREENSPACE_SHADOWS">
      <summary>
        <para>UNITY_NO_SCREENSPACE_SHADOWS is set when screenspace cascaded shadow maps are disabled.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderDefine.UNITY_PBS_USE_BRDF1">
      <summary>
        <para>UNITY_PBS_USE_BRDF1 is set if Standard Shader BRDF1 should be used.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderDefine.UNITY_PBS_USE_BRDF2">
      <summary>
        <para>UNITY_PBS_USE_BRDF2 is set if Standard Shader BRDF2 should be used.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderDefine.UNITY_PBS_USE_BRDF3">
      <summary>
        <para>UNITY_PBS_USE_BRDF3 is set if Standard Shader BRDF3 should be used.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderDefine.UNITY_PRETRANSFORM_TO_DISPLAY_ORIENTATION">
      <summary>
        <para>Unity enables UNITY_PRETRANSFORM_TO_DISPLAY_ORIENTATION when Vulkan pre-transform is enabled and supported on the target build platform.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderDefine.UNITY_SPECCUBE_BLENDING">
      <summary>
        <para>UNITY_SPECCUBE_BLENDING is set if Reflection Probes Blending is enabled.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderDefine.UNITY_SPECCUBE_BOX_PROJECTION">
      <summary>
        <para>UNITY_SPECCUBE_BLENDING is set if Reflection Probes Box Projection is enabled.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderDefine.UNITY_UNIFIED_SHADER_PRECISION_MODEL">
      <summary>
        <para>Unity sets UNITY_UNIFIED_SHADER_PRECISION_MODEL if, in Player Settings, you set Shader Precision Model to Unified.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderDefine.UNITY_USE_DITHER_MASK_FOR_ALPHABLENDED_SHADOWS">
      <summary>
        <para>UNITY_USE_DITHER_MASK_FOR_ALPHABLENDED_SHADOWS is set when Semitransparent Shadows are enabled.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderDefine.UNITY_VIRTUAL_TEXTURING">
      <summary>
        <para>Is virtual texturing enabled and supported on this platform.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.BuiltinShaderMode">
      <summary>
        <para>Built-in shader modes used by Rendering.GraphicsSettings.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderMode.Disabled">
      <summary>
        <para>Don't use any shader, effectively disabling the functionality.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderMode.UseBuiltin">
      <summary>
        <para>Use built-in shader (default).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderMode.UseCustom">
      <summary>
        <para>Use custom shader instead of built-in one.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.BuiltinShaderType">
      <summary>
        <para>Built-in shader types used by Rendering.GraphicsSettings.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderType.DeferredReflections">
      <summary>
        <para>Shader used for deferred reflection probes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderType.DeferredShading">
      <summary>
        <para>Shader used for deferred shading calculations.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderType.DepthNormals">
      <summary>
        <para>Shader used for depth and normals texture when enabled on a Camera.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderType.LegacyDeferredLighting">
      <summary>
        <para>Shader used for legacy deferred lighting calculations.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderType.LensFlare">
      <summary>
        <para>Default shader used for lens flares.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderType.LightHalo">
      <summary>
        <para>Default shader used for light halos.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderType.MotionVectors">
      <summary>
        <para>Shader used for Motion Vectors when enabled on a Camera.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BuiltinShaderType.ScreenSpaceShadows">
      <summary>
        <para>Shader used for screen-space cascaded shadows.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.CameraEvent">
      <summary>
        <para>Defines a place in camera's rendering to attach Rendering.CommandBuffer objects to.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CameraEvent.AfterDepthNormalsTexture">
      <summary>
        <para>After camera's depth+normals texture is generated.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CameraEvent.AfterDepthTexture">
      <summary>
        <para>After camera's depth texture is generated.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CameraEvent.AfterEverything">
      <summary>
        <para>After camera has done rendering everything.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CameraEvent.AfterFinalPass">
      <summary>
        <para>After final geometry pass in deferred lighting.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CameraEvent.AfterForwardAlpha">
      <summary>
        <para>After transparent objects in forward rendering.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CameraEvent.AfterForwardOpaque">
      <summary>
        <para>After opaque objects in forward rendering.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CameraEvent.AfterGBuffer">
      <summary>
        <para>After deferred rendering G-buffer is rendered.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CameraEvent.AfterHaloAndLensFlares">
      <summary>
        <para>After halo and lens flares.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CameraEvent.AfterImageEffects">
      <summary>
        <para>After image effects.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CameraEvent.AfterImageEffectsOpaque">
      <summary>
        <para>After image effects that happen between opaque &amp; transparent objects.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CameraEvent.AfterLighting">
      <summary>
        <para>After lighting pass in deferred rendering.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CameraEvent.AfterReflections">
      <summary>
        <para>After reflections pass in deferred rendering.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CameraEvent.AfterSkybox">
      <summary>
        <para>After skybox is drawn.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CameraEvent.BeforeDepthNormalsTexture">
      <summary>
        <para>Before camera's depth+normals texture is generated.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CameraEvent.BeforeDepthTexture">
      <summary>
        <para>Before camera's depth texture is generated.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CameraEvent.BeforeFinalPass">
      <summary>
        <para>Before final geometry pass in deferred lighting.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CameraEvent.BeforeForwardAlpha">
      <summary>
        <para>Before transparent objects in forward rendering.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CameraEvent.BeforeForwardOpaque">
      <summary>
        <para>Before opaque objects in forward rendering.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CameraEvent.BeforeGBuffer">
      <summary>
        <para>Before deferred rendering G-buffer is rendered.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CameraEvent.BeforeHaloAndLensFlares">
      <summary>
        <para>Before halo and lens flares.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CameraEvent.BeforeImageEffects">
      <summary>
        <para>Before image effects.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CameraEvent.BeforeImageEffectsOpaque">
      <summary>
        <para>Before image effects that happen between opaque &amp; transparent objects.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CameraEvent.BeforeLighting">
      <summary>
        <para>Before lighting pass in deferred rendering.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CameraEvent.BeforeReflections">
      <summary>
        <para>Before reflections pass in deferred rendering.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CameraEvent.BeforeSkybox">
      <summary>
        <para>Before skybox is drawn.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.CameraHDRMode">
      <summary>
        <para>The HDR mode to use for rendering.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CameraHDRMode.FP16">
      <summary>
        <para>Uses RenderTextureFormat.ARGBHalf.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CameraHDRMode.R11G11B10">
      <summary>
        <para>Uses RenderTextureFormat.RGB111110Float.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.CameraProperties">
      <summary>
        <para>Camera related properties in CullingParameters.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.CameraProperties.GetCameraCullingPlane(System.Int32)">
      <summary>
        <para>Get a camera culling plane.</para>
      </summary>
      <param name="index">Plane index (up to 5).</param>
      <returns>
        <para>Camera culling plane.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.CameraProperties.GetShadowCullingPlane(System.Int32)">
      <summary>
        <para>Get a shadow culling plane.</para>
      </summary>
      <param name="index">Plane index (up to 5).</param>
      <returns>
        <para>Shadow culling plane.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.CameraProperties.SetCameraCullingPlane(System.Int32,UnityEngine.Plane)">
      <summary>
        <para>Set a camera culling plane.</para>
      </summary>
      <param name="index">Plane index (up to 5).</param>
      <param name="plane">Camera culling plane.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CameraProperties.SetShadowCullingPlane(System.Int32,UnityEngine.Plane)">
      <summary>
        <para>Set a shadow culling plane.</para>
      </summary>
      <param name="index">Plane index (up to 5).</param>
      <param name="plane">Shadow culling plane.</param>
    </member>
    <member name="T:UnityEngine.Rendering.ColorWriteMask">
      <summary>
        <para>Specifies which color components will get written into the target framebuffer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ColorWriteMask.All">
      <summary>
        <para>Write all components (R, G, B and Alpha).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ColorWriteMask.Alpha">
      <summary>
        <para>Write alpha component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ColorWriteMask.Blue">
      <summary>
        <para>Write blue component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ColorWriteMask.Green">
      <summary>
        <para>Write green component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ColorWriteMask.Red">
      <summary>
        <para>Write red component.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.CommandBuffer">
      <summary>
        <para>List of graphics commands to execute.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.CommandBuffer.name">
      <summary>
        <para>Name of this command buffer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.CommandBuffer.sizeInBytes">
      <summary>
        <para>Size of this command buffer in bytes (Read Only).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.BeginSample(UnityEngine.Profiling.CustomSampler)">
      <summary>
        <para>Adds a command to begin profile sampling.</para>
      </summary>
      <param name="name">Name of the profile information used for sampling.</param>
      <param name="sampler">The CustomSampler that the CommandBuffer uses for sampling.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.BeginSample(System.String)">
      <summary>
        <para>Adds a command to begin profile sampling.</para>
      </summary>
      <param name="name">Name of the profile information used for sampling.</param>
      <param name="sampler">The CustomSampler that the CommandBuffer uses for sampling.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.Blit(UnityEngine.Texture,UnityEngine.Rendering.RenderTargetIdentifier)">
      <summary>
        <para>Add a "blit into a render texture" command.</para>
      </summary>
      <param name="source">Source texture or render target to blit from.</param>
      <param name="dest">Destination to blit into.</param>
      <param name="mat">Material to use.</param>
      <param name="pass">Shader pass to use (default is -1, meaning "all passes").</param>
      <param name="scale">Scale applied to the source texture coordinate.</param>
      <param name="offset">Offset applied to the source texture coordinate.</param>
      <param name="sourceDepthSlice">The texture array source slice to perform the blit from.</param>
      <param name="destDepthSlice">The texture array destination slice to perform the blit to.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.Blit(UnityEngine.Texture,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Material)">
      <summary>
        <para>Add a "blit into a render texture" command.</para>
      </summary>
      <param name="source">Source texture or render target to blit from.</param>
      <param name="dest">Destination to blit into.</param>
      <param name="mat">Material to use.</param>
      <param name="pass">Shader pass to use (default is -1, meaning "all passes").</param>
      <param name="scale">Scale applied to the source texture coordinate.</param>
      <param name="offset">Offset applied to the source texture coordinate.</param>
      <param name="sourceDepthSlice">The texture array source slice to perform the blit from.</param>
      <param name="destDepthSlice">The texture array destination slice to perform the blit to.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.Blit(UnityEngine.Texture,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Material,System.Int32)">
      <summary>
        <para>Add a "blit into a render texture" command.</para>
      </summary>
      <param name="source">Source texture or render target to blit from.</param>
      <param name="dest">Destination to blit into.</param>
      <param name="mat">Material to use.</param>
      <param name="pass">Shader pass to use (default is -1, meaning "all passes").</param>
      <param name="scale">Scale applied to the source texture coordinate.</param>
      <param name="offset">Offset applied to the source texture coordinate.</param>
      <param name="sourceDepthSlice">The texture array source slice to perform the blit from.</param>
      <param name="destDepthSlice">The texture array destination slice to perform the blit to.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.Blit(UnityEngine.Texture,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Add a "blit into a render texture" command.</para>
      </summary>
      <param name="source">Source texture or render target to blit from.</param>
      <param name="dest">Destination to blit into.</param>
      <param name="mat">Material to use.</param>
      <param name="pass">Shader pass to use (default is -1, meaning "all passes").</param>
      <param name="scale">Scale applied to the source texture coordinate.</param>
      <param name="offset">Offset applied to the source texture coordinate.</param>
      <param name="sourceDepthSlice">The texture array source slice to perform the blit from.</param>
      <param name="destDepthSlice">The texture array destination slice to perform the blit to.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.Blit(UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderTargetIdentifier)">
      <summary>
        <para>Add a "blit into a render texture" command.</para>
      </summary>
      <param name="source">Source texture or render target to blit from.</param>
      <param name="dest">Destination to blit into.</param>
      <param name="mat">Material to use.</param>
      <param name="pass">Shader pass to use (default is -1, meaning "all passes").</param>
      <param name="scale">Scale applied to the source texture coordinate.</param>
      <param name="offset">Offset applied to the source texture coordinate.</param>
      <param name="sourceDepthSlice">The texture array source slice to perform the blit from.</param>
      <param name="destDepthSlice">The texture array destination slice to perform the blit to.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.Blit(UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Material)">
      <summary>
        <para>Add a "blit into a render texture" command.</para>
      </summary>
      <param name="source">Source texture or render target to blit from.</param>
      <param name="dest">Destination to blit into.</param>
      <param name="mat">Material to use.</param>
      <param name="pass">Shader pass to use (default is -1, meaning "all passes").</param>
      <param name="scale">Scale applied to the source texture coordinate.</param>
      <param name="offset">Offset applied to the source texture coordinate.</param>
      <param name="sourceDepthSlice">The texture array source slice to perform the blit from.</param>
      <param name="destDepthSlice">The texture array destination slice to perform the blit to.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.Blit(UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Material,System.Int32)">
      <summary>
        <para>Add a "blit into a render texture" command.</para>
      </summary>
      <param name="source">Source texture or render target to blit from.</param>
      <param name="dest">Destination to blit into.</param>
      <param name="mat">Material to use.</param>
      <param name="pass">Shader pass to use (default is -1, meaning "all passes").</param>
      <param name="scale">Scale applied to the source texture coordinate.</param>
      <param name="offset">Offset applied to the source texture coordinate.</param>
      <param name="sourceDepthSlice">The texture array source slice to perform the blit from.</param>
      <param name="destDepthSlice">The texture array destination slice to perform the blit to.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.Blit(UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Add a "blit into a render texture" command.</para>
      </summary>
      <param name="source">Source texture or render target to blit from.</param>
      <param name="dest">Destination to blit into.</param>
      <param name="mat">Material to use.</param>
      <param name="pass">Shader pass to use (default is -1, meaning "all passes").</param>
      <param name="scale">Scale applied to the source texture coordinate.</param>
      <param name="offset">Offset applied to the source texture coordinate.</param>
      <param name="sourceDepthSlice">The texture array source slice to perform the blit from.</param>
      <param name="destDepthSlice">The texture array destination slice to perform the blit to.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.Blit(UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderTargetIdentifier,System.Int32,System.Int32)">
      <summary>
        <para>Add a "blit into a render texture" command.</para>
      </summary>
      <param name="source">Source texture or render target to blit from.</param>
      <param name="dest">Destination to blit into.</param>
      <param name="mat">Material to use.</param>
      <param name="pass">Shader pass to use (default is -1, meaning "all passes").</param>
      <param name="scale">Scale applied to the source texture coordinate.</param>
      <param name="offset">Offset applied to the source texture coordinate.</param>
      <param name="sourceDepthSlice">The texture array source slice to perform the blit from.</param>
      <param name="destDepthSlice">The texture array destination slice to perform the blit to.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.Blit(UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Vector2,UnityEngine.Vector2,System.Int32,System.Int32)">
      <summary>
        <para>Add a "blit into a render texture" command.</para>
      </summary>
      <param name="source">Source texture or render target to blit from.</param>
      <param name="dest">Destination to blit into.</param>
      <param name="mat">Material to use.</param>
      <param name="pass">Shader pass to use (default is -1, meaning "all passes").</param>
      <param name="scale">Scale applied to the source texture coordinate.</param>
      <param name="offset">Offset applied to the source texture coordinate.</param>
      <param name="sourceDepthSlice">The texture array source slice to perform the blit from.</param>
      <param name="destDepthSlice">The texture array destination slice to perform the blit to.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.Blit(UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Material,System.Int32,System.Int32)">
      <summary>
        <para>Add a "blit into a render texture" command.</para>
      </summary>
      <param name="source">Source texture or render target to blit from.</param>
      <param name="dest">Destination to blit into.</param>
      <param name="mat">Material to use.</param>
      <param name="pass">Shader pass to use (default is -1, meaning "all passes").</param>
      <param name="scale">Scale applied to the source texture coordinate.</param>
      <param name="offset">Offset applied to the source texture coordinate.</param>
      <param name="sourceDepthSlice">The texture array source slice to perform the blit from.</param>
      <param name="destDepthSlice">The texture array destination slice to perform the blit to.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.BuildRayTracingAccelerationStructure(UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure)">
      <summary>
        <para>Adds a command to build the RayTracingAccelerationStructure to be used in a ray tracing dispatch.</para>
      </summary>
      <param name="accelerationStructure">The RayTracingAccelerationStructure to be generated.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.Clear">
      <summary>
        <para>Clear all commands in the buffer.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.ClearRandomWriteTargets">
      <summary>
        <para>Clear random write targets for level pixel shaders.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.ClearRenderTarget(System.Boolean,System.Boolean,UnityEngine.Color,System.Single)">
      <summary>
        <para>Adds a "clear render target" command.</para>
      </summary>
      <param name="clearDepth">Should clear depth buffer?</param>
      <param name="clearColor">Should clear color buffer?</param>
      <param name="backgroundColor">Color to clear with.</param>
      <param name="depth">Depth to clear with (default is 1.0).</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.ConvertTexture(UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderTargetIdentifier)">
      <summary>
        <para>Converts and copies a source texture to a destination texture with a different format or dimensions.</para>
      </summary>
      <param name="src">Source texture.</param>
      <param name="dst">Destination texture.</param>
      <param name="srcElement">Source element (e.g. cubemap face). Set this to 0 for 2D source textures.</param>
      <param name="dstElement">Destination element (e.g. cubemap face or texture array element).</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.ConvertTexture(UnityEngine.Rendering.RenderTargetIdentifier,System.Int32,UnityEngine.Rendering.RenderTargetIdentifier,System.Int32)">
      <summary>
        <para>Converts and copies a source texture to a destination texture with a different format or dimensions.</para>
      </summary>
      <param name="src">Source texture.</param>
      <param name="dst">Destination texture.</param>
      <param name="srcElement">Source element (e.g. cubemap face). Set this to 0 for 2D source textures.</param>
      <param name="dstElement">Destination element (e.g. cubemap face or texture array element).</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.CopyCounterValue(UnityEngine.ComputeBuffer,UnityEngine.ComputeBuffer,System.UInt32)">
      <summary>
        <para>Adds a command to copy ComputeBuffer or GraphicsBuffer counter value.</para>
      </summary>
      <param name="src">Append/consume buffer to copy the counter from.</param>
      <param name="dst">A buffer to copy the counter to.</param>
      <param name="dstOffsetBytes">Target byte offset in dst buffer.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.CopyCounterValue(UnityEngine.ComputeBuffer,UnityEngine.GraphicsBuffer,System.UInt32)">
      <summary>
        <para>Adds a command to copy ComputeBuffer or GraphicsBuffer counter value.</para>
      </summary>
      <param name="src">Append/consume buffer to copy the counter from.</param>
      <param name="dst">A buffer to copy the counter to.</param>
      <param name="dstOffsetBytes">Target byte offset in dst buffer.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.CopyCounterValue(UnityEngine.GraphicsBuffer,UnityEngine.ComputeBuffer,System.UInt32)">
      <summary>
        <para>Adds a command to copy ComputeBuffer or GraphicsBuffer counter value.</para>
      </summary>
      <param name="src">Append/consume buffer to copy the counter from.</param>
      <param name="dst">A buffer to copy the counter to.</param>
      <param name="dstOffsetBytes">Target byte offset in dst buffer.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.CopyCounterValue(UnityEngine.GraphicsBuffer,UnityEngine.GraphicsBuffer,System.UInt32)">
      <summary>
        <para>Adds a command to copy ComputeBuffer or GraphicsBuffer counter value.</para>
      </summary>
      <param name="src">Append/consume buffer to copy the counter from.</param>
      <param name="dst">A buffer to copy the counter to.</param>
      <param name="dstOffsetBytes">Target byte offset in dst buffer.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.CopyTexture(UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderTargetIdentifier)">
      <summary>
        <para>Adds a command to copy a texture into another texture.</para>
      </summary>
      <param name="src">Source texture or identifier, see RenderTargetIdentifier.</param>
      <param name="dst">Destination texture or identifier, see RenderTargetIdentifier.</param>
      <param name="srcElement">Source texture element (cubemap face, texture array layer or 3D texture depth slice).</param>
      <param name="srcMip">Source texture mipmap level.</param>
      <param name="dstElement">Destination texture element (cubemap face, texture array layer or 3D texture depth slice).</param>
      <param name="dstMip">Destination texture mipmap level.</param>
      <param name="srcX">X coordinate of source texture region to copy (left side is zero).</param>
      <param name="srcY">Y coordinate of source texture region to copy (bottom is zero).</param>
      <param name="srcWidth">Width of source texture region to copy.</param>
      <param name="srcHeight">Height of source texture region to copy.</param>
      <param name="dstX">X coordinate of where to copy region in destination texture (left side is zero).</param>
      <param name="dstY">Y coordinate of where to copy region in destination texture (bottom is zero).</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.CopyTexture(UnityEngine.Rendering.RenderTargetIdentifier,System.Int32,UnityEngine.Rendering.RenderTargetIdentifier,System.Int32)">
      <summary>
        <para>Adds a command to copy a texture into another texture.</para>
      </summary>
      <param name="src">Source texture or identifier, see RenderTargetIdentifier.</param>
      <param name="dst">Destination texture or identifier, see RenderTargetIdentifier.</param>
      <param name="srcElement">Source texture element (cubemap face, texture array layer or 3D texture depth slice).</param>
      <param name="srcMip">Source texture mipmap level.</param>
      <param name="dstElement">Destination texture element (cubemap face, texture array layer or 3D texture depth slice).</param>
      <param name="dstMip">Destination texture mipmap level.</param>
      <param name="srcX">X coordinate of source texture region to copy (left side is zero).</param>
      <param name="srcY">Y coordinate of source texture region to copy (bottom is zero).</param>
      <param name="srcWidth">Width of source texture region to copy.</param>
      <param name="srcHeight">Height of source texture region to copy.</param>
      <param name="dstX">X coordinate of where to copy region in destination texture (left side is zero).</param>
      <param name="dstY">Y coordinate of where to copy region in destination texture (bottom is zero).</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.CopyTexture(UnityEngine.Rendering.RenderTargetIdentifier,System.Int32,System.Int32,UnityEngine.Rendering.RenderTargetIdentifier,System.Int32,System.Int32)">
      <summary>
        <para>Adds a command to copy a texture into another texture.</para>
      </summary>
      <param name="src">Source texture or identifier, see RenderTargetIdentifier.</param>
      <param name="dst">Destination texture or identifier, see RenderTargetIdentifier.</param>
      <param name="srcElement">Source texture element (cubemap face, texture array layer or 3D texture depth slice).</param>
      <param name="srcMip">Source texture mipmap level.</param>
      <param name="dstElement">Destination texture element (cubemap face, texture array layer or 3D texture depth slice).</param>
      <param name="dstMip">Destination texture mipmap level.</param>
      <param name="srcX">X coordinate of source texture region to copy (left side is zero).</param>
      <param name="srcY">Y coordinate of source texture region to copy (bottom is zero).</param>
      <param name="srcWidth">Width of source texture region to copy.</param>
      <param name="srcHeight">Height of source texture region to copy.</param>
      <param name="dstX">X coordinate of where to copy region in destination texture (left side is zero).</param>
      <param name="dstY">Y coordinate of where to copy region in destination texture (bottom is zero).</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.CopyTexture(UnityEngine.Rendering.RenderTargetIdentifier,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Rendering.RenderTargetIdentifier,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Adds a command to copy a texture into another texture.</para>
      </summary>
      <param name="src">Source texture or identifier, see RenderTargetIdentifier.</param>
      <param name="dst">Destination texture or identifier, see RenderTargetIdentifier.</param>
      <param name="srcElement">Source texture element (cubemap face, texture array layer or 3D texture depth slice).</param>
      <param name="srcMip">Source texture mipmap level.</param>
      <param name="dstElement">Destination texture element (cubemap face, texture array layer or 3D texture depth slice).</param>
      <param name="dstMip">Destination texture mipmap level.</param>
      <param name="srcX">X coordinate of source texture region to copy (left side is zero).</param>
      <param name="srcY">Y coordinate of source texture region to copy (bottom is zero).</param>
      <param name="srcWidth">Width of source texture region to copy.</param>
      <param name="srcHeight">Height of source texture region to copy.</param>
      <param name="dstX">X coordinate of where to copy region in destination texture (left side is zero).</param>
      <param name="dstY">Y coordinate of where to copy region in destination texture (bottom is zero).</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.CreateAsyncGraphicsFence">
      <summary>
        <para>Shortcut for calling GommandBuffer.CreateGraphicsFence with GraphicsFenceType.AsyncQueueSynchronization as the first parameter.</para>
      </summary>
      <param name="stage">The synchronization stage. See Graphics.CreateGraphicsFence.</param>
      <returns>
        <para>Returns a new GraphicsFence.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.CreateAsyncGraphicsFence(UnityEngine.Rendering.SynchronisationStage)">
      <summary>
        <para>Shortcut for calling GommandBuffer.CreateGraphicsFence with GraphicsFenceType.AsyncQueueSynchronization as the first parameter.</para>
      </summary>
      <param name="stage">The synchronization stage. See Graphics.CreateGraphicsFence.</param>
      <returns>
        <para>Returns a new GraphicsFence.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.CreateGPUFence(UnityEngine.Rendering.SynchronisationStage)">
      <summary>
        <para>This functionality is deprecated, and should no longer be used. Please use CommandBuffer.CreateGraphicsFence.</para>
      </summary>
      <param name="stage"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.CreateGraphicsFence">
      <summary>
        <para>Creates a GraphicsFence which will be passed after the last Blit, Clear, Draw, Dispatch or Texture Copy command prior to this call has been completed on the GPU.</para>
      </summary>
      <param name="fenceType">The type of GraphicsFence to create. Currently the only supported value is GraphicsFenceType.AsyncQueueSynchronization.</param>
      <param name="stage">On some platforms there is a significant gap between the vertex processing completing and the pixel processing begining for a given draw call. This parameter allows for the fence to be passed after either the vertex or pixel processing for the proceeding draw has completed. If a compute shader dispatch was the last task submitted then this parameter is ignored.</param>
      <returns>
        <para>Returns a new GraphicsFence.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.#ctor">
      <summary>
        <para>Create a new empty command buffer.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DisableScissorRect">
      <summary>
        <para>Add a command to disable the hardware scissor rectangle.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DisableShaderKeyword(System.String)">
      <summary>
        <para>Adds a command to disable global shader keyword.</para>
      </summary>
      <param name="keyword">Shader keyword to disable.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DispatchCompute(UnityEngine.ComputeShader,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Add a command to execute a ComputeShader.</para>
      </summary>
      <param name="computeShader">ComputeShader to execute.</param>
      <param name="kernelIndex">Kernel index to execute, see ComputeShader.FindKernel.</param>
      <param name="threadGroupsX">Number of work groups in the X dimension.</param>
      <param name="threadGroupsY">Number of work groups in the Y dimension.</param>
      <param name="threadGroupsZ">Number of work groups in the Z dimension.</param>
      <param name="indirectBuffer">ComputeBuffer with dispatch arguments.</param>
      <param name="argsOffset">Byte offset indicating the location of the dispatch arguments in the buffer.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DispatchCompute(UnityEngine.ComputeShader,System.Int32,UnityEngine.ComputeBuffer,System.UInt32)">
      <summary>
        <para>Add a command to execute a ComputeShader.</para>
      </summary>
      <param name="computeShader">ComputeShader to execute.</param>
      <param name="kernelIndex">Kernel index to execute, see ComputeShader.FindKernel.</param>
      <param name="threadGroupsX">Number of work groups in the X dimension.</param>
      <param name="threadGroupsY">Number of work groups in the Y dimension.</param>
      <param name="threadGroupsZ">Number of work groups in the Z dimension.</param>
      <param name="indirectBuffer">ComputeBuffer with dispatch arguments.</param>
      <param name="argsOffset">Byte offset indicating the location of the dispatch arguments in the buffer.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DispatchCompute(UnityEngine.ComputeShader,System.Int32,UnityEngine.GraphicsBuffer,System.UInt32)">
      <summary>
        <para>Add a command to execute a ComputeShader.</para>
      </summary>
      <param name="computeShader">ComputeShader to execute.</param>
      <param name="kernelIndex">Kernel index to execute, see ComputeShader.FindKernel.</param>
      <param name="threadGroupsX">Number of work groups in the X dimension.</param>
      <param name="threadGroupsY">Number of work groups in the Y dimension.</param>
      <param name="threadGroupsZ">Number of work groups in the Z dimension.</param>
      <param name="indirectBuffer">ComputeBuffer with dispatch arguments.</param>
      <param name="argsOffset">Byte offset indicating the location of the dispatch arguments in the buffer.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DispatchRays(UnityEngine.Experimental.Rendering.RayTracingShader,System.String,System.UInt32,System.UInt32,System.UInt32,UnityEngine.Camera)">
      <summary>
        <para>Adds a command to execute a RayTracingShader.</para>
      </summary>
      <param name="rayTracingShader">RayTracingShader to execute.</param>
      <param name="rayGenName">The name of the ray generation shader.</param>
      <param name="width">The width of the ray generation shader thread grid.</param>
      <param name="height">The height of the ray generation shader thread grid.</param>
      <param name="depth">The depth of the ray generation shader thread grid.</param>
      <param name="camera">Optional parameter used to setup camera-related built-in shader variables.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DrawMesh(UnityEngine.Mesh,UnityEngine.Matrix4x4,UnityEngine.Material,System.Int32,System.Int32,UnityEngine.MaterialPropertyBlock)">
      <summary>
        <para>Add a "draw mesh" command.</para>
      </summary>
      <param name="mesh">Mesh to draw.</param>
      <param name="matrix">Transformation matrix to use.</param>
      <param name="material">Material to use.</param>
      <param name="submeshIndex">Which subset of the mesh to render.</param>
      <param name="shaderPass">Which pass of the shader to use (default is -1, which renders all passes).</param>
      <param name="properties">Additional Material properties to apply onto the Material just before this Mesh is drawn. See MaterialPropertyBlock.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DrawMeshInstanced(UnityEngine.Mesh,System.Int32,UnityEngine.Material,System.Int32,UnityEngine.Matrix4x4[],System.Int32,UnityEngine.MaterialPropertyBlock)">
      <summary>
        <para>Adds a "draw mesh with instancing" command.

The command will not immediately fail and throw an exception if Material.enableInstancing is false, but it will log an error and skips rendering each time the command is being executed if such a condition is detected.

InvalidOperationException will be thrown if the current platform doesn't support this API (i.e. if GPU instancing is not available). See SystemInfo.supportsInstancing.</para>
      </summary>
      <param name="mesh">The Mesh to draw.</param>
      <param name="submeshIndex">Which subset of the mesh to draw. This only applies to meshes that are composed of several materials.</param>
      <param name="material">Material to use.</param>
      <param name="shaderPass">Which pass of the shader to use, or -1 which renders all passes.</param>
      <param name="matrices">The array of object transformation matrices.</param>
      <param name="count">The number of instances to be drawn.</param>
      <param name="properties">Additional Material properties to apply onto the Material just before this Mesh is drawn. See MaterialPropertyBlock.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DrawMeshInstanced(UnityEngine.Mesh,System.Int32,UnityEngine.Material,System.Int32,UnityEngine.Matrix4x4[],System.Int32)">
      <summary>
        <para>Adds a "draw mesh with instancing" command.

The command will not immediately fail and throw an exception if Material.enableInstancing is false, but it will log an error and skips rendering each time the command is being executed if such a condition is detected.

InvalidOperationException will be thrown if the current platform doesn't support this API (i.e. if GPU instancing is not available). See SystemInfo.supportsInstancing.</para>
      </summary>
      <param name="mesh">The Mesh to draw.</param>
      <param name="submeshIndex">Which subset of the mesh to draw. This only applies to meshes that are composed of several materials.</param>
      <param name="material">Material to use.</param>
      <param name="shaderPass">Which pass of the shader to use, or -1 which renders all passes.</param>
      <param name="matrices">The array of object transformation matrices.</param>
      <param name="count">The number of instances to be drawn.</param>
      <param name="properties">Additional Material properties to apply onto the Material just before this Mesh is drawn. See MaterialPropertyBlock.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DrawMeshInstanced(UnityEngine.Mesh,System.Int32,UnityEngine.Material,System.Int32,UnityEngine.Matrix4x4[])">
      <summary>
        <para>Adds a "draw mesh with instancing" command.

The command will not immediately fail and throw an exception if Material.enableInstancing is false, but it will log an error and skips rendering each time the command is being executed if such a condition is detected.

InvalidOperationException will be thrown if the current platform doesn't support this API (i.e. if GPU instancing is not available). See SystemInfo.supportsInstancing.</para>
      </summary>
      <param name="mesh">The Mesh to draw.</param>
      <param name="submeshIndex">Which subset of the mesh to draw. This only applies to meshes that are composed of several materials.</param>
      <param name="material">Material to use.</param>
      <param name="shaderPass">Which pass of the shader to use, or -1 which renders all passes.</param>
      <param name="matrices">The array of object transformation matrices.</param>
      <param name="count">The number of instances to be drawn.</param>
      <param name="properties">Additional Material properties to apply onto the Material just before this Mesh is drawn. See MaterialPropertyBlock.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DrawMeshInstancedIndirect(UnityEngine.Mesh,System.Int32,UnityEngine.Material,System.Int32,UnityEngine.ComputeBuffer,System.Int32,UnityEngine.MaterialPropertyBlock)">
      <summary>
        <para>Add a "draw mesh with indirect instancing" command.</para>
      </summary>
      <param name="mesh">The Mesh to draw.</param>
      <param name="submeshIndex">Which subset of the mesh to draw. This only applies to meshes that are composed of several materials.</param>
      <param name="material">Material to use.</param>
      <param name="shaderPass">Which pass of the shader to use, or -1 which renders all passes.</param>
      <param name="properties">Additional Material properties to apply onto the Material just before this Mesh is drawn. See MaterialPropertyBlock.</param>
      <param name="bufferWithArgs">The GPU buffer containing the arguments for how many instances of this mesh to draw.</param>
      <param name="argsOffset">The byte offset into the buffer, where the draw arguments start.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DrawMeshInstancedIndirect(UnityEngine.Mesh,System.Int32,UnityEngine.Material,System.Int32,UnityEngine.ComputeBuffer,System.Int32)">
      <summary>
        <para>Add a "draw mesh with indirect instancing" command.</para>
      </summary>
      <param name="mesh">The Mesh to draw.</param>
      <param name="submeshIndex">Which subset of the mesh to draw. This only applies to meshes that are composed of several materials.</param>
      <param name="material">Material to use.</param>
      <param name="shaderPass">Which pass of the shader to use, or -1 which renders all passes.</param>
      <param name="properties">Additional Material properties to apply onto the Material just before this Mesh is drawn. See MaterialPropertyBlock.</param>
      <param name="bufferWithArgs">The GPU buffer containing the arguments for how many instances of this mesh to draw.</param>
      <param name="argsOffset">The byte offset into the buffer, where the draw arguments start.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DrawMeshInstancedIndirect(UnityEngine.Mesh,System.Int32,UnityEngine.Material,System.Int32,UnityEngine.ComputeBuffer)">
      <summary>
        <para>Add a "draw mesh with indirect instancing" command.</para>
      </summary>
      <param name="mesh">The Mesh to draw.</param>
      <param name="submeshIndex">Which subset of the mesh to draw. This only applies to meshes that are composed of several materials.</param>
      <param name="material">Material to use.</param>
      <param name="shaderPass">Which pass of the shader to use, or -1 which renders all passes.</param>
      <param name="properties">Additional Material properties to apply onto the Material just before this Mesh is drawn. See MaterialPropertyBlock.</param>
      <param name="bufferWithArgs">The GPU buffer containing the arguments for how many instances of this mesh to draw.</param>
      <param name="argsOffset">The byte offset into the buffer, where the draw arguments start.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DrawMeshInstancedIndirect(UnityEngine.Mesh,System.Int32,UnityEngine.Material,System.Int32,UnityEngine.GraphicsBuffer,System.Int32,UnityEngine.MaterialPropertyBlock)">
      <summary>
        <para>Add a "draw mesh with indirect instancing" command.</para>
      </summary>
      <param name="mesh">The Mesh to draw.</param>
      <param name="submeshIndex">Which subset of the mesh to draw. This only applies to meshes that are composed of several materials.</param>
      <param name="material">Material to use.</param>
      <param name="shaderPass">Which pass of the shader to use, or -1 which renders all passes.</param>
      <param name="properties">Additional Material properties to apply onto the Material just before this Mesh is drawn. See MaterialPropertyBlock.</param>
      <param name="bufferWithArgs">The GPU buffer containing the arguments for how many instances of this mesh to draw.</param>
      <param name="argsOffset">The byte offset into the buffer, where the draw arguments start.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DrawMeshInstancedIndirect(UnityEngine.Mesh,System.Int32,UnityEngine.Material,System.Int32,UnityEngine.GraphicsBuffer,System.Int32)">
      <summary>
        <para>Add a "draw mesh with indirect instancing" command.</para>
      </summary>
      <param name="mesh">The Mesh to draw.</param>
      <param name="submeshIndex">Which subset of the mesh to draw. This only applies to meshes that are composed of several materials.</param>
      <param name="material">Material to use.</param>
      <param name="shaderPass">Which pass of the shader to use, or -1 which renders all passes.</param>
      <param name="properties">Additional Material properties to apply onto the Material just before this Mesh is drawn. See MaterialPropertyBlock.</param>
      <param name="bufferWithArgs">The GPU buffer containing the arguments for how many instances of this mesh to draw.</param>
      <param name="argsOffset">The byte offset into the buffer, where the draw arguments start.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DrawMeshInstancedIndirect(UnityEngine.Mesh,System.Int32,UnityEngine.Material,System.Int32,UnityEngine.GraphicsBuffer)">
      <summary>
        <para>Add a "draw mesh with indirect instancing" command.</para>
      </summary>
      <param name="mesh">The Mesh to draw.</param>
      <param name="submeshIndex">Which subset of the mesh to draw. This only applies to meshes that are composed of several materials.</param>
      <param name="material">Material to use.</param>
      <param name="shaderPass">Which pass of the shader to use, or -1 which renders all passes.</param>
      <param name="properties">Additional Material properties to apply onto the Material just before this Mesh is drawn. See MaterialPropertyBlock.</param>
      <param name="bufferWithArgs">The GPU buffer containing the arguments for how many instances of this mesh to draw.</param>
      <param name="argsOffset">The byte offset into the buffer, where the draw arguments start.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DrawMeshInstancedProcedural(UnityEngine.Mesh,System.Int32,UnityEngine.Material,System.Int32,System.Int32,UnityEngine.MaterialPropertyBlock)">
      <summary>
        <para>Add a "draw mesh with instancing" command.

Draw a mesh using Procedural Instancing. This is similar to Graphics.DrawMeshInstancedIndirect, except that when the instance count is known from script, it can be supplied directly using this method, rather than via a ComputeBuffer.
If Material.enableInstancing is false, the command logs an error and skips rendering each time the command is executed; the command does not immediately fail and throw an exception.

InvalidOperationException will be thrown if the current platform doesn't support this API (for example, if GPU instancing is not available). See SystemInfo.supportsInstancing.</para>
      </summary>
      <param name="mesh">The Mesh to draw.</param>
      <param name="submeshIndex">Which subset of the mesh to draw. This only applies to meshes that are composed of several materials.</param>
      <param name="material">Material to use.</param>
      <param name="shaderPass">Which pass of the shader to use, or -1 which renders all passes.</param>
      <param name="count">The number of instances to be drawn.</param>
      <param name="properties">Additional Material properties to apply onto the Material just before this Mesh is drawn. See MaterialPropertyBlock.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DrawOcclusionMesh(UnityEngine.RectInt)">
      <summary>
        <para>Adds a command onto the commandbuffer to draw the VR Device's occlusion mesh to the current render target.</para>
      </summary>
      <param name="normalizedCamViewport">The viewport of the camera currently being rendered.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DrawProcedural(UnityEngine.Matrix4x4,UnityEngine.Material,System.Int32,UnityEngine.MeshTopology,System.Int32,System.Int32,UnityEngine.MaterialPropertyBlock)">
      <summary>
        <para>Add a "draw procedural geometry" command.</para>
      </summary>
      <param name="matrix">Transformation matrix to use.</param>
      <param name="material">Material to use.</param>
      <param name="shaderPass">Which pass of the shader to use (or -1 for all passes).</param>
      <param name="topology">Topology of the procedural geometry.</param>
      <param name="vertexCount">Vertex count to render.</param>
      <param name="instanceCount">Instance count to render.</param>
      <param name="properties">Additional material properties to apply just before rendering. See MaterialPropertyBlock.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DrawProcedural(UnityEngine.Matrix4x4,UnityEngine.Material,System.Int32,UnityEngine.MeshTopology,System.Int32,System.Int32)">
      <summary>
        <para>Add a "draw procedural geometry" command.</para>
      </summary>
      <param name="matrix">Transformation matrix to use.</param>
      <param name="material">Material to use.</param>
      <param name="shaderPass">Which pass of the shader to use (or -1 for all passes).</param>
      <param name="topology">Topology of the procedural geometry.</param>
      <param name="vertexCount">Vertex count to render.</param>
      <param name="instanceCount">Instance count to render.</param>
      <param name="properties">Additional material properties to apply just before rendering. See MaterialPropertyBlock.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DrawProcedural(UnityEngine.Matrix4x4,UnityEngine.Material,System.Int32,UnityEngine.MeshTopology,System.Int32)">
      <summary>
        <para>Add a "draw procedural geometry" command.</para>
      </summary>
      <param name="matrix">Transformation matrix to use.</param>
      <param name="material">Material to use.</param>
      <param name="shaderPass">Which pass of the shader to use (or -1 for all passes).</param>
      <param name="topology">Topology of the procedural geometry.</param>
      <param name="vertexCount">Vertex count to render.</param>
      <param name="instanceCount">Instance count to render.</param>
      <param name="properties">Additional material properties to apply just before rendering. See MaterialPropertyBlock.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DrawProcedural(UnityEngine.GraphicsBuffer,UnityEngine.Matrix4x4,UnityEngine.Material,System.Int32,UnityEngine.MeshTopology,System.Int32,System.Int32,UnityEngine.MaterialPropertyBlock)">
      <summary>
        <para>Add a "draw procedural geometry" command.</para>
      </summary>
      <param name="matrix">Transformation matrix to use.</param>
      <param name="material">Material to use.</param>
      <param name="shaderPass">Which pass of the shader to use (or -1 for all passes).</param>
      <param name="topology">Topology of the procedural geometry.</param>
      <param name="indexCount">Index count to render.</param>
      <param name="instanceCount">Instance count to render.</param>
      <param name="indexBuffer">The index buffer used to submit vertices to the GPU.</param>
      <param name="properties">Additional material properties to apply just before rendering. See MaterialPropertyBlock.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DrawProcedural(UnityEngine.GraphicsBuffer,UnityEngine.Matrix4x4,UnityEngine.Material,System.Int32,UnityEngine.MeshTopology,System.Int32,System.Int32)">
      <summary>
        <para>Add a "draw procedural geometry" command.</para>
      </summary>
      <param name="matrix">Transformation matrix to use.</param>
      <param name="material">Material to use.</param>
      <param name="shaderPass">Which pass of the shader to use (or -1 for all passes).</param>
      <param name="topology">Topology of the procedural geometry.</param>
      <param name="indexCount">Index count to render.</param>
      <param name="instanceCount">Instance count to render.</param>
      <param name="indexBuffer">The index buffer used to submit vertices to the GPU.</param>
      <param name="properties">Additional material properties to apply just before rendering. See MaterialPropertyBlock.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DrawProcedural(UnityEngine.GraphicsBuffer,UnityEngine.Matrix4x4,UnityEngine.Material,System.Int32,UnityEngine.MeshTopology,System.Int32)">
      <summary>
        <para>Add a "draw procedural geometry" command.</para>
      </summary>
      <param name="matrix">Transformation matrix to use.</param>
      <param name="material">Material to use.</param>
      <param name="shaderPass">Which pass of the shader to use (or -1 for all passes).</param>
      <param name="topology">Topology of the procedural geometry.</param>
      <param name="indexCount">Index count to render.</param>
      <param name="instanceCount">Instance count to render.</param>
      <param name="indexBuffer">The index buffer used to submit vertices to the GPU.</param>
      <param name="properties">Additional material properties to apply just before rendering. See MaterialPropertyBlock.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DrawProceduralIndirect(UnityEngine.Matrix4x4,UnityEngine.Material,System.Int32,UnityEngine.MeshTopology,UnityEngine.ComputeBuffer,System.Int32,UnityEngine.MaterialPropertyBlock)">
      <summary>
        <para>Add a "draw procedural geometry" command.</para>
      </summary>
      <param name="matrix">Transformation matrix to use.</param>
      <param name="material">Material to use.</param>
      <param name="shaderPass">Which pass of the shader to use (or -1 for all passes).</param>
      <param name="topology">Topology of the procedural geometry.</param>
      <param name="properties">Additional material properties to apply just before rendering. See MaterialPropertyBlock.</param>
      <param name="bufferWithArgs">Buffer with draw arguments.</param>
      <param name="argsOffset">Byte offset where in the buffer the draw arguments are.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DrawProceduralIndirect(UnityEngine.Matrix4x4,UnityEngine.Material,System.Int32,UnityEngine.MeshTopology,UnityEngine.ComputeBuffer,System.Int32)">
      <summary>
        <para>Add a "draw procedural geometry" command.</para>
      </summary>
      <param name="matrix">Transformation matrix to use.</param>
      <param name="material">Material to use.</param>
      <param name="shaderPass">Which pass of the shader to use (or -1 for all passes).</param>
      <param name="topology">Topology of the procedural geometry.</param>
      <param name="properties">Additional material properties to apply just before rendering. See MaterialPropertyBlock.</param>
      <param name="bufferWithArgs">Buffer with draw arguments.</param>
      <param name="argsOffset">Byte offset where in the buffer the draw arguments are.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DrawProceduralIndirect(UnityEngine.Matrix4x4,UnityEngine.Material,System.Int32,UnityEngine.MeshTopology,UnityEngine.ComputeBuffer)">
      <summary>
        <para>Add a "draw procedural geometry" command.</para>
      </summary>
      <param name="matrix">Transformation matrix to use.</param>
      <param name="material">Material to use.</param>
      <param name="shaderPass">Which pass of the shader to use (or -1 for all passes).</param>
      <param name="topology">Topology of the procedural geometry.</param>
      <param name="properties">Additional material properties to apply just before rendering. See MaterialPropertyBlock.</param>
      <param name="bufferWithArgs">Buffer with draw arguments.</param>
      <param name="argsOffset">Byte offset where in the buffer the draw arguments are.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DrawProceduralIndirect(UnityEngine.Matrix4x4,UnityEngine.Material,System.Int32,UnityEngine.MeshTopology,UnityEngine.GraphicsBuffer,System.Int32,UnityEngine.MaterialPropertyBlock)">
      <summary>
        <para>Add a "draw procedural geometry" command.</para>
      </summary>
      <param name="matrix">Transformation matrix to use.</param>
      <param name="material">Material to use.</param>
      <param name="shaderPass">Which pass of the shader to use (or -1 for all passes).</param>
      <param name="topology">Topology of the procedural geometry.</param>
      <param name="properties">Additional material properties to apply just before rendering. See MaterialPropertyBlock.</param>
      <param name="bufferWithArgs">Buffer with draw arguments.</param>
      <param name="argsOffset">Byte offset where in the buffer the draw arguments are.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DrawProceduralIndirect(UnityEngine.Matrix4x4,UnityEngine.Material,System.Int32,UnityEngine.MeshTopology,UnityEngine.GraphicsBuffer,System.Int32)">
      <summary>
        <para>Add a "draw procedural geometry" command.</para>
      </summary>
      <param name="matrix">Transformation matrix to use.</param>
      <param name="material">Material to use.</param>
      <param name="shaderPass">Which pass of the shader to use (or -1 for all passes).</param>
      <param name="topology">Topology of the procedural geometry.</param>
      <param name="properties">Additional material properties to apply just before rendering. See MaterialPropertyBlock.</param>
      <param name="bufferWithArgs">Buffer with draw arguments.</param>
      <param name="argsOffset">Byte offset where in the buffer the draw arguments are.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DrawProceduralIndirect(UnityEngine.Matrix4x4,UnityEngine.Material,System.Int32,UnityEngine.MeshTopology,UnityEngine.GraphicsBuffer)">
      <summary>
        <para>Add a "draw procedural geometry" command.</para>
      </summary>
      <param name="matrix">Transformation matrix to use.</param>
      <param name="material">Material to use.</param>
      <param name="shaderPass">Which pass of the shader to use (or -1 for all passes).</param>
      <param name="topology">Topology of the procedural geometry.</param>
      <param name="properties">Additional material properties to apply just before rendering. See MaterialPropertyBlock.</param>
      <param name="bufferWithArgs">Buffer with draw arguments.</param>
      <param name="argsOffset">Byte offset where in the buffer the draw arguments are.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DrawProceduralIndirect(UnityEngine.GraphicsBuffer,UnityEngine.Matrix4x4,UnityEngine.Material,System.Int32,UnityEngine.MeshTopology,UnityEngine.ComputeBuffer,System.Int32,UnityEngine.MaterialPropertyBlock)">
      <summary>
        <para>Add a "draw procedural geometry" command.</para>
      </summary>
      <param name="indexBuffer">Index buffer used to submit vertices to the GPU.</param>
      <param name="matrix">Transformation matrix to use.</param>
      <param name="material">Material to use.</param>
      <param name="shaderPass">Which pass of the shader to use (or -1 for all passes).</param>
      <param name="topology">Topology of the procedural geometry.</param>
      <param name="bufferWithArgs">Buffer with draw arguments.</param>
      <param name="argsOffset">Byte offset where in the buffer the draw arguments are.</param>
      <param name="properties">Additional material properties to apply just before rendering. See MaterialPropertyBlock.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DrawProceduralIndirect(UnityEngine.GraphicsBuffer,UnityEngine.Matrix4x4,UnityEngine.Material,System.Int32,UnityEngine.MeshTopology,UnityEngine.ComputeBuffer,System.Int32)">
      <summary>
        <para>Add a "draw procedural geometry" command.</para>
      </summary>
      <param name="indexBuffer">Index buffer used to submit vertices to the GPU.</param>
      <param name="matrix">Transformation matrix to use.</param>
      <param name="material">Material to use.</param>
      <param name="shaderPass">Which pass of the shader to use (or -1 for all passes).</param>
      <param name="topology">Topology of the procedural geometry.</param>
      <param name="bufferWithArgs">Buffer with draw arguments.</param>
      <param name="argsOffset">Byte offset where in the buffer the draw arguments are.</param>
      <param name="properties">Additional material properties to apply just before rendering. See MaterialPropertyBlock.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DrawProceduralIndirect(UnityEngine.GraphicsBuffer,UnityEngine.Matrix4x4,UnityEngine.Material,System.Int32,UnityEngine.MeshTopology,UnityEngine.ComputeBuffer)">
      <summary>
        <para>Add a "draw procedural geometry" command.</para>
      </summary>
      <param name="indexBuffer">Index buffer used to submit vertices to the GPU.</param>
      <param name="matrix">Transformation matrix to use.</param>
      <param name="material">Material to use.</param>
      <param name="shaderPass">Which pass of the shader to use (or -1 for all passes).</param>
      <param name="topology">Topology of the procedural geometry.</param>
      <param name="bufferWithArgs">Buffer with draw arguments.</param>
      <param name="argsOffset">Byte offset where in the buffer the draw arguments are.</param>
      <param name="properties">Additional material properties to apply just before rendering. See MaterialPropertyBlock.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DrawProceduralIndirect(UnityEngine.GraphicsBuffer,UnityEngine.Matrix4x4,UnityEngine.Material,System.Int32,UnityEngine.MeshTopology,UnityEngine.GraphicsBuffer,System.Int32,UnityEngine.MaterialPropertyBlock)">
      <summary>
        <para>Add a "draw procedural geometry" command.</para>
      </summary>
      <param name="indexBuffer">Index buffer used to submit vertices to the GPU.</param>
      <param name="matrix">Transformation matrix to use.</param>
      <param name="material">Material to use.</param>
      <param name="shaderPass">Which pass of the shader to use (or -1 for all passes).</param>
      <param name="topology">Topology of the procedural geometry.</param>
      <param name="bufferWithArgs">Buffer with draw arguments.</param>
      <param name="argsOffset">Byte offset where in the buffer the draw arguments are.</param>
      <param name="properties">Additional material properties to apply just before rendering. See MaterialPropertyBlock.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DrawProceduralIndirect(UnityEngine.GraphicsBuffer,UnityEngine.Matrix4x4,UnityEngine.Material,System.Int32,UnityEngine.MeshTopology,UnityEngine.GraphicsBuffer,System.Int32)">
      <summary>
        <para>Add a "draw procedural geometry" command.</para>
      </summary>
      <param name="indexBuffer">Index buffer used to submit vertices to the GPU.</param>
      <param name="matrix">Transformation matrix to use.</param>
      <param name="material">Material to use.</param>
      <param name="shaderPass">Which pass of the shader to use (or -1 for all passes).</param>
      <param name="topology">Topology of the procedural geometry.</param>
      <param name="bufferWithArgs">Buffer with draw arguments.</param>
      <param name="argsOffset">Byte offset where in the buffer the draw arguments are.</param>
      <param name="properties">Additional material properties to apply just before rendering. See MaterialPropertyBlock.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DrawProceduralIndirect(UnityEngine.GraphicsBuffer,UnityEngine.Matrix4x4,UnityEngine.Material,System.Int32,UnityEngine.MeshTopology,UnityEngine.GraphicsBuffer)">
      <summary>
        <para>Add a "draw procedural geometry" command.</para>
      </summary>
      <param name="indexBuffer">Index buffer used to submit vertices to the GPU.</param>
      <param name="matrix">Transformation matrix to use.</param>
      <param name="material">Material to use.</param>
      <param name="shaderPass">Which pass of the shader to use (or -1 for all passes).</param>
      <param name="topology">Topology of the procedural geometry.</param>
      <param name="bufferWithArgs">Buffer with draw arguments.</param>
      <param name="argsOffset">Byte offset where in the buffer the draw arguments are.</param>
      <param name="properties">Additional material properties to apply just before rendering. See MaterialPropertyBlock.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.DrawRenderer(UnityEngine.Renderer,UnityEngine.Material,System.Int32,System.Int32)">
      <summary>
        <para>Add a "draw renderer" command.</para>
      </summary>
      <param name="renderer">Renderer to draw.</param>
      <param name="material">Material to use.</param>
      <param name="submeshIndex">Which subset of the mesh to render.</param>
      <param name="shaderPass">Which pass of the shader to use (default is -1, which renders all passes).</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.EnableScissorRect(UnityEngine.Rect)">
      <summary>
        <para>Add a command to enable the hardware scissor rectangle.</para>
      </summary>
      <param name="scissor">Viewport rectangle in pixel coordinates.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.EnableShaderKeyword(System.String)">
      <summary>
        <para>Adds a command to enable global shader keyword.</para>
      </summary>
      <param name="keyword">Shader keyword to enable.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.EndSample(UnityEngine.Profiling.CustomSampler)">
      <summary>
        <para>Adds a command to begin profile sampling.</para>
      </summary>
      <param name="name">Name of the profile information used for sampling.</param>
      <param name="sampler">The CustomSampler that the CommandBuffer uses for sampling.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.EndSample(System.String)">
      <summary>
        <para>Adds a command to begin profile sampling.</para>
      </summary>
      <param name="name">Name of the profile information used for sampling.</param>
      <param name="sampler">The CustomSampler that the CommandBuffer uses for sampling.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.GenerateMips(UnityEngine.RenderTexture)">
      <summary>
        <para>Generate mipmap levels of a render texture.</para>
      </summary>
      <param name="rt">The render texture requiring mipmaps generation.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.GenerateMips(UnityEngine.Rendering.RenderTargetIdentifier)">
      <summary>
        <para>Generate mipmap levels of a render texture.</para>
      </summary>
      <param name="rt">The render texture requiring mipmaps generation.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.GetTemporaryRT(System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.FilterMode,UnityEngine.RenderTextureFormat,UnityEngine.RenderTextureReadWrite,System.Int32,System.Boolean)">
      <summary>
        <para>Add a "get a temporary render texture" command.</para>
      </summary>
      <param name="nameID">Shader property name for this texture.</param>
      <param name="width">Width in pixels, or -1 for "camera pixel width".</param>
      <param name="height">Height in pixels, or -1 for "camera pixel height".</param>
      <param name="depthBuffer">Depth buffer bits (0, 16 or 24).</param>
      <param name="filter">Texture filtering mode (default is Point).</param>
      <param name="format">Format of the render texture (default is ARGB32).</param>
      <param name="readWrite">Color space conversion mode.</param>
      <param name="antiAliasing">Anti-aliasing (default is no anti-aliasing).</param>
      <param name="enableRandomWrite">Should random-write access into the texture be enabled (default is false).</param>
      <param name="desc">Use this RenderTextureDescriptor for the settings when creating the temporary RenderTexture.</param>
      <param name="memorylessMode">Render texture memoryless mode.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.GetTemporaryRT(System.Int32,UnityEngine.RenderTextureDescriptor,UnityEngine.FilterMode)">
      <summary>
        <para>Add a "get a temporary render texture" command.</para>
      </summary>
      <param name="nameID">Shader property name for this texture.</param>
      <param name="width">Width in pixels, or -1 for "camera pixel width".</param>
      <param name="height">Height in pixels, or -1 for "camera pixel height".</param>
      <param name="depthBuffer">Depth buffer bits (0, 16 or 24).</param>
      <param name="filter">Texture filtering mode (default is Point).</param>
      <param name="format">Format of the render texture (default is ARGB32).</param>
      <param name="readWrite">Color space conversion mode.</param>
      <param name="antiAliasing">Anti-aliasing (default is no anti-aliasing).</param>
      <param name="enableRandomWrite">Should random-write access into the texture be enabled (default is false).</param>
      <param name="desc">Use this RenderTextureDescriptor for the settings when creating the temporary RenderTexture.</param>
      <param name="memorylessMode">Render texture memoryless mode.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.GetTemporaryRTArray(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.FilterMode,UnityEngine.RenderTextureFormat,UnityEngine.RenderTextureReadWrite,System.Int32,System.Boolean)">
      <summary>
        <para>Add a "get a temporary render texture array" command.</para>
      </summary>
      <param name="nameID">Shader property name for this texture.</param>
      <param name="width">Width in pixels, or -1 for "camera pixel width".</param>
      <param name="height">Height in pixels, or -1 for "camera pixel height".</param>
      <param name="slices">Number of slices in texture array.</param>
      <param name="depthBuffer">Depth buffer bits (0, 16 or 24).</param>
      <param name="filter">Texture filtering mode (default is Point).</param>
      <param name="format">Format of the render texture (default is ARGB32).</param>
      <param name="readWrite">Color space conversion mode.</param>
      <param name="antiAliasing">Anti-aliasing (default is no anti-aliasing).</param>
      <param name="enableRandomWrite">Should random-write access into the texture be enabled (default is false).</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.IncrementUpdateCount(UnityEngine.Rendering.RenderTargetIdentifier)">
      <summary>
        <para>Increments the updateCount property of a Texture.</para>
      </summary>
      <param name="dest">Increments the updateCount for this Texture.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.IssuePluginCustomBlit(System.IntPtr,System.UInt32,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderTargetIdentifier,System.UInt32,System.UInt32)">
      <summary>
        <para>Send a user-defined blit event to a native code plugin.</para>
      </summary>
      <param name="callback">Native code callback to queue for Unity's renderer to invoke.</param>
      <param name="command">User defined command id to send to the callback.</param>
      <param name="source">Source render target.</param>
      <param name="dest">Destination render target.</param>
      <param name="commandParam">User data command parameters.</param>
      <param name="commandFlags">User data command flags.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.IssuePluginCustomTextureUpdate(System.IntPtr,UnityEngine.Texture,System.UInt32)">
      <summary>
        <para>Deprecated. Use CommandBuffer.IssuePluginCustomTextureUpdateV2 instead.</para>
      </summary>
      <param name="callback">Native code callback to queue for Unity's renderer to invoke.</param>
      <param name="targetTexture">Texture resource to be updated.</param>
      <param name="userData">User data to send to the native plugin.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.IssuePluginCustomTextureUpdateV1(System.IntPtr,UnityEngine.Texture,System.UInt32)">
      <summary>
        <para>Deprecated. Use CommandBuffer.IssuePluginCustomTextureUpdateV2 instead.</para>
      </summary>
      <param name="callback">Native code callback to queue for Unity's renderer to invoke.</param>
      <param name="targetTexture">Texture resource to be updated.</param>
      <param name="userData">User data to send to the native plugin.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.IssuePluginCustomTextureUpdateV2(System.IntPtr,UnityEngine.Texture,System.UInt32)">
      <summary>
        <para>Send a texture update event to a native code plugin.</para>
      </summary>
      <param name="callback">Native code callback to queue for Unity's renderer to invoke.</param>
      <param name="targetTexture">Texture resource to be updated.</param>
      <param name="userData">User data to send to the native plugin.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.IssuePluginEvent(System.IntPtr,System.Int32)">
      <summary>
        <para>Send a user-defined event to a native code plugin.</para>
      </summary>
      <param name="callback">Native code callback to queue for Unity's renderer to invoke.</param>
      <param name="eventID">User defined id to send to the callback.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.IssuePluginEventAndData(System.IntPtr,System.Int32,System.IntPtr)">
      <summary>
        <para>Send a user-defined event to a native code plugin with custom data.</para>
      </summary>
      <param name="callback">Native code callback to queue for Unity's renderer to invoke.</param>
      <param name="data">Custom data to pass to the native plugin callback.</param>
      <param name="eventID">Built in or user defined id to send to the callback.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.ReleaseTemporaryRT(System.Int32)">
      <summary>
        <para>Add a "release a temporary render texture" command.</para>
      </summary>
      <param name="nameID">Shader property name for this texture.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.RequestAsyncReadback(UnityEngine.ComputeBuffer,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Adds an asynchonous GPU readback request command to the command buffer.</para>
      </summary>
      <param name="src">The resource to read the data from.</param>
      <param name="size">Size in bytes of the data to be retrieved from the ComputeBuffer or GraphicsBuffer.</param>
      <param name="offset">Offset in bytes in the ComputeBuffer or GraphicsBuffer.</param>
      <param name="mipIndex">The index of the mipmap to be fetched.</param>
      <param name="dstFormat">The target TextureFormat of the data. Conversion will happen automatically if format is different from the format stored on GPU.</param>
      <param name="x">Starting X coordinate in pixels of the Texture data to be fetched.</param>
      <param name="y">Starting Y coordinate in pixels of the Texture data to be fetched.</param>
      <param name="z">Start Z coordinate in pixels for the Texture3D being fetched. Index of Start layer for TextureCube, Texture2DArray and TextureCubeArray being fetched.</param>
      <param name="depth">Depth in pixels for Texture3D being fetched. Number of layers for TextureCube, TextureArray and TextureCubeArray.</param>
      <param name="width">Width in pixels of the Texture data to be fetched.</param>
      <param name="height">Height in pixels of the Texture data to be fetched.</param>
      <param name="callback">A delegate System.Action called once the request is fullfilled. The done request is passed as parameter to the System.Action.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.RequestAsyncReadback(UnityEngine.ComputeBuffer,System.Int32,System.Int32,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Adds an asynchonous GPU readback request command to the command buffer.</para>
      </summary>
      <param name="src">The resource to read the data from.</param>
      <param name="size">Size in bytes of the data to be retrieved from the ComputeBuffer or GraphicsBuffer.</param>
      <param name="offset">Offset in bytes in the ComputeBuffer or GraphicsBuffer.</param>
      <param name="mipIndex">The index of the mipmap to be fetched.</param>
      <param name="dstFormat">The target TextureFormat of the data. Conversion will happen automatically if format is different from the format stored on GPU.</param>
      <param name="x">Starting X coordinate in pixels of the Texture data to be fetched.</param>
      <param name="y">Starting Y coordinate in pixels of the Texture data to be fetched.</param>
      <param name="z">Start Z coordinate in pixels for the Texture3D being fetched. Index of Start layer for TextureCube, Texture2DArray and TextureCubeArray being fetched.</param>
      <param name="depth">Depth in pixels for Texture3D being fetched. Number of layers for TextureCube, TextureArray and TextureCubeArray.</param>
      <param name="width">Width in pixels of the Texture data to be fetched.</param>
      <param name="height">Height in pixels of the Texture data to be fetched.</param>
      <param name="callback">A delegate System.Action called once the request is fullfilled. The done request is passed as parameter to the System.Action.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.RequestAsyncReadback(UnityEngine.GraphicsBuffer,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Adds an asynchonous GPU readback request command to the command buffer.</para>
      </summary>
      <param name="src">The resource to read the data from.</param>
      <param name="size">Size in bytes of the data to be retrieved from the ComputeBuffer or GraphicsBuffer.</param>
      <param name="offset">Offset in bytes in the ComputeBuffer or GraphicsBuffer.</param>
      <param name="mipIndex">The index of the mipmap to be fetched.</param>
      <param name="dstFormat">The target TextureFormat of the data. Conversion will happen automatically if format is different from the format stored on GPU.</param>
      <param name="x">Starting X coordinate in pixels of the Texture data to be fetched.</param>
      <param name="y">Starting Y coordinate in pixels of the Texture data to be fetched.</param>
      <param name="z">Start Z coordinate in pixels for the Texture3D being fetched. Index of Start layer for TextureCube, Texture2DArray and TextureCubeArray being fetched.</param>
      <param name="depth">Depth in pixels for Texture3D being fetched. Number of layers for TextureCube, TextureArray and TextureCubeArray.</param>
      <param name="width">Width in pixels of the Texture data to be fetched.</param>
      <param name="height">Height in pixels of the Texture data to be fetched.</param>
      <param name="callback">A delegate System.Action called once the request is fullfilled. The done request is passed as parameter to the System.Action.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.RequestAsyncReadback(UnityEngine.GraphicsBuffer,System.Int32,System.Int32,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Adds an asynchonous GPU readback request command to the command buffer.</para>
      </summary>
      <param name="src">The resource to read the data from.</param>
      <param name="size">Size in bytes of the data to be retrieved from the ComputeBuffer or GraphicsBuffer.</param>
      <param name="offset">Offset in bytes in the ComputeBuffer or GraphicsBuffer.</param>
      <param name="mipIndex">The index of the mipmap to be fetched.</param>
      <param name="dstFormat">The target TextureFormat of the data. Conversion will happen automatically if format is different from the format stored on GPU.</param>
      <param name="x">Starting X coordinate in pixels of the Texture data to be fetched.</param>
      <param name="y">Starting Y coordinate in pixels of the Texture data to be fetched.</param>
      <param name="z">Start Z coordinate in pixels for the Texture3D being fetched. Index of Start layer for TextureCube, Texture2DArray and TextureCubeArray being fetched.</param>
      <param name="depth">Depth in pixels for Texture3D being fetched. Number of layers for TextureCube, TextureArray and TextureCubeArray.</param>
      <param name="width">Width in pixels of the Texture data to be fetched.</param>
      <param name="height">Height in pixels of the Texture data to be fetched.</param>
      <param name="callback">A delegate System.Action called once the request is fullfilled. The done request is passed as parameter to the System.Action.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.RequestAsyncReadback(UnityEngine.Texture,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Adds an asynchonous GPU readback request command to the command buffer.</para>
      </summary>
      <param name="src">The resource to read the data from.</param>
      <param name="size">Size in bytes of the data to be retrieved from the ComputeBuffer or GraphicsBuffer.</param>
      <param name="offset">Offset in bytes in the ComputeBuffer or GraphicsBuffer.</param>
      <param name="mipIndex">The index of the mipmap to be fetched.</param>
      <param name="dstFormat">The target TextureFormat of the data. Conversion will happen automatically if format is different from the format stored on GPU.</param>
      <param name="x">Starting X coordinate in pixels of the Texture data to be fetched.</param>
      <param name="y">Starting Y coordinate in pixels of the Texture data to be fetched.</param>
      <param name="z">Start Z coordinate in pixels for the Texture3D being fetched. Index of Start layer for TextureCube, Texture2DArray and TextureCubeArray being fetched.</param>
      <param name="depth">Depth in pixels for Texture3D being fetched. Number of layers for TextureCube, TextureArray and TextureCubeArray.</param>
      <param name="width">Width in pixels of the Texture data to be fetched.</param>
      <param name="height">Height in pixels of the Texture data to be fetched.</param>
      <param name="callback">A delegate System.Action called once the request is fullfilled. The done request is passed as parameter to the System.Action.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.RequestAsyncReadback(UnityEngine.Texture,System.Int32,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Adds an asynchonous GPU readback request command to the command buffer.</para>
      </summary>
      <param name="src">The resource to read the data from.</param>
      <param name="size">Size in bytes of the data to be retrieved from the ComputeBuffer or GraphicsBuffer.</param>
      <param name="offset">Offset in bytes in the ComputeBuffer or GraphicsBuffer.</param>
      <param name="mipIndex">The index of the mipmap to be fetched.</param>
      <param name="dstFormat">The target TextureFormat of the data. Conversion will happen automatically if format is different from the format stored on GPU.</param>
      <param name="x">Starting X coordinate in pixels of the Texture data to be fetched.</param>
      <param name="y">Starting Y coordinate in pixels of the Texture data to be fetched.</param>
      <param name="z">Start Z coordinate in pixels for the Texture3D being fetched. Index of Start layer for TextureCube, Texture2DArray and TextureCubeArray being fetched.</param>
      <param name="depth">Depth in pixels for Texture3D being fetched. Number of layers for TextureCube, TextureArray and TextureCubeArray.</param>
      <param name="width">Width in pixels of the Texture data to be fetched.</param>
      <param name="height">Height in pixels of the Texture data to be fetched.</param>
      <param name="callback">A delegate System.Action called once the request is fullfilled. The done request is passed as parameter to the System.Action.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.RequestAsyncReadback(UnityEngine.Texture,System.Int32,UnityEngine.TextureFormat,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Adds an asynchonous GPU readback request command to the command buffer.</para>
      </summary>
      <param name="src">The resource to read the data from.</param>
      <param name="size">Size in bytes of the data to be retrieved from the ComputeBuffer or GraphicsBuffer.</param>
      <param name="offset">Offset in bytes in the ComputeBuffer or GraphicsBuffer.</param>
      <param name="mipIndex">The index of the mipmap to be fetched.</param>
      <param name="dstFormat">The target TextureFormat of the data. Conversion will happen automatically if format is different from the format stored on GPU.</param>
      <param name="x">Starting X coordinate in pixels of the Texture data to be fetched.</param>
      <param name="y">Starting Y coordinate in pixels of the Texture data to be fetched.</param>
      <param name="z">Start Z coordinate in pixels for the Texture3D being fetched. Index of Start layer for TextureCube, Texture2DArray and TextureCubeArray being fetched.</param>
      <param name="depth">Depth in pixels for Texture3D being fetched. Number of layers for TextureCube, TextureArray and TextureCubeArray.</param>
      <param name="width">Width in pixels of the Texture data to be fetched.</param>
      <param name="height">Height in pixels of the Texture data to be fetched.</param>
      <param name="callback">A delegate System.Action called once the request is fullfilled. The done request is passed as parameter to the System.Action.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.RequestAsyncReadback(UnityEngine.Texture,System.Int32,UnityEngine.Experimental.Rendering.GraphicsFormat,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Adds an asynchonous GPU readback request command to the command buffer.</para>
      </summary>
      <param name="src">The resource to read the data from.</param>
      <param name="size">Size in bytes of the data to be retrieved from the ComputeBuffer or GraphicsBuffer.</param>
      <param name="offset">Offset in bytes in the ComputeBuffer or GraphicsBuffer.</param>
      <param name="mipIndex">The index of the mipmap to be fetched.</param>
      <param name="dstFormat">The target TextureFormat of the data. Conversion will happen automatically if format is different from the format stored on GPU.</param>
      <param name="x">Starting X coordinate in pixels of the Texture data to be fetched.</param>
      <param name="y">Starting Y coordinate in pixels of the Texture data to be fetched.</param>
      <param name="z">Start Z coordinate in pixels for the Texture3D being fetched. Index of Start layer for TextureCube, Texture2DArray and TextureCubeArray being fetched.</param>
      <param name="depth">Depth in pixels for Texture3D being fetched. Number of layers for TextureCube, TextureArray and TextureCubeArray.</param>
      <param name="width">Width in pixels of the Texture data to be fetched.</param>
      <param name="height">Height in pixels of the Texture data to be fetched.</param>
      <param name="callback">A delegate System.Action called once the request is fullfilled. The done request is passed as parameter to the System.Action.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.RequestAsyncReadback(UnityEngine.Texture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Adds an asynchonous GPU readback request command to the command buffer.</para>
      </summary>
      <param name="src">The resource to read the data from.</param>
      <param name="size">Size in bytes of the data to be retrieved from the ComputeBuffer or GraphicsBuffer.</param>
      <param name="offset">Offset in bytes in the ComputeBuffer or GraphicsBuffer.</param>
      <param name="mipIndex">The index of the mipmap to be fetched.</param>
      <param name="dstFormat">The target TextureFormat of the data. Conversion will happen automatically if format is different from the format stored on GPU.</param>
      <param name="x">Starting X coordinate in pixels of the Texture data to be fetched.</param>
      <param name="y">Starting Y coordinate in pixels of the Texture data to be fetched.</param>
      <param name="z">Start Z coordinate in pixels for the Texture3D being fetched. Index of Start layer for TextureCube, Texture2DArray and TextureCubeArray being fetched.</param>
      <param name="depth">Depth in pixels for Texture3D being fetched. Number of layers for TextureCube, TextureArray and TextureCubeArray.</param>
      <param name="width">Width in pixels of the Texture data to be fetched.</param>
      <param name="height">Height in pixels of the Texture data to be fetched.</param>
      <param name="callback">A delegate System.Action called once the request is fullfilled. The done request is passed as parameter to the System.Action.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.RequestAsyncReadback(UnityEngine.Texture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.TextureFormat,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Adds an asynchonous GPU readback request command to the command buffer.</para>
      </summary>
      <param name="src">The resource to read the data from.</param>
      <param name="size">Size in bytes of the data to be retrieved from the ComputeBuffer or GraphicsBuffer.</param>
      <param name="offset">Offset in bytes in the ComputeBuffer or GraphicsBuffer.</param>
      <param name="mipIndex">The index of the mipmap to be fetched.</param>
      <param name="dstFormat">The target TextureFormat of the data. Conversion will happen automatically if format is different from the format stored on GPU.</param>
      <param name="x">Starting X coordinate in pixels of the Texture data to be fetched.</param>
      <param name="y">Starting Y coordinate in pixels of the Texture data to be fetched.</param>
      <param name="z">Start Z coordinate in pixels for the Texture3D being fetched. Index of Start layer for TextureCube, Texture2DArray and TextureCubeArray being fetched.</param>
      <param name="depth">Depth in pixels for Texture3D being fetched. Number of layers for TextureCube, TextureArray and TextureCubeArray.</param>
      <param name="width">Width in pixels of the Texture data to be fetched.</param>
      <param name="height">Height in pixels of the Texture data to be fetched.</param>
      <param name="callback">A delegate System.Action called once the request is fullfilled. The done request is passed as parameter to the System.Action.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.RequestAsyncReadback(UnityEngine.Texture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Experimental.Rendering.GraphicsFormat,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Adds an asynchonous GPU readback request command to the command buffer.</para>
      </summary>
      <param name="src">The resource to read the data from.</param>
      <param name="size">Size in bytes of the data to be retrieved from the ComputeBuffer or GraphicsBuffer.</param>
      <param name="offset">Offset in bytes in the ComputeBuffer or GraphicsBuffer.</param>
      <param name="mipIndex">The index of the mipmap to be fetched.</param>
      <param name="dstFormat">The target TextureFormat of the data. Conversion will happen automatically if format is different from the format stored on GPU.</param>
      <param name="x">Starting X coordinate in pixels of the Texture data to be fetched.</param>
      <param name="y">Starting Y coordinate in pixels of the Texture data to be fetched.</param>
      <param name="z">Start Z coordinate in pixels for the Texture3D being fetched. Index of Start layer for TextureCube, Texture2DArray and TextureCubeArray being fetched.</param>
      <param name="depth">Depth in pixels for Texture3D being fetched. Number of layers for TextureCube, TextureArray and TextureCubeArray.</param>
      <param name="width">Width in pixels of the Texture data to be fetched.</param>
      <param name="height">Height in pixels of the Texture data to be fetched.</param>
      <param name="callback">A delegate System.Action called once the request is fullfilled. The done request is passed as parameter to the System.Action.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.RequestAsyncReadbackIntoNativeArray(Unity.Collections.NativeArray`1&lt;T&gt;&amp;,UnityEngine.Texture,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Adds an asynchonous GPU readback request command to the command buffer.</para>
      </summary>
      <param name="output">Reference to a NativeArray to write the data into.</param>
      <param name="src">The resource to read the data from.</param>
      <param name="mipIndex">The index of the mipmap to fetch.</param>
      <param name="dstFormat">The target TextureFormat of the data. Conversion happens automatically if this format is different from the format stored on the GPU.</param>
      <param name="x">The starting x-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="y">The starting y-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="z">The starting z-coordinate, in pixels, of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the index of the start layer.</param>
      <param name="width">The width, in pixels, of the Texture data to fetch.</param>
      <param name="height">The height, in pixels, of the Texture data to fetch.</param>
      <param name="depth">The depth, in pixels of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the number of layers to retrieve.</param>
      <param name="callback">A delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.RequestAsyncReadbackIntoNativeArray(Unity.Collections.NativeArray`1&lt;T&gt;&amp;,UnityEngine.Texture,System.Int32,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Adds an asynchonous GPU readback request command to the command buffer.</para>
      </summary>
      <param name="output">Reference to a NativeArray to write the data into.</param>
      <param name="src">The resource to read the data from.</param>
      <param name="mipIndex">The index of the mipmap to fetch.</param>
      <param name="dstFormat">The target TextureFormat of the data. Conversion happens automatically if this format is different from the format stored on the GPU.</param>
      <param name="x">The starting x-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="y">The starting y-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="z">The starting z-coordinate, in pixels, of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the index of the start layer.</param>
      <param name="width">The width, in pixels, of the Texture data to fetch.</param>
      <param name="height">The height, in pixels, of the Texture data to fetch.</param>
      <param name="depth">The depth, in pixels of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the number of layers to retrieve.</param>
      <param name="callback">A delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.RequestAsyncReadbackIntoNativeArray(Unity.Collections.NativeArray`1&lt;T&gt;&amp;,UnityEngine.Texture,System.Int32,UnityEngine.TextureFormat,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Adds an asynchonous GPU readback request command to the command buffer.</para>
      </summary>
      <param name="output">Reference to a NativeArray to write the data into.</param>
      <param name="src">The resource to read the data from.</param>
      <param name="mipIndex">The index of the mipmap to fetch.</param>
      <param name="dstFormat">The target TextureFormat of the data. Conversion happens automatically if this format is different from the format stored on the GPU.</param>
      <param name="x">The starting x-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="y">The starting y-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="z">The starting z-coordinate, in pixels, of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the index of the start layer.</param>
      <param name="width">The width, in pixels, of the Texture data to fetch.</param>
      <param name="height">The height, in pixels, of the Texture data to fetch.</param>
      <param name="depth">The depth, in pixels of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the number of layers to retrieve.</param>
      <param name="callback">A delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.RequestAsyncReadbackIntoNativeArray(Unity.Collections.NativeArray`1&lt;T&gt;&amp;,UnityEngine.Texture,System.Int32,UnityEngine.Experimental.Rendering.GraphicsFormat,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Adds an asynchonous GPU readback request command to the command buffer.</para>
      </summary>
      <param name="output">Reference to a NativeArray to write the data into.</param>
      <param name="src">The resource to read the data from.</param>
      <param name="mipIndex">The index of the mipmap to fetch.</param>
      <param name="dstFormat">The target TextureFormat of the data. Conversion happens automatically if this format is different from the format stored on the GPU.</param>
      <param name="x">The starting x-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="y">The starting y-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="z">The starting z-coordinate, in pixels, of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the index of the start layer.</param>
      <param name="width">The width, in pixels, of the Texture data to fetch.</param>
      <param name="height">The height, in pixels, of the Texture data to fetch.</param>
      <param name="depth">The depth, in pixels of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the number of layers to retrieve.</param>
      <param name="callback">A delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.RequestAsyncReadbackIntoNativeArray(Unity.Collections.NativeArray`1&lt;T&gt;&amp;,UnityEngine.Texture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Adds an asynchonous GPU readback request command to the command buffer.</para>
      </summary>
      <param name="output">Reference to a NativeArray to write the data into.</param>
      <param name="src">The resource to read the data from.</param>
      <param name="mipIndex">The index of the mipmap to fetch.</param>
      <param name="dstFormat">The target TextureFormat of the data. Conversion happens automatically if this format is different from the format stored on the GPU.</param>
      <param name="x">The starting x-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="y">The starting y-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="z">The starting z-coordinate, in pixels, of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the index of the start layer.</param>
      <param name="width">The width, in pixels, of the Texture data to fetch.</param>
      <param name="height">The height, in pixels, of the Texture data to fetch.</param>
      <param name="depth">The depth, in pixels of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the number of layers to retrieve.</param>
      <param name="callback">A delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.RequestAsyncReadbackIntoNativeArray(Unity.Collections.NativeArray`1&lt;T&gt;&amp;,UnityEngine.Texture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.TextureFormat,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Adds an asynchonous GPU readback request command to the command buffer.</para>
      </summary>
      <param name="output">Reference to a NativeArray to write the data into.</param>
      <param name="src">The resource to read the data from.</param>
      <param name="mipIndex">The index of the mipmap to fetch.</param>
      <param name="dstFormat">The target TextureFormat of the data. Conversion happens automatically if this format is different from the format stored on the GPU.</param>
      <param name="x">The starting x-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="y">The starting y-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="z">The starting z-coordinate, in pixels, of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the index of the start layer.</param>
      <param name="width">The width, in pixels, of the Texture data to fetch.</param>
      <param name="height">The height, in pixels, of the Texture data to fetch.</param>
      <param name="depth">The depth, in pixels of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the number of layers to retrieve.</param>
      <param name="callback">A delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.RequestAsyncReadbackIntoNativeArray(Unity.Collections.NativeArray`1&lt;T&gt;&amp;,UnityEngine.Texture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Experimental.Rendering.GraphicsFormat,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Adds an asynchonous GPU readback request command to the command buffer.</para>
      </summary>
      <param name="output">Reference to a NativeArray to write the data into.</param>
      <param name="src">The resource to read the data from.</param>
      <param name="mipIndex">The index of the mipmap to fetch.</param>
      <param name="dstFormat">The target TextureFormat of the data. Conversion happens automatically if this format is different from the format stored on the GPU.</param>
      <param name="x">The starting x-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="y">The starting y-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="z">The starting z-coordinate, in pixels, of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the index of the start layer.</param>
      <param name="width">The width, in pixels, of the Texture data to fetch.</param>
      <param name="height">The height, in pixels, of the Texture data to fetch.</param>
      <param name="depth">The depth, in pixels of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the number of layers to retrieve.</param>
      <param name="callback">A delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.RequestAsyncReadbackIntoNativeArray(Unity.Collections.NativeArray`1&lt;T&gt;&amp;,UnityEngine.ComputeBuffer,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Adds an asynchonous GPU readback request command to the command buffer.</para>
      </summary>
      <param name="output">Reference to a NativeArray to write the data into.</param>
      <param name="src">The resource to read the data from.</param>
      <param name="size">The size, in bytes, of the data to retrieve from the ComputeBuffer or GraphicsBuffer.</param>
      <param name="offset">The offset in bytes in the ComputeBuffer or GraphicsBuffer.</param>
      <param name="callback">A delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.RequestAsyncReadbackIntoNativeArray(Unity.Collections.NativeArray`1&lt;T&gt;&amp;,UnityEngine.ComputeBuffer,System.Int32,System.Int32,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Adds an asynchonous GPU readback request command to the command buffer.</para>
      </summary>
      <param name="output">Reference to a NativeArray to write the data into.</param>
      <param name="src">The resource to read the data from.</param>
      <param name="size">The size, in bytes, of the data to retrieve from the ComputeBuffer or GraphicsBuffer.</param>
      <param name="offset">The offset in bytes in the ComputeBuffer or GraphicsBuffer.</param>
      <param name="callback">A delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.RequestAsyncReadbackIntoNativeArray(Unity.Collections.NativeArray`1&lt;T&gt;&amp;,UnityEngine.GraphicsBuffer,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Adds an asynchonous GPU readback request command to the command buffer.</para>
      </summary>
      <param name="output">Reference to a NativeArray to write the data into.</param>
      <param name="src">The resource to read the data from.</param>
      <param name="size">The size, in bytes, of the data to retrieve from the ComputeBuffer or GraphicsBuffer.</param>
      <param name="offset">The offset in bytes in the ComputeBuffer or GraphicsBuffer.</param>
      <param name="callback">A delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.RequestAsyncReadbackIntoNativeArray(Unity.Collections.NativeArray`1&lt;T&gt;&amp;,UnityEngine.GraphicsBuffer,System.Int32,System.Int32,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Adds an asynchonous GPU readback request command to the command buffer.</para>
      </summary>
      <param name="output">Reference to a NativeArray to write the data into.</param>
      <param name="src">The resource to read the data from.</param>
      <param name="size">The size, in bytes, of the data to retrieve from the ComputeBuffer or GraphicsBuffer.</param>
      <param name="offset">The offset in bytes in the ComputeBuffer or GraphicsBuffer.</param>
      <param name="callback">A delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.RequestAsyncReadbackIntoNativeSlice(Unity.Collections.NativeSlice`1&lt;T&gt;&amp;,UnityEngine.Texture,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Adds an asynchonous GPU readback request command to the command buffer.</para>
      </summary>
      <param name="output">Reference to a NativeSlice to write the data into.</param>
      <param name="src">The resource to read the data from.</param>
      <param name="mipIndex">The index of the mipmap to fetch.</param>
      <param name="dstFormat">The target TextureFormat of the data. If the target format is different from the format stored on the GPU, the conversion is automatic.</param>
      <param name="x">The starting x-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="y">The starting y-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="z">The starting z-coordinate, in pixels, of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the index of the start layer.</param>
      <param name="width">The width, in pixels, of the Texture data to fetch.</param>
      <param name="height">The height, in pixels, of the Texture data to fetch.</param>
      <param name="depth">The depth, in pixels of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the number of layers to retrieve.</param>
      <param name="callback">A delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.RequestAsyncReadbackIntoNativeSlice(Unity.Collections.NativeSlice`1&lt;T&gt;&amp;,UnityEngine.Texture,System.Int32,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Adds an asynchonous GPU readback request command to the command buffer.</para>
      </summary>
      <param name="output">Reference to a NativeSlice to write the data into.</param>
      <param name="src">The resource to read the data from.</param>
      <param name="mipIndex">The index of the mipmap to fetch.</param>
      <param name="dstFormat">The target TextureFormat of the data. If the target format is different from the format stored on the GPU, the conversion is automatic.</param>
      <param name="x">The starting x-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="y">The starting y-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="z">The starting z-coordinate, in pixels, of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the index of the start layer.</param>
      <param name="width">The width, in pixels, of the Texture data to fetch.</param>
      <param name="height">The height, in pixels, of the Texture data to fetch.</param>
      <param name="depth">The depth, in pixels of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the number of layers to retrieve.</param>
      <param name="callback">A delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.RequestAsyncReadbackIntoNativeSlice(Unity.Collections.NativeSlice`1&lt;T&gt;&amp;,UnityEngine.Texture,System.Int32,UnityEngine.TextureFormat,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Adds an asynchonous GPU readback request command to the command buffer.</para>
      </summary>
      <param name="output">Reference to a NativeSlice to write the data into.</param>
      <param name="src">The resource to read the data from.</param>
      <param name="mipIndex">The index of the mipmap to fetch.</param>
      <param name="dstFormat">The target TextureFormat of the data. If the target format is different from the format stored on the GPU, the conversion is automatic.</param>
      <param name="x">The starting x-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="y">The starting y-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="z">The starting z-coordinate, in pixels, of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the index of the start layer.</param>
      <param name="width">The width, in pixels, of the Texture data to fetch.</param>
      <param name="height">The height, in pixels, of the Texture data to fetch.</param>
      <param name="depth">The depth, in pixels of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the number of layers to retrieve.</param>
      <param name="callback">A delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.RequestAsyncReadbackIntoNativeSlice(Unity.Collections.NativeSlice`1&lt;T&gt;&amp;,UnityEngine.Texture,System.Int32,UnityEngine.Experimental.Rendering.GraphicsFormat,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Adds an asynchonous GPU readback request command to the command buffer.</para>
      </summary>
      <param name="output">Reference to a NativeSlice to write the data into.</param>
      <param name="src">The resource to read the data from.</param>
      <param name="mipIndex">The index of the mipmap to fetch.</param>
      <param name="dstFormat">The target TextureFormat of the data. If the target format is different from the format stored on the GPU, the conversion is automatic.</param>
      <param name="x">The starting x-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="y">The starting y-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="z">The starting z-coordinate, in pixels, of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the index of the start layer.</param>
      <param name="width">The width, in pixels, of the Texture data to fetch.</param>
      <param name="height">The height, in pixels, of the Texture data to fetch.</param>
      <param name="depth">The depth, in pixels of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the number of layers to retrieve.</param>
      <param name="callback">A delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.RequestAsyncReadbackIntoNativeSlice(Unity.Collections.NativeSlice`1&lt;T&gt;&amp;,UnityEngine.Texture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Adds an asynchonous GPU readback request command to the command buffer.</para>
      </summary>
      <param name="output">Reference to a NativeSlice to write the data into.</param>
      <param name="src">The resource to read the data from.</param>
      <param name="mipIndex">The index of the mipmap to fetch.</param>
      <param name="dstFormat">The target TextureFormat of the data. If the target format is different from the format stored on the GPU, the conversion is automatic.</param>
      <param name="x">The starting x-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="y">The starting y-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="z">The starting z-coordinate, in pixels, of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the index of the start layer.</param>
      <param name="width">The width, in pixels, of the Texture data to fetch.</param>
      <param name="height">The height, in pixels, of the Texture data to fetch.</param>
      <param name="depth">The depth, in pixels of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the number of layers to retrieve.</param>
      <param name="callback">A delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.RequestAsyncReadbackIntoNativeSlice(Unity.Collections.NativeSlice`1&lt;T&gt;&amp;,UnityEngine.Texture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.TextureFormat,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Adds an asynchonous GPU readback request command to the command buffer.</para>
      </summary>
      <param name="output">Reference to a NativeSlice to write the data into.</param>
      <param name="src">The resource to read the data from.</param>
      <param name="mipIndex">The index of the mipmap to fetch.</param>
      <param name="dstFormat">The target TextureFormat of the data. If the target format is different from the format stored on the GPU, the conversion is automatic.</param>
      <param name="x">The starting x-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="y">The starting y-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="z">The starting z-coordinate, in pixels, of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the index of the start layer.</param>
      <param name="width">The width, in pixels, of the Texture data to fetch.</param>
      <param name="height">The height, in pixels, of the Texture data to fetch.</param>
      <param name="depth">The depth, in pixels of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the number of layers to retrieve.</param>
      <param name="callback">A delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.RequestAsyncReadbackIntoNativeSlice(Unity.Collections.NativeSlice`1&lt;T&gt;&amp;,UnityEngine.Texture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Experimental.Rendering.GraphicsFormat,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Adds an asynchonous GPU readback request command to the command buffer.</para>
      </summary>
      <param name="output">Reference to a NativeSlice to write the data into.</param>
      <param name="src">The resource to read the data from.</param>
      <param name="mipIndex">The index of the mipmap to fetch.</param>
      <param name="dstFormat">The target TextureFormat of the data. If the target format is different from the format stored on the GPU, the conversion is automatic.</param>
      <param name="x">The starting x-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="y">The starting y-coordinate, in pixels, of the Texture data to fetch.</param>
      <param name="z">The starting z-coordinate, in pixels, of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the index of the start layer.</param>
      <param name="width">The width, in pixels, of the Texture data to fetch.</param>
      <param name="height">The height, in pixels, of the Texture data to fetch.</param>
      <param name="depth">The depth, in pixels of the Texture3D to fetch. For TextureCube, Texture2DArray, and TextureCubeArray, this is the number of layers to retrieve.</param>
      <param name="callback">A delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.RequestAsyncReadbackIntoNativeSlice(Unity.Collections.NativeSlice`1&lt;T&gt;&amp;,UnityEngine.ComputeBuffer,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Adds an asynchonous GPU readback request command to the command buffer.</para>
      </summary>
      <param name="output">Reference to a NativeSlice to write the data into.</param>
      <param name="src">The resource to read the data from.</param>
      <param name="size">The size, in bytes, of the data to retrieve from the ComputeBuffer or GraphicsBuffer.</param>
      <param name="offset">The offset in bytes in the ComputeBuffer or GraphicsBuffer.</param>
      <param name="callback">A delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.RequestAsyncReadbackIntoNativeSlice(Unity.Collections.NativeSlice`1&lt;T&gt;&amp;,UnityEngine.ComputeBuffer,System.Int32,System.Int32,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Adds an asynchonous GPU readback request command to the command buffer.</para>
      </summary>
      <param name="output">Reference to a NativeSlice to write the data into.</param>
      <param name="src">The resource to read the data from.</param>
      <param name="size">The size, in bytes, of the data to retrieve from the ComputeBuffer or GraphicsBuffer.</param>
      <param name="offset">The offset in bytes in the ComputeBuffer or GraphicsBuffer.</param>
      <param name="callback">A delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.RequestAsyncReadbackIntoNativeSlice(Unity.Collections.NativeSlice`1&lt;T&gt;&amp;,UnityEngine.GraphicsBuffer,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Adds an asynchonous GPU readback request command to the command buffer.</para>
      </summary>
      <param name="output">Reference to a NativeSlice to write the data into.</param>
      <param name="src">The resource to read the data from.</param>
      <param name="size">The size, in bytes, of the data to retrieve from the ComputeBuffer or GraphicsBuffer.</param>
      <param name="offset">The offset in bytes in the ComputeBuffer or GraphicsBuffer.</param>
      <param name="callback">A delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.RequestAsyncReadbackIntoNativeSlice(Unity.Collections.NativeSlice`1&lt;T&gt;&amp;,UnityEngine.GraphicsBuffer,System.Int32,System.Int32,System.Action`1&lt;UnityEngine.Rendering.AsyncGPUReadbackRequest&gt;)">
      <summary>
        <para>Adds an asynchonous GPU readback request command to the command buffer.</para>
      </summary>
      <param name="output">Reference to a NativeSlice to write the data into.</param>
      <param name="src">The resource to read the data from.</param>
      <param name="size">The size, in bytes, of the data to retrieve from the ComputeBuffer or GraphicsBuffer.</param>
      <param name="offset">The offset in bytes in the ComputeBuffer or GraphicsBuffer.</param>
      <param name="callback">A delegate System.Action to call after Unity completes the request. When Unity calls the delegate, it passes the completed request as a parameter to the System.Action.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.ResolveAntiAliasedSurface(UnityEngine.RenderTexture,UnityEngine.RenderTexture)">
      <summary>
        <para>Force an antialiased render texture to be resolved.</para>
      </summary>
      <param name="rt">The antialiased render texture to resolve.</param>
      <param name="target">The render texture to resolve into.  If set, the target render texture must have the same dimensions and format as the source.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeBufferCounterValue(UnityEngine.ComputeBuffer,System.UInt32)">
      <summary>
        <para>Adds a command to set the counter value of append/consume buffer.</para>
      </summary>
      <param name="buffer">The destination buffer.</param>
      <param name="counterValue">Value of the append/consume counter.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeBufferData(UnityEngine.ComputeBuffer,System.Array)">
      <summary>
        <para>Adds a command to set the buffer with values from an array.</para>
      </summary>
      <param name="buffer">The destination buffer.</param>
      <param name="data">Array of values to fill the buffer.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeBufferData(UnityEngine.ComputeBuffer,System.Collections.Generic.List`1&lt;T&gt;)">
      <summary>
        <para>Adds a command to set the buffer with values from an array.</para>
      </summary>
      <param name="buffer">The destination buffer.</param>
      <param name="data">Array of values to fill the buffer.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeBufferData(UnityEngine.ComputeBuffer,Unity.Collections.NativeArray`1&lt;T&gt;)">
      <summary>
        <para>Adds a command to set the buffer with values from an array.</para>
      </summary>
      <param name="buffer">The destination buffer.</param>
      <param name="data">Array of values to fill the buffer.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeBufferData(UnityEngine.ComputeBuffer,System.Array,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Adds a command to process a partial copy of data values from an array into the buffer.</para>
      </summary>
      <param name="buffer">The destination buffer.</param>
      <param name="data">Array of values to fill the buffer.</param>
      <param name="managedBufferStartIndex">The first element index in data to copy to the compute buffer.</param>
      <param name="graphicsBufferStartIndex">The first element index in compute buffer to receive the data.</param>
      <param name="count">The number of elements to copy.</param>
      <param name="nativeBufferStartIndex">The first element index in data to copy to the compute buffer.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeBufferData(UnityEngine.ComputeBuffer,Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Adds a command to process a partial copy of data values from an array into the buffer.</para>
      </summary>
      <param name="buffer">The destination buffer.</param>
      <param name="data">Array of values to fill the buffer.</param>
      <param name="managedBufferStartIndex">The first element index in data to copy to the compute buffer.</param>
      <param name="graphicsBufferStartIndex">The first element index in compute buffer to receive the data.</param>
      <param name="count">The number of elements to copy.</param>
      <param name="nativeBufferStartIndex">The first element index in data to copy to the compute buffer.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeBufferData(UnityEngine.ComputeBuffer,System.Collections.Generic.List`1&lt;T&gt;,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Adds a command to process a partial copy of data values from an array into the buffer.</para>
      </summary>
      <param name="buffer">The destination buffer.</param>
      <param name="data">Array of values to fill the buffer.</param>
      <param name="managedBufferStartIndex">The first element index in data to copy to the compute buffer.</param>
      <param name="graphicsBufferStartIndex">The first element index in compute buffer to receive the data.</param>
      <param name="count">The number of elements to copy.</param>
      <param name="nativeBufferStartIndex">The first element index in data to copy to the compute buffer.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeBufferParam(UnityEngine.ComputeShader,System.Int32,System.String,UnityEngine.ComputeBuffer)">
      <summary>
        <para>Adds a command to set an input or output buffer parameter on a ComputeShader.</para>
      </summary>
      <param name="computeShader">ComputeShader to set parameter for.</param>
      <param name="kernelIndex">Which kernel the buffer is being set for. See ComputeShader.FindKernel.</param>
      <param name="name">Name of the buffer variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="buffer">Buffer to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeBufferParam(UnityEngine.ComputeShader,System.Int32,System.Int32,UnityEngine.ComputeBuffer)">
      <summary>
        <para>Adds a command to set an input or output buffer parameter on a ComputeShader.</para>
      </summary>
      <param name="computeShader">ComputeShader to set parameter for.</param>
      <param name="kernelIndex">Which kernel the buffer is being set for. See ComputeShader.FindKernel.</param>
      <param name="name">Name of the buffer variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="buffer">Buffer to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeBufferParam(UnityEngine.ComputeShader,System.Int32,System.String,UnityEngine.GraphicsBuffer)">
      <summary>
        <para>Adds a command to set an input or output buffer parameter on a ComputeShader.</para>
      </summary>
      <param name="computeShader">ComputeShader to set parameter for.</param>
      <param name="kernelIndex">Which kernel the buffer is being set for. See ComputeShader.FindKernel.</param>
      <param name="name">Name of the buffer variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="buffer">Buffer to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeBufferParam(UnityEngine.ComputeShader,System.Int32,System.Int32,UnityEngine.GraphicsBuffer)">
      <summary>
        <para>Adds a command to set an input or output buffer parameter on a ComputeShader.</para>
      </summary>
      <param name="computeShader">ComputeShader to set parameter for.</param>
      <param name="kernelIndex">Which kernel the buffer is being set for. See ComputeShader.FindKernel.</param>
      <param name="name">Name of the buffer variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="buffer">Buffer to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeConstantBufferParam(UnityEngine.ComputeShader,System.Int32,UnityEngine.ComputeBuffer,System.Int32,System.Int32)">
      <summary>
        <para>Adds a command to set a constant buffer on a ComputeShader.</para>
      </summary>
      <param name="computeShader">The ComputeShader to set parameter for.</param>
      <param name="nameID">The ID of the property name for the constant buffer in shader code. Use Shader.PropertyToID to get this ID.</param>
      <param name="name">The name of the constant buffer in shaders code.</param>
      <param name="buffer">The buffer to bind as constant buffer.</param>
      <param name="offset">The offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.</param>
      <param name="size">The number of bytes to bind.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeConstantBufferParam(UnityEngine.ComputeShader,System.String,UnityEngine.ComputeBuffer,System.Int32,System.Int32)">
      <summary>
        <para>Adds a command to set a constant buffer on a ComputeShader.</para>
      </summary>
      <param name="computeShader">The ComputeShader to set parameter for.</param>
      <param name="nameID">The ID of the property name for the constant buffer in shader code. Use Shader.PropertyToID to get this ID.</param>
      <param name="name">The name of the constant buffer in shaders code.</param>
      <param name="buffer">The buffer to bind as constant buffer.</param>
      <param name="offset">The offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.</param>
      <param name="size">The number of bytes to bind.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeConstantBufferParam(UnityEngine.ComputeShader,System.Int32,UnityEngine.GraphicsBuffer,System.Int32,System.Int32)">
      <summary>
        <para>Adds a command to set a constant buffer on a ComputeShader.</para>
      </summary>
      <param name="computeShader">The ComputeShader to set parameter for.</param>
      <param name="nameID">The ID of the property name for the constant buffer in shader code. Use Shader.PropertyToID to get this ID.</param>
      <param name="name">The name of the constant buffer in shaders code.</param>
      <param name="buffer">The buffer to bind as constant buffer.</param>
      <param name="offset">The offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.</param>
      <param name="size">The number of bytes to bind.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeConstantBufferParam(UnityEngine.ComputeShader,System.String,UnityEngine.GraphicsBuffer,System.Int32,System.Int32)">
      <summary>
        <para>Adds a command to set a constant buffer on a ComputeShader.</para>
      </summary>
      <param name="computeShader">The ComputeShader to set parameter for.</param>
      <param name="nameID">The ID of the property name for the constant buffer in shader code. Use Shader.PropertyToID to get this ID.</param>
      <param name="name">The name of the constant buffer in shaders code.</param>
      <param name="buffer">The buffer to bind as constant buffer.</param>
      <param name="offset">The offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.</param>
      <param name="size">The number of bytes to bind.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeFloatParam(UnityEngine.ComputeShader,System.String,System.Single)">
      <summary>
        <para>Adds a command to set a float parameter on a ComputeShader.</para>
      </summary>
      <param name="computeShader">ComputeShader to set parameter for.</param>
      <param name="name">Name of the variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="val">Value to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeFloatParam(UnityEngine.ComputeShader,System.Int32,System.Single)">
      <summary>
        <para>Adds a command to set a float parameter on a ComputeShader.</para>
      </summary>
      <param name="computeShader">ComputeShader to set parameter for.</param>
      <param name="name">Name of the variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="val">Value to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeFloatParams(UnityEngine.ComputeShader,System.String,System.Single[])">
      <summary>
        <para>Adds a command to set multiple consecutive float parameters on a ComputeShader.</para>
      </summary>
      <param name="computeShader">ComputeShader to set parameter for.</param>
      <param name="name">Name of the variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="values">Values to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeFloatParams(UnityEngine.ComputeShader,System.Int32,System.Single[])">
      <summary>
        <para>Adds a command to set multiple consecutive float parameters on a ComputeShader.</para>
      </summary>
      <param name="computeShader">ComputeShader to set parameter for.</param>
      <param name="name">Name of the variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="values">Values to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeIntParam(UnityEngine.ComputeShader,System.String,System.Int32)">
      <summary>
        <para>Adds a command to set an integer parameter on a ComputeShader.</para>
      </summary>
      <param name="computeShader">ComputeShader to set parameter for.</param>
      <param name="name">Name of the variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="val">Value to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeIntParam(UnityEngine.ComputeShader,System.Int32,System.Int32)">
      <summary>
        <para>Adds a command to set an integer parameter on a ComputeShader.</para>
      </summary>
      <param name="computeShader">ComputeShader to set parameter for.</param>
      <param name="name">Name of the variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="val">Value to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeIntParams(UnityEngine.ComputeShader,System.String,System.Int32[])">
      <summary>
        <para>Adds a command to set multiple consecutive integer parameters on a ComputeShader.</para>
      </summary>
      <param name="computeShader">ComputeShader to set parameter for.</param>
      <param name="name">Name of the variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="values">Values to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeIntParams(UnityEngine.ComputeShader,System.Int32,System.Int32[])">
      <summary>
        <para>Adds a command to set multiple consecutive integer parameters on a ComputeShader.</para>
      </summary>
      <param name="computeShader">ComputeShader to set parameter for.</param>
      <param name="name">Name of the variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="values">Values to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeMatrixArrayParam(UnityEngine.ComputeShader,System.String,UnityEngine.Matrix4x4[])">
      <summary>
        <para>Adds a command to set a matrix array parameter on a ComputeShader.</para>
      </summary>
      <param name="computeShader">ComputeShader to set parameter for.</param>
      <param name="name">Name of the variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="values">Value to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeMatrixArrayParam(UnityEngine.ComputeShader,System.Int32,UnityEngine.Matrix4x4[])">
      <summary>
        <para>Adds a command to set a matrix array parameter on a ComputeShader.</para>
      </summary>
      <param name="computeShader">ComputeShader to set parameter for.</param>
      <param name="name">Name of the variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="values">Value to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeMatrixParam(UnityEngine.ComputeShader,System.String,UnityEngine.Matrix4x4)">
      <summary>
        <para>Adds a command to set a matrix parameter on a ComputeShader.</para>
      </summary>
      <param name="computeShader">ComputeShader to set parameter for.</param>
      <param name="name">Name of the variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="val">Value to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeMatrixParam(UnityEngine.ComputeShader,System.Int32,UnityEngine.Matrix4x4)">
      <summary>
        <para>Adds a command to set a matrix parameter on a ComputeShader.</para>
      </summary>
      <param name="computeShader">ComputeShader to set parameter for.</param>
      <param name="name">Name of the variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="val">Value to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeTextureParam(UnityEngine.ComputeShader,System.Int32,System.String,UnityEngine.Rendering.RenderTargetIdentifier)">
      <summary>
        <para>Adds a command to set a texture parameter on a ComputeShader.</para>
      </summary>
      <param name="computeShader">ComputeShader to set parameter for.</param>
      <param name="kernelIndex">Which kernel the texture is being set for. See ComputeShader.FindKernel.</param>
      <param name="name">Name of the texture variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="rt">Texture value or identifier to set, see RenderTargetIdentifier.</param>
      <param name="mipLevel">Optional mipmap level of the read-write texture.</param>
      <param name="element">Optional parameter that specifies the type of data to set from the RenderTexture.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeTextureParam(UnityEngine.ComputeShader,System.Int32,System.Int32,UnityEngine.Rendering.RenderTargetIdentifier)">
      <summary>
        <para>Adds a command to set a texture parameter on a ComputeShader.</para>
      </summary>
      <param name="computeShader">ComputeShader to set parameter for.</param>
      <param name="kernelIndex">Which kernel the texture is being set for. See ComputeShader.FindKernel.</param>
      <param name="name">Name of the texture variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="rt">Texture value or identifier to set, see RenderTargetIdentifier.</param>
      <param name="mipLevel">Optional mipmap level of the read-write texture.</param>
      <param name="element">Optional parameter that specifies the type of data to set from the RenderTexture.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeTextureParam(UnityEngine.ComputeShader,System.Int32,System.String,UnityEngine.Rendering.RenderTargetIdentifier,System.Int32)">
      <summary>
        <para>Adds a command to set a texture parameter on a ComputeShader.</para>
      </summary>
      <param name="computeShader">ComputeShader to set parameter for.</param>
      <param name="kernelIndex">Which kernel the texture is being set for. See ComputeShader.FindKernel.</param>
      <param name="name">Name of the texture variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="rt">Texture value or identifier to set, see RenderTargetIdentifier.</param>
      <param name="mipLevel">Optional mipmap level of the read-write texture.</param>
      <param name="element">Optional parameter that specifies the type of data to set from the RenderTexture.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeTextureParam(UnityEngine.ComputeShader,System.Int32,System.Int32,UnityEngine.Rendering.RenderTargetIdentifier,System.Int32)">
      <summary>
        <para>Adds a command to set a texture parameter on a ComputeShader.</para>
      </summary>
      <param name="computeShader">ComputeShader to set parameter for.</param>
      <param name="kernelIndex">Which kernel the texture is being set for. See ComputeShader.FindKernel.</param>
      <param name="name">Name of the texture variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="rt">Texture value or identifier to set, see RenderTargetIdentifier.</param>
      <param name="mipLevel">Optional mipmap level of the read-write texture.</param>
      <param name="element">Optional parameter that specifies the type of data to set from the RenderTexture.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeTextureParam(UnityEngine.ComputeShader,System.Int32,System.String,UnityEngine.Rendering.RenderTargetIdentifier,System.Int32,UnityEngine.Rendering.RenderTextureSubElement)">
      <summary>
        <para>Adds a command to set a texture parameter on a ComputeShader.</para>
      </summary>
      <param name="computeShader">ComputeShader to set parameter for.</param>
      <param name="kernelIndex">Which kernel the texture is being set for. See ComputeShader.FindKernel.</param>
      <param name="name">Name of the texture variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="rt">Texture value or identifier to set, see RenderTargetIdentifier.</param>
      <param name="mipLevel">Optional mipmap level of the read-write texture.</param>
      <param name="element">Optional parameter that specifies the type of data to set from the RenderTexture.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeTextureParam(UnityEngine.ComputeShader,System.Int32,System.Int32,UnityEngine.Rendering.RenderTargetIdentifier,System.Int32,UnityEngine.Rendering.RenderTextureSubElement)">
      <summary>
        <para>Adds a command to set a texture parameter on a ComputeShader.</para>
      </summary>
      <param name="computeShader">ComputeShader to set parameter for.</param>
      <param name="kernelIndex">Which kernel the texture is being set for. See ComputeShader.FindKernel.</param>
      <param name="name">Name of the texture variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="rt">Texture value or identifier to set, see RenderTargetIdentifier.</param>
      <param name="mipLevel">Optional mipmap level of the read-write texture.</param>
      <param name="element">Optional parameter that specifies the type of data to set from the RenderTexture.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeVectorArrayParam(UnityEngine.ComputeShader,System.String,UnityEngine.Vector4[])">
      <summary>
        <para>Adds a command to set a vector array parameter on a ComputeShader.</para>
      </summary>
      <param name="computeShader">ComputeShader to set parameter for.</param>
      <param name="name">Property name.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="values">Value to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeVectorArrayParam(UnityEngine.ComputeShader,System.Int32,UnityEngine.Vector4[])">
      <summary>
        <para>Adds a command to set a vector array parameter on a ComputeShader.</para>
      </summary>
      <param name="computeShader">ComputeShader to set parameter for.</param>
      <param name="name">Property name.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="values">Value to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeVectorParam(UnityEngine.ComputeShader,System.String,UnityEngine.Vector4)">
      <summary>
        <para>Adds a command to set a vector parameter on a ComputeShader.</para>
      </summary>
      <param name="computeShader">ComputeShader to set parameter for.</param>
      <param name="name">Name of the variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="val">Value to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetComputeVectorParam(UnityEngine.ComputeShader,System.Int32,UnityEngine.Vector4)">
      <summary>
        <para>Adds a command to set a vector parameter on a ComputeShader.</para>
      </summary>
      <param name="computeShader">ComputeShader to set parameter for.</param>
      <param name="name">Name of the variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="val">Value to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetExecutionFlags(UnityEngine.Rendering.CommandBufferExecutionFlags)">
      <summary>
        <para>Set flags describing the intention for how the command buffer will be executed.</para>
      </summary>
      <param name="flags">The flags to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalBuffer(System.String,UnityEngine.ComputeBuffer)">
      <summary>
        <para>Add a "set global shader buffer property" command.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="value">The buffer to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalBuffer(System.Int32,UnityEngine.ComputeBuffer)">
      <summary>
        <para>Add a "set global shader buffer property" command.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="value">The buffer to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalBuffer(System.String,UnityEngine.GraphicsBuffer)">
      <summary>
        <para>Add a "set global shader buffer property" command.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="value">The buffer to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalBuffer(System.Int32,UnityEngine.GraphicsBuffer)">
      <summary>
        <para>Add a "set global shader buffer property" command.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="value">The buffer to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalColor(System.String,UnityEngine.Color)">
      <summary>
        <para>Add a "set global shader color property" command.</para>
      </summary>
      <param name="name"></param>
      <param name="value"></param>
      <param name="nameID"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalColor(System.Int32,UnityEngine.Color)">
      <summary>
        <para>Add a "set global shader color property" command.</para>
      </summary>
      <param name="name"></param>
      <param name="value"></param>
      <param name="nameID"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalConstantBuffer(UnityEngine.ComputeBuffer,System.String,System.Int32,System.Int32)">
      <summary>
        <para>Add a command to bind a global constant buffer.</para>
      </summary>
      <param name="nameID">The name ID of the constant buffer retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the constant buffer to override.</param>
      <param name="buffer">The buffer to bind.</param>
      <param name="offset">Offset from the start of the buffer in bytes.</param>
      <param name="size">Size in bytes of the area to bind.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalConstantBuffer(UnityEngine.ComputeBuffer,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Add a command to bind a global constant buffer.</para>
      </summary>
      <param name="nameID">The name ID of the constant buffer retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the constant buffer to override.</param>
      <param name="buffer">The buffer to bind.</param>
      <param name="offset">Offset from the start of the buffer in bytes.</param>
      <param name="size">Size in bytes of the area to bind.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalConstantBuffer(UnityEngine.GraphicsBuffer,System.String,System.Int32,System.Int32)">
      <summary>
        <para>Add a command to bind a global constant buffer.</para>
      </summary>
      <param name="nameID">The name ID of the constant buffer retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the constant buffer to override.</param>
      <param name="buffer">The buffer to bind.</param>
      <param name="offset">Offset from the start of the buffer in bytes.</param>
      <param name="size">Size in bytes of the area to bind.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalConstantBuffer(UnityEngine.GraphicsBuffer,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Add a command to bind a global constant buffer.</para>
      </summary>
      <param name="nameID">The name ID of the constant buffer retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the constant buffer to override.</param>
      <param name="buffer">The buffer to bind.</param>
      <param name="offset">Offset from the start of the buffer in bytes.</param>
      <param name="size">Size in bytes of the area to bind.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalDepthBias(System.Single,System.Single)">
      <summary>
        <para>Adds a command to set the global depth bias.</para>
      </summary>
      <param name="bias">Scales the GPU's minimum resolvable depth buffer value to produce a constant depth offset. The minimum resolvable depth buffer value varies by device.

Set to a negative value to draw geometry closer to the camera, or a positive value to draw geometry further away from the camera.</param>
      <param name="slopeBias">Scales the maximum Z slope, also called the depth slope, to produce a variable depth offset for each polygon.

Polygons that are not parallel to the near and far clip planes have Z slope. Adjust this value to avoid visual artifacts on such polygons.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalFloat(System.String,System.Single)">
      <summary>
        <para>Add a "set global shader float property" command.</para>
      </summary>
      <param name="name"></param>
      <param name="value"></param>
      <param name="nameID"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalFloat(System.Int32,System.Single)">
      <summary>
        <para>Add a "set global shader float property" command.</para>
      </summary>
      <param name="name"></param>
      <param name="value"></param>
      <param name="nameID"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalFloatArray(System.String,System.Single[])">
      <summary>
        <para>Add a "set global shader float array property" command.</para>
      </summary>
      <param name="propertyName"></param>
      <param name="values"></param>
      <param name="nameID"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalFloatArray(System.Int32,System.Single[])">
      <summary>
        <para>Add a "set global shader float array property" command.</para>
      </summary>
      <param name="propertyName"></param>
      <param name="values"></param>
      <param name="nameID"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalFloatArray(System.String,System.Collections.Generic.List`1&lt;System.Single&gt;)">
      <summary>
        <para>Add a "set global shader float array property" command.</para>
      </summary>
      <param name="propertyName"></param>
      <param name="values"></param>
      <param name="nameID"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalFloatArray(System.Int32,System.Collections.Generic.List`1&lt;System.Single&gt;)">
      <summary>
        <para>Add a "set global shader float array property" command.</para>
      </summary>
      <param name="propertyName"></param>
      <param name="values"></param>
      <param name="nameID"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalInt(System.String,System.Int32)">
      <summary>
        <para>Sets the given global integer property for all shaders.</para>
      </summary>
      <param name="name"></param>
      <param name="value"></param>
      <param name="nameID"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalInt(System.Int32,System.Int32)">
      <summary>
        <para>Sets the given global integer property for all shaders.</para>
      </summary>
      <param name="name"></param>
      <param name="value"></param>
      <param name="nameID"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalMatrix(System.String,UnityEngine.Matrix4x4)">
      <summary>
        <para>Add a "set global shader matrix property" command.</para>
      </summary>
      <param name="name"></param>
      <param name="value"></param>
      <param name="nameID"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalMatrix(System.Int32,UnityEngine.Matrix4x4)">
      <summary>
        <para>Add a "set global shader matrix property" command.</para>
      </summary>
      <param name="name"></param>
      <param name="value"></param>
      <param name="nameID"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalMatrixArray(System.String,UnityEngine.Matrix4x4[])">
      <summary>
        <para>Add a "set global shader matrix array property" command.</para>
      </summary>
      <param name="propertyName"></param>
      <param name="values"></param>
      <param name="nameID"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalMatrixArray(System.Int32,UnityEngine.Matrix4x4[])">
      <summary>
        <para>Add a "set global shader matrix array property" command.</para>
      </summary>
      <param name="propertyName"></param>
      <param name="values"></param>
      <param name="nameID"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalMatrixArray(System.String,System.Collections.Generic.List`1&lt;UnityEngine.Matrix4x4&gt;)">
      <summary>
        <para>Add a "set global shader matrix array property" command.</para>
      </summary>
      <param name="propertyName"></param>
      <param name="values"></param>
      <param name="nameID"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalMatrixArray(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.Matrix4x4&gt;)">
      <summary>
        <para>Add a "set global shader matrix array property" command.</para>
      </summary>
      <param name="propertyName"></param>
      <param name="values"></param>
      <param name="nameID"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalTexture(System.String,UnityEngine.Rendering.RenderTargetIdentifier)">
      <summary>
        <para>Add a "set global shader texture property" command, referencing a RenderTexture.</para>
      </summary>
      <param name="name"></param>
      <param name="value"></param>
      <param name="nameID"></param>
      <param name="element"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalTexture(System.Int32,UnityEngine.Rendering.RenderTargetIdentifier)">
      <summary>
        <para>Add a "set global shader texture property" command, referencing a RenderTexture.</para>
      </summary>
      <param name="name"></param>
      <param name="value"></param>
      <param name="nameID"></param>
      <param name="element"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalTexture(System.String,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderTextureSubElement)">
      <summary>
        <para>Add a "set global shader texture property" command, referencing a RenderTexture.</para>
      </summary>
      <param name="name"></param>
      <param name="value"></param>
      <param name="nameID"></param>
      <param name="element"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalTexture(System.Int32,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderTextureSubElement)">
      <summary>
        <para>Add a "set global shader texture property" command, referencing a RenderTexture.</para>
      </summary>
      <param name="name"></param>
      <param name="value"></param>
      <param name="nameID"></param>
      <param name="element"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalVector(System.String,UnityEngine.Vector4)">
      <summary>
        <para>Add a "set global shader vector property" command.</para>
      </summary>
      <param name="name"></param>
      <param name="value"></param>
      <param name="nameID"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalVector(System.Int32,UnityEngine.Vector4)">
      <summary>
        <para>Add a "set global shader vector property" command.</para>
      </summary>
      <param name="name"></param>
      <param name="value"></param>
      <param name="nameID"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalVectorArray(System.String,UnityEngine.Vector4[])">
      <summary>
        <para>Add a "set global shader vector array property" command.</para>
      </summary>
      <param name="propertyName"></param>
      <param name="values"></param>
      <param name="nameID"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalVectorArray(System.Int32,UnityEngine.Vector4[])">
      <summary>
        <para>Add a "set global shader vector array property" command.</para>
      </summary>
      <param name="propertyName"></param>
      <param name="values"></param>
      <param name="nameID"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalVectorArray(System.String,System.Collections.Generic.List`1&lt;UnityEngine.Vector4&gt;)">
      <summary>
        <para>Add a "set global shader vector array property" command.</para>
      </summary>
      <param name="propertyName"></param>
      <param name="values"></param>
      <param name="nameID"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetGlobalVectorArray(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.Vector4&gt;)">
      <summary>
        <para>Add a "set global shader vector array property" command.</para>
      </summary>
      <param name="propertyName"></param>
      <param name="values"></param>
      <param name="nameID"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetInstanceMultiplier(System.UInt32)">
      <summary>
        <para>Adds a command to multiply the instance count of every draw call by a specific multiplier.</para>
      </summary>
      <param name="multiplier"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetInvertCulling(System.Boolean)">
      <summary>
        <para>Add a "set invert culling" command to the buffer.</para>
      </summary>
      <param name="invertCulling">A boolean indicating whether to invert the backface culling (true) or not (false).</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetProjectionMatrix(UnityEngine.Matrix4x4)">
      <summary>
        <para>Add a command to set the projection matrix.</para>
      </summary>
      <param name="proj">Projection (camera to clip space) matrix.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRandomWriteTarget(System.Int32,UnityEngine.Rendering.RenderTargetIdentifier)">
      <summary>
        <para>Set random write target for level pixel shaders.</para>
      </summary>
      <param name="index">Index of the random write target in the shader.</param>
      <param name="buffer">Buffer to set as the write target.</param>
      <param name="preserveCounterValue">Whether to leave the append/consume counter value unchanged.</param>
      <param name="rt">RenderTargetIdentifier to set as the write target.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRandomWriteTarget(System.Int32,UnityEngine.ComputeBuffer,System.Boolean)">
      <summary>
        <para>Set random write target for level pixel shaders.</para>
      </summary>
      <param name="index">Index of the random write target in the shader.</param>
      <param name="buffer">Buffer to set as the write target.</param>
      <param name="preserveCounterValue">Whether to leave the append/consume counter value unchanged.</param>
      <param name="rt">RenderTargetIdentifier to set as the write target.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRandomWriteTarget(System.Int32,UnityEngine.ComputeBuffer)">
      <summary>
        <para>Set random write target for level pixel shaders.</para>
      </summary>
      <param name="index">Index of the random write target in the shader.</param>
      <param name="buffer">Buffer to set as the write target.</param>
      <param name="preserveCounterValue">Whether to leave the append/consume counter value unchanged.</param>
      <param name="rt">RenderTargetIdentifier to set as the write target.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRandomWriteTarget(System.Int32,UnityEngine.GraphicsBuffer,System.Boolean)">
      <summary>
        <para>Set random write target for level pixel shaders.</para>
      </summary>
      <param name="index">Index of the random write target in the shader.</param>
      <param name="buffer">Buffer to set as the write target.</param>
      <param name="preserveCounterValue">Whether to leave the append/consume counter value unchanged.</param>
      <param name="rt">RenderTargetIdentifier to set as the write target.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRandomWriteTarget(System.Int32,UnityEngine.GraphicsBuffer)">
      <summary>
        <para>Set random write target for level pixel shaders.</para>
      </summary>
      <param name="index">Index of the random write target in the shader.</param>
      <param name="buffer">Buffer to set as the write target.</param>
      <param name="preserveCounterValue">Whether to leave the append/consume counter value unchanged.</param>
      <param name="rt">RenderTargetIdentifier to set as the write target.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRayTracingAccelerationStructure(UnityEngine.Experimental.Rendering.RayTracingShader,System.String,UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure)">
      <summary>
        <para>Adds a command to set the RayTracingAccelerationStructure to be used with the RayTracingShader.</para>
      </summary>
      <param name="rayTracingShader">The RayTracingShader to set parameter for.</param>
      <param name="name">Name of the RayTracingAccelerationStructure in shader coder.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="rayTracingAccelerationStructure">The RayTracingAccelerationStructure to be used.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRayTracingAccelerationStructure(UnityEngine.Experimental.Rendering.RayTracingShader,System.Int32,UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure)">
      <summary>
        <para>Adds a command to set the RayTracingAccelerationStructure to be used with the RayTracingShader.</para>
      </summary>
      <param name="rayTracingShader">The RayTracingShader to set parameter for.</param>
      <param name="name">Name of the RayTracingAccelerationStructure in shader coder.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="rayTracingAccelerationStructure">The RayTracingAccelerationStructure to be used.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRayTracingAccelerationStructure(UnityEngine.Experimental.Rendering.RayTracingShader,System.String,UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure)">
      <summary>
        <para>Adds a command to set the RayTracingAccelerationStructure to be used with the RayTracingShader.</para>
      </summary>
      <param name="rayTracingShader">The RayTracingShader to set parameter for.</param>
      <param name="name">Name of the RayTracingAccelerationStructure in shader coder.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="rayTracingAccelerationStructure">The RayTracingAccelerationStructure to be used.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRayTracingAccelerationStructure(UnityEngine.Experimental.Rendering.RayTracingShader,System.Int32,UnityEngine.Experimental.Rendering.RayTracingAccelerationStructure)">
      <summary>
        <para>Adds a command to set the RayTracingAccelerationStructure to be used with the RayTracingShader.</para>
      </summary>
      <param name="rayTracingShader">The RayTracingShader to set parameter for.</param>
      <param name="name">Name of the RayTracingAccelerationStructure in shader coder.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="rayTracingAccelerationStructure">The RayTracingAccelerationStructure to be used.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRayTracingBufferParam(UnityEngine.Experimental.Rendering.RayTracingShader,System.String,UnityEngine.ComputeBuffer)">
      <summary>
        <para>Adds a command to set an input or output buffer parameter on a RayTracingShader.</para>
      </summary>
      <param name="rayTracingShader">The RayTracingShader to set parameter for.</param>
      <param name="name">The name of the constant buffer in shader code.</param>
      <param name="nameID">The ID of the property name for the constant buffer in shader code. Use Shader.PropertyToID to get this ID.</param>
      <param name="buffer">Buffer to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRayTracingBufferParam(UnityEngine.Experimental.Rendering.RayTracingShader,System.Int32,UnityEngine.ComputeBuffer)">
      <summary>
        <para>Adds a command to set an input or output buffer parameter on a RayTracingShader.</para>
      </summary>
      <param name="rayTracingShader">The RayTracingShader to set parameter for.</param>
      <param name="name">The name of the constant buffer in shader code.</param>
      <param name="nameID">The ID of the property name for the constant buffer in shader code. Use Shader.PropertyToID to get this ID.</param>
      <param name="buffer">Buffer to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRayTracingConstantBufferParam(UnityEngine.Experimental.Rendering.RayTracingShader,System.Int32,UnityEngine.ComputeBuffer,System.Int32,System.Int32)">
      <summary>
        <para>Adds a command to set a constant buffer on a RayTracingShader.</para>
      </summary>
      <param name="rayTracingShader">The RayTracingShader to set parameter for.</param>
      <param name="nameID">The ID of the property name for the constant buffer in shader code. Use Shader.PropertyToID to get this ID.</param>
      <param name="name">The name of the constant buffer in shader code.</param>
      <param name="buffer">The buffer to bind as constant buffer.</param>
      <param name="offset">The offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.</param>
      <param name="size">The number of bytes to bind.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRayTracingConstantBufferParam(UnityEngine.Experimental.Rendering.RayTracingShader,System.String,UnityEngine.ComputeBuffer,System.Int32,System.Int32)">
      <summary>
        <para>Adds a command to set a constant buffer on a RayTracingShader.</para>
      </summary>
      <param name="rayTracingShader">The RayTracingShader to set parameter for.</param>
      <param name="nameID">The ID of the property name for the constant buffer in shader code. Use Shader.PropertyToID to get this ID.</param>
      <param name="name">The name of the constant buffer in shader code.</param>
      <param name="buffer">The buffer to bind as constant buffer.</param>
      <param name="offset">The offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.</param>
      <param name="size">The number of bytes to bind.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRayTracingConstantBufferParam(UnityEngine.Experimental.Rendering.RayTracingShader,System.Int32,UnityEngine.GraphicsBuffer,System.Int32,System.Int32)">
      <summary>
        <para>Adds a command to set a constant buffer on a RayTracingShader.</para>
      </summary>
      <param name="rayTracingShader">The RayTracingShader to set parameter for.</param>
      <param name="nameID">The ID of the property name for the constant buffer in shader code. Use Shader.PropertyToID to get this ID.</param>
      <param name="name">The name of the constant buffer in shader code.</param>
      <param name="buffer">The buffer to bind as constant buffer.</param>
      <param name="offset">The offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.</param>
      <param name="size">The number of bytes to bind.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRayTracingConstantBufferParam(UnityEngine.Experimental.Rendering.RayTracingShader,System.String,UnityEngine.GraphicsBuffer,System.Int32,System.Int32)">
      <summary>
        <para>Adds a command to set a constant buffer on a RayTracingShader.</para>
      </summary>
      <param name="rayTracingShader">The RayTracingShader to set parameter for.</param>
      <param name="nameID">The ID of the property name for the constant buffer in shader code. Use Shader.PropertyToID to get this ID.</param>
      <param name="name">The name of the constant buffer in shader code.</param>
      <param name="buffer">The buffer to bind as constant buffer.</param>
      <param name="offset">The offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.</param>
      <param name="size">The number of bytes to bind.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRayTracingFloatParam(UnityEngine.Experimental.Rendering.RayTracingShader,System.String,System.Single)">
      <summary>
        <para>Adds a command to set a float parameter on a RayTracingShader.</para>
      </summary>
      <param name="rayTracingShader">RayTracingShader to set parameter for.</param>
      <param name="name">Name of the variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="val">Value to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRayTracingFloatParam(UnityEngine.Experimental.Rendering.RayTracingShader,System.Int32,System.Single)">
      <summary>
        <para>Adds a command to set a float parameter on a RayTracingShader.</para>
      </summary>
      <param name="rayTracingShader">RayTracingShader to set parameter for.</param>
      <param name="name">Name of the variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="val">Value to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRayTracingFloatParams(UnityEngine.Experimental.Rendering.RayTracingShader,System.String,System.Single[])">
      <summary>
        <para>Adds a command to set multiple consecutive float parameters on a RayTracingShader.</para>
      </summary>
      <param name="rayTracingShader">RayTracingShader to set parameter for.</param>
      <param name="name">Name of the variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="values">Values to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRayTracingFloatParams(UnityEngine.Experimental.Rendering.RayTracingShader,System.Int32,System.Single[])">
      <summary>
        <para>Adds a command to set multiple consecutive float parameters on a RayTracingShader.</para>
      </summary>
      <param name="rayTracingShader">RayTracingShader to set parameter for.</param>
      <param name="name">Name of the variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="values">Values to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRayTracingIntParam(UnityEngine.Experimental.Rendering.RayTracingShader,System.String,System.Int32)">
      <summary>
        <para>Adds a command to set an integer parameter on a RayTracingShader.</para>
      </summary>
      <param name="rayTracingShader">RayTracingShader to set parameter for.</param>
      <param name="name">Name of the variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="val">Value to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRayTracingIntParam(UnityEngine.Experimental.Rendering.RayTracingShader,System.Int32,System.Int32)">
      <summary>
        <para>Adds a command to set an integer parameter on a RayTracingShader.</para>
      </summary>
      <param name="rayTracingShader">RayTracingShader to set parameter for.</param>
      <param name="name">Name of the variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="val">Value to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRayTracingIntParams(UnityEngine.Experimental.Rendering.RayTracingShader,System.String,System.Int32[])">
      <summary>
        <para>Adds a command to set multiple consecutive integer parameters on a RayTracingShader.</para>
      </summary>
      <param name="rayTracingShader">RayTracingShader to set parameter for.</param>
      <param name="name">Name of the variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="values">Values to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRayTracingIntParams(UnityEngine.Experimental.Rendering.RayTracingShader,System.Int32,System.Int32[])">
      <summary>
        <para>Adds a command to set multiple consecutive integer parameters on a RayTracingShader.</para>
      </summary>
      <param name="rayTracingShader">RayTracingShader to set parameter for.</param>
      <param name="name">Name of the variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="values">Values to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRayTracingMatrixArrayParam(UnityEngine.Experimental.Rendering.RayTracingShader,System.String,UnityEngine.Matrix4x4[])">
      <summary>
        <para>Adds a command to set a matrix array parameter on a RayTracingShader.</para>
      </summary>
      <param name="rayTracingShader">RayTracingShader to set parameter for.</param>
      <param name="name">Name of the variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="values">Value to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRayTracingMatrixArrayParam(UnityEngine.Experimental.Rendering.RayTracingShader,System.Int32,UnityEngine.Matrix4x4[])">
      <summary>
        <para>Adds a command to set a matrix array parameter on a RayTracingShader.</para>
      </summary>
      <param name="rayTracingShader">RayTracingShader to set parameter for.</param>
      <param name="name">Name of the variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="values">Value to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRayTracingMatrixParam(UnityEngine.Experimental.Rendering.RayTracingShader,System.String,UnityEngine.Matrix4x4)">
      <summary>
        <para>Adds a command to set a matrix parameter on a RayTracingShader.</para>
      </summary>
      <param name="rayTracingShader">RayTracingShader to set parameter for.</param>
      <param name="name">Name of the variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="val">Value to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRayTracingMatrixParam(UnityEngine.Experimental.Rendering.RayTracingShader,System.Int32,UnityEngine.Matrix4x4)">
      <summary>
        <para>Adds a command to set a matrix parameter on a RayTracingShader.</para>
      </summary>
      <param name="rayTracingShader">RayTracingShader to set parameter for.</param>
      <param name="name">Name of the variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="val">Value to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRayTracingShaderPass(UnityEngine.Experimental.Rendering.RayTracingShader,System.String)">
      <summary>
        <para>Adds a command to select which Shader Pass to use when executing ray/geometry intersection shaders.</para>
      </summary>
      <param name="rayTracingShader">RayTracingShader to set parameter for.</param>
      <param name="passName">The Shader Pass to use when executing ray tracing shaders.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRayTracingTextureParam(UnityEngine.Experimental.Rendering.RayTracingShader,System.String,UnityEngine.Rendering.RenderTargetIdentifier)">
      <summary>
        <para>Adds a command to set a texture parameter on a RayTracingShader.</para>
      </summary>
      <param name="rayTracingShader">RayTracingShader to set parameter for.</param>
      <param name="name">Name of the texture variable in shader code.</param>
      <param name="nameID">The ID of the property name for the texture in shader code. Use Shader.PropertyToID to get this ID.</param>
      <param name="rt">Texture value or identifier to set, see RenderTargetIdentifier.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRayTracingTextureParam(UnityEngine.Experimental.Rendering.RayTracingShader,System.Int32,UnityEngine.Rendering.RenderTargetIdentifier)">
      <summary>
        <para>Adds a command to set a texture parameter on a RayTracingShader.</para>
      </summary>
      <param name="rayTracingShader">RayTracingShader to set parameter for.</param>
      <param name="name">Name of the texture variable in shader code.</param>
      <param name="nameID">The ID of the property name for the texture in shader code. Use Shader.PropertyToID to get this ID.</param>
      <param name="rt">Texture value or identifier to set, see RenderTargetIdentifier.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRayTracingVectorArrayParam(UnityEngine.Experimental.Rendering.RayTracingShader,System.String,UnityEngine.Vector4[])">
      <summary>
        <para>Adds a command to set a vector array parameter on a RayTracingShader.</para>
      </summary>
      <param name="rayTracingShader">RayTracingShader to set parameter for.</param>
      <param name="name">Property name.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="values">Value to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRayTracingVectorArrayParam(UnityEngine.Experimental.Rendering.RayTracingShader,System.Int32,UnityEngine.Vector4[])">
      <summary>
        <para>Adds a command to set a vector array parameter on a RayTracingShader.</para>
      </summary>
      <param name="rayTracingShader">RayTracingShader to set parameter for.</param>
      <param name="name">Property name.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="values">Value to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRayTracingVectorParam(UnityEngine.Experimental.Rendering.RayTracingShader,System.String,UnityEngine.Vector4)">
      <summary>
        <para>Adds a command to set a vector parameter on a RayTracingShader.</para>
      </summary>
      <param name="rayTracingShader">RayTracingShader to set parameter for.</param>
      <param name="name">Name of the variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="val">Value to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRayTracingVectorParam(UnityEngine.Experimental.Rendering.RayTracingShader,System.Int32,UnityEngine.Vector4)">
      <summary>
        <para>Adds a command to set a vector parameter on a RayTracingShader.</para>
      </summary>
      <param name="rayTracingShader">RayTracingShader to set parameter for.</param>
      <param name="name">Name of the variable in shader code.</param>
      <param name="nameID">Property name ID. Use Shader.PropertyToID to get this ID.</param>
      <param name="val">Value to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier)">
      <summary>
        <para>Add a "set active render target" command.</para>
      </summary>
      <param name="rt">Render target to set for both color &amp; depth buffers.</param>
      <param name="color">Render target to set as a color buffer.</param>
      <param name="colors">Render targets to set as color buffers (MRT).</param>
      <param name="depth">Render target to set as a depth buffer.</param>
      <param name="mipLevel">The mip level of the render target to render into.</param>
      <param name="cubemapFace">The cubemap face of a cubemap render target to render into.</param>
      <param name="depthSlice">Slice of a 3D or array render target to set.</param>
      <param name="loadAction">Load action that is used for color and depth/stencil buffers.</param>
      <param name="storeAction">Store action that is used for color and depth/stencil buffers.</param>
      <param name="colorLoadAction">Load action that is used for the color buffer.</param>
      <param name="colorStoreAction">Store action that is used for the color buffer.</param>
      <param name="depthLoadAction">Load action that is used for the depth/stencil buffer.</param>
      <param name="depthStoreAction">Store action that is used for the depth/stencil buffer.</param>
      <param name="binding"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderBufferLoadAction,UnityEngine.Rendering.RenderBufferStoreAction)">
      <summary>
        <para>Add a "set active render target" command.</para>
      </summary>
      <param name="rt">Render target to set for both color &amp; depth buffers.</param>
      <param name="color">Render target to set as a color buffer.</param>
      <param name="colors">Render targets to set as color buffers (MRT).</param>
      <param name="depth">Render target to set as a depth buffer.</param>
      <param name="mipLevel">The mip level of the render target to render into.</param>
      <param name="cubemapFace">The cubemap face of a cubemap render target to render into.</param>
      <param name="depthSlice">Slice of a 3D or array render target to set.</param>
      <param name="loadAction">Load action that is used for color and depth/stencil buffers.</param>
      <param name="storeAction">Store action that is used for color and depth/stencil buffers.</param>
      <param name="colorLoadAction">Load action that is used for the color buffer.</param>
      <param name="colorStoreAction">Store action that is used for the color buffer.</param>
      <param name="depthLoadAction">Load action that is used for the depth/stencil buffer.</param>
      <param name="depthStoreAction">Store action that is used for the depth/stencil buffer.</param>
      <param name="binding"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderBufferLoadAction,UnityEngine.Rendering.RenderBufferStoreAction,UnityEngine.Rendering.RenderBufferLoadAction,UnityEngine.Rendering.RenderBufferStoreAction)">
      <summary>
        <para>Add a "set active render target" command.</para>
      </summary>
      <param name="rt">Render target to set for both color &amp; depth buffers.</param>
      <param name="color">Render target to set as a color buffer.</param>
      <param name="colors">Render targets to set as color buffers (MRT).</param>
      <param name="depth">Render target to set as a depth buffer.</param>
      <param name="mipLevel">The mip level of the render target to render into.</param>
      <param name="cubemapFace">The cubemap face of a cubemap render target to render into.</param>
      <param name="depthSlice">Slice of a 3D or array render target to set.</param>
      <param name="loadAction">Load action that is used for color and depth/stencil buffers.</param>
      <param name="storeAction">Store action that is used for color and depth/stencil buffers.</param>
      <param name="colorLoadAction">Load action that is used for the color buffer.</param>
      <param name="colorStoreAction">Store action that is used for the color buffer.</param>
      <param name="depthLoadAction">Load action that is used for the depth/stencil buffer.</param>
      <param name="depthStoreAction">Store action that is used for the depth/stencil buffer.</param>
      <param name="binding"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier,System.Int32)">
      <summary>
        <para>Add a "set active render target" command.</para>
      </summary>
      <param name="rt">Render target to set for both color &amp; depth buffers.</param>
      <param name="color">Render target to set as a color buffer.</param>
      <param name="colors">Render targets to set as color buffers (MRT).</param>
      <param name="depth">Render target to set as a depth buffer.</param>
      <param name="mipLevel">The mip level of the render target to render into.</param>
      <param name="cubemapFace">The cubemap face of a cubemap render target to render into.</param>
      <param name="depthSlice">Slice of a 3D or array render target to set.</param>
      <param name="loadAction">Load action that is used for color and depth/stencil buffers.</param>
      <param name="storeAction">Store action that is used for color and depth/stencil buffers.</param>
      <param name="colorLoadAction">Load action that is used for the color buffer.</param>
      <param name="colorStoreAction">Store action that is used for the color buffer.</param>
      <param name="depthLoadAction">Load action that is used for the depth/stencil buffer.</param>
      <param name="depthStoreAction">Store action that is used for the depth/stencil buffer.</param>
      <param name="binding"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier,System.Int32,UnityEngine.CubemapFace)">
      <summary>
        <para>Add a "set active render target" command.</para>
      </summary>
      <param name="rt">Render target to set for both color &amp; depth buffers.</param>
      <param name="color">Render target to set as a color buffer.</param>
      <param name="colors">Render targets to set as color buffers (MRT).</param>
      <param name="depth">Render target to set as a depth buffer.</param>
      <param name="mipLevel">The mip level of the render target to render into.</param>
      <param name="cubemapFace">The cubemap face of a cubemap render target to render into.</param>
      <param name="depthSlice">Slice of a 3D or array render target to set.</param>
      <param name="loadAction">Load action that is used for color and depth/stencil buffers.</param>
      <param name="storeAction">Store action that is used for color and depth/stencil buffers.</param>
      <param name="colorLoadAction">Load action that is used for the color buffer.</param>
      <param name="colorStoreAction">Store action that is used for the color buffer.</param>
      <param name="depthLoadAction">Load action that is used for the depth/stencil buffer.</param>
      <param name="depthStoreAction">Store action that is used for the depth/stencil buffer.</param>
      <param name="binding"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier,System.Int32,UnityEngine.CubemapFace,System.Int32)">
      <summary>
        <para>Add a "set active render target" command.</para>
      </summary>
      <param name="rt">Render target to set for both color &amp; depth buffers.</param>
      <param name="color">Render target to set as a color buffer.</param>
      <param name="colors">Render targets to set as color buffers (MRT).</param>
      <param name="depth">Render target to set as a depth buffer.</param>
      <param name="mipLevel">The mip level of the render target to render into.</param>
      <param name="cubemapFace">The cubemap face of a cubemap render target to render into.</param>
      <param name="depthSlice">Slice of a 3D or array render target to set.</param>
      <param name="loadAction">Load action that is used for color and depth/stencil buffers.</param>
      <param name="storeAction">Store action that is used for color and depth/stencil buffers.</param>
      <param name="colorLoadAction">Load action that is used for the color buffer.</param>
      <param name="colorStoreAction">Store action that is used for the color buffer.</param>
      <param name="depthLoadAction">Load action that is used for the depth/stencil buffer.</param>
      <param name="depthStoreAction">Store action that is used for the depth/stencil buffer.</param>
      <param name="binding"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderTargetIdentifier)">
      <summary>
        <para>Add a "set active render target" command.</para>
      </summary>
      <param name="rt">Render target to set for both color &amp; depth buffers.</param>
      <param name="color">Render target to set as a color buffer.</param>
      <param name="colors">Render targets to set as color buffers (MRT).</param>
      <param name="depth">Render target to set as a depth buffer.</param>
      <param name="mipLevel">The mip level of the render target to render into.</param>
      <param name="cubemapFace">The cubemap face of a cubemap render target to render into.</param>
      <param name="depthSlice">Slice of a 3D or array render target to set.</param>
      <param name="loadAction">Load action that is used for color and depth/stencil buffers.</param>
      <param name="storeAction">Store action that is used for color and depth/stencil buffers.</param>
      <param name="colorLoadAction">Load action that is used for the color buffer.</param>
      <param name="colorStoreAction">Store action that is used for the color buffer.</param>
      <param name="depthLoadAction">Load action that is used for the depth/stencil buffer.</param>
      <param name="depthStoreAction">Store action that is used for the depth/stencil buffer.</param>
      <param name="binding"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderBufferLoadAction,UnityEngine.Rendering.RenderBufferStoreAction,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderBufferLoadAction,UnityEngine.Rendering.RenderBufferStoreAction)">
      <summary>
        <para>Add a "set active render target" command.</para>
      </summary>
      <param name="rt">Render target to set for both color &amp; depth buffers.</param>
      <param name="color">Render target to set as a color buffer.</param>
      <param name="colors">Render targets to set as color buffers (MRT).</param>
      <param name="depth">Render target to set as a depth buffer.</param>
      <param name="mipLevel">The mip level of the render target to render into.</param>
      <param name="cubemapFace">The cubemap face of a cubemap render target to render into.</param>
      <param name="depthSlice">Slice of a 3D or array render target to set.</param>
      <param name="loadAction">Load action that is used for color and depth/stencil buffers.</param>
      <param name="storeAction">Store action that is used for color and depth/stencil buffers.</param>
      <param name="colorLoadAction">Load action that is used for the color buffer.</param>
      <param name="colorStoreAction">Store action that is used for the color buffer.</param>
      <param name="depthLoadAction">Load action that is used for the depth/stencil buffer.</param>
      <param name="depthStoreAction">Store action that is used for the depth/stencil buffer.</param>
      <param name="binding"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderTargetIdentifier,System.Int32)">
      <summary>
        <para>Add a "set active render target" command.</para>
      </summary>
      <param name="rt">Render target to set for both color &amp; depth buffers.</param>
      <param name="color">Render target to set as a color buffer.</param>
      <param name="colors">Render targets to set as color buffers (MRT).</param>
      <param name="depth">Render target to set as a depth buffer.</param>
      <param name="mipLevel">The mip level of the render target to render into.</param>
      <param name="cubemapFace">The cubemap face of a cubemap render target to render into.</param>
      <param name="depthSlice">Slice of a 3D or array render target to set.</param>
      <param name="loadAction">Load action that is used for color and depth/stencil buffers.</param>
      <param name="storeAction">Store action that is used for color and depth/stencil buffers.</param>
      <param name="colorLoadAction">Load action that is used for the color buffer.</param>
      <param name="colorStoreAction">Store action that is used for the color buffer.</param>
      <param name="depthLoadAction">Load action that is used for the depth/stencil buffer.</param>
      <param name="depthStoreAction">Store action that is used for the depth/stencil buffer.</param>
      <param name="binding"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderTargetIdentifier,System.Int32,UnityEngine.CubemapFace)">
      <summary>
        <para>Add a "set active render target" command.</para>
      </summary>
      <param name="rt">Render target to set for both color &amp; depth buffers.</param>
      <param name="color">Render target to set as a color buffer.</param>
      <param name="colors">Render targets to set as color buffers (MRT).</param>
      <param name="depth">Render target to set as a depth buffer.</param>
      <param name="mipLevel">The mip level of the render target to render into.</param>
      <param name="cubemapFace">The cubemap face of a cubemap render target to render into.</param>
      <param name="depthSlice">Slice of a 3D or array render target to set.</param>
      <param name="loadAction">Load action that is used for color and depth/stencil buffers.</param>
      <param name="storeAction">Store action that is used for color and depth/stencil buffers.</param>
      <param name="colorLoadAction">Load action that is used for the color buffer.</param>
      <param name="colorStoreAction">Store action that is used for the color buffer.</param>
      <param name="depthLoadAction">Load action that is used for the depth/stencil buffer.</param>
      <param name="depthStoreAction">Store action that is used for the depth/stencil buffer.</param>
      <param name="binding"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderTargetIdentifier,System.Int32,UnityEngine.CubemapFace,System.Int32)">
      <summary>
        <para>Add a "set active render target" command.</para>
      </summary>
      <param name="rt">Render target to set for both color &amp; depth buffers.</param>
      <param name="color">Render target to set as a color buffer.</param>
      <param name="colors">Render targets to set as color buffers (MRT).</param>
      <param name="depth">Render target to set as a depth buffer.</param>
      <param name="mipLevel">The mip level of the render target to render into.</param>
      <param name="cubemapFace">The cubemap face of a cubemap render target to render into.</param>
      <param name="depthSlice">Slice of a 3D or array render target to set.</param>
      <param name="loadAction">Load action that is used for color and depth/stencil buffers.</param>
      <param name="storeAction">Store action that is used for color and depth/stencil buffers.</param>
      <param name="colorLoadAction">Load action that is used for the color buffer.</param>
      <param name="colorStoreAction">Store action that is used for the color buffer.</param>
      <param name="depthLoadAction">Load action that is used for the depth/stencil buffer.</param>
      <param name="depthStoreAction">Store action that is used for the depth/stencil buffer.</param>
      <param name="binding"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier[],UnityEngine.Rendering.RenderTargetIdentifier)">
      <summary>
        <para>Add a "set active render target" command.</para>
      </summary>
      <param name="rt">Render target to set for both color &amp; depth buffers.</param>
      <param name="color">Render target to set as a color buffer.</param>
      <param name="colors">Render targets to set as color buffers (MRT).</param>
      <param name="depth">Render target to set as a depth buffer.</param>
      <param name="mipLevel">The mip level of the render target to render into.</param>
      <param name="cubemapFace">The cubemap face of a cubemap render target to render into.</param>
      <param name="depthSlice">Slice of a 3D or array render target to set.</param>
      <param name="loadAction">Load action that is used for color and depth/stencil buffers.</param>
      <param name="storeAction">Store action that is used for color and depth/stencil buffers.</param>
      <param name="colorLoadAction">Load action that is used for the color buffer.</param>
      <param name="colorStoreAction">Store action that is used for the color buffer.</param>
      <param name="depthLoadAction">Load action that is used for the depth/stencil buffer.</param>
      <param name="depthStoreAction">Store action that is used for the depth/stencil buffer.</param>
      <param name="binding"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRenderTarget(UnityEngine.Rendering.RenderTargetBinding)">
      <summary>
        <para>Add a "set active render target" command.</para>
      </summary>
      <param name="rt">Render target to set for both color &amp; depth buffers.</param>
      <param name="color">Render target to set as a color buffer.</param>
      <param name="colors">Render targets to set as color buffers (MRT).</param>
      <param name="depth">Render target to set as a depth buffer.</param>
      <param name="mipLevel">The mip level of the render target to render into.</param>
      <param name="cubemapFace">The cubemap face of a cubemap render target to render into.</param>
      <param name="depthSlice">Slice of a 3D or array render target to set.</param>
      <param name="loadAction">Load action that is used for color and depth/stencil buffers.</param>
      <param name="storeAction">Store action that is used for color and depth/stencil buffers.</param>
      <param name="colorLoadAction">Load action that is used for the color buffer.</param>
      <param name="colorStoreAction">Store action that is used for the color buffer.</param>
      <param name="depthLoadAction">Load action that is used for the depth/stencil buffer.</param>
      <param name="depthStoreAction">Store action that is used for the depth/stencil buffer.</param>
      <param name="binding"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRenderTarget(UnityEngine.Rendering.RenderTargetBinding,System.Int32,UnityEngine.CubemapFace,System.Int32)">
      <summary>
        <para>Add a "set active render target" command.</para>
      </summary>
      <param name="rt">Render target to set for both color &amp; depth buffers.</param>
      <param name="color">Render target to set as a color buffer.</param>
      <param name="colors">Render targets to set as color buffers (MRT).</param>
      <param name="depth">Render target to set as a depth buffer.</param>
      <param name="mipLevel">The mip level of the render target to render into.</param>
      <param name="cubemapFace">The cubemap face of a cubemap render target to render into.</param>
      <param name="depthSlice">Slice of a 3D or array render target to set.</param>
      <param name="loadAction">Load action that is used for color and depth/stencil buffers.</param>
      <param name="storeAction">Store action that is used for color and depth/stencil buffers.</param>
      <param name="colorLoadAction">Load action that is used for the color buffer.</param>
      <param name="colorStoreAction">Store action that is used for the color buffer.</param>
      <param name="depthLoadAction">Load action that is used for the depth/stencil buffer.</param>
      <param name="depthStoreAction">Store action that is used for the depth/stencil buffer.</param>
      <param name="binding"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetRenderTarget(UnityEngine.Rendering.RenderTargetIdentifier[],UnityEngine.Rendering.RenderTargetIdentifier,System.Int32,UnityEngine.CubemapFace,System.Int32)">
      <summary>
        <para>Add a "set active render target" command.</para>
      </summary>
      <param name="rt">Render target to set for both color &amp; depth buffers.</param>
      <param name="color">Render target to set as a color buffer.</param>
      <param name="colors">Render targets to set as color buffers (MRT).</param>
      <param name="depth">Render target to set as a depth buffer.</param>
      <param name="mipLevel">The mip level of the render target to render into.</param>
      <param name="cubemapFace">The cubemap face of a cubemap render target to render into.</param>
      <param name="depthSlice">Slice of a 3D or array render target to set.</param>
      <param name="loadAction">Load action that is used for color and depth/stencil buffers.</param>
      <param name="storeAction">Store action that is used for color and depth/stencil buffers.</param>
      <param name="colorLoadAction">Load action that is used for the color buffer.</param>
      <param name="colorStoreAction">Store action that is used for the color buffer.</param>
      <param name="depthLoadAction">Load action that is used for the depth/stencil buffer.</param>
      <param name="depthStoreAction">Store action that is used for the depth/stencil buffer.</param>
      <param name="binding"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetShadowSamplingMode(UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.ShadowSamplingMode)">
      <summary>
        <para>Add a "set shadow sampling mode" command.</para>
      </summary>
      <param name="shadowmap">Shadowmap render target to change the sampling mode on.</param>
      <param name="mode">New sampling mode.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetSinglePassStereo">
      <summary>
        <para>Add a command to set single-pass stereo mode for the camera.</para>
      </summary>
      <param name="mode">Single-pass stereo mode for the camera.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetViewMatrix(UnityEngine.Matrix4x4)">
      <summary>
        <para>Add a command to set the view matrix.</para>
      </summary>
      <param name="view">View (world to camera space) matrix.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetViewport(UnityEngine.Rect)">
      <summary>
        <para>Add a command to set the rendering viewport.</para>
      </summary>
      <param name="pixelRect">Viewport rectangle in pixel coordinates.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.SetViewProjectionMatrices(UnityEngine.Matrix4x4,UnityEngine.Matrix4x4)">
      <summary>
        <para>Add a command to set the view and projection matrices.</para>
      </summary>
      <param name="view">View (world to camera space) matrix.</param>
      <param name="proj">Projection (camera to clip space) matrix.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.WaitAllAsyncReadbackRequests">
      <summary>
        <para>Adds an "AsyncGPUReadback.WaitAllRequests" command to the CommandBuffer.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.WaitOnAsyncGraphicsFence(UnityEngine.Rendering.GraphicsFence)">
      <summary>
        <para>Instructs the GPU to wait until the given GraphicsFence is passed.</para>
      </summary>
      <param name="fence">The GraphicsFence that the GPU will be instructed to wait upon before proceeding with its processing of the graphics queue.</param>
      <param name="stage">On some platforms there is a significant gap between the vertex processing completing and the pixel processing beginning for a given draw call. This parameter allows for a requested wait to be made before the next item's vertex or pixel processing begins. If a compute shader dispatch is the next item to be submitted then this parameter is ignored.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.WaitOnAsyncGraphicsFence(UnityEngine.Rendering.GraphicsFence,UnityEngine.Rendering.SynchronisationStage)">
      <summary>
        <para>Instructs the GPU to wait until the given GraphicsFence is passed.</para>
      </summary>
      <param name="fence">The GraphicsFence that the GPU will be instructed to wait upon before proceeding with its processing of the graphics queue.</param>
      <param name="stage">On some platforms there is a significant gap between the vertex processing completing and the pixel processing beginning for a given draw call. This parameter allows for a requested wait to be made before the next item's vertex or pixel processing begins. If a compute shader dispatch is the next item to be submitted then this parameter is ignored.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBuffer.WaitOnGPUFence(UnityEngine.Rendering.GPUFence,UnityEngine.Rendering.SynchronisationStage)">
      <summary>
        <para>This functionality is deprecated, and should no longer be used. Please use CommandBuffer.WaitOnAsyncGraphicsFence.</para>
      </summary>
      <param name="fence">The GPUFence that the GPU will be instructed to wait upon.</param>
      <param name="stage">On some platforms there is a significant gap between the vertex processing completing and the pixel processing completing for a given draw call. This parameter allows for requested wait to be before the next items vertex or pixel processing begins. Some platforms can not differentiate between the start of vertex and pixel processing, these platforms will wait before the next items vertex processing. If a compute shader dispatch is the next item to be submitted then this parameter is ignored.</param>
    </member>
    <member name="T:UnityEngine.Rendering.CommandBufferExecutionFlags">
      <summary>
        <para>Flags describing the intention for how the command buffer will be executed. Set these via CommandBuffer.SetExecutionFlags.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CommandBufferExecutionFlags.AsyncCompute">
      <summary>
        <para>Command buffers flagged for async compute execution will throw exceptions if non-compatible commands are added to them. See ScriptableRenderContext.ExecuteCommandBufferAsync and Graphics.ExecuteCommandBufferAsync.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CommandBufferExecutionFlags.None">
      <summary>
        <para>When no flags are specified, the command buffer is considered valid for all means of execution. This is the default for new command buffers.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.CommandBufferExtensions">
      <summary>
        <para>Static class providing extension methods for CommandBuffer.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBufferExtensions.SwitchIntoFastMemory(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.FastMemoryFlags,System.Single,System.Boolean)">
      <summary>
        <para>Adds a command to put a given render target into fast GPU memory.</para>
      </summary>
      <param name="rid">The render target to put into fast GPU memory.</param>
      <param name="fastMemoryFlags">The memory layout to use if only part of the render target is put into fast GPU memory, either because of the residency parameter or because of fast GPU memory availability.</param>
      <param name="residency">The amount of the render target to put into fast GPU memory. Valid values are 0.0f - 1.0f inclusive.
A value of 0.0f is equal to none of the render target, and a value of 1.0f is equal to the whole render target.
                </param>
      <param name="copyContents">When this value is true, Unity copies the existing contents of the render target into fast memory.
When this value is false, Unity does not copy the existing contents of the render target into fast memory.
Set this value to true if you plan to add to the existing contents, and set it to false if you plan to overwrite or clear the existing contents.
Where possible, set this value to false for better performance.
                </param>
      <param name="cmd"></param>
    </member>
    <member name="M:UnityEngine.Rendering.CommandBufferExtensions.SwitchOutOfFastMemory(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.RenderTargetIdentifier,System.Boolean)">
      <summary>
        <para>Adds a command to remove a given render target from fast GPU memory.</para>
      </summary>
      <param name="rid">The render target to remove from fast GPU memory.</param>
      <param name="copyContents">When this value is true, Unity copies the existing contents of the render target when it removes it from fast GPU memory. When this value is false, Unity does not copy the existing contents of the render target when it removes it from fast GPU memory. Set this value to true if you plan to add to the existing contents, and set it to false if you plan to overwrite or clear the existing contents. Where possible, set this value to false for better performance.</param>
      <param name="cmd"></param>
    </member>
    <member name="T:UnityEngine.Rendering.CompareFunction">
      <summary>
        <para>Depth or stencil comparison function.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CompareFunction.Always">
      <summary>
        <para>Always pass depth or stencil test.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CompareFunction.Disabled">
      <summary>
        <para>Depth or stencil test is disabled.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CompareFunction.Equal">
      <summary>
        <para>Pass depth or stencil test when values are equal.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CompareFunction.Greater">
      <summary>
        <para>Pass depth or stencil test when new value is greater than old one.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CompareFunction.GreaterEqual">
      <summary>
        <para>Pass depth or stencil test when new value is greater or equal than old one.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CompareFunction.Less">
      <summary>
        <para>Pass depth or stencil test when new value is less than old one.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CompareFunction.LessEqual">
      <summary>
        <para>Pass depth or stencil test when new value is less or equal than old one.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CompareFunction.Never">
      <summary>
        <para>Never pass depth or stencil test.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CompareFunction.NotEqual">
      <summary>
        <para>Pass depth or stencil test when values are different.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.ComputeQueueType">
      <summary>
        <para>Describes the desired characteristics with respect to prioritisation and load balancing of the queue that a command buffer being submitted via Graphics.ExecuteCommandBufferAsync or [[ScriptableRenderContext.ExecuteCommandBufferAsync] should be sent to.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ComputeQueueType.Background">
      <summary>
        <para>Background queue types would be the choice for tasks intended to run for an extended period of time, e.g for most of a frame or for several frames. Dispatches on background queues would execute at a lower priority than gfx queue tasks.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ComputeQueueType.Default">
      <summary>
        <para>This queue type would be the choice for compute tasks supporting or as optimisations to graphics processing. CommandBuffers sent to this queue would be expected to complete within the scope of a single frame and likely be synchronised with the graphics queue via GPUFences. Dispatches on default queue types would execute at a lower priority than graphics queue tasks.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ComputeQueueType.Urgent">
      <summary>
        <para>This queue type would be the choice for compute tasks requiring processing as soon as possible and would be prioritised over the graphics queue.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.CopyTextureSupport">
      <summary>
        <para>Support for various Graphics.CopyTexture cases.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CopyTextureSupport.Basic">
      <summary>
        <para>Basic Graphics.CopyTexture support.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CopyTextureSupport.Copy3D">
      <summary>
        <para>Support for Texture3D in Graphics.CopyTexture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CopyTextureSupport.DifferentTypes">
      <summary>
        <para>Support for Graphics.CopyTexture between different texture types.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CopyTextureSupport.None">
      <summary>
        <para>No support for Graphics.CopyTexture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CopyTextureSupport.RTToTexture">
      <summary>
        <para>Support for RenderTexture to Texture copies in Graphics.CopyTexture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CopyTextureSupport.TextureToRT">
      <summary>
        <para>Support for Texture to RenderTexture copies in Graphics.CopyTexture.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.CullingOptions">
      <summary>
        <para>Flags used by ScriptableCullingParameters.cullingOptions to configure a culling operation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CullingOptions.DisablePerObjectCulling">
      <summary>
        <para>When this flag is set, Unity does not perform per-object culling.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CullingOptions.ForceEvenIfCameraIsNotActive">
      <summary>
        <para>When this flag is set, Unity performs the culling operation even if the Camera is not active.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CullingOptions.NeedsLighting">
      <summary>
        <para>When this flag is set, Unity culls Lights as part of the culling operation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CullingOptions.NeedsReflectionProbes">
      <summary>
        <para>When this flag is set, Unity culls Reflection Probes as part of the culling operation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CullingOptions.None">
      <summary>
        <para>Unset all CullingOptions flags.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CullingOptions.OcclusionCull">
      <summary>
        <para>When this flag is set, Unity performs occlusion culling as part of the culling operation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CullingOptions.ShadowCasters">
      <summary>
        <para>When this flag is set, Unity culls shadow casters as part of the culling operation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CullingOptions.Stereo">
      <summary>
        <para>When this flag is set, Unity culls both eyes together for stereo rendering.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.CullingResults">
      <summary>
        <para>Culling results (visible objects, lights, reflection probes).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.CullingResults.lightAndReflectionProbeIndexCount">
      <summary>
        <para>Gets the number of per-object light and reflection probe indices.</para>
      </summary>
      <returns>
        <para>The number of per-object light and reflection probe indices.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.Rendering.CullingResults.lightIndexCount">
      <summary>
        <para>Gets the number of per-object light indices.</para>
      </summary>
      <returns>
        <para>The number of per-object light indices.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.Rendering.CullingResults.reflectionProbeIndexCount">
      <summary>
        <para>Gets the number of per-object reflection probe indices.</para>
      </summary>
      <returns>
        <para>The number of per-object reflection probe indices.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.Rendering.CullingResults.visibleLights">
      <summary>
        <para>Array of visible lights.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.CullingResults.visibleOffscreenVertexLights">
      <summary>
        <para>Off screen lights that still effect visible Scene vertices.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.CullingResults.visibleReflectionProbes">
      <summary>
        <para>Array of visible reflection probes.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.CullingResults.ComputeDirectionalShadowMatricesAndCullingPrimitives(System.Int32,System.Int32,System.Int32,UnityEngine.Vector3,System.Int32,System.Single,UnityEngine.Matrix4x4&amp;,UnityEngine.Matrix4x4&amp;,UnityEngine.Rendering.ShadowSplitData&amp;)">
      <summary>
        <para>Calculates the view and projection matrices and shadow split data for a directional light.</para>
      </summary>
      <param name="activeLightIndex">The index into the active light array.</param>
      <param name="splitIndex">The cascade index.</param>
      <param name="splitCount">The number of cascades.</param>
      <param name="splitRatio">The cascade ratios.</param>
      <param name="shadowResolution">The resolution of the shadowmap.</param>
      <param name="shadowNearPlaneOffset">The near plane offset for the light.</param>
      <param name="viewMatrix">The computed view matrix.</param>
      <param name="projMatrix">The computed projection matrix.</param>
      <param name="shadowSplitData">The computed cascade data.</param>
      <returns>
        <para>If false, the shadow map for this cascade does not need to be rendered this frame.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.CullingResults.ComputePointShadowMatricesAndCullingPrimitives(System.Int32,UnityEngine.CubemapFace,System.Single,UnityEngine.Matrix4x4&amp;,UnityEngine.Matrix4x4&amp;,UnityEngine.Rendering.ShadowSplitData&amp;)">
      <summary>
        <para>Calculates the view and projection matrices and shadow split data for a point light.</para>
      </summary>
      <param name="activeLightIndex">The index into the active light array.</param>
      <param name="cubemapFace">The cubemap face to be rendered.</param>
      <param name="fovBias">The amount by which to increase the camera FOV above 90 degrees.</param>
      <param name="viewMatrix">The computed view matrix.</param>
      <param name="projMatrix">The computed projection matrix.</param>
      <param name="shadowSplitData">The computed split data.</param>
      <returns>
        <para>If false, the shadow map for this light and cubemap face does not need to be rendered this frame.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.CullingResults.ComputeSpotShadowMatricesAndCullingPrimitives(System.Int32,UnityEngine.Matrix4x4&amp;,UnityEngine.Matrix4x4&amp;,UnityEngine.Rendering.ShadowSplitData&amp;)">
      <summary>
        <para>Calculates the view and projection matrices and shadow split data for a spot light.</para>
      </summary>
      <param name="activeLightIndex">The index into the active light array.</param>
      <param name="viewMatrix">The computed view matrix.</param>
      <param name="projMatrix">The computed projection matrix.</param>
      <param name="shadowSplitData">The computed split data.</param>
      <returns>
        <para>If false, the shadow map for this light does not need to be rendered this frame.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.CullingResults.FillLightAndReflectionProbeIndices(UnityEngine.ComputeBuffer)">
      <summary>
        <para>Fills a buffer with per-object light indices.</para>
      </summary>
      <param name="computeBuffer">The compute buffer object to fill.</param>
      <param name="buffer">The buffer object to fill.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CullingResults.FillLightAndReflectionProbeIndices(UnityEngine.GraphicsBuffer)">
      <summary>
        <para>Fills a buffer with per-object light indices.</para>
      </summary>
      <param name="computeBuffer">The compute buffer object to fill.</param>
      <param name="buffer">The buffer object to fill.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CullingResults.GetLightIndexMap">
      <summary>
        <para>If a RenderPipeline sorts or otherwise modifies the VisibleLight list, an index remap will be necessary to properly make use of per-object light lists.</para>
      </summary>
      <returns>
        <para>Array of indices that map from VisibleLight indices to internal per-object light list indices.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.CullingResults.GetReflectionProbeIndexMap">
      <summary>
        <para>If a RenderPipeline sorts or otherwise modifies the VisibleReflectionProbe list, an index remap will be necessary to properly make use of per-object reflection probe lists.</para>
      </summary>
      <returns>
        <para>Array of indices that map from VisibleReflectionProbe indices to internal per-object reflection probe list indices.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.CullingResults.GetShadowCasterBounds(System.Int32,UnityEngine.Bounds&amp;)">
      <summary>
        <para>Returns the bounding box that encapsulates the visible shadow casters.  Can be used to, for instance, dynamically adjust cascade ranges.</para>
      </summary>
      <param name="lightIndex">The index of the shadow-casting light.</param>
      <param name="outBounds">The bounds to be computed.</param>
      <returns>
        <para>True if the light affects at least one shadow casting object in the Scene.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.CullingResults.SetLightIndexMap">
      <summary>
        <para>If a RenderPipeline sorts or otherwise modifies the VisibleLight list, an index remap will be necessary to properly make use of per-object light lists.
If an element of the array is set to -1, the light corresponding to that element will be disabled.</para>
      </summary>
      <param name="mapping">Array with light indices that map from VisibleLight to internal per-object light lists.</param>
    </member>
    <member name="M:UnityEngine.Rendering.CullingResults.SetReflectionProbeIndexMap">
      <summary>
        <para>If a RenderPipeline sorts or otherwise modifies the VisibleReflectionProbe list, an index remap will be necessary to properly make use of per-object reflection probe lists.
If an element of the array is set to -1, the reflection probe corresponding to that element will be disabled.</para>
      </summary>
      <param name="mapping">Array with reflection probe indices that map from VisibleReflectionProbe to internal per-object reflection probe lists.</param>
    </member>
    <member name="T:UnityEngine.Rendering.CullMode">
      <summary>
        <para>Backface culling mode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CullMode.Back">
      <summary>
        <para>Cull back-facing geometry.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CullMode.Front">
      <summary>
        <para>Cull front-facing geometry.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CullMode.Off">
      <summary>
        <para>Disable culling.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.DefaultReflectionMode">
      <summary>
        <para>Default reflection mode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.DefaultReflectionMode.Custom">
      <summary>
        <para>Custom default reflection.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.DefaultReflectionMode.Skybox">
      <summary>
        <para>Skybox-based default reflection.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.DepthState">
      <summary>
        <para>Values for the depth state.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.DepthState.compareFunction">
      <summary>
        <para>How should depth testing be performed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.DepthState.defaultValue">
      <summary>
        <para>Default values for the depth state.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.DepthState.writeEnabled">
      <summary>
        <para>Controls whether pixels from this object are written to the depth buffer.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.DepthState.#ctor(System.Boolean,UnityEngine.Rendering.CompareFunction)">
      <summary>
        <para>Creates a new depth state with the given values.</para>
      </summary>
      <param name="writeEnabled">Controls whether pixels from this object are written to the depth buffer.</param>
      <param name="compareFunction">How should depth testing be performed.</param>
    </member>
    <member name="T:UnityEngine.Rendering.DistanceMetric">
      <summary>
        <para>Type of sorting to use while rendering.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.DistanceMetric.CustomAxis">
      <summary>
        <para>Sort objects based on distance along a custom axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.DistanceMetric.Orthographic">
      <summary>
        <para>Orthographic sorting mode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.DistanceMetric.Perspective">
      <summary>
        <para>Perspective sorting mode.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.DrawingSettings">
      <summary>
        <para>Settings for ScriptableRenderContext.DrawRenderers.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.DrawingSettings.enableDynamicBatching">
      <summary>
        <para>Controls whether dynamic batching is enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.DrawingSettings.enableInstancing">
      <summary>
        <para>Controls whether instancing is enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.DrawingSettings.mainLightIndex">
      <summary>
        <para>Configures what light should be used as main light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.DrawingSettings.maxShaderPasses">
      <summary>
        <para>The maxiumum number of passes that can be rendered in 1 DrawRenderers call.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.DrawingSettings.overrideMaterial">
      <summary>
        <para>Sets the Material to use for all drawers that would render in this group.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.DrawingSettings.overrideMaterialPassIndex">
      <summary>
        <para>Selects which pass of the override material to use.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.DrawingSettings.perObjectData">
      <summary>
        <para>What kind of per-object data to setup during rendering.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.DrawingSettings.sortingSettings">
      <summary>
        <para>How to sort objects during rendering.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.DrawingSettings.#ctor(UnityEngine.Rendering.ShaderTagId,UnityEngine.Rendering.SortingSettings)">
      <summary>
        <para>Create a draw settings struct.</para>
      </summary>
      <param name="shaderPassName">Shader pass to use.</param>
      <param name="sortingSettings">Describes the methods to sort objects during rendering.</param>
    </member>
    <member name="M:UnityEngine.Rendering.DrawingSettings.GetShaderPassName(System.Int32)">
      <summary>
        <para>Get the shader passes that this draw call can render.</para>
      </summary>
      <param name="index">Index of the shader pass to use.</param>
    </member>
    <member name="M:UnityEngine.Rendering.DrawingSettings.SetShaderPassName(System.Int32,UnityEngine.Rendering.ShaderTagId)">
      <summary>
        <para>Set the shader passes that this draw call can render.</para>
      </summary>
      <param name="index">Index of the shader pass to use.</param>
      <param name="shaderPassName">Name of the shader pass.</param>
    </member>
    <member name="T:UnityEngine.Rendering.FastMemoryFlags">
      <summary>
        <para>Control Fast Memory render target layout.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.FastMemoryFlags.None">
      <summary>
        <para>Use the default fast memory layout.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.FastMemoryFlags.SpillBottom">
      <summary>
        <para>Sections of the render target not placed in fast memory will be taken from the bottom of the image.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.FastMemoryFlags.SpillTop">
      <summary>
        <para>Sections of the render target not placed in fast memory will be taken from the top of the image.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.FilteringSettings">
      <summary>
        <para>Filter settings for ScriptableRenderContext.DrawRenderers.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.FilteringSettings.defaultValue">
      <summary>
        <para>Provides a set of default values that causes no filtering to occur.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.FilteringSettings.excludeMotionVectorObjects">
      <summary>
        <para>Set to true to exclude objects that are currently in motion from rendering. The default value is false.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.FilteringSettings.layerMask">
      <summary>
        <para>Only render objects in the given layer mask.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.FilteringSettings.renderingLayerMask">
      <summary>
        <para>The rendering layer mask to use when filtering available renderers for drawing.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.FilteringSettings.renderQueueRange">
      <summary>
        <para>Render objects whose material render queue in inside this range.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.FilteringSettings.sortingLayerRange">
      <summary>
        <para>Render objects whose sorting layer is inside this range.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.FilteringSettings.#ctor">
      <summary>
        <para>Create a draw settings struct.</para>
      </summary>
      <param name="renderQueueRange">Render objects whose material render queue in inside this range.</param>
      <param name="layerMask">Only render objects in the given layer mask.</param>
      <param name="renderingLayerMask">The rendering layer mask to use when filtering available renderers for drawing.</param>
      <param name="excludeMotionVectorObjects">Objects that have a motion pass enabled, or have it disabled but have moved since the last frame are excluded when this is set to true. The default value is false.</param>
    </member>
    <member name="T:UnityEngine.Rendering.FormatSwizzle">
      <summary>
        <para>Graphics Format Swizzle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.FormatSwizzle.FormatSwizzle0">
      <summary>
        <para>The channel specified is not present for the format</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.FormatSwizzle.FormatSwizzle1">
      <summary>
        <para>The channel specified is not present for the format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.FormatSwizzle.FormatSwizzleA">
      <summary>
        <para>The channel specified contains alpha.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.FormatSwizzle.FormatSwizzleB">
      <summary>
        <para>The channel specified contains blue.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.FormatSwizzle.FormatSwizzleG">
      <summary>
        <para>The channel specified contains green.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.FormatSwizzle.FormatSwizzleR">
      <summary>
        <para>The channel specified contains red.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.GizmoSubset">
      <summary>
        <para>Gizmo subsets.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.GizmoSubset.PostImageEffects">
      <summary>
        <para>Use to specify gizmos that should be rendered after ImageEffects.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.GizmoSubset.PreImageEffects">
      <summary>
        <para>Use to specify gizmos that should be rendered before ImageEffects.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.GPUFence">
      <summary>
        <para>This functionality is deprecated, and should no longer be used. Please use GraphicsFence.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.GPUFence.passed">
      <summary>
        <para>This functionality is deprecated, and should no longer be used. Please use GraphicsFence.passed.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.GraphicsDeviceType">
      <summary>
        <para>Graphics device API type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.GraphicsDeviceType.Direct3D11">
      <summary>
        <para>Direct3D 11 graphics API.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.GraphicsDeviceType.Direct3D12">
      <summary>
        <para>Direct3D 12 graphics API.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.GraphicsDeviceType.Direct3D9">
      <summary>
        <para>Direct3D 9 graphics API.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.GraphicsDeviceType.GameCoreXboxOne">
      <summary>
        <para>Game Core Xbox One graphics API using Direct3D 12.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.GraphicsDeviceType.GameCoreXboxSeries">
      <summary>
        <para>Game Core XboxSeries graphics API using Direct3D 12.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.GraphicsDeviceType.Metal">
      <summary>
        <para>iOS Metal graphics API.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.GraphicsDeviceType.N3DS">
      <summary>
        <para>Nintendo 3DS graphics API.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.GraphicsDeviceType.Null">
      <summary>
        <para>No graphics API.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.GraphicsDeviceType.OpenGL2">
      <summary>
        <para>OpenGL 2.x graphics API. (deprecated, only available on Linux and MacOSX)</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.GraphicsDeviceType.OpenGLCore">
      <summary>
        <para>OpenGL (Core profile - GL3 or later) graphics API.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.GraphicsDeviceType.OpenGLES2">
      <summary>
        <para>OpenGL ES 2.0 graphics API. (deprecated on iOS and tvOS) </para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.GraphicsDeviceType.OpenGLES3">
      <summary>
        <para>OpenGL ES 3.0 graphics API. (deprecated on iOS and tvOS) </para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.GraphicsDeviceType.PlayStation3">
      <summary>
        <para>PlayStation 3 graphics API.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.GraphicsDeviceType.PlayStation4">
      <summary>
        <para>PlayStation 4 graphics API.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.GraphicsDeviceType.PlayStationMobile">
      <summary>
        <para>PlayStation Mobile (PSM) graphics API.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.GraphicsDeviceType.Switch">
      <summary>
        <para>Nintendo Switch graphics API.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.GraphicsDeviceType.Vulkan">
      <summary>
        <para>Vulkan (EXPERIMENTAL).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.GraphicsDeviceType.XboxOne">
      <summary>
        <para>Xbox One graphics API using Direct3D 11.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.GraphicsDeviceType.XboxOneD3D12">
      <summary>
        <para>Xbox One graphics API using Direct3D 12.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.GraphicsFence">
      <summary>
        <para>Used to manage synchronisation between tasks on async compute queues and the graphics queue.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.GraphicsFence.passed">
      <summary>
        <para>Determines whether the GraphicsFence has passed.

Allows the CPU to determine whether the GPU has passed the point in its processing represented by the GraphicsFence.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.GraphicsFenceType">
      <summary>
        <para>The type of the GraphicsFence. Currently the only supported fence type is AsyncQueueSynchronization.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.GraphicsFenceType.AsyncQueueSynchronisation">
      <summary>
        <para>The GraphicsFence can be used to synchronise between different GPU queues, as well as to synchronise between GPU and the CPU.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.GraphicsFenceType.CPUSynchronisation">
      <summary>
        <para>The GraphicsFence can only be used to synchronize between the GPU and the CPU.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.GraphicsSettings">
      <summary>
        <para>Script interface for.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.GraphicsSettings.allConfiguredRenderPipelines">
      <summary>
        <para>All RenderPipelineAssets that are configured</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.GraphicsSettings.currentRenderPipeline">
      <summary>
        <para>The current active RenderPipelineAsset taking into consideration the default and any active override.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.GraphicsSettings.defaultRenderingLayerMask">
      <summary>
        <para>Stores the default value for the RenderingLayerMask property of newly created Renderers.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.GraphicsSettings.defaultRenderPipeline">
      <summary>
        <para>The default RenderPipelineAsset that describes how the Scene should be rendered when no override is configured.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.GraphicsSettings.disableBuiltinCustomRenderTextureUpdate">
      <summary>
        <para>Disables the built-in update loop for Custom Render Textures, so that you can write your own update loop.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.GraphicsSettings.lightsUseColorTemperature">
      <summary>
        <para>Whether to use a Light's color temperature when calculating the final color of that Light."</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.GraphicsSettings.lightsUseLinearIntensity">
      <summary>
        <para>If this is true, Light intensity is multiplied against linear color values. If it is false, gamma color values are used.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.GraphicsSettings.logWhenShaderIsCompiled">
      <summary>
        <para>If this is true, a log entry is made each time a shader is compiled at application runtime.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.GraphicsSettings.realtimeDirectRectangularAreaLights">
      <summary>
        <para>Is the current render pipeline capable of rendering direct lighting for rectangular area Lights?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.GraphicsSettings.renderPipelineAsset">
      <summary>
        <para>The RenderPipelineAsset that describes how the Scene should be rendered.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.GraphicsSettings.transparencySortAxis">
      <summary>
        <para>An axis that describes the direction along which the distances of objects are measured for the purpose of sorting.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.GraphicsSettings.transparencySortMode">
      <summary>
        <para>Transparent object sorting mode.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.GraphicsSettings.useScriptableRenderPipelineBatching">
      <summary>
        <para>Enable/Disable SRP batcher (experimental) at runtime.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.GraphicsSettings.videoShadersIncludeMode">
      <summary>
        <para>If and when to include video shaders in the build.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.GraphicsSettings.GetCustomShader(UnityEngine.Rendering.BuiltinShaderType)">
      <summary>
        <para>Get custom shader used instead of a built-in shader.</para>
      </summary>
      <param name="type">Built-in shader type to query custom shader for.</param>
      <returns>
        <para>The shader used.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.GraphicsSettings.GetGraphicsSettings">
      <summary>
        <para>Provides a reference to the GraphicSettings object.</para>
      </summary>
      <returns>
        <para>Returns the GraphicsSettings object.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.GraphicsSettings.GetShaderMode(UnityEngine.Rendering.BuiltinShaderType)">
      <summary>
        <para>Get built-in shader mode.</para>
      </summary>
      <param name="type">Built-in shader type to query.</param>
      <returns>
        <para>Mode used for built-in shader.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.GraphicsSettings.HasShaderDefine(UnityEngine.Rendering.GraphicsTier,UnityEngine.Rendering.BuiltinShaderDefine)">
      <summary>
        <para>Returns true if shader define was set when compiling shaders for current GraphicsTier. Graphics Tiers are only available in the Built-in Render Pipeline.</para>
      </summary>
      <param name="tier"></param>
      <param name="defineHash"></param>
    </member>
    <member name="M:UnityEngine.Rendering.GraphicsSettings.HasShaderDefine(UnityEngine.Rendering.BuiltinShaderDefine)">
      <summary>
        <para>Returns true if shader define was set when compiling shaders for a given GraphicsTier. Graphics Tiers are only available in the Built-in Render Pipeline.</para>
      </summary>
      <param name="defineHash"></param>
    </member>
    <member name="M:UnityEngine.Rendering.GraphicsSettings.SetCustomShader(UnityEngine.Rendering.BuiltinShaderType,UnityEngine.Shader)">
      <summary>
        <para>Set custom shader to use instead of a built-in shader.</para>
      </summary>
      <param name="type">Built-in shader type to set custom shader to.</param>
      <param name="shader">The shader to use.</param>
    </member>
    <member name="M:UnityEngine.Rendering.GraphicsSettings.SetShaderMode(UnityEngine.Rendering.BuiltinShaderType,UnityEngine.Rendering.BuiltinShaderMode)">
      <summary>
        <para>Set built-in shader mode.</para>
      </summary>
      <param name="type">Built-in shader type to change.</param>
      <param name="mode">Mode to use for built-in shader.</param>
    </member>
    <member name="T:UnityEngine.Rendering.GraphicsTier">
      <summary>
        <para> The Graphics Tier Unity uses. You can only set a GraphicsTier in the Built-in Render Pipeline.
See Also: Graphics.activeTier.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.GraphicsTier.Tier1">
      <summary>
        <para>The first graphics tier (Low). Corresponds to shader define UNITY_HARDWARE_TIER1.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.GraphicsTier.Tier2">
      <summary>
        <para>The second graphics tier (Medium) - corresponds to shader define UNITY_HARDWARE_TIER2.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.GraphicsTier.Tier3">
      <summary>
        <para>The third graphics tier (High) - corresponds to shader define UNITY_HARDWARE_TIER3.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.IndexFormat">
      <summary>
        <para>Format of the mesh index buffer data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.IndexFormat.UInt16">
      <summary>
        <para>16 bit mesh index buffer format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.IndexFormat.UInt32">
      <summary>
        <para>32 bit mesh index buffer format.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.LightEvent">
      <summary>
        <para>Defines a place in light's rendering to attach Rendering.CommandBuffer objects to.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.LightEvent.AfterScreenspaceMask">
      <summary>
        <para>After directional light screenspace shadow mask is computed.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.LightEvent.AfterShadowMap">
      <summary>
        <para>After shadowmap is rendered.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.LightEvent.AfterShadowMapPass">
      <summary>
        <para>After shadowmap pass is rendered.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.LightEvent.BeforeScreenspaceMask">
      <summary>
        <para>Before directional light screenspace shadow mask is computed.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.LightEvent.BeforeShadowMap">
      <summary>
        <para>Before shadowmap is rendered.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.LightEvent.BeforeShadowMapPass">
      <summary>
        <para>Before shadowmap pass is rendered.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.LightProbeUsage">
      <summary>
        <para>Light probe interpolation type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.LightProbeUsage.BlendProbes">
      <summary>
        <para>Simple light probe interpolation is used.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.LightProbeUsage.CustomProvided">
      <summary>
        <para>The light probe shader uniform values are extracted from the material property block set on the renderer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.LightProbeUsage.Off">
      <summary>
        <para>Light Probes are not used. The Scene's ambient probe is provided to the shader.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.LightProbeUsage.UseProxyVolume">
      <summary>
        <para>Uses a 3D grid of interpolated light probes.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.LightShadowResolution">
      <summary>
        <para>Shadow resolution options for a Light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.LightShadowResolution.FromQualitySettings">
      <summary>
        <para>Use resolution from QualitySettings (default).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.LightShadowResolution.High">
      <summary>
        <para>High shadow map resolution.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.LightShadowResolution.Low">
      <summary>
        <para>Low shadow map resolution.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.LightShadowResolution.Medium">
      <summary>
        <para>Medium shadow map resolution.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.LightShadowResolution.VeryHigh">
      <summary>
        <para>Very high shadow map resolution.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.LODParameters">
      <summary>
        <para>LODGroup culling parameters.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.LODParameters.cameraPixelHeight">
      <summary>
        <para>Rendering view height in pixels.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.LODParameters.cameraPosition">
      <summary>
        <para>Camera position.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.LODParameters.fieldOfView">
      <summary>
        <para>Camera's field of view.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.LODParameters.isOrthographic">
      <summary>
        <para>Indicates whether camera is orthographic.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.LODParameters.orthoSize">
      <summary>
        <para>Orhographic camera size.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.MeshUpdateFlags">
      <summary>
        <para>Mesh data update flags.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.MeshUpdateFlags.Default">
      <summary>
        <para>Indicates that Unity should perform the default checks and validation when you update a Mesh's data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.MeshUpdateFlags.DontNotifyMeshUsers">
      <summary>
        <para>Indicates that Unity should not notify Renderer components about a possible Mesh bounds change, when you modify Mesh data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.MeshUpdateFlags.DontRecalculateBounds">
      <summary>
        <para>Indicates that Unity should not recalculate the bounds when you set Mesh data using Mesh.SetSubMesh.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.MeshUpdateFlags.DontResetBoneBounds">
      <summary>
        <para>Indicates that Unity should not reset skinned mesh bone bounds when you modify Mesh data using Mesh.SetVertexBufferData or Mesh.SetIndexBufferData.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.MeshUpdateFlags.DontValidateIndices">
      <summary>
        <para>Indicates that Unity should not check index values when you use Mesh.SetIndexBufferData to modify a Mesh's data.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.OnDemandRendering">
      <summary>
        <para>Use the OnDemandRendering class to control and query information about your application's rendering speed independent from all other subsystems (such as physics, input, or animation).
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.OnDemandRendering.effectiveRenderFrameRate">
      <summary>
        <para>The current estimated rate of rendering in frames per second rounded to the nearest integer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.OnDemandRendering.renderFrameInterval">
      <summary>
        <para>Get or set the current frame rate interval. To restore rendering back to the value of Application.targetFrameRate or QualitySettings.vSyncCount set this to 0 or 1.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.OnDemandRendering.willCurrentFrameRender">
      <summary>
        <para>True if the current frame will be rendered.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.OpaqueSortMode">
      <summary>
        <para>Opaque object sorting mode of a Camera.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.OpaqueSortMode.Default">
      <summary>
        <para>Default opaque sorting mode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.OpaqueSortMode.FrontToBack">
      <summary>
        <para>Do rough front-to-back sorting of opaque objects.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.OpaqueSortMode.NoDistanceSort">
      <summary>
        <para>Do not sort opaque objects by distance.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.OpenGLESVersion">
      <summary>
        <para>Specifies the OpenGL ES version.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.OpenGLESVersion.None">
      <summary>
        <para>No valid OpenGL ES version</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.OpenGLESVersion.OpenGLES20">
      <summary>
        <para>OpenGL ES 2.0</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.OpenGLESVersion.OpenGLES30">
      <summary>
        <para>OpenGL ES 3.0</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.OpenGLESVersion.OpenGLES31">
      <summary>
        <para>OpenGL ES 3.1</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.OpenGLESVersion.OpenGLES31AEP">
      <summary>
        <para>OpenGL ES 3.1 with Android Extension Pack</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.OpenGLESVersion.OpenGLES32">
      <summary>
        <para>OpenGL ES 3.2</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.PassType">
      <summary>
        <para>Shader pass type for Unity's lighting pipeline.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.PassType.Deferred">
      <summary>
        <para>Deferred Shading shader pass.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.PassType.ForwardAdd">
      <summary>
        <para>Forward rendering additive pixel light pass.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.PassType.ForwardBase">
      <summary>
        <para>Forward rendering base pass.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.PassType.LightPrePassBase">
      <summary>
        <para>Legacy deferred lighting (light pre-pass) base pass.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.PassType.LightPrePassFinal">
      <summary>
        <para>Legacy deferred lighting (light pre-pass) final pass.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.PassType.Meta">
      <summary>
        <para>Shader pass used to generate the albedo and emissive values used as input to lightmapping.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.PassType.MotionVectors">
      <summary>
        <para>Motion vector render pass.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.PassType.Normal">
      <summary>
        <para>Regular shader pass that does not interact with lighting.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.PassType.ScriptableRenderPipeline">
      <summary>
        <para>Custom scriptable pipeline.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.PassType.ScriptableRenderPipelineDefaultUnlit">
      <summary>
        <para>Custom scriptable pipeline when lightmode is set to default unlit or no light mode is set.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.PassType.ShadowCaster">
      <summary>
        <para>Shadow caster &amp; depth texure shader pass.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.PassType.Vertex">
      <summary>
        <para>Legacy vertex-lit shader pass.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.PassType.VertexLM">
      <summary>
        <para>Legacy vertex-lit shader pass, with mobile lightmaps.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.PassType.VertexLMRGBM">
      <summary>
        <para>Legacy vertex-lit shader pass, with desktop (RGBM) lightmaps.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.PerObjectData">
      <summary>
        <para>What kind of per-object data to setup during rendering.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.PerObjectData.LightData">
      <summary>
        <para>Setup per-object light data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.PerObjectData.LightIndices">
      <summary>
        <para>Setup per-object light indices.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.PerObjectData.Lightmaps">
      <summary>
        <para>Setup per-object lightmaps.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.PerObjectData.LightProbe">
      <summary>
        <para>Setup per-object light probe SH data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.PerObjectData.LightProbeProxyVolume">
      <summary>
        <para>Setup per-object light probe proxy volume data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.PerObjectData.MotionVectors">
      <summary>
        <para>Setup per-object motion vectors.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.PerObjectData.None">
      <summary>
        <para>Do not setup any particular per-object data besides the transformation matrix.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.PerObjectData.OcclusionProbe">
      <summary>
        <para>Setup per-object occlusion probe data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.PerObjectData.OcclusionProbeProxyVolume">
      <summary>
        <para>Setup per-object occlusion probe proxy volume data (occlusion in alpha channels).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.PerObjectData.ReflectionProbeData">
      <summary>
        <para>Setup per-object reflection probe index offset and count.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.PerObjectData.ReflectionProbes">
      <summary>
        <para>Setup per-object reflection probe data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.PerObjectData.ShadowMask">
      <summary>
        <para>Setup per-object shadowmask.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.PIX">
      <summary>
        <para>Provides an interface to control GPU frame capture in Microsoft's PIX software.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.PIX.BeginGPUCapture">
      <summary>
        <para>Begins a GPU frame capture in PIX. If not running via PIX, or as a development build, then it has no effect.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.PIX.EndGPUCapture">
      <summary>
        <para>Ends the current GPU frame capture in PIX. If not running via PIX, or as a development build, then it has no effect.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.PIX.IsAttached">
      <summary>
        <para>Returns true if running via PIX and in a development build.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.PlatformKeywordSet">
      <summary>
        <para>A collection of Rendering.ShaderKeyword that represents a specific platform variant.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.PlatformKeywordSet.Disable">
      <summary>
        <para>Disable a specific shader keyword.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.PlatformKeywordSet.Enable">
      <summary>
        <para>Enable a specific shader keyword.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.PlatformKeywordSet.IsEnabled(UnityEngine.Rendering.BuiltinShaderDefine)">
      <summary>
        <para>Check whether a specific shader keyword is enabled.</para>
      </summary>
      <param name="define"></param>
    </member>
    <member name="T:UnityEngine.Rendering.RasterState">
      <summary>
        <para>Values for the raster state.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RasterState.conservative">
      <summary>
        <para>Enables conservative rasterization. Before using check for support via SystemInfo.supportsConservativeRaster property.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RasterState.cullingMode">
      <summary>
        <para>Controls which sides of polygons should be culled (not drawn).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RasterState.defaultValue">
      <summary>
        <para>Default values for the raster state.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RasterState.depthClip">
      <summary>
        <para>Enable clipping based on depth.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RasterState.offsetFactor">
      <summary>
        <para>Scales the maximum Z slope in the GPU's depth bias setting.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RasterState.offsetUnits">
      <summary>
        <para>Scales the minimum resolvable depth buffer value in the GPU's depth bias setting.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.RasterState.#ctor(UnityEngine.Rendering.CullMode,System.Int32,System.Single)">
      <summary>
        <para>Creates a new raster state with the given values.</para>
      </summary>
      <param name="cullingMode">Controls which sides of polygons should be culled (not drawn).</param>
      <param name="offsetUnits">Scales the minimum resolvable depth buffer value in the GPU's depth bias setting.</param>
      <param name="offsetFactor">Scales the maximum Z slope in the GPU's depth bias setting.</param>
      <param name="depthClip"></param>
    </member>
    <member name="T:UnityEngine.Rendering.RealtimeGICPUUsage">
      <summary>
        <para>How much CPU usage to assign to the final lighting calculations at runtime.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RealtimeGICPUUsage.High">
      <summary>
        <para>75% of the allowed CPU threads are used as worker threads.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RealtimeGICPUUsage.Low">
      <summary>
        <para>25% of the allowed CPU threads are used as worker threads.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RealtimeGICPUUsage.Medium">
      <summary>
        <para>50% of the allowed CPU threads are used as worker threads.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RealtimeGICPUUsage.Unlimited">
      <summary>
        <para>100% of the allowed CPU threads are used as worker threads.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.ReflectionCubemapCompression">
      <summary>
        <para>Determines how Unity will compress baked reflection cubemap.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ReflectionCubemapCompression.Auto">
      <summary>
        <para>Baked Reflection cubemap will be compressed if compression format is suitable.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ReflectionCubemapCompression.Compressed">
      <summary>
        <para>Baked Reflection cubemap will be compressed.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ReflectionCubemapCompression.Uncompressed">
      <summary>
        <para>Baked Reflection cubemap will be left uncompressed.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.ReflectionProbeBlendInfo">
      <summary>
        <para>ReflectionProbeBlendInfo contains information required for blending probes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ReflectionProbeBlendInfo.probe">
      <summary>
        <para>Reflection Probe used in blending.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ReflectionProbeBlendInfo.weight">
      <summary>
        <para>Specifies the weight used in the interpolation between two probes, value varies from 0.0 to 1.0.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.ReflectionProbeClearFlags">
      <summary>
        <para>Values for ReflectionProbe.clearFlags, determining what to clear when rendering a ReflectionProbe.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ReflectionProbeClearFlags.Skybox">
      <summary>
        <para>Clear with the skybox.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ReflectionProbeClearFlags.SolidColor">
      <summary>
        <para>Clear with a background color.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.ReflectionProbeMode">
      <summary>
        <para>Reflection probe's update mode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ReflectionProbeMode.Baked">
      <summary>
        <para>Reflection probe is baked in the Editor.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ReflectionProbeMode.Custom">
      <summary>
        <para>Reflection probe uses a custom texture specified by the user.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ReflectionProbeMode.Realtime">
      <summary>
        <para>Reflection probe is updating in realtime.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.ReflectionProbeRefreshMode">
      <summary>
        <para>An enum describing the way a realtime reflection probe refreshes in the Player.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ReflectionProbeRefreshMode.EveryFrame">
      <summary>
        <para>Causes Unity to update the probe's cubemap every frame.
Note that updating a probe is very costly. Setting this option on too many probes could have a significant negative effect on frame rate. Use time-slicing to help improve performance.

See Also: ReflectionProbeTimeSlicingMode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ReflectionProbeRefreshMode.OnAwake">
      <summary>
        <para>Causes the probe to update only on the first frame it becomes visible. The probe will no longer update automatically, however you may subsequently use RenderProbe to refresh the probe

See Also: ReflectionProbe.RenderProbe.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ReflectionProbeRefreshMode.ViaScripting">
      <summary>
        <para>Sets the probe to never be automatically updated by Unity while your game is running. Use this to completely control the probe refresh behavior by script.

See Also: ReflectionProbe.RenderProbe.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.ReflectionProbeSortingCriteria">
      <summary>
        <para>Visible reflection probes sorting options.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ReflectionProbeSortingCriteria.Importance">
      <summary>
        <para>Sort probes by importance.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ReflectionProbeSortingCriteria.ImportanceThenSize">
      <summary>
        <para>Sort probes by importance, then by size.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ReflectionProbeSortingCriteria.None">
      <summary>
        <para>Do not sort reflection probes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ReflectionProbeSortingCriteria.Size">
      <summary>
        <para>Sort probes from largest to smallest.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.ReflectionProbeTimeSlicingMode">
      <summary>
        <para>When a probe's ReflectionProbe.refreshMode is set to ReflectionProbeRefreshMode.EveryFrame, this enum specify whether or not Unity should update the probe's cubemap over several frames or update the whole cubemap in one frame.
Updating a probe's cubemap is a costly operation. Unity needs to render the entire Scene for each face of the cubemap, as well as perform special blurring in order to get glossy reflections. The impact on frame rate can be significant. Time-slicing helps maintaning a more constant frame rate during these updates by performing the rendering over several frames.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ReflectionProbeTimeSlicingMode.AllFacesAtOnce">
      <summary>
        <para>Instructs Unity to use time-slicing by first rendering all faces at once, then spreading the remaining work over the next 8 frames. Using this option, updating the probe will take 9 frames.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ReflectionProbeTimeSlicingMode.IndividualFaces">
      <summary>
        <para>Instructs Unity to spread the rendering of each face over several frames. Using this option, updating the cubemap will take 14 frames. This option greatly reduces the impact on frame rate, however it may produce incorrect results, especially in Scenes where lighting conditions change over these 14 frames.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ReflectionProbeTimeSlicingMode.NoTimeSlicing">
      <summary>
        <para>Unity will render the probe entirely in one frame.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.ReflectionProbeUsage">
      <summary>
        <para>Reflection Probe usage.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ReflectionProbeUsage.BlendProbes">
      <summary>
        <para>Reflection probes are enabled. Blending occurs only between probes, useful in indoor environments. The renderer will use default reflection if there are no reflection probes nearby, but no blending between default reflection and probe will occur.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ReflectionProbeUsage.BlendProbesAndSkybox">
      <summary>
        <para>Reflection probes are enabled. Blending occurs between probes or probes and default reflection, useful for outdoor environments.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ReflectionProbeUsage.Off">
      <summary>
        <para>Reflection probes are disabled, skybox will be used for reflection.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ReflectionProbeUsage.Simple">
      <summary>
        <para>Reflection probes are enabled, but no blending will occur between probes when there are two overlapping volumes.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.RenderBufferLoadAction">
      <summary>
        <para>This enum describes what should be done on the render target when it is activated (loaded).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderBufferLoadAction.Clear">
      <summary>
        <para>Upon activating the render buffer, clear its contents. Currently only works together with the RenderPass API.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderBufferLoadAction.DontCare">
      <summary>
        <para>When this RenderBuffer is activated, the GPU is instructed not to care about the existing contents of that RenderBuffer. On tile-based GPUs this means that the RenderBuffer contents do not need to be loaded into the tile memory, providing a performance boost.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderBufferLoadAction.Load">
      <summary>
        <para>When this RenderBuffer is activated, preserve the existing contents of it. This setting is expensive on tile-based GPUs and should be avoided whenever possible.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.RenderBufferStoreAction">
      <summary>
        <para>This enum describes what should be done on the render target when the GPU is done rendering into it.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderBufferStoreAction.DontCare">
      <summary>
        <para>The contents of the RenderBuffer are not needed and can be discarded. Tile-based GPUs will skip writing out the surface contents altogether, providing performance boost.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderBufferStoreAction.Resolve">
      <summary>
        <para>Resolve the (MSAA'd) surface. Currently only used with the RenderPass API.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderBufferStoreAction.Store">
      <summary>
        <para>The RenderBuffer contents need to be stored to RAM. If the surface has MSAA enabled, this stores the non-resolved surface.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderBufferStoreAction.StoreAndResolve">
      <summary>
        <para>Resolve the (MSAA'd) surface, but also store the multisampled version. Currently only used with the RenderPass API.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.RenderingThreadingMode">
      <summary>
        <para>Options for the application's actual rendering threading mode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderingThreadingMode.Direct">
      <summary>
        <para>Use the Direct enum to directly render your application from the main thread.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderingThreadingMode.LegacyJobified">
      <summary>
        <para>Generates intermediate graphics commands via several worker threads. A single render thread then converts them into low-level platform API graphics commands.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderingThreadingMode.MultiThreaded">
      <summary>
        <para>Generates intermediate graphics commands via the main thread. The render thread converts them into low-level platform API graphics commands.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderingThreadingMode.NativeGraphicsJobs">
      <summary>
        <para>Main thread generates intermediate graphics commands. Render thread converts them into low-level platform API graphics commands. Render thread can also dispatch graphics jobs to several worker threads.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderingThreadingMode.NativeGraphicsJobsWithoutRenderThread">
      <summary>
        <para>Generates intermediate graphics commands via several worker threads and converts them into low-level platform API graphics commands.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderingThreadingMode.SingleThreaded">
      <summary>
        <para>Use SingleThreaded for internal debugging. It uses only a single thread to simulate RenderingThreadingMode.MultiThreaded.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.RenderPipeline">
      <summary>
        <para>Defines a series of commands and settings that describes how Unity renders a frame.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RenderPipeline.disposed">
      <summary>
        <para>Returns true when the RenderPipeline is invalid or destroyed.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.RenderPipeline.BeginCameraRendering(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Camera)">
      <summary>
        <para>Calls the RenderPipelineManager.beginCameraRendering delegate.</para>
      </summary>
      <param name="context"></param>
      <param name="camera"></param>
    </member>
    <member name="M:UnityEngine.Rendering.RenderPipeline.BeginFrameRendering(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Camera[])">
      <summary>
        <para>Calls the RenderPipelineManager.beginFrameRendering delegate.</para>
      </summary>
      <param name="context"></param>
      <param name="cameras"></param>
    </member>
    <member name="M:UnityEngine.Rendering.RenderPipeline.EndCameraRendering(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Camera)">
      <summary>
        <para>Calls the RenderPipelineManager.endCameraRendering delegate.</para>
      </summary>
      <param name="context"></param>
      <param name="camera"></param>
    </member>
    <member name="M:UnityEngine.Rendering.RenderPipeline.EndFrameRendering(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Camera[])">
      <summary>
        <para>Calls the RenderPipelineManager.endFrameRendering delegate.</para>
      </summary>
      <param name="context"></param>
      <param name="cameras"></param>
    </member>
    <member name="M:UnityEngine.Rendering.RenderPipeline.ProcessRenderRequests(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Camera,System.Collections.Generic.List`1&lt;UnityEngine.Camera/RenderRequest&gt;)">
      <summary>
        <para>Executes RenderRequests submitted using Camera.SubmitRenderRequests.</para>
      </summary>
      <param name="renderRequests">The list of RenderRequests to execute.</param>
      <param name="context"></param>
      <param name="camera"></param>
    </member>
    <member name="M:UnityEngine.Rendering.RenderPipeline.Render(UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Camera[])">
      <summary>
        <para>Entry point method that defines custom rendering for this RenderPipeline.</para>
      </summary>
      <param name="context"></param>
      <param name="cameras"></param>
    </member>
    <member name="T:UnityEngine.Rendering.RenderPipelineAsset">
      <summary>
        <para>An asset that produces a specific IRenderPipeline.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RenderPipelineAsset.autodeskInteractiveMaskedShader">
      <summary>
        <para>Retrieves the default Autodesk Interactive masked Shader for this pipeline.</para>
      </summary>
      <returns>
        <para>Returns the default shader.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.Rendering.RenderPipelineAsset.autodeskInteractiveShader">
      <summary>
        <para>Retrieves the default Autodesk Interactive Shader for this pipeline.</para>
      </summary>
      <returns>
        <para>Returns the default shader.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.Rendering.RenderPipelineAsset.autodeskInteractiveTransparentShader">
      <summary>
        <para>Retrieves the default Autodesk Interactive transparent Shader for this pipeline.</para>
      </summary>
      <returns>
        <para>Returns the default shader.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.Rendering.RenderPipelineAsset.default2DMaterial">
      <summary>
        <para>Return the default 2D Material for this pipeline.</para>
      </summary>
      <returns>
        <para>Default material.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.Rendering.RenderPipelineAsset.defaultLineMaterial">
      <summary>
        <para>Return the default Line Material for this pipeline.</para>
      </summary>
      <returns>
        <para>Default material.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.Rendering.RenderPipelineAsset.defaultMaterial">
      <summary>
        <para>Return the default Material for this pipeline.</para>
      </summary>
      <returns>
        <para>Default material.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.Rendering.RenderPipelineAsset.defaultParticleMaterial">
      <summary>
        <para>Return the default particle Material for this pipeline.</para>
      </summary>
      <returns>
        <para>Default material.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.Rendering.RenderPipelineAsset.defaultShader">
      <summary>
        <para>Return the default Shader for this pipeline.</para>
      </summary>
      <returns>
        <para>Default shader.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.Rendering.RenderPipelineAsset.defaultSpeedTree7Shader">
      <summary>
        <para>Return the default SpeedTree v7 Shader for this pipeline.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RenderPipelineAsset.defaultSpeedTree8Shader">
      <summary>
        <para>Return the default SpeedTree v8 Shader for this pipeline.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RenderPipelineAsset.defaultTerrainMaterial">
      <summary>
        <para>Return the default Terrain  Material for this pipeline.</para>
      </summary>
      <returns>
        <para>Default material.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.Rendering.RenderPipelineAsset.defaultUIETC1SupportedMaterial">
      <summary>
        <para>Return the default UI ETC1  Material for this pipeline.</para>
      </summary>
      <returns>
        <para>Default material.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.Rendering.RenderPipelineAsset.defaultUIMaterial">
      <summary>
        <para>Return the default UI Material for this pipeline.</para>
      </summary>
      <returns>
        <para>Default material.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.Rendering.RenderPipelineAsset.defaultUIOverdrawMaterial">
      <summary>
        <para>Return the default UI overdraw Material for this pipeline.</para>
      </summary>
      <returns>
        <para>Default material.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.Rendering.RenderPipelineAsset.renderingLayerMaskNames">
      <summary>
        <para>Returns the list of names used to display Rendering Layer Mask UI for this pipeline.</para>
      </summary>
      <returns>
        <para>Array of 32 Rendering Layer Mask names.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.Rendering.RenderPipelineAsset.terrainBrushPassIndex">
      <summary>
        <para>The render index for the terrain brush in the editor.</para>
      </summary>
      <returns>
        <para>Queue index.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.Rendering.RenderPipelineAsset.terrainDetailGrassBillboardShader">
      <summary>
        <para>Return the detail grass billboard Shader for this pipeline.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RenderPipelineAsset.terrainDetailGrassShader">
      <summary>
        <para>Return the detail grass Shader for this pipeline.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RenderPipelineAsset.terrainDetailLitShader">
      <summary>
        <para>Return the detail lit Shader for this pipeline.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.RenderPipelineAsset.CreatePipeline">
      <summary>
        <para>Create a IRenderPipeline specific to this asset.</para>
      </summary>
      <returns>
        <para>Created pipeline.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.RenderPipelineAsset.OnDisable">
      <summary>
        <para>Default implementation of OnDisable for RenderPipelineAsset. See ScriptableObject.OnDisable</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.RenderPipelineAsset.OnValidate">
      <summary>
        <para>Default implementation of OnValidate for RenderPipelineAsset. See MonoBehaviour.OnValidate</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.RenderPipelineManager">
      <summary>
        <para>Render Pipeline manager.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Rendering.RenderPipelineManager.beginCameraRendering(System.Action`2&lt;UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Camera&gt;)">
      <summary>
        <para>Delegate that you can use to invoke custom code before Unity renders an individual Camera.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="?:UnityEngine.Rendering.RenderPipelineManager.beginFrameRendering(System.Action`2&lt;UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Camera[]&gt;)">
      <summary>
        <para>Delegate that you can use to invoke custom code at the start of RenderPipeline.Render.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="P:UnityEngine.Rendering.RenderPipelineManager.currentPipeline">
      <summary>
        <para>Returns the instance of the current RenderPipeline.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Rendering.RenderPipelineManager.endCameraRendering(System.Action`2&lt;UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Camera&gt;)">
      <summary>
        <para>Delegate that you can use to invoke custom code after Unity renders an individual Camera.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="?:UnityEngine.Rendering.RenderPipelineManager.endFrameRendering(System.Action`2&lt;UnityEngine.Rendering.ScriptableRenderContext,UnityEngine.Camera[]&gt;)">
      <summary>
        <para>Delegate that you can use to invoke custom code at the end of RenderPipeline.Render.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="T:UnityEngine.Rendering.RenderQueue">
      <summary>
        <para>Determine in which order objects are renderered.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderQueue.AlphaTest">
      <summary>
        <para>Alpha tested geometry uses this queue.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderQueue.Background">
      <summary>
        <para>This render queue is rendered before any others.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderQueue.Geometry">
      <summary>
        <para>Opaque geometry uses this queue.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderQueue.GeometryLast">
      <summary>
        <para>Last render queue that is considered "opaque".</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderQueue.Overlay">
      <summary>
        <para>This render queue is meant for overlay effects.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderQueue.Transparent">
      <summary>
        <para>This render queue is rendered after Geometry and AlphaTest, in back-to-front order.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.RenderQueueRange">
      <summary>
        <para>Describes a material render queue range.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RenderQueueRange.all">
      <summary>
        <para>A range that includes all objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RenderQueueRange.lowerBound">
      <summary>
        <para>Inclusive lower bound for the range.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderQueueRange.maximumBound">
      <summary>
        <para>Maximum value that can be used as a bound.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderQueueRange.minimumBound">
      <summary>
        <para>Minimum value that can be used as a bound.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RenderQueueRange.opaque">
      <summary>
        <para>A range that includes only opaque objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RenderQueueRange.transparent">
      <summary>
        <para>A range that includes only transparent objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RenderQueueRange.upperBound">
      <summary>
        <para>Inclusive upper bound for the range.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.RenderQueueRange.#ctor(System.Int32,System.Int32)">
      <summary>
        <para>Create a render queue range struct.</para>
      </summary>
      <param name="lowerBound">Inclusive lower bound for the range.</param>
      <param name="upperBound">Inclusive upper bound for the range.</param>
    </member>
    <member name="T:UnityEngine.Rendering.RenderStateBlock">
      <summary>
        <para>A set of values that Unity uses to override the GPU's render state.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RenderStateBlock.blendState">
      <summary>
        <para>Specifies the new blend state.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RenderStateBlock.depthState">
      <summary>
        <para>Specifies the new depth state.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RenderStateBlock.mask">
      <summary>
        <para>Specifies which parts of the GPU's render state to override.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RenderStateBlock.rasterState">
      <summary>
        <para>Specifies the new raster state.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RenderStateBlock.stencilReference">
      <summary>
        <para>The value to be compared against and/or the value to be written to the buffer, based on the stencil state.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RenderStateBlock.stencilState">
      <summary>
        <para>Specifies the new stencil state.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.RenderStateBlock.#ctor(UnityEngine.Rendering.RenderStateMask)">
      <summary>
        <para>Creates a new render state block with the specified mask.</para>
      </summary>
      <param name="mask">Specifies which parts of the GPU's render state to override.</param>
    </member>
    <member name="T:UnityEngine.Rendering.RenderStateMask">
      <summary>
        <para>Specifies which parts of the render state that is overriden.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderStateMask.Blend">
      <summary>
        <para>When set, the blend state is overridden.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderStateMask.Depth">
      <summary>
        <para>When set, the depth state is overridden.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderStateMask.Everything">
      <summary>
        <para>When set, all render states are overridden.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderStateMask.Nothing">
      <summary>
        <para>No render states are overridden.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderStateMask.Raster">
      <summary>
        <para>When set, the raster state is overridden.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderStateMask.Stencil">
      <summary>
        <para>When set, the stencil state and reference value is overridden.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.RenderTargetBinding">
      <summary>
        <para>Describes a render target with one or more color buffers, a depthstencil buffer and the associated loadstore-actions that are applied when the render target is active.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RenderTargetBinding.colorLoadActions">
      <summary>
        <para>Load actions for color buffers.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RenderTargetBinding.colorRenderTargets">
      <summary>
        <para>Color buffers to use as render targets.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RenderTargetBinding.colorStoreActions">
      <summary>
        <para>Store actions for color buffers.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RenderTargetBinding.depthLoadAction">
      <summary>
        <para>Load action for the depth/stencil buffer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RenderTargetBinding.depthRenderTarget">
      <summary>
        <para>Depth/stencil buffer to use as render target.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RenderTargetBinding.depthStoreAction">
      <summary>
        <para>Store action for the depth/stencil buffer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RenderTargetBinding.flags">
      <summary>
        <para>Optional flags.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.RenderTargetBinding.#ctor(UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderBufferLoadAction,UnityEngine.Rendering.RenderBufferStoreAction,UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderBufferLoadAction,UnityEngine.Rendering.RenderBufferStoreAction)">
      <summary>
        <para>Constructs RenderTargetBinding.</para>
      </summary>
      <param name="color">Color buffers to use as render targets.</param>
      <param name="depth">Depth buffer to use as render target.</param>
      <param name="colorLoadAction">Load actions for color buffers.</param>
      <param name="colorStoreAction">Store actions for color buffers.</param>
      <param name="depthLoadAction">Load action for the depth/stencil buffer.</param>
      <param name="depthStoreAction">Store action for the depth/stencil buffer.</param>
      <param name="colorRenderTarget"></param>
      <param name="depthRenderTarget"></param>
      <param name="colorRenderTargets"></param>
      <param name="colorLoadActions"></param>
      <param name="colorStoreActions"></param>
      <param name="setup"></param>
    </member>
    <member name="M:UnityEngine.Rendering.RenderTargetBinding.#ctor(UnityEngine.Rendering.RenderTargetIdentifier[],UnityEngine.Rendering.RenderBufferLoadAction[],UnityEngine.Rendering.RenderBufferStoreAction[],UnityEngine.Rendering.RenderTargetIdentifier,UnityEngine.Rendering.RenderBufferLoadAction,UnityEngine.Rendering.RenderBufferStoreAction)">
      <summary>
        <para>Constructs RenderTargetBinding.</para>
      </summary>
      <param name="color">Color buffers to use as render targets.</param>
      <param name="depth">Depth buffer to use as render target.</param>
      <param name="colorLoadAction">Load actions for color buffers.</param>
      <param name="colorStoreAction">Store actions for color buffers.</param>
      <param name="depthLoadAction">Load action for the depth/stencil buffer.</param>
      <param name="depthStoreAction">Store action for the depth/stencil buffer.</param>
      <param name="colorRenderTarget"></param>
      <param name="depthRenderTarget"></param>
      <param name="colorRenderTargets"></param>
      <param name="colorLoadActions"></param>
      <param name="colorStoreActions"></param>
      <param name="setup"></param>
    </member>
    <member name="M:UnityEngine.Rendering.RenderTargetBinding.#ctor(UnityEngine.RenderTargetSetup)">
      <summary>
        <para>Constructs RenderTargetBinding.</para>
      </summary>
      <param name="color">Color buffers to use as render targets.</param>
      <param name="depth">Depth buffer to use as render target.</param>
      <param name="colorLoadAction">Load actions for color buffers.</param>
      <param name="colorStoreAction">Store actions for color buffers.</param>
      <param name="depthLoadAction">Load action for the depth/stencil buffer.</param>
      <param name="depthStoreAction">Store action for the depth/stencil buffer.</param>
      <param name="colorRenderTarget"></param>
      <param name="depthRenderTarget"></param>
      <param name="colorRenderTargets"></param>
      <param name="colorLoadActions"></param>
      <param name="colorStoreActions"></param>
      <param name="setup"></param>
    </member>
    <member name="T:UnityEngine.Rendering.RenderTargetBlendState">
      <summary>
        <para>Values for the blend state.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RenderTargetBlendState.alphaBlendOperation">
      <summary>
        <para>Operation used for blending the alpha (A) channel.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RenderTargetBlendState.colorBlendOperation">
      <summary>
        <para>Operation used for blending the color (RGB) channel.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RenderTargetBlendState.defaultValue">
      <summary>
        <para>Default values for the blend state.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RenderTargetBlendState.destinationAlphaBlendMode">
      <summary>
        <para>Blend factor used for the alpha (A) channel of the destination.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RenderTargetBlendState.destinationColorBlendMode">
      <summary>
        <para>Blend factor used for the color (RGB) channel of the destination.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RenderTargetBlendState.sourceAlphaBlendMode">
      <summary>
        <para>Blend factor used for the alpha (A) channel of the source.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RenderTargetBlendState.sourceColorBlendMode">
      <summary>
        <para>Blend factor used for the color (RGB) channel of the source.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.RenderTargetBlendState.writeMask">
      <summary>
        <para>Specifies which color components will get written into the target framebuffer.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.RenderTargetBlendState.#ctor(UnityEngine.Rendering.ColorWriteMask,UnityEngine.Rendering.BlendMode,UnityEngine.Rendering.BlendMode,UnityEngine.Rendering.BlendMode,UnityEngine.Rendering.BlendMode,UnityEngine.Rendering.BlendOp,UnityEngine.Rendering.BlendOp)">
      <summary>
        <para>Creates a new blend state with the given values.</para>
      </summary>
      <param name="writeMask">Specifies which color components will get written into the target framebuffer.</param>
      <param name="sourceColorBlendMode">Blend factor used for the color (RGB) channel of the source.</param>
      <param name="destinationColorBlendMode">Blend factor used for the color (RGB) channel of the destination.</param>
      <param name="sourceAlphaBlendMode">Blend factor used for the alpha (A) channel of the source.</param>
      <param name="destinationAlphaBlendMode">Blend factor used for the alpha (A) channel of the destination.</param>
      <param name="colorBlendOperation">Operation used for blending the color (RGB) channel.</param>
      <param name="alphaBlendOperation">Operation used for blending the alpha (A) channel.</param>
    </member>
    <member name="T:UnityEngine.Rendering.RenderTargetFlags">
      <summary>
        <para>This enum describes optional flags for the RenderTargetBinding structure.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderTargetFlags.None">
      <summary>
        <para>No flag option (0).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderTargetFlags.ReadOnlyDepth">
      <summary>
        <para>The depth buffer bound for rendering may also bound as a samplable texture to the graphics pipeline: some platforms require the depth buffer to be set to read-only mode in such cases (D3D11, Vulkan). This flag can be used for both packed depth-stencil as well as separate depth-stencil formats.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderTargetFlags.ReadOnlyDepthStencil">
      <summary>
        <para>Both depth and stencil buffers bound for rendering may be bound as samplable textures to the graphics pipeline: some platforms require the depth and stencil buffers to be set to read-only mode in such cases (D3D11, Vulkan). This flag can be used for both packed depth-stencil as well as separate depth-stencil formats.
                This flag is a bitwise combination of RenderTargetFlags.ReadOnlyDepth and RenderTargetFlags.ReadOnlyStencil.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderTargetFlags.ReadOnlyStencil">
      <summary>
        <para>The stencil buffer bound for rendering may also bound as a samplable texture to the graphics pipeline: some platforms require the stencil buffer to be set to read-only mode in such cases (D3D11, Vulkan). This flag can be used for both packed depth-stencil as well as separate depth-stencil formats.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.RenderTargetIdentifier">
      <summary>
        <para>Identifies a RenderTexture for a Rendering.CommandBuffer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderTargetIdentifier.AllDepthSlices">
      <summary>
        <para>All depth-slices of the render resource are bound for rendering. For textures which are neither array nor 3D, the default slice is bound.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.RenderTargetIdentifier.#ctor(UnityEngine.Rendering.BuiltinRenderTextureType)">
      <summary>
        <para>Creates a render target identifier.</para>
      </summary>
      <param name="type">Built-in temporary render texture type.</param>
      <param name="name">Temporary render texture name.</param>
      <param name="nameID">Temporary render texture name (as integer, see Shader.PropertyToID).</param>
      <param name="tex">RenderTexture or Texture object to use.</param>
      <param name="mipLevel">MipLevel of the RenderTexture to use.</param>
      <param name="cubemapFace">Cubemap face of the Cubemap RenderTexture to use.</param>
      <param name="depthSlice">Depth slice of the Array RenderTexture to use. The symbolic constant RenderTargetIdentifier.AllDepthSlices indicates that all slices should be bound for rendering. The default value is 0.</param>
      <param name="renderTargetIdentifier">An existing render target identifier.</param>
      <param name="cubeFace"></param>
    </member>
    <member name="M:UnityEngine.Rendering.RenderTargetIdentifier.#ctor(System.String)">
      <summary>
        <para>Creates a render target identifier.</para>
      </summary>
      <param name="type">Built-in temporary render texture type.</param>
      <param name="name">Temporary render texture name.</param>
      <param name="nameID">Temporary render texture name (as integer, see Shader.PropertyToID).</param>
      <param name="tex">RenderTexture or Texture object to use.</param>
      <param name="mipLevel">MipLevel of the RenderTexture to use.</param>
      <param name="cubemapFace">Cubemap face of the Cubemap RenderTexture to use.</param>
      <param name="depthSlice">Depth slice of the Array RenderTexture to use. The symbolic constant RenderTargetIdentifier.AllDepthSlices indicates that all slices should be bound for rendering. The default value is 0.</param>
      <param name="renderTargetIdentifier">An existing render target identifier.</param>
      <param name="cubeFace"></param>
    </member>
    <member name="M:UnityEngine.Rendering.RenderTargetIdentifier.#ctor(System.Int32)">
      <summary>
        <para>Creates a render target identifier.</para>
      </summary>
      <param name="type">Built-in temporary render texture type.</param>
      <param name="name">Temporary render texture name.</param>
      <param name="nameID">Temporary render texture name (as integer, see Shader.PropertyToID).</param>
      <param name="tex">RenderTexture or Texture object to use.</param>
      <param name="mipLevel">MipLevel of the RenderTexture to use.</param>
      <param name="cubemapFace">Cubemap face of the Cubemap RenderTexture to use.</param>
      <param name="depthSlice">Depth slice of the Array RenderTexture to use. The symbolic constant RenderTargetIdentifier.AllDepthSlices indicates that all slices should be bound for rendering. The default value is 0.</param>
      <param name="renderTargetIdentifier">An existing render target identifier.</param>
      <param name="cubeFace"></param>
    </member>
    <member name="M:UnityEngine.Rendering.RenderTargetIdentifier.#ctor(UnityEngine.Texture)">
      <summary>
        <para>Creates a render target identifier.</para>
      </summary>
      <param name="type">Built-in temporary render texture type.</param>
      <param name="name">Temporary render texture name.</param>
      <param name="nameID">Temporary render texture name (as integer, see Shader.PropertyToID).</param>
      <param name="tex">RenderTexture or Texture object to use.</param>
      <param name="mipLevel">MipLevel of the RenderTexture to use.</param>
      <param name="cubemapFace">Cubemap face of the Cubemap RenderTexture to use.</param>
      <param name="depthSlice">Depth slice of the Array RenderTexture to use. The symbolic constant RenderTargetIdentifier.AllDepthSlices indicates that all slices should be bound for rendering. The default value is 0.</param>
      <param name="renderTargetIdentifier">An existing render target identifier.</param>
      <param name="cubeFace"></param>
    </member>
    <member name="M:UnityEngine.Rendering.RenderTargetIdentifier.#ctor(UnityEngine.Rendering.RenderTargetIdentifier,System.Int32,UnityEngine.CubemapFace,System.Int32)">
      <summary>
        <para>Creates a render target identifier.</para>
      </summary>
      <param name="type">Built-in temporary render texture type.</param>
      <param name="name">Temporary render texture name.</param>
      <param name="nameID">Temporary render texture name (as integer, see Shader.PropertyToID).</param>
      <param name="tex">RenderTexture or Texture object to use.</param>
      <param name="mipLevel">MipLevel of the RenderTexture to use.</param>
      <param name="cubemapFace">Cubemap face of the Cubemap RenderTexture to use.</param>
      <param name="depthSlice">Depth slice of the Array RenderTexture to use. The symbolic constant RenderTargetIdentifier.AllDepthSlices indicates that all slices should be bound for rendering. The default value is 0.</param>
      <param name="renderTargetIdentifier">An existing render target identifier.</param>
      <param name="cubeFace"></param>
    </member>
    <member name="T:UnityEngine.Rendering.RenderTextureSubElement">
      <summary>
        <para>Types of data that you can encapsulate within a render texture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderTextureSubElement.Color">
      <summary>
        <para>Color element of a RenderTexture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderTextureSubElement.Default">
      <summary>
        <para>The Default element of a RenderTexture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderTextureSubElement.Depth">
      <summary>
        <para>The depth element of a RenderTexture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.RenderTextureSubElement.Stencil">
      <summary>
        <para>The stencil element of a RenderTexture.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.ScopedRenderPass">
      <summary>
        <para>Represents an active render pass until disposed.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.ScopedRenderPass.Dispose">
      <summary>
        <para>Ends the current render pass in the ScriptableRenderContext that was used to create the ScopedRenderPass.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.ScopedSubPass">
      <summary>
        <para>Represents an active sub pass until disposed.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.ScopedSubPass.Dispose">
      <summary>
        <para>Ends the current sub pass in the ScriptableRenderContext that was used to create the ScopedSubPass.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.ScriptableCullingParameters">
      <summary>
        <para>Parameters that configure a culling operation in the Scriptable Render Pipeline.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.ScriptableCullingParameters.accurateOcclusionThreshold">
      <summary>
        <para>This parameter determines query distance for occlusion culling.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.ScriptableCullingParameters.cameraProperties">
      <summary>
        <para>Camera Properties used for culling.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.ScriptableCullingParameters.cullingJobsLowerLimit">
      <summary>
        <para>The lower limit to the value ScriptableCullingParameters.maximumPortalCullingJobs.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.ScriptableCullingParameters.cullingJobsUpperLimit">
      <summary>
        <para>The upper limit to the value ScriptableCullingParameters.maximumPortalCullingJobs.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.ScriptableCullingParameters.cullingMask">
      <summary>
        <para>The mask for the culling operation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.ScriptableCullingParameters.cullingMatrix">
      <summary>
        <para>The matrix for the culling operation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.ScriptableCullingParameters.cullingOptions">
      <summary>
        <para>Flags to configure a culling operation in the Scriptable Render Pipeline.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.ScriptableCullingParameters.cullingPlaneCount">
      <summary>
        <para>Number of culling planes to use.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.ScriptableCullingParameters.isOrthographic">
      <summary>
        <para>Is the cull orthographic.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ScriptableCullingParameters.layerCount">
      <summary>
        <para>The amount of layers available.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.ScriptableCullingParameters.lodParameters">
      <summary>
        <para>LODParameters for culling.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ScriptableCullingParameters.maximumCullingPlaneCount">
      <summary>
        <para>Maximum amount of culling planes that can be specified.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.ScriptableCullingParameters.maximumPortalCullingJobs">
      <summary>
        <para>This parameter controls how many active jobs contribute to occlusion culling.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.ScriptableCullingParameters.maximumVisibleLights">
      <summary>
        <para>This parameter controls how many visible lights are allowed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.ScriptableCullingParameters.origin">
      <summary>
        <para>Position for the origin of the cull.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.ScriptableCullingParameters.reflectionProbeSortingCriteria">
      <summary>
        <para>Reflection Probe Sort options for the cull.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.ScriptableCullingParameters.shadowDistance">
      <summary>
        <para>Shadow distance to use for the cull.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.ScriptableCullingParameters.stereoProjectionMatrix">
      <summary>
        <para>The projection matrix generated for single-pass stereo culling.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.ScriptableCullingParameters.stereoSeparationDistance">
      <summary>
        <para>Distance between the virtual eyes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.ScriptableCullingParameters.stereoViewMatrix">
      <summary>
        <para>The view matrix generated for single-pass stereo culling.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableCullingParameters.GetCullingPlane(System.Int32)">
      <summary>
        <para>Fetch the culling plane at the given index.</para>
      </summary>
      <param name="index"></param>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableCullingParameters.GetLayerCullingDistance(System.Int32)">
      <summary>
        <para>Get the distance for the culling of a specific layer.</para>
      </summary>
      <param name="layerIndex"></param>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableCullingParameters.SetCullingPlane(System.Int32,UnityEngine.Plane)">
      <summary>
        <para>Set the culling plane at a given index.</para>
      </summary>
      <param name="index"></param>
      <param name="plane"></param>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableCullingParameters.SetLayerCullingDistance(System.Int32,System.Single)">
      <summary>
        <para>Set the distance for the culling of a specific layer.</para>
      </summary>
      <param name="layerIndex"></param>
      <param name="distance"></param>
    </member>
    <member name="T:UnityEngine.Rendering.ScriptableRenderContext">
      <summary>
        <para>Defines state and drawing commands that custom render pipelines use.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.BeginRenderPass(System.Int32,System.Int32,System.Int32,Unity.Collections.NativeArray`1&lt;UnityEngine.Rendering.AttachmentDescriptor&gt;,System.Int32)">
      <summary>
        <para>Schedules the beginning of a new render pass. Only one render pass can be active at any time.</para>
      </summary>
      <param name="width">The width of the render pass surfaces in pixels.</param>
      <param name="height">The height of the render pass surfaces in pixels.</param>
      <param name="samples">MSAA sample count; set to 1 to disable antialiasing.</param>
      <param name="attachments">Array of color attachments to use within this render pass. The values in the array are copied immediately.</param>
      <param name="depthAttachmentIndex">The index of the attachment to be used as the depthstencil buffer for this render pass, or -1 to disable depthstencil.</param>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.BeginScopedRenderPass(System.Int32,System.Int32,System.Int32,Unity.Collections.NativeArray`1&lt;UnityEngine.Rendering.AttachmentDescriptor&gt;,System.Int32)">
      <summary>
        <para>Schedules the beginning of a new render pass. If you call this a using-statement, Unity calls EndRenderPass automatically when exiting the using-block. Only one render pass can be active at any time.</para>
      </summary>
      <param name="width">The width of the render pass surfaces in pixels.</param>
      <param name="height">The height of the render pass surfaces in pixels.</param>
      <param name="samples">MSAA sample count; set to 1 to disable antialiasing.</param>
      <param name="attachments">Array of color attachments to use within this render pass. The values in the array are copied immediately.</param>
      <param name="depthAttachmentIndex">The index of the attachment to be used as the depthstencil buffer for this render pass, or -1 to disable depthstencil.</param>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.BeginScopedSubPass(Unity.Collections.NativeArray`1&lt;System.Int32&gt;,Unity.Collections.NativeArray`1&lt;System.Int32&gt;,System.Boolean,System.Boolean)">
      <summary>
        <para>Schedules the beginning of a new sub pass within a render pass. If you call this in a using-statement, Unity executes EndSubPass automatically when exiting the using-block.
Render passes can never be standalone, they must always contain at least one sub pass. Only one sub pass can be active at any time.</para>
      </summary>
      <param name="colors">Array of attachments to be used as the color render targets in this sub pass. These are specificed as indices into the array passed to BeginRenderPass. The values in the array are copied immediately.</param>
      <param name="inputs">Array of attachments to be used as input attachments in this sub pass. These are specificed as indices into the array passed to BeginRenderPass. The values in the array are copied immediately.</param>
      <param name="isDepthStencilReadOnly">If true, both depth and stencil attachments are read-only in this sub pass. Some renderers require this in order to be able to use the depth and stencil attachments as inputs.</param>
      <param name="isDepthReadOnly">If true, the depth attachment is read-only in this sub pass. Some renderers require this in order to be able to use the depth attachment as input.</param>
      <param name="isStencilReadOnly">If true, the stencil attachment is read-only in this sub pass. Some renderers require this in order to be able to use the stencil attachment as input.</param>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.BeginScopedSubPass(Unity.Collections.NativeArray`1&lt;System.Int32&gt;,Unity.Collections.NativeArray`1&lt;System.Int32&gt;,System.Boolean)">
      <summary>
        <para>Schedules the beginning of a new sub pass within a render pass. If you call this in a using-statement, Unity executes EndSubPass automatically when exiting the using-block.
Render passes can never be standalone, they must always contain at least one sub pass. Only one sub pass can be active at any time.</para>
      </summary>
      <param name="colors">Array of attachments to be used as the color render targets in this sub pass. These are specificed as indices into the array passed to BeginRenderPass. The values in the array are copied immediately.</param>
      <param name="inputs">Array of attachments to be used as input attachments in this sub pass. These are specificed as indices into the array passed to BeginRenderPass. The values in the array are copied immediately.</param>
      <param name="isDepthStencilReadOnly">If true, both depth and stencil attachments are read-only in this sub pass. Some renderers require this in order to be able to use the depth and stencil attachments as inputs.</param>
      <param name="isDepthReadOnly">If true, the depth attachment is read-only in this sub pass. Some renderers require this in order to be able to use the depth attachment as input.</param>
      <param name="isStencilReadOnly">If true, the stencil attachment is read-only in this sub pass. Some renderers require this in order to be able to use the stencil attachment as input.</param>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.BeginScopedSubPass(Unity.Collections.NativeArray`1&lt;System.Int32&gt;,System.Boolean,System.Boolean)">
      <summary>
        <para>Schedules the beginning of a new sub pass within a render pass. If you call this in a using-statement, Unity executes EndSubPass automatically when exiting the using-block.
Render passes can never be standalone, they must always contain at least one sub pass. Only one sub pass can be active at any time.</para>
      </summary>
      <param name="colors">Array of attachments to be used as the color render targets in this sub pass. These are specificed as indices into the array passed to BeginRenderPass. The values in the array are copied immediately.</param>
      <param name="inputs">Array of attachments to be used as input attachments in this sub pass. These are specificed as indices into the array passed to BeginRenderPass. The values in the array are copied immediately.</param>
      <param name="isDepthStencilReadOnly">If true, both depth and stencil attachments are read-only in this sub pass. Some renderers require this in order to be able to use the depth and stencil attachments as inputs.</param>
      <param name="isDepthReadOnly">If true, the depth attachment is read-only in this sub pass. Some renderers require this in order to be able to use the depth attachment as input.</param>
      <param name="isStencilReadOnly">If true, the stencil attachment is read-only in this sub pass. Some renderers require this in order to be able to use the stencil attachment as input.</param>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.BeginScopedSubPass(Unity.Collections.NativeArray`1&lt;System.Int32&gt;,System.Boolean)">
      <summary>
        <para>Schedules the beginning of a new sub pass within a render pass. If you call this in a using-statement, Unity executes EndSubPass automatically when exiting the using-block.
Render passes can never be standalone, they must always contain at least one sub pass. Only one sub pass can be active at any time.</para>
      </summary>
      <param name="colors">Array of attachments to be used as the color render targets in this sub pass. These are specificed as indices into the array passed to BeginRenderPass. The values in the array are copied immediately.</param>
      <param name="inputs">Array of attachments to be used as input attachments in this sub pass. These are specificed as indices into the array passed to BeginRenderPass. The values in the array are copied immediately.</param>
      <param name="isDepthStencilReadOnly">If true, both depth and stencil attachments are read-only in this sub pass. Some renderers require this in order to be able to use the depth and stencil attachments as inputs.</param>
      <param name="isDepthReadOnly">If true, the depth attachment is read-only in this sub pass. Some renderers require this in order to be able to use the depth attachment as input.</param>
      <param name="isStencilReadOnly">If true, the stencil attachment is read-only in this sub pass. Some renderers require this in order to be able to use the stencil attachment as input.</param>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.BeginSubPass(Unity.Collections.NativeArray`1&lt;System.Int32&gt;,Unity.Collections.NativeArray`1&lt;System.Int32&gt;,System.Boolean,System.Boolean)">
      <summary>
        <para>Schedules the beginning of a new sub pass within a render pass. Render passes can never be standalone, they must always contain at least one sub pass. Only one sub pass can be active at any time.</para>
      </summary>
      <param name="colors">Array of attachments to be used as the color render targets in this sub pass. These are specificed as indices into the array passed to BeginRenderPass.</param>
      <param name="inputs">Array of attachments to be used as input attachments in this sub pass. These are specificed as indices into the array passed to BeginRenderPass.</param>
      <param name="isDepthStencilReadOnly">If true, both depth and stencil attachments are read-only in this sub pass. Some renderers require this in order to be able to use the depth and stencil attachments as inputs.</param>
      <param name="isDepthReadOnly">If true, the depth attachment is read-only in this sub pass. Some renderers require this in order to be able to use the depth attachment as input.</param>
      <param name="isStencilReadOnly">If true, the stencil attachment is read-only in this sub pass. Some renderers require this in order to be able to use the stencil attachment as input.</param>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.BeginSubPass(Unity.Collections.NativeArray`1&lt;System.Int32&gt;,Unity.Collections.NativeArray`1&lt;System.Int32&gt;,System.Boolean)">
      <summary>
        <para>Schedules the beginning of a new sub pass within a render pass. Render passes can never be standalone, they must always contain at least one sub pass. Only one sub pass can be active at any time.</para>
      </summary>
      <param name="colors">Array of attachments to be used as the color render targets in this sub pass. These are specificed as indices into the array passed to BeginRenderPass.</param>
      <param name="inputs">Array of attachments to be used as input attachments in this sub pass. These are specificed as indices into the array passed to BeginRenderPass.</param>
      <param name="isDepthStencilReadOnly">If true, both depth and stencil attachments are read-only in this sub pass. Some renderers require this in order to be able to use the depth and stencil attachments as inputs.</param>
      <param name="isDepthReadOnly">If true, the depth attachment is read-only in this sub pass. Some renderers require this in order to be able to use the depth attachment as input.</param>
      <param name="isStencilReadOnly">If true, the stencil attachment is read-only in this sub pass. Some renderers require this in order to be able to use the stencil attachment as input.</param>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.BeginSubPass(Unity.Collections.NativeArray`1&lt;System.Int32&gt;,System.Boolean,System.Boolean)">
      <summary>
        <para>Schedules the beginning of a new sub pass within a render pass. Render passes can never be standalone, they must always contain at least one sub pass. Only one sub pass can be active at any time.</para>
      </summary>
      <param name="colors">Array of attachments to be used as the color render targets in this sub pass. These are specificed as indices into the array passed to BeginRenderPass.</param>
      <param name="inputs">Array of attachments to be used as input attachments in this sub pass. These are specificed as indices into the array passed to BeginRenderPass.</param>
      <param name="isDepthStencilReadOnly">If true, both depth and stencil attachments are read-only in this sub pass. Some renderers require this in order to be able to use the depth and stencil attachments as inputs.</param>
      <param name="isDepthReadOnly">If true, the depth attachment is read-only in this sub pass. Some renderers require this in order to be able to use the depth attachment as input.</param>
      <param name="isStencilReadOnly">If true, the stencil attachment is read-only in this sub pass. Some renderers require this in order to be able to use the stencil attachment as input.</param>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.BeginSubPass(Unity.Collections.NativeArray`1&lt;System.Int32&gt;,System.Boolean)">
      <summary>
        <para>Schedules the beginning of a new sub pass within a render pass. Render passes can never be standalone, they must always contain at least one sub pass. Only one sub pass can be active at any time.</para>
      </summary>
      <param name="colors">Array of attachments to be used as the color render targets in this sub pass. These are specificed as indices into the array passed to BeginRenderPass.</param>
      <param name="inputs">Array of attachments to be used as input attachments in this sub pass. These are specificed as indices into the array passed to BeginRenderPass.</param>
      <param name="isDepthStencilReadOnly">If true, both depth and stencil attachments are read-only in this sub pass. Some renderers require this in order to be able to use the depth and stencil attachments as inputs.</param>
      <param name="isDepthReadOnly">If true, the depth attachment is read-only in this sub pass. Some renderers require this in order to be able to use the depth attachment as input.</param>
      <param name="isStencilReadOnly">If true, the stencil attachment is read-only in this sub pass. Some renderers require this in order to be able to use the stencil attachment as input.</param>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.Cull(UnityEngine.Rendering.ScriptableCullingParameters&amp;)">
      <summary>
        <para>Performs culling based on the ScriptableCullingParameters typically obtained from the Camera currently being rendered.</para>
      </summary>
      <param name="parameters">Parameters for culling.</param>
      <returns>
        <para>Culling results.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.DrawGizmos(UnityEngine.Camera,UnityEngine.Rendering.GizmoSubset)">
      <summary>
        <para>Schedules the drawing of a subset of Gizmos (before or after post-processing) for the given Camera.</para>
      </summary>
      <param name="camera">The camera of the current view.</param>
      <param name="gizmoSubset">Set to GizmoSubset.PreImageEffects to draw Gizmos that should be affected by postprocessing, or GizmoSubset.PostImageEffects to draw Gizmos that should not be affected by postprocessing. See also: GizmoSubset.</param>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.DrawRenderers(UnityEngine.Rendering.CullingResults,UnityEngine.Rendering.DrawingSettings&amp;,UnityEngine.Rendering.FilteringSettings&amp;)">
      <summary>
        <para>Schedules the drawing of a set of visible objects, and optionally overrides the GPU's render state.</para>
      </summary>
      <param name="cullingResults">The set of visible objects to draw. You typically obtain this from ScriptableRenderContext.Cull.</param>
      <param name="drawingSettings">A struct that describes how to draw the objects.</param>
      <param name="filteringSettings">A struct that describes how to filter the set of visible objects, so that Unity only draws a subset.</param>
      <param name="stateBlock">A set of values that Unity uses to override the GPU's render state.</param>
      <param name="tagName">The name of a.</param>
      <param name="isPassTagName">If set to true, tagName specifies a.</param>
      <param name="tagValues">An array of ShaderTagId structs, where the ShaderTagId.name|name is the value of a given.</param>
      <param name="renderTypes">An array of ShaderTagId structs, where the ShaderTagId.name|name is the value of a that has the name "RenderType".</param>
      <param name="stateBlocks">An array of structs that describe which parts of the GPU's render state to override.</param>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.DrawRenderers(UnityEngine.Rendering.CullingResults,UnityEngine.Rendering.DrawingSettings&amp;,UnityEngine.Rendering.FilteringSettings&amp;,UnityEngine.Rendering.RenderStateBlock&amp;)">
      <summary>
        <para>Schedules the drawing of a set of visible objects, and optionally overrides the GPU's render state.</para>
      </summary>
      <param name="cullingResults">The set of visible objects to draw. You typically obtain this from ScriptableRenderContext.Cull.</param>
      <param name="drawingSettings">A struct that describes how to draw the objects.</param>
      <param name="filteringSettings">A struct that describes how to filter the set of visible objects, so that Unity only draws a subset.</param>
      <param name="stateBlock">A set of values that Unity uses to override the GPU's render state.</param>
      <param name="tagName">The name of a.</param>
      <param name="isPassTagName">If set to true, tagName specifies a.</param>
      <param name="tagValues">An array of ShaderTagId structs, where the ShaderTagId.name|name is the value of a given.</param>
      <param name="renderTypes">An array of ShaderTagId structs, where the ShaderTagId.name|name is the value of a that has the name "RenderType".</param>
      <param name="stateBlocks">An array of structs that describe which parts of the GPU's render state to override.</param>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.DrawRenderers(UnityEngine.Rendering.CullingResults,UnityEngine.Rendering.DrawingSettings&amp;,UnityEngine.Rendering.FilteringSettings&amp;,Unity.Collections.NativeArray`1&lt;UnityEngine.Rendering.ShaderTagId&gt;,Unity.Collections.NativeArray`1&lt;UnityEngine.Rendering.RenderStateBlock&gt;)">
      <summary>
        <para>Schedules the drawing of a set of visible objects, and optionally overrides the GPU's render state.</para>
      </summary>
      <param name="cullingResults">The set of visible objects to draw. You typically obtain this from ScriptableRenderContext.Cull.</param>
      <param name="drawingSettings">A struct that describes how to draw the objects.</param>
      <param name="filteringSettings">A struct that describes how to filter the set of visible objects, so that Unity only draws a subset.</param>
      <param name="stateBlock">A set of values that Unity uses to override the GPU's render state.</param>
      <param name="tagName">The name of a.</param>
      <param name="isPassTagName">If set to true, tagName specifies a.</param>
      <param name="tagValues">An array of ShaderTagId structs, where the ShaderTagId.name|name is the value of a given.</param>
      <param name="renderTypes">An array of ShaderTagId structs, where the ShaderTagId.name|name is the value of a that has the name "RenderType".</param>
      <param name="stateBlocks">An array of structs that describe which parts of the GPU's render state to override.</param>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.DrawRenderers(UnityEngine.Rendering.CullingResults,UnityEngine.Rendering.DrawingSettings&amp;,UnityEngine.Rendering.FilteringSettings&amp;,UnityEngine.Rendering.ShaderTagId,System.Boolean,Unity.Collections.NativeArray`1&lt;UnityEngine.Rendering.ShaderTagId&gt;,Unity.Collections.NativeArray`1&lt;UnityEngine.Rendering.RenderStateBlock&gt;)">
      <summary>
        <para>Schedules the drawing of a set of visible objects, and optionally overrides the GPU's render state.</para>
      </summary>
      <param name="cullingResults">The set of visible objects to draw. You typically obtain this from ScriptableRenderContext.Cull.</param>
      <param name="drawingSettings">A struct that describes how to draw the objects.</param>
      <param name="filteringSettings">A struct that describes how to filter the set of visible objects, so that Unity only draws a subset.</param>
      <param name="stateBlock">A set of values that Unity uses to override the GPU's render state.</param>
      <param name="tagName">The name of a.</param>
      <param name="isPassTagName">If set to true, tagName specifies a.</param>
      <param name="tagValues">An array of ShaderTagId structs, where the ShaderTagId.name|name is the value of a given.</param>
      <param name="renderTypes">An array of ShaderTagId structs, where the ShaderTagId.name|name is the value of a that has the name "RenderType".</param>
      <param name="stateBlocks">An array of structs that describe which parts of the GPU's render state to override.</param>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.DrawShadows(UnityEngine.Rendering.ShadowDrawingSettings&amp;)">
      <summary>
        <para>Schedules the drawing of shadow casters for a single Light.</para>
      </summary>
      <param name="settings">Specifies which set of shadow casters to draw, and how to draw them.</param>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.DrawSkybox(UnityEngine.Camera)">
      <summary>
        <para>Schedules the drawing of the skybox.</para>
      </summary>
      <param name="camera">Camera to draw the skybox for.</param>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.DrawUIOverlay(UnityEngine.Camera)">
      <summary>
        <para>Draw the UI overlay.</para>
      </summary>
      <param name="camera">The camera of the current view.</param>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.DrawWireOverlay(UnityEngine.Camera)">
      <summary>
        <para>Schedules the drawing of a wireframe overlay for a given Scene view Camera.</para>
      </summary>
      <param name="camera">The Scene view Camera to draw the overlay for.</param>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.EmitGeometryForCamera(UnityEngine.Camera)">
      <summary>
        <para>Emits UI geometry for rendering for the specified camera.</para>
      </summary>
      <param name="camera">Camera to emit the geometry for.</param>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.EmitWorldGeometryForSceneView(UnityEngine.Camera)">
      <summary>
        <para>Emits UI geometry into the Scene view for rendering.</para>
      </summary>
      <param name="cullingCamera">Camera to emit the geometry for.</param>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.EndRenderPass">
      <summary>
        <para>Schedules the end of a currently active render pass.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.EndSubPass">
      <summary>
        <para>Schedules the end of the currently active sub pass.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.ExecuteCommandBuffer(UnityEngine.Rendering.CommandBuffer)">
      <summary>
        <para>Schedules the execution of a custom graphics Command Buffer.</para>
      </summary>
      <param name="commandBuffer">Specifies the Command Buffer to execute.</param>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.ExecuteCommandBufferAsync(UnityEngine.Rendering.CommandBuffer,UnityEngine.Rendering.ComputeQueueType)">
      <summary>
        <para>Schedules the execution of a Command Buffer on an async compute queue. The ComputeQueueType that you pass in determines the queue order.</para>
      </summary>
      <param name="commandBuffer">The CommandBuffer to be executed.</param>
      <param name="queueType">Describes the desired async compute queue the supplied CommandBuffer should be executed on.</param>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.InvokeOnRenderObjectCallback">
      <summary>
        <para>Schedules an invocation of the OnRenderObject callback for MonoBehaviour scripts.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.SetupCameraProperties(UnityEngine.Camera,System.Boolean)">
      <summary>
        <para>Schedules the setup of Camera specific global Shader variables.</para>
      </summary>
      <param name="camera">Camera to setup shader variables for.</param>
      <param name="stereoSetup">Set up the stereo shader variables and state.</param>
      <param name="eye">The current eye to be rendered.</param>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.SetupCameraProperties(UnityEngine.Camera,System.Boolean,System.Int32)">
      <summary>
        <para>Schedules the setup of Camera specific global Shader variables.</para>
      </summary>
      <param name="camera">Camera to setup shader variables for.</param>
      <param name="stereoSetup">Set up the stereo shader variables and state.</param>
      <param name="eye">The current eye to be rendered.</param>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.StartMultiEye(UnityEngine.Camera)">
      <summary>
        <para>Schedules a fine-grained beginning of stereo rendering on the ScriptableRenderContext.</para>
      </summary>
      <param name="camera">Camera to enable stereo rendering on.</param>
      <param name="eye">The current eye to be rendered.</param>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.StartMultiEye(UnityEngine.Camera,System.Int32)">
      <summary>
        <para>Schedules a fine-grained beginning of stereo rendering on the ScriptableRenderContext.</para>
      </summary>
      <param name="camera">Camera to enable stereo rendering on.</param>
      <param name="eye">The current eye to be rendered.</param>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.StereoEndRender(UnityEngine.Camera)">
      <summary>
        <para>Schedule notification of completion of stereo rendering on a single frame.</para>
      </summary>
      <param name="camera">Camera to indicate completion of stereo rendering.</param>
      <param name="eye">The current eye to be rendered.</param>
      <param name="isFinalPass"></param>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.StereoEndRender(UnityEngine.Camera,System.Int32)">
      <summary>
        <para>Schedule notification of completion of stereo rendering on a single frame.</para>
      </summary>
      <param name="camera">Camera to indicate completion of stereo rendering.</param>
      <param name="eye">The current eye to be rendered.</param>
      <param name="isFinalPass"></param>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.StereoEndRender(UnityEngine.Camera,System.Int32,System.Boolean)">
      <summary>
        <para>Schedule notification of completion of stereo rendering on a single frame.</para>
      </summary>
      <param name="camera">Camera to indicate completion of stereo rendering.</param>
      <param name="eye">The current eye to be rendered.</param>
      <param name="isFinalPass"></param>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.StopMultiEye(UnityEngine.Camera)">
      <summary>
        <para>Schedules a stop of stereo rendering on the ScriptableRenderContext.</para>
      </summary>
      <param name="camera">Camera to disable stereo rendering on.</param>
    </member>
    <member name="M:UnityEngine.Rendering.ScriptableRenderContext.Submit">
      <summary>
        <para>Submits all the scheduled commands to the rendering loop for execution.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.ShaderConstantType">
      <summary>
        <para>Options for the shader constant value type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShaderConstantType.Matrix">
      <summary>
        <para>The shader constant is a matrix.  The related ShaderData.ConstantInfo stores the number of rows and columns.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShaderConstantType.Struct">
      <summary>
        <para>The shader constant is a struct.  The related ShaderData.ConstantInfo stores the struct's size and members.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShaderConstantType.Vector">
      <summary>
        <para>The shader constant is a vector or a scalar (a vector with one column).  The related ShaderData.ConstantInfo stores the number of columns.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.ShaderKeyword">
      <summary>
        <para>Identifier of a specific code path in a shader.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.ShaderKeyword.index">
      <summary>
        <para>The index of the shader keyword.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.ShaderKeyword.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the ShaderKeyword class from a shader global keyword name.</para>
      </summary>
      <param name="keywordName">The name of the keyword.</param>
    </member>
    <member name="M:UnityEngine.Rendering.ShaderKeyword.#ctor(UnityEngine.Shader,System.String)">
      <summary>
        <para>Initializes a new instance of the ShaderKeyword class from a global or local shader keyword name.</para>
      </summary>
      <param name="shader">The shader that declares the keyword.</param>
      <param name="keywordName">The name of the keyword.</param>
    </member>
    <member name="M:UnityEngine.Rendering.ShaderKeyword.#ctor(UnityEngine.ComputeShader,System.String)">
      <summary>
        <para>Initializes a new instance of the ShaderKeyword class from a local shader keyword name, and the compute shader that defines that local keyword.</para>
      </summary>
      <param name="shader">The compute shader that declares the local keyword.</param>
      <param name="keywordName">The name of the keyword.</param>
    </member>
    <member name="M:UnityEngine.Rendering.ShaderKeyword.GetGlobalKeywordName(UnityEngine.Rendering.ShaderKeyword)">
      <summary>
        <para>Returns the string name of the global keyword.</para>
      </summary>
      <param name="index"></param>
    </member>
    <member name="M:UnityEngine.Rendering.ShaderKeyword.GetGlobalKeywordType(UnityEngine.Rendering.ShaderKeyword)">
      <summary>
        <para>Returns the type of global keyword: built-in or user defined.</para>
      </summary>
      <param name="index"></param>
    </member>
    <member name="M:UnityEngine.Rendering.ShaderKeyword.GetKeywordName(UnityEngine.Shader,UnityEngine.Rendering.ShaderKeyword)">
      <summary>
        <para>Returns the string name of the keyword.</para>
      </summary>
      <param name="shader"></param>
      <param name="index"></param>
    </member>
    <member name="M:UnityEngine.Rendering.ShaderKeyword.GetKeywordName(UnityEngine.ComputeShader,UnityEngine.Rendering.ShaderKeyword)">
      <summary>
        <para>Returns the string name of the keyword.</para>
      </summary>
      <param name="shader"></param>
      <param name="index"></param>
    </member>
    <member name="M:UnityEngine.Rendering.ShaderKeyword.GetKeywordName">
      <summary>
        <para>Returns the string name of the keyword.</para>
      </summary>
      <param name="shader"></param>
      <param name="index"></param>
    </member>
    <member name="M:UnityEngine.Rendering.ShaderKeyword.GetKeywordType(UnityEngine.Shader,UnityEngine.Rendering.ShaderKeyword)">
      <summary>
        <para>Returns the type of keyword: built-in or user defined.</para>
      </summary>
      <param name="shader"></param>
      <param name="index"></param>
    </member>
    <member name="M:UnityEngine.Rendering.ShaderKeyword.GetKeywordType(UnityEngine.ComputeShader,UnityEngine.Rendering.ShaderKeyword)">
      <summary>
        <para>Returns the type of keyword: built-in or user defined.</para>
      </summary>
      <param name="shader"></param>
      <param name="index"></param>
    </member>
    <member name="M:UnityEngine.Rendering.ShaderKeyword.GetKeywordType">
      <summary>
        <para>Returns the type of keyword: built-in or user defined.</para>
      </summary>
      <param name="shader"></param>
      <param name="index"></param>
    </member>
    <member name="M:UnityEngine.Rendering.ShaderKeyword.IsKeywordLocal(UnityEngine.Rendering.ShaderKeyword)">
      <summary>
        <para>Returns true if the keyword is local.</para>
      </summary>
      <param name="index"></param>
    </member>
    <member name="M:UnityEngine.Rendering.ShaderKeyword.IsValid">
      <summary>
        <para>Returns true if the keyword has been imported by Unity.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.ShaderKeywordSet">
      <summary>
        <para>A collection of Rendering.ShaderKeyword that represents a specific shader variant.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.ShaderKeywordSet.Disable(UnityEngine.Rendering.ShaderKeyword)">
      <summary>
        <para>Disable a specific shader keyword.</para>
      </summary>
      <param name="keyword"></param>
    </member>
    <member name="M:UnityEngine.Rendering.ShaderKeywordSet.Enable(UnityEngine.Rendering.ShaderKeyword)">
      <summary>
        <para>Enable a specific shader keyword.</para>
      </summary>
      <param name="keyword"></param>
    </member>
    <member name="M:UnityEngine.Rendering.ShaderKeywordSet.GetShaderKeywords">
      <summary>
        <para>Return an array with all the enabled keywords in the ShaderKeywordSet.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.ShaderKeywordSet.IsEnabled(UnityEngine.Rendering.ShaderKeyword)">
      <summary>
        <para>Check whether a specific shader keyword is enabled.</para>
      </summary>
      <param name="keyword"></param>
    </member>
    <member name="T:UnityEngine.Rendering.ShaderKeywordType">
      <summary>
        <para>Type of a shader keyword, eg: built-in or user defined.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShaderKeywordType.BuiltinAutoStripped">
      <summary>
        <para>The keyword is built-in the runtime and can be automatically stripped if unusued.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShaderKeywordType.BuiltinDefault">
      <summary>
        <para>The keyword is built-in the runtime and it is systematically reserved.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShaderKeywordType.BuiltinExtra">
      <summary>
        <para>The keyword is built-in the runtime and it is optionally reserved depending on the features used.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShaderKeywordType.None">
      <summary>
        <para>No type is assigned.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShaderKeywordType.UserDefined">
      <summary>
        <para>The keyword is defined by the user.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.ShaderParamType">
      <summary>
        <para>Options for the data type of a shader constant's members.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShaderParamType.Bool">
      <summary>
        <para>A boolean.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShaderParamType.Float">
      <summary>
        <para>A float.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShaderParamType.Half">
      <summary>
        <para>A half-precision float.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShaderParamType.Int">
      <summary>
        <para>An integer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShaderParamType.Short">
      <summary>
        <para>A short.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShaderParamType.UInt">
      <summary>
        <para>An unsigned integer.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.ShaderPropertyFlags">
      <summary>
        <para>Flags that control how a shader property behaves.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShaderPropertyFlags.Gamma">
      <summary>
        <para>Signifies that values of this property are in gamma space. If the active color space is linear, Unity converts the values to linear space values.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShaderPropertyFlags.HDR">
      <summary>
        <para>Signifies that values of this property contain High Dynamic Range (HDR) data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShaderPropertyFlags.HideInInspector">
      <summary>
        <para>Signifies that Unity hides the property in the default Material Inspector.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShaderPropertyFlags.MainColor">
      <summary>
        <para>Signifies that value of this property contains the main color of the Material.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShaderPropertyFlags.MainTexture">
      <summary>
        <para>Signifies that value of this property contains the main texture of the Material.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShaderPropertyFlags.None">
      <summary>
        <para>No flags are set.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShaderPropertyFlags.NonModifiableTextureData">
      <summary>
        <para>You cannot edit this Texture property in the default Material Inspector.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShaderPropertyFlags.Normal">
      <summary>
        <para>Signifies that values of this property contain Normal (normalized vector) data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShaderPropertyFlags.NoScaleOffset">
      <summary>
        <para>Do not show UV scale/offset fields next to Textures in the default Material Inspector.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShaderPropertyFlags.PerRendererData">
      <summary>
        <para>In the Material Inspector, Unity queries the value for this property from the Renderer's MaterialPropertyBlock, instead of from the Material. The value will also appear as read-only.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.ShaderPropertyType">
      <summary>
        <para>Type of a given shader property.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShaderPropertyType.Color">
      <summary>
        <para>The property holds a Vector4 value representing a color.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShaderPropertyType.Float">
      <summary>
        <para>The property holds a floating number value.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShaderPropertyType.Range">
      <summary>
        <para>The property holds a floating number value in a certain range.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShaderPropertyType.Texture">
      <summary>
        <para>The property holds a Texture object.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShaderPropertyType.Vector">
      <summary>
        <para>The property holds a Vector4 value.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.ShaderTagId">
      <summary>
        <para>Shader tag ids are used to refer to various names in shaders.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.ShaderTagId.name">
      <summary>
        <para>Gets the name of the tag referred to by the shader tag id.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShaderTagId.none">
      <summary>
        <para>Describes a shader tag id not referring to any name.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.ShaderTagId.#ctor(System.String)">
      <summary>
        <para>Gets or creates a shader tag id representing the given name.</para>
      </summary>
      <param name="name">The name to represent with the shader tag id.</param>
    </member>
    <member name="?:UnityEngine.Rendering.ShaderTagId.op_Explicit(System.String)">
      <summary>
        <para>Converts a string to a ShaderTagId.</para>
      </summary>
      <param name="name"></param>
    </member>
    <member name="?:UnityEngine.Rendering.ShaderTagId.op_Explicit(UnityEngine.Rendering.ShaderTagId)">
      <summary>
        <para>Converts a ShaderTagId to a string.</para>
      </summary>
      <param name="tagId"></param>
    </member>
    <member name="T:UnityEngine.Rendering.ShadowCastingMode">
      <summary>
        <para>How shadows are cast from this object.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShadowCastingMode.Off">
      <summary>
        <para>No shadows are cast from this object.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShadowCastingMode.On">
      <summary>
        <para>Shadows are cast from this object.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShadowCastingMode.ShadowsOnly">
      <summary>
        <para>Object casts shadows, but is otherwise invisible in the Scene.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShadowCastingMode.TwoSided">
      <summary>
        <para>Shadows are cast from this object, treating it as two-sided.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.ShadowDrawingSettings">
      <summary>
        <para>Settings for ScriptableRenderContext.DrawShadows.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.ShadowDrawingSettings.cullingResults">
      <summary>
        <para>Culling results to use.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.ShadowDrawingSettings.lightIndex">
      <summary>
        <para>The index of the shadow-casting light to be rendered.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.ShadowDrawingSettings.splitData">
      <summary>
        <para>The split data.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.ShadowDrawingSettings.useRenderingLayerMaskTest">
      <summary>
        <para>Set this to true to make Unity filter Renderers during shadow rendering. Unity filters Renderers based on the Rendering Layer Mask of the Renderer itself, and the Rendering Layer Mask of each shadow casting Light.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.ShadowDrawingSettings.#ctor(UnityEngine.Rendering.CullingResults,System.Int32)">
      <summary>
        <para>Create a shadow settings object.</para>
      </summary>
      <param name="cullResults">The cull results for this light.</param>
      <param name="lightIndex">The light index.</param>
      <param name="cullingResults"></param>
    </member>
    <member name="T:UnityEngine.Rendering.ShadowMapPass">
      <summary>
        <para>Allows precise control over which shadow map passes to execute Rendering.CommandBuffer objects attached using Light.AddCommandBuffer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShadowMapPass.All">
      <summary>
        <para>All shadow map passes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShadowMapPass.Directional">
      <summary>
        <para>All directional shadow map passes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShadowMapPass.DirectionalCascade0">
      <summary>
        <para>First directional shadow map cascade.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShadowMapPass.DirectionalCascade1">
      <summary>
        <para>Second directional shadow map cascade.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShadowMapPass.DirectionalCascade2">
      <summary>
        <para>Third directional shadow map cascade.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShadowMapPass.DirectionalCascade3">
      <summary>
        <para>Fourth directional shadow map cascade.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShadowMapPass.Pointlight">
      <summary>
        <para>All point light shadow passes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShadowMapPass.PointlightNegativeX">
      <summary>
        <para>-X point light shadow cubemap face.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShadowMapPass.PointlightNegativeY">
      <summary>
        <para>-Y point light shadow cubemap face.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShadowMapPass.PointlightNegativeZ">
      <summary>
        <para>-Z point light shadow cubemap face.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShadowMapPass.PointlightPositiveX">
      <summary>
        <para>+X point light shadow cubemap face.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShadowMapPass.PointlightPositiveY">
      <summary>
        <para>+Y point light shadow cubemap face.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShadowMapPass.PointlightPositiveZ">
      <summary>
        <para>+Z point light shadow cubemap face.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShadowMapPass.Spotlight">
      <summary>
        <para>Spotlight shadow pass.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.ShadowSamplingMode">
      <summary>
        <para>Used by CommandBuffer.SetShadowSamplingMode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShadowSamplingMode.CompareDepths">
      <summary>
        <para>Default shadow sampling mode: sampling with a comparison filter.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShadowSamplingMode.None">
      <summary>
        <para>In ShadowSamplingMode.None, depths are not compared. Use this value if a Texture is not a shadowmap.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShadowSamplingMode.RawDepth">
      <summary>
        <para>Shadow sampling mode for sampling the depth value.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.ShadowSplitData">
      <summary>
        <para>Describes the culling information for a given shadow split (e.g. directional cascade).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.ShadowSplitData.cullingPlaneCount">
      <summary>
        <para>The number of culling planes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.ShadowSplitData.cullingSphere">
      <summary>
        <para>The culling sphere.  The first three components of the vector describe the sphere center, and the last component specifies the radius.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ShadowSplitData.maximumCullingPlaneCount">
      <summary>
        <para>The maximum number of culling planes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.ShadowSplitData.shadowCascadeBlendCullingFactor">
      <summary>
        <para>
                    A multiplier applied to the radius of the culling sphere.

Values must be in the range 0 to 1. With higher values, Unity culls more objects. Lower makes the cascades share more rendered objects. Using lower values allows blending between different cascades as they then share objects.
                </para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.ShadowSplitData.GetCullingPlane(System.Int32)">
      <summary>
        <para>Gets a culling plane.</para>
      </summary>
      <param name="index">The culling plane index.</param>
      <returns>
        <para>The culling plane.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rendering.ShadowSplitData.SetCullingPlane(System.Int32,UnityEngine.Plane)">
      <summary>
        <para>Sets a culling plane.</para>
      </summary>
      <param name="index">The index of the culling plane to set.</param>
      <param name="plane">The culling plane.</param>
    </member>
    <member name="T:UnityEngine.Rendering.SinglePassStereoMode">
      <summary>
        <para>Enum type defines the different stereo rendering modes available.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.SinglePassStereoMode.Instancing">
      <summary>
        <para>Render stereo using GPU instancing.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.SinglePassStereoMode.Multiview">
      <summary>
        <para>Render stereo using OpenGL multiview.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.SinglePassStereoMode.None">
      <summary>
        <para>Render stereo using multiple passes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.SinglePassStereoMode.SideBySide">
      <summary>
        <para>Render stereo to the left and right halves of a single, double-width render target.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.SortingCriteria">
      <summary>
        <para>How to sort objects during rendering.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.SortingCriteria.BackToFront">
      <summary>
        <para>Sort objects back to front.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.SortingCriteria.CanvasOrder">
      <summary>
        <para>Sort renderers taking canvas order into account.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.SortingCriteria.CommonOpaque">
      <summary>
        <para>Typical sorting for opaque objects.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.SortingCriteria.CommonTransparent">
      <summary>
        <para>Typical sorting for transparencies.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.SortingCriteria.None">
      <summary>
        <para>Do not sort objects.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.SortingCriteria.OptimizeStateChanges">
      <summary>
        <para>Sort objects to reduce draw state changes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.SortingCriteria.QuantizedFrontToBack">
      <summary>
        <para>Sort objects in rough front-to-back buckets.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.SortingCriteria.RendererPriority">
      <summary>
        <para>Sorts objects by renderer priority.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.SortingCriteria.RenderQueue">
      <summary>
        <para>Sort by material render queue.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.SortingCriteria.SortingLayer">
      <summary>
        <para>Sort by renderer sorting layer.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.SortingGroup">
      <summary>
        <para>Adding a SortingGroup component to a GameObject will ensure that all Renderers within the GameObject's descendants will be sorted and rendered together.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SortingGroup.sortingLayerID">
      <summary>
        <para>Unique ID of the Renderer's sorting layer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SortingGroup.sortingLayerName">
      <summary>
        <para>Name of the Renderer's sorting layer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SortingGroup.sortingOrder">
      <summary>
        <para>Renderer's order within a sorting layer.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.SortingGroup.UpdateAllSortingGroups">
      <summary>
        <para>Updates all Sorting Group immediately.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.SortingLayerRange">
      <summary>
        <para>Describes a renderer's sorting layer range.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SortingLayerRange.all">
      <summary>
        <para>A range that includes all objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SortingLayerRange.lowerBound">
      <summary>
        <para>Inclusive lower bound for the range.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SortingLayerRange.upperBound">
      <summary>
        <para>Inclusive upper bound for the range.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.SortingLayerRange.#ctor(System.Int16,System.Int16)">
      <summary>
        <para>Sets the inclusive range for a sorting layer object.</para>
      </summary>
      <param name="lowerBound">Lowest sorting layer value to include.</param>
      <param name="upperBound">Highest sorting layer value to include.</param>
    </member>
    <member name="T:UnityEngine.Rendering.SortingSettings">
      <summary>
        <para>This struct describes the methods to sort objects during rendering.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SortingSettings.cameraPosition">
      <summary>
        <para>Used to calculate the distance to objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SortingSettings.criteria">
      <summary>
        <para>What kind of sorting to do while rendering.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SortingSettings.customAxis">
      <summary>
        <para>Used to calculate distance to objects, by comparing the positions of objects to this axis.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SortingSettings.distanceMetric">
      <summary>
        <para>Type of sorting to use while rendering.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SortingSettings.worldToCameraMatrix">
      <summary>
        <para>Used to calculate the distance to objects.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.SortingSettings.#ctor(UnityEngine.Camera)">
      <summary>
        <para>Create a sorting settings struct.</para>
      </summary>
      <param name="camera">The camera's transparency sort mode is used to determine whether to use orthographic or distance based sorting.</param>
    </member>
    <member name="T:UnityEngine.Rendering.SphericalHarmonicsL2">
      <summary>
        <para>Spherical harmonics up to the second order (3 bands, 9 coefficients).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.SphericalHarmonicsL2.AddAmbientLight(UnityEngine.Color)">
      <summary>
        <para>Add ambient lighting to probe data.</para>
      </summary>
      <param name="color"></param>
    </member>
    <member name="M:UnityEngine.Rendering.SphericalHarmonicsL2.AddDirectionalLight(UnityEngine.Vector3,UnityEngine.Color,System.Single)">
      <summary>
        <para>Add directional light to probe data.</para>
      </summary>
      <param name="direction"></param>
      <param name="color"></param>
      <param name="intensity"></param>
    </member>
    <member name="M:UnityEngine.Rendering.SphericalHarmonicsL2.Clear">
      <summary>
        <para>Clears SH probe to zero.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.SphericalHarmonicsL2.Evaluate(UnityEngine.Vector3[],UnityEngine.Color[])">
      <summary>
        <para>Evaluates the Spherical Harmonics for each of the given directions. The result from the first direction is written into the first element of results, the result from the second direction is written into the second element of results, and so on. The array size of directions and results must match and directions must be normalized.</para>
      </summary>
      <param name="directions">Normalized directions for which the spherical harmonics are to be evaluated.</param>
      <param name="results">Output array for the evaluated values of the corresponding directions.</param>
    </member>
    <member name="?:UnityEngine.Rendering.SphericalHarmonicsL2.op_Equal(UnityEngine.Rendering.SphericalHarmonicsL2,UnityEngine.Rendering.SphericalHarmonicsL2)">
      <summary>
        <para>Returns true if SH probes are equal.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member name="?:UnityEngine.Rendering.SphericalHarmonicsL2.op_Multiply(UnityEngine.Rendering.SphericalHarmonicsL2,System.Single)">
      <summary>
        <para>Scales SH by a given factor.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member name="?:UnityEngine.Rendering.SphericalHarmonicsL2.op_Multiply(System.Single,UnityEngine.Rendering.SphericalHarmonicsL2)">
      <summary>
        <para>Scales SH by a given factor.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member name="?:UnityEngine.Rendering.SphericalHarmonicsL2.op_NotEqual(UnityEngine.Rendering.SphericalHarmonicsL2,UnityEngine.Rendering.SphericalHarmonicsL2)">
      <summary>
        <para>Returns true if SH probes are different.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member name="?:UnityEngine.Rendering.SphericalHarmonicsL2.op_Plus(UnityEngine.Rendering.SphericalHarmonicsL2,UnityEngine.Rendering.SphericalHarmonicsL2)">
      <summary>
        <para>Adds two SH probes.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member name="P:UnityEngine.Rendering.SphericalHarmonicsL2.this">
      <summary>
        <para>Access individual SH coefficients.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.SplashScreen">
      <summary>
        <para>Provides an interface to the Unity splash screen.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SplashScreen.isFinished">
      <summary>
        <para>Returns true once the splash screen has finished. This is once all logos have been shown for their specified duration.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.SplashScreen.Begin">
      <summary>
        <para>Initializes the splash screen so it is ready to begin drawing. Call this before you start calling Rendering.SplashScreen.Draw. Internally this function resets the timer and prepares the logos for drawing.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.SplashScreen.Draw">
      <summary>
        <para>Immediately draws the splash screen. Ensure you have called Rendering.SplashScreen.Begin before you start calling this.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.SplashScreen.Stop(UnityEngine.Rendering.SplashScreen/StopBehavior)">
      <summary>
        <para>Stop the SplashScreen rendering.</para>
      </summary>
      <param name="stopBehavior"></param>
    </member>
    <member name="T:UnityEngine.Rendering.SplashScreen.StopBehavior">
      <summary>
        <para>The behavior to apply when calling ParticleSystem.Stop|Stop.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.SplashScreen.StopBehavior.FadeOut">
      <summary>
        <para>Jumps to the final stage of the Splash Screen and performs a fade from the background to the game.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.SplashScreen.StopBehavior.StopImmediate">
      <summary>
        <para>Immediately stop rendering the SplashScreen.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.StencilOp">
      <summary>
        <para>Specifies the operation that's performed on the stencil buffer when rendering.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.StencilOp.DecrementSaturate">
      <summary>
        <para>Decrements the current stencil buffer value. Clamps to 0.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.StencilOp.DecrementWrap">
      <summary>
        <para>Decrements the current stencil buffer value. Wraps stencil buffer value to the maximum representable unsigned value when decrementing a stencil buffer value of zero.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.StencilOp.IncrementSaturate">
      <summary>
        <para>Increments the current stencil buffer value. Clamps to the maximum representable unsigned value.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.StencilOp.IncrementWrap">
      <summary>
        <para>Increments the current stencil buffer value. Wraps stencil buffer value to zero when incrementing the maximum representable unsigned value.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.StencilOp.Invert">
      <summary>
        <para>Bitwise inverts the current stencil buffer value.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.StencilOp.Keep">
      <summary>
        <para>Keeps the current stencil value.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.StencilOp.Replace">
      <summary>
        <para>Replace the stencil buffer value with reference value (specified in the shader).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.StencilOp.Zero">
      <summary>
        <para>Sets the stencil buffer value to zero.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.StencilState">
      <summary>
        <para>Values for the stencil state.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.StencilState.compareFunctionBack">
      <summary>
        <para>The function used to compare the reference value to the current contents of the buffer for back-facing geometry.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.StencilState.compareFunctionFront">
      <summary>
        <para>The function used to compare the reference value to the current contents of the buffer for front-facing geometry.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.StencilState.defaultValue">
      <summary>
        <para>Default values for the stencil state.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.StencilState.enabled">
      <summary>
        <para>Controls whether the stencil buffer is enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.StencilState.failOperationBack">
      <summary>
        <para>What to do with the contents of the buffer if the stencil test fails for back-facing geometry.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.StencilState.failOperationFront">
      <summary>
        <para>What to do with the contents of the buffer if the stencil test fails for front-facing geometry.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.StencilState.passOperationBack">
      <summary>
        <para>What to do with the contents of the buffer if the stencil test (and the depth test) passes for back-facing geometry.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.StencilState.passOperationFront">
      <summary>
        <para>What to do with the contents of the buffer if the stencil test (and the depth test) passes for front-facing geometry.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.StencilState.readMask">
      <summary>
        <para>An 8 bit mask as an 0–255 integer, used when comparing the reference value with the contents of the buffer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.StencilState.writeMask">
      <summary>
        <para>An 8 bit mask as an 0–255 integer, used when writing to the buffer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.StencilState.zFailOperationBack">
      <summary>
        <para>What to do with the contents of the buffer if the stencil test passes, but the depth test fails for back-facing geometry.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.StencilState.zFailOperationFront">
      <summary>
        <para>What to do with the contents of the buffer if the stencil test passes, but the depth test fails for front-facing geometry.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.StencilState.#ctor(System.Boolean,System.Byte,System.Byte,UnityEngine.Rendering.CompareFunction,UnityEngine.Rendering.StencilOp,UnityEngine.Rendering.StencilOp,UnityEngine.Rendering.StencilOp)">
      <summary>
        <para>Creates a new stencil state with the given values.</para>
      </summary>
      <param name="readMask">An 8 bit mask as an 0–255 integer, used when comparing the reference value with the contents of the buffer.</param>
      <param name="writeMask">An 8 bit mask as an 0–255 integer, used when writing to the buffer.</param>
      <param name="enabled">Controls whether the stencil buffer is enabled.</param>
      <param name="compareFunctionFront">The function used to compare the reference value to the current contents of the buffer for front-facing geometry.</param>
      <param name="passOperationFront">What to do with the contents of the buffer if the stencil test (and the depth test) passes for front-facing geometry.</param>
      <param name="failOperationFront">What to do with the contents of the buffer if the stencil test fails for front-facing geometry.</param>
      <param name="zFailOperationFront">What to do with the contents of the buffer if the stencil test passes, but the depth test fails for front-facing geometry.</param>
      <param name="compareFunctionBack">The function used to compare the reference value to the current contents of the buffer for back-facing geometry.</param>
      <param name="passOperationBack">What to do with the contents of the buffer if the stencil test (and the depth test) passes for back-facing geometry.</param>
      <param name="failOperationBack">What to do with the contents of the buffer if the stencil test fails for back-facing geometry.</param>
      <param name="zFailOperationBack">What to do with the contents of the buffer if the stencil test passes, but the depth test fails for back-facing geometry.</param>
      <param name="compareFunction">The function used to compare the reference value to the current contents of the buffer.</param>
      <param name="passOperation">What to do with the contents of the buffer if the stencil test (and the depth test) passes.</param>
      <param name="failOperation">What to do with the contents of the buffer if the stencil test fails.</param>
      <param name="zFailOperation">What to do with the contents of the buffer if the stencil test passes, but the depth test.</param>
    </member>
    <member name="M:UnityEngine.Rendering.StencilState.#ctor(System.Boolean,System.Byte,System.Byte,UnityEngine.Rendering.CompareFunction,UnityEngine.Rendering.StencilOp,UnityEngine.Rendering.StencilOp,UnityEngine.Rendering.StencilOp,UnityEngine.Rendering.CompareFunction,UnityEngine.Rendering.StencilOp,UnityEngine.Rendering.StencilOp,UnityEngine.Rendering.StencilOp)">
      <summary>
        <para>Creates a new stencil state with the given values.</para>
      </summary>
      <param name="readMask">An 8 bit mask as an 0–255 integer, used when comparing the reference value with the contents of the buffer.</param>
      <param name="writeMask">An 8 bit mask as an 0–255 integer, used when writing to the buffer.</param>
      <param name="enabled">Controls whether the stencil buffer is enabled.</param>
      <param name="compareFunctionFront">The function used to compare the reference value to the current contents of the buffer for front-facing geometry.</param>
      <param name="passOperationFront">What to do with the contents of the buffer if the stencil test (and the depth test) passes for front-facing geometry.</param>
      <param name="failOperationFront">What to do with the contents of the buffer if the stencil test fails for front-facing geometry.</param>
      <param name="zFailOperationFront">What to do with the contents of the buffer if the stencil test passes, but the depth test fails for front-facing geometry.</param>
      <param name="compareFunctionBack">The function used to compare the reference value to the current contents of the buffer for back-facing geometry.</param>
      <param name="passOperationBack">What to do with the contents of the buffer if the stencil test (and the depth test) passes for back-facing geometry.</param>
      <param name="failOperationBack">What to do with the contents of the buffer if the stencil test fails for back-facing geometry.</param>
      <param name="zFailOperationBack">What to do with the contents of the buffer if the stencil test passes, but the depth test fails for back-facing geometry.</param>
      <param name="compareFunction">The function used to compare the reference value to the current contents of the buffer.</param>
      <param name="passOperation">What to do with the contents of the buffer if the stencil test (and the depth test) passes.</param>
      <param name="failOperation">What to do with the contents of the buffer if the stencil test fails.</param>
      <param name="zFailOperation">What to do with the contents of the buffer if the stencil test passes, but the depth test.</param>
    </member>
    <member name="M:UnityEngine.Rendering.StencilState.SetCompareFunction(UnityEngine.Rendering.CompareFunction)">
      <summary>
        <para>The function used to compare the reference value to the current contents of the buffer.</para>
      </summary>
      <param name="value">The value to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.StencilState.SetFailOperation(UnityEngine.Rendering.StencilOp)">
      <summary>
        <para>What to do with the contents of the buffer if the stencil test fails.</para>
      </summary>
      <param name="value">The value to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.StencilState.SetPassOperation(UnityEngine.Rendering.StencilOp)">
      <summary>
        <para>What to do with the contents of the buffer if the stencil test (and the depth test) passes.</para>
      </summary>
      <param name="value">The value to set.</param>
    </member>
    <member name="M:UnityEngine.Rendering.StencilState.SetZFailOperation(UnityEngine.Rendering.StencilOp)">
      <summary>
        <para>What to do with the contents of the buffer if the stencil test passes, but the depth test fails.</para>
      </summary>
      <param name="value">The value to set.</param>
    </member>
    <member name="T:UnityEngine.Rendering.SubMeshDescriptor">
      <summary>
        <para>Contains information about a single sub-mesh of a Mesh.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SubMeshDescriptor.baseVertex">
      <summary>
        <para>Offset that is added to each value in the index buffer, to compute the final vertex index.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SubMeshDescriptor.bounds">
      <summary>
        <para>Bounding box of vertices in local space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SubMeshDescriptor.firstVertex">
      <summary>
        <para>First vertex in the index buffer for this sub-mesh.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SubMeshDescriptor.indexCount">
      <summary>
        <para>Index count for this sub-mesh face data.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SubMeshDescriptor.indexStart">
      <summary>
        <para>Starting point inside the whole Mesh index buffer where the face index data is found.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SubMeshDescriptor.topology">
      <summary>
        <para>Face topology of this sub-mesh.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SubMeshDescriptor.vertexCount">
      <summary>
        <para>Number of vertices used by the index buffer of this sub-mesh.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.SubMeshDescriptor.#ctor(System.Int32,System.Int32,UnityEngine.MeshTopology)">
      <summary>
        <para>Create a submesh descriptor.</para>
      </summary>
      <param name="indexStart">Initial value for indexStart field.</param>
      <param name="indexCount">Initial value for indexCount field.</param>
      <param name="topology">Initial value for topology field.</param>
    </member>
    <member name="T:UnityEngine.Rendering.SupportedRenderingFeatures">
      <summary>
        <para>Describes the rendering features supported by a given render pipeline.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SupportedRenderingFeatures.active">
      <summary>
        <para>Get / Set a SupportedRenderingFeatures.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SupportedRenderingFeatures.autoAmbientProbeBaking">
      <summary>
        <para>Determines if this renderer supports automatic ambient probe generation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SupportedRenderingFeatures.autoDefaultReflectionProbeBaking">
      <summary>
        <para>Determines if this renderer supports automatic default reflection probe generation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SupportedRenderingFeatures.defaultMixedLightingModes">
      <summary>
        <para>This is the fallback mode if the mode the user had previously selected is no longer available. See SupportedRenderingFeatures.mixedLightingModes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SupportedRenderingFeatures.editableMaterialRenderQueue">
      <summary>
        <para>Determines whether the Scriptable Render Pipeline will override the default Material’s Render Queue settings and, if true, hides the Render Queue property in the Inspector.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SupportedRenderingFeatures.enlighten">
      <summary>
        <para>Determines whether Enlighten is supported. When not supported, Enlighten-specific settings do not appear in the Editor (for both Baked and Realtime GI), unless the Project was upgraded from 2019.2 or earlier. </para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SupportedRenderingFeatures.lightmapBakeTypes">
      <summary>
        <para>What baking types are supported. The unsupported ones will be hidden from the UI. See LightmapBakeType.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SupportedRenderingFeatures.lightmapsModes">
      <summary>
        <para>Specifies what modes are supported. Has to be at least one. See LightmapsMode.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SupportedRenderingFeatures.lightProbeProxyVolumes">
      <summary>
        <para>Are light probe proxy volumes supported?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SupportedRenderingFeatures.mixedLightingModes">
      <summary>
        <para>Specifies what LightmapMixedBakeModes that are supported. Please define a SupportedRenderingFeatures.defaultMixedLightingModes in case multiple modes are supported.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SupportedRenderingFeatures.motionVectors">
      <summary>
        <para>Are motion vectors supported?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SupportedRenderingFeatures.overridesEnvironmentLighting">
      <summary>
        <para>Determines if the renderer will override the Environment Lighting and will no longer need the built-in UI for it.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SupportedRenderingFeatures.overridesFog">
      <summary>
        <para>Determines if the renderer will override the fog settings in the Lighting Panel and will no longer need the built-in UI for it.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SupportedRenderingFeatures.overrideShadowmaskMessage">
      <summary>
        <para>Describes where the Shadowmask settings are located if SupportedRenderingFeatures.overridesShadowmask is set to true.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SupportedRenderingFeatures.overridesLODBias">
      <summary>
        <para>Specifies whether the renderer overrides the LOD bias settings in the Quality Settings Panel. If It does, the renderer does not need the built-in UI for LOD bias settings.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SupportedRenderingFeatures.overridesMaximumLODLevel">
      <summary>
        <para>Specifies whether the renderer overrides the maximum LOD level settings in the Quality Settings Panel. If It does, the renderer does not need the built-in UI for maximum LOD level settings.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SupportedRenderingFeatures.overridesOtherLightingSettings">
      <summary>
        <para>Determines if the renderer will override halo and flare settings in the Lighting Panel and will no longer need the built-in UI for it.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SupportedRenderingFeatures.overridesRealtimeReflectionProbes">
      <summary>
        <para>Specifies whether the render pipeline overrides the Realtime Reflection Probes settings in the Quality settings. If It does, the render pipeline does not need the built-in UI for Realtime Reflection Probes settings.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SupportedRenderingFeatures.overridesShadowmask">
      <summary>
        <para>Specifies whether the render pipeline overrides the Shadowmask settings in the Quality settings.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SupportedRenderingFeatures.particleSystemInstancing">
      <summary>
        <para>Determines if the renderer supports Particle System GPU instancing.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SupportedRenderingFeatures.receiveShadows">
      <summary>
        <para>Can renderers support receiving shadows?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SupportedRenderingFeatures.reflectionProbeModes">
      <summary>
        <para>Flags for supported reflection probes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SupportedRenderingFeatures.reflectionProbes">
      <summary>
        <para>Are reflection probes supported?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SupportedRenderingFeatures.rendererPriority">
      <summary>
        <para>Determines if the renderer supports renderer priority sorting.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SupportedRenderingFeatures.rendererProbes">
      <summary>
        <para>Determines whether the Renderer supports probe lighting.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SupportedRenderingFeatures.rendersUIOverlay">
      <summary>
        <para>Determines whether the function to render UI overlays is called by SRP and not by the engine.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SupportedRenderingFeatures.shadowmaskMessage">
      <summary>
        <para>A message that tells the user where the Shadowmask settings are located. </para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.SupportedRenderingFeatures.terrainDetailUnsupported">
      <summary>
        <para>Determines if the renderer supports terrain detail rendering.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.SupportedRenderingFeatures.LightmapMixedBakeModes">
      <summary>
        <para>Same as MixedLightingMode for baking, but is used to determine what is supported by the pipeline.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.SupportedRenderingFeatures.LightmapMixedBakeModes.IndirectOnly">
      <summary>
        <para>Same as MixedLightingMode.IndirectOnly but determines if it is supported by the pipeline.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.SupportedRenderingFeatures.LightmapMixedBakeModes.None">
      <summary>
        <para>No mode is supported.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.SupportedRenderingFeatures.LightmapMixedBakeModes.Shadowmask">
      <summary>
        <para>Determines what is supported by the rendering pipeline. This enum is similar to MixedLightingMode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.SupportedRenderingFeatures.LightmapMixedBakeModes.Subtractive">
      <summary>
        <para>Same as MixedLightingMode.Subtractive but determines if it is supported by the pipeline.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.SupportedRenderingFeatures.ReflectionProbeModes">
      <summary>
        <para>Supported modes for ReflectionProbes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.SupportedRenderingFeatures.ReflectionProbeModes.None">
      <summary>
        <para>Default reflection probe support.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.SupportedRenderingFeatures.ReflectionProbeModes.Rotation">
      <summary>
        <para>Rotated reflection probes are supported.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.SynchronisationStage">
      <summary>
        <para>Broadly describes the stages of processing a draw call on the GPU.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.SynchronisationStage.PixelProcessing">
      <summary>
        <para>The process of creating and shading the fragments.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.SynchronisationStage.VertexProcessing">
      <summary>
        <para>All aspects of vertex processing.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.SynchronisationStageFlags">
      <summary>
        <para>Describes the various stages of GPU processing against which the GraphicsFence can be set and waited against.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.SynchronisationStageFlags.AllGPUOperations">
      <summary>
        <para>All previous GPU operations (vertex, pixel and compute).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.SynchronisationStageFlags.ComputeProcessing">
      <summary>
        <para>All compute shader dispatch operations.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.SynchronisationStageFlags.PixelProcessing">
      <summary>
        <para>All aspects of pixel processing in the GPU.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.SynchronisationStageFlags.VertexProcessing">
      <summary>
        <para>All aspects of vertex processing in the GPU.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.TextureDimension">
      <summary>
        <para>Texture "dimension" (type).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.TextureDimension.Any">
      <summary>
        <para>Any texture type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.TextureDimension.Cube">
      <summary>
        <para>Cubemap texture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.TextureDimension.CubeArray">
      <summary>
        <para>Cubemap array texture (CubemapArray).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.TextureDimension.None">
      <summary>
        <para>No texture is assigned.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.TextureDimension.Tex2D">
      <summary>
        <para>2D texture (Texture2D).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.TextureDimension.Tex2DArray">
      <summary>
        <para>2D array texture (Texture2DArray).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.TextureDimension.Tex3D">
      <summary>
        <para>3D volume texture (Texture3D).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.TextureDimension.Unknown">
      <summary>
        <para>Texture type is not initialized or unknown.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.VertexAttribute">
      <summary>
        <para>Possible attribute types that describe a vertex in a Mesh.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.VertexAttribute.BlendIndices">
      <summary>
        <para>Bone indices for skinned Meshes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.VertexAttribute.BlendWeight">
      <summary>
        <para>Bone blend weights for skinned Meshes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.VertexAttribute.Color">
      <summary>
        <para>Vertex color.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.VertexAttribute.Normal">
      <summary>
        <para>Vertex normal.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.VertexAttribute.Position">
      <summary>
        <para>Vertex position.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.VertexAttribute.Tangent">
      <summary>
        <para>Vertex tangent.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.VertexAttribute.TexCoord0">
      <summary>
        <para>Primary texture coordinate (UV).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.VertexAttribute.TexCoord1">
      <summary>
        <para>Additional  texture coordinate.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.VertexAttribute.TexCoord2">
      <summary>
        <para>Additional  texture coordinate.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.VertexAttribute.TexCoord3">
      <summary>
        <para>Additional  texture coordinate.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.VertexAttribute.TexCoord4">
      <summary>
        <para>Additional  texture coordinate.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.VertexAttribute.TexCoord5">
      <summary>
        <para>Additional  texture coordinate.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.VertexAttribute.TexCoord6">
      <summary>
        <para>Additional  texture coordinate.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.VertexAttribute.TexCoord7">
      <summary>
        <para>Additional  texture coordinate.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.VertexAttributeDescriptor">
      <summary>
        <para>Information about a single VertexAttribute of a Mesh vertex.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.VertexAttributeDescriptor.attribute">
      <summary>
        <para>The vertex attribute.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.VertexAttributeDescriptor.dimension">
      <summary>
        <para>Dimensionality of the vertex attribute.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.VertexAttributeDescriptor.format">
      <summary>
        <para>Format of the vertex attribute.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.VertexAttributeDescriptor.stream">
      <summary>
        <para>Which vertex buffer stream the attribute should be in.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rendering.VertexAttributeDescriptor.#ctor(UnityEngine.Rendering.VertexAttribute,UnityEngine.Rendering.VertexAttributeFormat,System.Int32,System.Int32)">
      <summary>
        <para>Create a VertexAttributeDescriptor structure.</para>
      </summary>
      <param name="attribute">The VertexAttribute.</param>
      <param name="format">Format of the vertex attribute. Default is VertexAttributeFormat.Float32.</param>
      <param name="dimension">Dimensionality of the vertex attribute (1 to 4). Default is 3.</param>
      <param name="stream">Vertex buffer stream that the attribute should be placed in. Default is 0.</param>
    </member>
    <member name="T:UnityEngine.Rendering.VertexAttributeFormat">
      <summary>
        <para>Data type of a VertexAttribute.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.VertexAttributeFormat.Float16">
      <summary>
        <para>16-bit float number.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.VertexAttributeFormat.Float32">
      <summary>
        <para>32-bit float number.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.VertexAttributeFormat.SInt16">
      <summary>
        <para>16-bit signed integer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.VertexAttributeFormat.SInt32">
      <summary>
        <para>32-bit signed integer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.VertexAttributeFormat.SInt8">
      <summary>
        <para>8-bit signed integer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.VertexAttributeFormat.SNorm16">
      <summary>
        <para>16-bit signed normalized number.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.VertexAttributeFormat.SNorm8">
      <summary>
        <para>8-bit signed normalized number.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.VertexAttributeFormat.UInt16">
      <summary>
        <para>16-bit unsigned integer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.VertexAttributeFormat.UInt32">
      <summary>
        <para>32-bit unsigned integer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.VertexAttributeFormat.UInt8">
      <summary>
        <para>8-bit unsigned integer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.VertexAttributeFormat.UNorm16">
      <summary>
        <para>16-bit unsigned normalized number.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.VertexAttributeFormat.UNorm8">
      <summary>
        <para>8-bit unsigned normalized number.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.VideoShadersIncludeMode">
      <summary>
        <para>Video shaders mode used by Rendering.GraphicsSettings.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.VideoShadersIncludeMode.Always">
      <summary>
        <para>Include video shaders in builds (default).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.VideoShadersIncludeMode.Never">
      <summary>
        <para>Exclude video shaders from builds. This effectively disables video functionality.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.VideoShadersIncludeMode.Referenced">
      <summary>
        <para>Include video shaders in builds when referenced by scenes.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.VisibleLight">
      <summary>
        <para>Holds data of a visible light.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.VisibleLight.finalColor">
      <summary>
        <para>Light color multiplied by intensity.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.VisibleLight.intersectsFarPlane">
      <summary>
        <para>Light intersects far clipping plane.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.VisibleLight.intersectsNearPlane">
      <summary>
        <para>Light intersects near clipping plane.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.VisibleLight.light">
      <summary>
        <para>Accessor to Light component.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.VisibleLight.lightType">
      <summary>
        <para>Light type.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.VisibleLight.localToWorldMatrix">
      <summary>
        <para>Light transformation matrix.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.VisibleLight.range">
      <summary>
        <para>Light range.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.VisibleLight.screenRect">
      <summary>
        <para>Light's influence rectangle on screen.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.VisibleLight.spotAngle">
      <summary>
        <para>Spot light angle.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.VisibleReflectionProbe">
      <summary>
        <para>Holds data of a visible reflection reflectionProbe.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.VisibleReflectionProbe.blendDistance">
      <summary>
        <para>Probe blending distance.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.VisibleReflectionProbe.bounds">
      <summary>
        <para>Probe bounding box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.VisibleReflectionProbe.center">
      <summary>
        <para>Probe projection center.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.VisibleReflectionProbe.hdrData">
      <summary>
        <para>Shader data for probe HDR texture decoding.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.VisibleReflectionProbe.importance">
      <summary>
        <para>Probe importance.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.VisibleReflectionProbe.isBoxProjection">
      <summary>
        <para>Should probe use box projection.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.VisibleReflectionProbe.localToWorldMatrix">
      <summary>
        <para>Probe transformation matrix.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.VisibleReflectionProbe.reflectionProbe">
      <summary>
        <para>Accessor to ReflectionProbe component.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rendering.VisibleReflectionProbe.texture">
      <summary>
        <para>Probe texture.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RenderingPath">
      <summary>
        <para>Rendering path of a Camera.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderingPath.DeferredLighting">
      <summary>
        <para>Deferred Lighting (Legacy).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderingPath.DeferredShading">
      <summary>
        <para>Deferred Shading.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderingPath.Forward">
      <summary>
        <para>Forward Rendering.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderingPath.UsePlayerSettings">
      <summary>
        <para>Use Player Settings.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderingPath.VertexLit">
      <summary>
        <para>Vertex Lit.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RenderSettings">
      <summary>
        <para>The Render Settings contain values for a range of visual elements in your Scene, like fog and ambient light.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.ambientEquatorColor">
      <summary>
        <para>Ambient lighting coming from the sides.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.ambientGroundColor">
      <summary>
        <para>Ambient lighting coming from below.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.ambientIntensity">
      <summary>
        <para>How much the light from the Ambient Source affects the Scene.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.ambientLight">
      <summary>
        <para>Flat ambient lighting color.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.ambientMode">
      <summary>
        <para>Ambient lighting mode.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.ambientProbe">
      <summary>
        <para>Custom or skybox ambient lighting data.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.ambientSkyColor">
      <summary>
        <para>Ambient lighting coming from above.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.customReflection">
      <summary>
        <para>Custom specular reflection cubemap.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.defaultReflectionMode">
      <summary>
        <para>Default reflection mode.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.defaultReflectionResolution">
      <summary>
        <para>Cubemap resolution for default reflection.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.flareFadeSpeed">
      <summary>
        <para>The fade speed of all flares in the Scene.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.flareStrength">
      <summary>
        <para>The intensity of all flares in the Scene.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.fog">
      <summary>
        <para>Is fog enabled?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.fogColor">
      <summary>
        <para>The color of the fog.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.fogDensity">
      <summary>
        <para>The density of the exponential fog.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.fogEndDistance">
      <summary>
        <para>The ending distance of linear fog.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.fogMode">
      <summary>
        <para>Fog mode to use.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.fogStartDistance">
      <summary>
        <para>The starting distance of linear fog.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.haloStrength">
      <summary>
        <para>Size of the Light halos.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.reflectionBounces">
      <summary>
        <para>The number of times a reflection includes other reflections.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.reflectionIntensity">
      <summary>
        <para>How much the skybox / custom cubemap reflection affects the Scene.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.skybox">
      <summary>
        <para>The global skybox to use.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.subtractiveShadowColor">
      <summary>
        <para>The color used for the sun shadows in the Subtractive lightmode.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.sun">
      <summary>
        <para>The light used by the procedural skybox.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RenderTargetSetup">
      <summary>
        <para>Fully describes setup of RenderTarget.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTargetSetup.color">
      <summary>
        <para>Color Buffers to set.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTargetSetup.colorLoad">
      <summary>
        <para>Load Actions for Color Buffers. It will override any actions set on RenderBuffers themselves.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTargetSetup.colorStore">
      <summary>
        <para>Store Actions for Color Buffers. It will override any actions set on RenderBuffers themselves.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTargetSetup.cubemapFace">
      <summary>
        <para>Cubemap face to render to.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTargetSetup.depth">
      <summary>
        <para>Depth Buffer to set.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTargetSetup.depthLoad">
      <summary>
        <para>Load Action for Depth Buffer. It will override any actions set on RenderBuffer itself.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTargetSetup.depthSlice">
      <summary>
        <para>Slice of a Texture3D or Texture2DArray to set as a render target.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTargetSetup.depthStore">
      <summary>
        <para>Store Actions for Depth Buffer. It will override any actions set on RenderBuffer itself.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTargetSetup.mipLevel">
      <summary>
        <para>Mip Level to render to.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RenderTargetSetup.#ctor(UnityEngine.RenderBuffer,UnityEngine.RenderBuffer)">
      <summary>
        <para>Constructs RenderTargetSetup.</para>
      </summary>
      <param name="color">Color Buffer(s) to set.</param>
      <param name="depth">Depth Buffer to set.</param>
      <param name="mipLevel">Mip Level to render to.</param>
      <param name="face">Cubemap face to render to.</param>
      <param name="mip"></param>
    </member>
    <member name="M:UnityEngine.RenderTargetSetup.#ctor(UnityEngine.RenderBuffer,UnityEngine.RenderBuffer,System.Int32)">
      <summary>
        <para>Constructs RenderTargetSetup.</para>
      </summary>
      <param name="color">Color Buffer(s) to set.</param>
      <param name="depth">Depth Buffer to set.</param>
      <param name="mipLevel">Mip Level to render to.</param>
      <param name="face">Cubemap face to render to.</param>
      <param name="mip"></param>
    </member>
    <member name="M:UnityEngine.RenderTargetSetup.#ctor(UnityEngine.RenderBuffer,UnityEngine.RenderBuffer,System.Int32,UnityEngine.CubemapFace)">
      <summary>
        <para>Constructs RenderTargetSetup.</para>
      </summary>
      <param name="color">Color Buffer(s) to set.</param>
      <param name="depth">Depth Buffer to set.</param>
      <param name="mipLevel">Mip Level to render to.</param>
      <param name="face">Cubemap face to render to.</param>
      <param name="mip"></param>
    </member>
    <member name="M:UnityEngine.RenderTargetSetup.#ctor(UnityEngine.RenderBuffer[],UnityEngine.RenderBuffer)">
      <summary>
        <para>Constructs RenderTargetSetup.</para>
      </summary>
      <param name="color">Color Buffer(s) to set.</param>
      <param name="depth">Depth Buffer to set.</param>
      <param name="mipLevel">Mip Level to render to.</param>
      <param name="face">Cubemap face to render to.</param>
      <param name="mip"></param>
    </member>
    <member name="M:UnityEngine.RenderTargetSetup.#ctor(UnityEngine.RenderBuffer[],UnityEngine.RenderBuffer,System.Int32)">
      <summary>
        <para>Constructs RenderTargetSetup.</para>
      </summary>
      <param name="color">Color Buffer(s) to set.</param>
      <param name="depth">Depth Buffer to set.</param>
      <param name="mipLevel">Mip Level to render to.</param>
      <param name="face">Cubemap face to render to.</param>
      <param name="mip"></param>
    </member>
    <member name="M:UnityEngine.RenderTargetSetup.#ctor(UnityEngine.RenderBuffer[],UnityEngine.RenderBuffer,System.Int32,UnityEngine.CubemapFace)">
      <summary>
        <para>Constructs RenderTargetSetup.</para>
      </summary>
      <param name="color">Color Buffer(s) to set.</param>
      <param name="depth">Depth Buffer to set.</param>
      <param name="mipLevel">Mip Level to render to.</param>
      <param name="face">Cubemap face to render to.</param>
      <param name="mip"></param>
    </member>
    <member name="T:UnityEngine.RenderTexture">
      <summary>
        <para>Render textures are textures that can be rendered to.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.active">
      <summary>
        <para>Currently active render texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.antiAliasing">
      <summary>
        <para>The antialiasing level for the RenderTexture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.autoGenerateMips">
      <summary>
        <para>Mipmap levels are generated automatically when this flag is set.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.bindTextureMS">
      <summary>
        <para>If true and antiAliasing is greater than 1, the render texture will not be resolved by default.  Use this if the render texture needs to be bound as a multisampled texture in a shader.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.colorBuffer">
      <summary>
        <para>Color buffer of the render texture (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.depth">
      <summary>
        <para>The precision of the render texture's depth buffer in bits (0, 16, 24/32 are supported).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.depthBuffer">
      <summary>
        <para>Depth/stencil buffer of the render texture (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.descriptor">
      <summary>
        <para>This struct contains all the information required to create a RenderTexture. It can be copied, cached, and reused to easily create RenderTextures that all share the same properties.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.dimension">
      <summary>
        <para>Dimensionality (type) of the render texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.enableRandomWrite">
      <summary>
        <para>Enable random access write into this render texture on Shader Model 5.0 level shaders.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.graphicsFormat">
      <summary>
        <para>The color format of the render texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.height">
      <summary>
        <para>The height of the render texture in pixels.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.isVolume">
      <summary>
        <para>If enabled, this Render Texture will be used as a Texture3D.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.memorylessMode">
      <summary>
        <para>The render texture memoryless mode property.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.sRGB">
      <summary>
        <para>Does this render texture use sRGB read/write conversions? (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.stencilFormat">
      <summary>
        <para>The format of the stencil data that you can encapsulate within a RenderTexture.

Specifying this property creates a stencil element for the RenderTexture and sets its format.
This allows for stencil data to be bound as a Texture to all shader types for the platforms that support it.
This property does not specify the format of the stencil buffer, which is constrained by the depth buffer format specified in RenderTexture.depth.

Currently, most platforms only support R8_UInt (DirectX11, DirectX12), while PS4 also supports R8_UNorm.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.useDynamicScale">
      <summary>
        <para>Is the render texture marked to be scaled by the Dynamic Resolution system.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.useMipMap">
      <summary>
        <para>Render texture has mipmaps when this flag is set.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.volumeDepth">
      <summary>
        <para>Volume extent of a 3D render texture or number of slices of array texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.vrUsage">
      <summary>
        <para>If this RenderTexture is a VR eye texture used in stereoscopic rendering, this property decides what special rendering occurs, if any.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.width">
      <summary>
        <para>The width of the render texture in pixels.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RenderTexture.ConvertToEquirect(UnityEngine.RenderTexture,UnityEngine.Camera/MonoOrStereoscopicEye)">
      <summary>
        <para>Converts the render texture to equirectangular format (both stereoscopic or monoscopic equirect).
The left eye will occupy the top half and the right eye will occupy the bottom. The monoscopic version will occupy the whole texture.
Texture dimension must be of type TextureDimension.Cube.</para>
      </summary>
      <param name="equirect">RenderTexture to render the equirect format to.</param>
      <param name="eye">A Camera eye corresponding to the left or right eye for stereoscopic rendering, or neither for monoscopic rendering.</param>
    </member>
    <member name="M:UnityEngine.RenderTexture.Create">
      <summary>
        <para>Actually creates the RenderTexture.</para>
      </summary>
      <returns>
        <para>True if the texture is created, else false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.RenderTexture.#ctor(System.Int32,System.Int32,System.Int32,UnityEngine.RenderTextureFormat,UnityEngine.RenderTextureReadWrite)">
      <summary>
        <para>Creates a new RenderTexture object.</para>
      </summary>
      <param name="width">Texture width in pixels.</param>
      <param name="height">Texture height in pixels.</param>
      <param name="depth">Number of bits in depth buffer (0, 16 or 24). Note that only 24 bit depth has stencil buffer.</param>
      <param name="format">Texture color format.</param>
      <param name="readWrite">How or if color space conversions should be done on texture read/write.</param>
      <param name="desc">Create the RenderTexture with the settings in the RenderTextureDescriptor.</param>
      <param name="textureToCopy">Copy the settings from another RenderTexture.</param>
    </member>
    <member name="M:UnityEngine.RenderTexture.#ctor(UnityEngine.RenderTexture)">
      <summary>
        <para>Creates a new RenderTexture object.</para>
      </summary>
      <param name="width">Texture width in pixels.</param>
      <param name="height">Texture height in pixels.</param>
      <param name="depth">Number of bits in depth buffer (0, 16 or 24). Note that only 24 bit depth has stencil buffer.</param>
      <param name="format">Texture color format.</param>
      <param name="readWrite">How or if color space conversions should be done on texture read/write.</param>
      <param name="desc">Create the RenderTexture with the settings in the RenderTextureDescriptor.</param>
      <param name="textureToCopy">Copy the settings from another RenderTexture.</param>
    </member>
    <member name="M:UnityEngine.RenderTexture.#ctor(UnityEngine.RenderTextureDescriptor)">
      <summary>
        <para>Creates a new RenderTexture object.</para>
      </summary>
      <param name="width">Texture width in pixels.</param>
      <param name="height">Texture height in pixels.</param>
      <param name="depth">Number of bits in depth buffer (0, 16 or 24). Note that only 24 bit depth has stencil buffer.</param>
      <param name="format">Texture color format.</param>
      <param name="readWrite">How or if color space conversions should be done on texture read/write.</param>
      <param name="desc">Create the RenderTexture with the settings in the RenderTextureDescriptor.</param>
      <param name="textureToCopy">Copy the settings from another RenderTexture.</param>
    </member>
    <member name="M:UnityEngine.RenderTexture.DiscardContents">
      <summary>
        <para>Hint the GPU driver that the contents of the RenderTexture will not be used.</para>
      </summary>
      <param name="discardColor">Should the colour buffer be discarded?</param>
      <param name="discardDepth">Should the depth buffer be discarded?</param>
    </member>
    <member name="M:UnityEngine.RenderTexture.DiscardContents(System.Boolean,System.Boolean)">
      <summary>
        <para>Hint the GPU driver that the contents of the RenderTexture will not be used.</para>
      </summary>
      <param name="discardColor">Should the colour buffer be discarded?</param>
      <param name="discardDepth">Should the depth buffer be discarded?</param>
    </member>
    <member name="M:UnityEngine.RenderTexture.GenerateMips">
      <summary>
        <para>Generate mipmap levels of a render texture.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RenderTexture.GetNativeDepthBufferPtr">
      <summary>
        <para>Retrieve a native (underlying graphics API) pointer to the depth buffer resource.</para>
      </summary>
      <returns>
        <para>Pointer to an underlying graphics API depth buffer resource.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.RenderTexture.GetTemporary(UnityEngine.RenderTextureDescriptor)">
      <summary>
        <para>Allocate a temporary render texture.</para>
      </summary>
      <param name="width">Width in pixels.</param>
      <param name="height">Height in pixels.</param>
      <param name="depthBuffer">Depth buffer bits (0, 16 or 24). Note that only 24 bit depth has stencil buffer.</param>
      <param name="format">Render texture format.</param>
      <param name="readWrite">Color space conversion mode.</param>
      <param name="antiAliasing">Number of antialiasing samples to store in the texture. Valid values are 1, 2, 4, and 8. Throws an exception if any other value is passed.</param>
      <param name="memorylessMode">Render texture memoryless mode.</param>
      <param name="desc">Use this RenderTextureDesc for the settings when creating the temporary RenderTexture.</param>
      <param name="vrUsage"></param>
      <param name="useDynamicScale"></param>
    </member>
    <member name="M:UnityEngine.RenderTexture.GetTemporary(System.Int32,System.Int32,System.Int32,UnityEngine.RenderTextureFormat,UnityEngine.RenderTextureReadWrite,System.Int32,UnityEngine.RenderTextureMemoryless,UnityEngine.VRTextureUsage,System.Boolean)">
      <summary>
        <para>Allocate a temporary render texture.</para>
      </summary>
      <param name="width">Width in pixels.</param>
      <param name="height">Height in pixels.</param>
      <param name="depthBuffer">Depth buffer bits (0, 16 or 24). Note that only 24 bit depth has stencil buffer.</param>
      <param name="format">Render texture format.</param>
      <param name="readWrite">Color space conversion mode.</param>
      <param name="antiAliasing">Number of antialiasing samples to store in the texture. Valid values are 1, 2, 4, and 8. Throws an exception if any other value is passed.</param>
      <param name="memorylessMode">Render texture memoryless mode.</param>
      <param name="desc">Use this RenderTextureDesc for the settings when creating the temporary RenderTexture.</param>
      <param name="vrUsage"></param>
      <param name="useDynamicScale"></param>
    </member>
    <member name="M:UnityEngine.RenderTexture.IsCreated">
      <summary>
        <para>Is the render texture actually created?</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RenderTexture.MarkRestoreExpected">
      <summary>
        <para>Indicate that there's a RenderTexture restore operation expected.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RenderTexture.Release">
      <summary>
        <para>Releases the RenderTexture.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RenderTexture.ReleaseTemporary(UnityEngine.RenderTexture)">
      <summary>
        <para>Release a temporary texture allocated with GetTemporary.</para>
      </summary>
      <param name="temp"></param>
    </member>
    <member name="M:UnityEngine.RenderTexture.ResolveAntiAliasedSurface">
      <summary>
        <para>Force an antialiased render texture to be resolved.</para>
      </summary>
      <param name="target">The render texture to resolve into.  If set, the target render texture must have the same dimensions and format as the source.</param>
    </member>
    <member name="M:UnityEngine.RenderTexture.ResolveAntiAliasedSurface(UnityEngine.RenderTexture)">
      <summary>
        <para>Force an antialiased render texture to be resolved.</para>
      </summary>
      <param name="target">The render texture to resolve into.  If set, the target render texture must have the same dimensions and format as the source.</param>
    </member>
    <member name="M:UnityEngine.RenderTexture.SetGlobalShaderProperty(System.String)">
      <summary>
        <para>Assigns this RenderTexture as a global shader property named propertyName.</para>
      </summary>
      <param name="propertyName"></param>
    </member>
    <member name="M:UnityEngine.RenderTexture.SupportsStencil(UnityEngine.RenderTexture)">
      <summary>
        <para>Does a RenderTexture have stencil buffer?</para>
      </summary>
      <param name="rt">Render texture, or null for main screen.</param>
    </member>
    <member name="T:UnityEngine.RenderTextureCreationFlags">
      <summary>
        <para>Set of flags that control the state of a newly-created RenderTexture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureCreationFlags.AllowVerticalFlip">
      <summary>
        <para>Clear this flag when a RenderTexture is a VR eye texture and the device does not automatically flip the texture when being displayed. This is platform specific and
It is set by default. This flag is only cleared when part of a RenderTextureDesc that is returned from GetDefaultVREyeTextureDesc or other VR functions that return a RenderTextureDesc. Currently, only Hololens eye textures need to clear this flag.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureCreationFlags.AutoGenerateMips">
      <summary>
        <para>Determines whether or not mipmaps are automatically generated when the RenderTexture is modified.
This flag is set by default, and has no effect if the RenderTextureCreationFlags.MipMap flag is not also set.
See RenderTexture.autoGenerateMips for more details.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureCreationFlags.BindMS">
      <summary>
        <para>Setting this flag causes the RenderTexture to be bound as a multisampled texture in a shader. The flag prevents the RenderTexture from being resolved by default when RenderTexture.antiAliasing is greater than 1.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureCreationFlags.CreatedFromScript">
      <summary>
        <para>This flag is always set internally when a RenderTexture is created from script. It has no effect when set manually from script code.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureCreationFlags.DynamicallyScalable">
      <summary>
        <para>Set this flag to mark this RenderTexture for Dynamic Resolution should the target platform/graphics API support Dynamic Resolution. See ScalabeBufferManager for more details.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureCreationFlags.EnableRandomWrite">
      <summary>
        <para>Set this flag to enable random access writes to the RenderTexture from shaders.
Normally, pixel shaders only operate on pixels they are given. Compute shaders cannot write to textures without this flag. Random write enables shaders to write to arbitrary locations on a RenderTexture.  See RenderTexture.enableRandomWrite for more details, including supported platforms.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureCreationFlags.EyeTexture">
      <summary>
        <para>Set this flag when the Texture is to be used as a VR eye texture. This flag is cleared by default. This flag is set on a RenderTextureDesc when it is returned from GetDefaultVREyeTextureDesc or other VR functions returning a RenderTextureDesc.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureCreationFlags.MipMap">
      <summary>
        <para>Set this flag to allocate mipmaps in the RenderTexture. See RenderTexture.useMipMap for more details.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureCreationFlags.NoResolvedColorSurface">
      <summary>
        <para>When this flag is set, the engine will not automatically resolve the color surface.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureCreationFlags.SRGB">
      <summary>
        <para>When this flag is set, reads and writes to this texture are converted to SRGB color space. See RenderTexture.sRGB for more details.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RenderTextureDescriptor">
      <summary>
        <para>This struct contains all the information required to create a RenderTexture. It can be copied, cached, and reused to easily create RenderTextures that all share the same properties. Avoid using the default constructor as it does not initialize some flags with the recommended values.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTextureDescriptor.autoGenerateMips">
      <summary>
        <para>Mipmap levels are generated automatically when this flag is set.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTextureDescriptor.bindMS">
      <summary>
        <para>If true and msaaSamples is greater than 1, the render texture will not be resolved by default.  Use this if the render texture needs to be bound as a multisampled texture in a shader.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTextureDescriptor.depthBufferBits">
      <summary>
        <para>The precision of the render texture's depth buffer in bits (0, 16, 24/32 are supported).

See Also: RenderTexture.depth.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTextureDescriptor.dimension">
      <summary>
        <para>Dimensionality (type) of the render texture.

See Also: RenderTexture.dimension.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTextureDescriptor.enableRandomWrite">
      <summary>
        <para>Enable random access write into this render texture on Shader Model 5.0 level shaders.

See Also: RenderTexture.enableRandomWrite.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTextureDescriptor.flags">
      <summary>
        <para>A set of RenderTextureCreationFlags that control how the texture is created.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTextureDescriptor.graphicsFormat">
      <summary>
        <para>The color format for the RenderTexture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTextureDescriptor.height">
      <summary>
        <para>The height of the render texture in pixels.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTextureDescriptor.memoryless">
      <summary>
        <para>The render texture memoryless mode property.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTextureDescriptor.mipCount">
      <summary>
        <para>User-defined mipmap count.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTextureDescriptor.msaaSamples">
      <summary>
        <para>The multisample antialiasing level for the RenderTexture.

See Also: RenderTexture.antiAliasing.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTextureDescriptor.shadowSamplingMode">
      <summary>
        <para>Determines how the RenderTexture is sampled if it is used as a shadow map.

See Also: ShadowSamplingMode for more details.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTextureDescriptor.sRGB">
      <summary>
        <para>This flag causes the render texture uses sRGB read/write conversions.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTextureDescriptor.stencilFormat">
      <summary>
        <para>The format of the stencil data that you can encapsulate within a RenderTexture.

Specifying this property creates a stencil element for the RenderTexture and sets its format.
This allows for stencil data to be bound as a Texture to all shader types for the platforms that support it.
This property does not specify the format of the stencil buffer, which is constrained by the depth buffer format specified in RenderTexture.depth.

Currently, most platforms only support R8_UInt (DirectX11, DirectX12), while PS4 also supports R8_UNorm.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTextureDescriptor.useDynamicScale">
      <summary>
        <para>Set to true to enable dynamic resolution scaling on this render texture.

See Also: RenderTexture.useDynamicScale.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTextureDescriptor.useMipMap">
      <summary>
        <para>Render texture has mipmaps when this flag is set.

See Also: RenderTexture.useMipMap.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTextureDescriptor.volumeDepth">
      <summary>
        <para>Volume extent of a 3D render texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTextureDescriptor.vrUsage">
      <summary>
        <para>If this RenderTexture is a VR eye texture used in stereoscopic rendering, this property decides what special rendering occurs, if any. Instead of setting this manually, use the value returned by XR.XRSettings.eyeTextureDesc|eyeTextureDesc or other VR functions returning a RenderTextureDescriptor.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTextureDescriptor.width">
      <summary>
        <para>The width of the render texture in pixels.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RenderTextureDescriptor.#ctor(System.Int32,System.Int32)">
      <summary>
        <para>Create a RenderTextureDescriptor with default values, or a certain width, height, and format.</para>
      </summary>
      <param name="width">Width of the RenderTexture in pixels.</param>
      <param name="height">Height of the RenderTexture in pixels.</param>
      <param name="colorFormat">The color format for the RenderTexture.</param>
      <param name="depthBufferBits">The number of bits to use for the depth buffer.</param>
    </member>
    <member name="M:UnityEngine.RenderTextureDescriptor.#ctor(System.Int32,System.Int32,UnityEngine.RenderTextureFormat)">
      <summary>
        <para>Create a RenderTextureDescriptor with default values, or a certain width, height, and format.</para>
      </summary>
      <param name="width">Width of the RenderTexture in pixels.</param>
      <param name="height">Height of the RenderTexture in pixels.</param>
      <param name="colorFormat">The color format for the RenderTexture.</param>
      <param name="depthBufferBits">The number of bits to use for the depth buffer.</param>
    </member>
    <member name="M:UnityEngine.RenderTextureDescriptor.#ctor(System.Int32,System.Int32,UnityEngine.RenderTextureFormat,System.Int32)">
      <summary>
        <para>Create a RenderTextureDescriptor with default values, or a certain width, height, and format.</para>
      </summary>
      <param name="width">Width of the RenderTexture in pixels.</param>
      <param name="height">Height of the RenderTexture in pixels.</param>
      <param name="colorFormat">The color format for the RenderTexture.</param>
      <param name="depthBufferBits">The number of bits to use for the depth buffer.</param>
    </member>
    <member name="T:UnityEngine.RenderTextureFormat">
      <summary>
        <para>Format of a RenderTexture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.ARGB1555">
      <summary>
        <para>Color render texture format, 1 bit for Alpha channel, 5 bits for Red, Green and Blue channels.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.ARGB2101010">
      <summary>
        <para>Color render texture format. 10 bits for colors, 2 bits for alpha.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.ARGB32">
      <summary>
        <para>Color render texture format, 8 bits per channel.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.ARGB4444">
      <summary>
        <para>Color render texture format, 4 bit per channel.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.ARGB64">
      <summary>
        <para>Four color render texture format, 16 bits per channel, fixed point, unsigned normalized.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.ARGBFloat">
      <summary>
        <para>Color render texture format, 32 bit floating point per channel.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.ARGBHalf">
      <summary>
        <para>Color render texture format, 16 bit floating point per channel.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.ARGBInt">
      <summary>
        <para>Four channel (ARGB) render texture format, 32 bit signed integer per channel.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.BGR101010_XR">
      <summary>
        <para>Color render texture format, 10 bit per channel, extended range.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.BGRA10101010_XR">
      <summary>
        <para>Color render texture format, 10 bit per channel, extended range.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.BGRA32">
      <summary>
        <para>Color render texture format, 8 bits per channel.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.Default">
      <summary>
        <para>Default color render texture format: will be chosen accordingly to Frame Buffer format and Platform.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.DefaultHDR">
      <summary>
        <para>Default HDR color render texture format: will be chosen accordingly to Frame Buffer format and Platform.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.Depth">
      <summary>
        <para>A depth render texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.R16">
      <summary>
        <para>Single channel (R) render texture format, 16 bit integer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.R8">
      <summary>
        <para>Single channel (R) render texture format, 8 bit integer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.RFloat">
      <summary>
        <para>Scalar (R) render texture format, 32 bit floating point.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.RG16">
      <summary>
        <para>Two channel (RG) render texture format, 8 bits per channel.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.RG32">
      <summary>
        <para>Two color (RG) render texture format, 16 bits per channel, fixed point, unsigned normalized.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.RGB111110Float">
      <summary>
        <para>Color render texture format. R and G channels are 11 bit floating point, B channel is 10 bit floating point.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.RGB565">
      <summary>
        <para>Color render texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.RGBAUShort">
      <summary>
        <para>Four channel (RGBA) render texture format, 16 bit unsigned integer per channel.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.RGFloat">
      <summary>
        <para>Two color (RG) render texture format, 32 bit floating point per channel.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.RGHalf">
      <summary>
        <para>Two color (RG) render texture format, 16 bit floating point per channel.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.RGInt">
      <summary>
        <para>Two channel (RG) render texture format, 32 bit signed integer per channel.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.RHalf">
      <summary>
        <para>Scalar (R) render texture format, 16 bit floating point.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.RInt">
      <summary>
        <para>Scalar (R) render texture format, 32 bit signed integer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.Shadowmap">
      <summary>
        <para>A native shadowmap render texture format.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RenderTextureMemoryless">
      <summary>
        <para>Flags enumeration of the render texture memoryless modes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureMemoryless.Color">
      <summary>
        <para>Render texture color pixels are memoryless when RenderTexture.antiAliasing is set to 1.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureMemoryless.Depth">
      <summary>
        <para>Render texture depth pixels are memoryless.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureMemoryless.MSAA">
      <summary>
        <para>Render texture color pixels are memoryless when RenderTexture.antiAliasing is set to 2, 4 or 8.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureMemoryless.None">
      <summary>
        <para>The render texture is not memoryless.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RenderTextureReadWrite">
      <summary>
        <para>Color space conversion mode of a RenderTexture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureReadWrite.sRGB">
      <summary>
        <para>Render texture contains sRGB (color) data, perform Linear&lt;-&gt;sRGB conversions on it.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureReadWrite.Default">
      <summary>
        <para>Default color space conversion based on project settings.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureReadWrite.Linear">
      <summary>
        <para>Render texture contains linear (non-color) data; don't perform color conversions on it.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RequireComponent">
      <summary>
        <para>The RequireComponent attribute automatically adds required components as dependencies.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RequireComponent.#ctor(System.Type)">
      <summary>
        <para>Require a single component.</para>
      </summary>
      <param name="requiredComponent"></param>
    </member>
    <member name="M:UnityEngine.RequireComponent.#ctor(System.Type,System.Type)">
      <summary>
        <para>Require two components.</para>
      </summary>
      <param name="requiredComponent"></param>
      <param name="requiredComponent2"></param>
    </member>
    <member name="M:UnityEngine.RequireComponent.#ctor(System.Type,System.Type,System.Type)">
      <summary>
        <para>Require three components.</para>
      </summary>
      <param name="requiredComponent"></param>
      <param name="requiredComponent2"></param>
      <param name="requiredComponent3"></param>
    </member>
    <member name="T:UnityEngine.Resolution">
      <summary>
        <para>Represents a display resolution.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Resolution.height">
      <summary>
        <para>Resolution height in pixels.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Resolution.refreshRate">
      <summary>
        <para>Resolution's vertical refresh rate in Hz.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Resolution.width">
      <summary>
        <para>Resolution width in pixels.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Resolution.ToString">
      <summary>
        <para>Returns a nicely formatted string of the resolution.</para>
      </summary>
      <returns>
        <para>A string with the format "width x height @ refreshRateHz".</para>
      </returns>
    </member>
    <member name="T:UnityEngine.ResourceRequest">
      <summary>
        <para>Asynchronous load request from the Resources bundle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ResourceRequest.asset">
      <summary>
        <para>Asset object being loaded (Read Only).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Resources">
      <summary>
        <para>The Resources class allows you to find and access Objects including assets.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Resources.FindObjectsOfTypeAll">
      <summary>
        <para>Returns a list of all objects of Type T.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Resources.FindObjectsOfTypeAll(System.Type)">
      <summary>
        <para>Returns a list of all objects of Type type.</para>
      </summary>
      <param name="type"></param>
    </member>
    <member name="M:UnityEngine.Resources.InstanceIDToObject(System.Int32)">
      <summary>
        <para>Translates an instance ID to an object reference.</para>
      </summary>
      <param name="instanceID">Instance ID of an Object.</param>
      <returns>
        <para>Resolved reference or null if the instance ID didn't match anything.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Resources.InstanceIDToObjectList(Unity.Collections.NativeArray`1&lt;System.Int32&gt;,System.Collections.Generic.List`1&lt;UnityEngine.Object&gt;)">
      <summary>
        <para>Translates an array of instance IDs to a list of Object references.</para>
      </summary>
      <param name="instanceIDs">IDs of Object instances.</param>
      <param name="objects">List of resoved object references, instanceIDs and objects will be of the same length and in the same order, the list will be resized if needed. Missing objects will be null.</param>
    </member>
    <member name="M:UnityEngine.Resources.Load(System.String)">
      <summary>
        <para>Loads the asset of the requested type stored at path in a Resources folder using a generic parameter type filter of type T.</para>
      </summary>
      <param name="path">Path to the target resource to load.</param>
      <returns>
        <para>An object of the requested generic parameter type.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Resources.Load(System.String)">
      <summary>
        <para>Loads an asset stored at path in a Resources folder using an optional systemTypeInstance filter.</para>
      </summary>
      <param name="path">Path to the target resource to load.</param>
      <param name="systemTypeInstance">Type filter for objects returned.</param>
      <returns>
        <para>The requested asset returned as an Object.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Resources.Load(System.String,System.Type)">
      <summary>
        <para>Loads an asset stored at path in a Resources folder using an optional systemTypeInstance filter.</para>
      </summary>
      <param name="path">Path to the target resource to load.</param>
      <param name="systemTypeInstance">Type filter for objects returned.</param>
      <returns>
        <para>The requested asset returned as an Object.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Resources.LoadAll(System.String)">
      <summary>
        <para>Loads all assets in a folder or file at path in a Resources folder.</para>
      </summary>
      <param name="path">Pathname of the target folder. When using the empty string (i.e., ""), the function will load the entire contents of the Resources folder.</param>
      <param name="systemTypeInstance">Type filter for objects returned.</param>
    </member>
    <member name="M:UnityEngine.Resources.LoadAll(System.String,System.Type)">
      <summary>
        <para>Loads all assets in a folder or file at path in a Resources folder.</para>
      </summary>
      <param name="path">Pathname of the target folder. When using the empty string (i.e., ""), the function will load the entire contents of the Resources folder.</param>
      <param name="systemTypeInstance">Type filter for objects returned.</param>
    </member>
    <member name="M:UnityEngine.Resources.LoadAll(System.String)">
      <summary>
        <para>Loads all assets in a folder or file at path in a Resources folder.</para>
      </summary>
      <param name="path">Pathname of the target folder. When using the empty string (i.e., ""), the function will load the entire contents of the Resources folder.</param>
    </member>
    <member name="M:UnityEngine.Resources.LoadAssetAtPath(System.String,System.Type)">
      <summary>
        <para>Returns a resource at an asset path (Editor Only).</para>
      </summary>
      <param name="assetPath">Pathname of the target asset.</param>
      <param name="type">Type filter for objects returned.</param>
    </member>
    <member name="M:UnityEngine.Resources.LoadAssetAtPath(System.String)">
      <summary>
        <para>Returns a resource at an asset path (Editor Only).</para>
      </summary>
      <param name="assetPath">Pathname of the target asset.</param>
    </member>
    <member name="M:UnityEngine.Resources.LoadAsync(System.String)">
      <summary>
        <para>Asynchronously loads an asset stored at path in a Resources folder.</para>
      </summary>
      <param name="path">Pathname of the target folder. When using the empty string (i.e., ""), the function will load the entire contents of the Resources folder.</param>
      <param name="systemTypeInstance">Type filter for objects returned.</param>
      <param name="type"></param>
    </member>
    <member name="M:UnityEngine.Resources.LoadAsync(System.String,System.Type)">
      <summary>
        <para>Asynchronously loads an asset stored at path in a Resources folder.</para>
      </summary>
      <param name="path">Pathname of the target folder. When using the empty string (i.e., ""), the function will load the entire contents of the Resources folder.</param>
      <param name="systemTypeInstance">Type filter for objects returned.</param>
      <param name="type"></param>
    </member>
    <member name="M:UnityEngine.Resources.LoadAsync(System.String)">
      <summary>
        <para>Asynchronously loads an asset stored at path in a Resources folder.</para>
      </summary>
      <param name="path">Pathname of the target folder. When using the empty string (i.e., ""), the function will load the entire contents of the Resources folder.</param>
    </member>
    <member name="M:UnityEngine.Resources.UnloadAsset(UnityEngine.Object)">
      <summary>
        <para>Unloads assetToUnload from memory.</para>
      </summary>
      <param name="assetToUnload"></param>
    </member>
    <member name="M:UnityEngine.Resources.UnloadUnusedAssets">
      <summary>
        <para>Unloads assets that are not used.</para>
      </summary>
      <returns>
        <para>Object on which you can yield to wait until the operation completes.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.ResourcesAPI">
      <summary>
        <para>Derive from this base class to provide alternative implementations to the C# behavior of specific Resources methods.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ResourcesAPI.overrideAPI">
      <summary>
        <para>The specific ResourcesAPI instance to use to handle overridden Resources methods.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ResourcesAPI.FindObjectsOfTypeAll(System.Type)">
      <summary>
        <para>Override for customizing the behavior of the Resources.FindObjectsOfTypeAll function.</para>
      </summary>
      <param name="systemTypeInstance"></param>
    </member>
    <member name="M:UnityEngine.ResourcesAPI.FindShaderByName(System.String)">
      <summary>
        <para>Override for customizing the behavior of the Shader.Find function.</para>
      </summary>
      <param name="name"></param>
    </member>
    <member name="M:UnityEngine.ResourcesAPI.Load(System.String,System.Type)">
      <summary>
        <para>Override for customizing the behavior of the Resources.Load function.</para>
      </summary>
      <param name="path">Path to the target resource to load.</param>
      <param name="systemTypeInstance">The requested asset's Type.</param>
      <returns>
        <para>The requested asset returned as an Object.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.ResourcesAPI.LoadAll(System.String,System.Type)">
      <summary>
        <para>Override for customizing the behavior of the Resources.LoadAll function.</para>
      </summary>
      <param name="path">Path to the target resource to load.</param>
      <param name="systemTypeInstance">Type filter for objects returned.</param>
    </member>
    <member name="M:UnityEngine.ResourcesAPI.LoadAsync(System.String,System.Type)">
      <summary>
        <para>Override for customizing the behavior of the Resources.LoadAsync function.</para>
      </summary>
      <param name="path">Path to the target resource to load.</param>
      <param name="systemTypeInstance">Type filter for objects returned.</param>
    </member>
    <member name="M:UnityEngine.ResourcesAPI.UnloadAsset(UnityEngine.Object)">
      <summary>
        <para>Override for customizing the behavior of the Resources.Unload function.</para>
      </summary>
      <param name="assetToUnload"></param>
    </member>
    <member name="T:UnityEngine.RPC">
      <summary>
        <para>Attribute for setting up RPC functions.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RPCMode">
      <summary>
        <para>Option for who will receive an RPC, used by NetworkView.RPC.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RuntimeInitializeLoadType">
      <summary>
        <para>Set RuntimeInitializeOnLoadMethod type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimeInitializeLoadType.AfterAssembliesLoaded">
      <summary>
        <para>Callback when all assemblies are loaded and preloaded assets are initialized.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimeInitializeLoadType.AfterSceneLoad">
      <summary>
        <para>After Scene is loaded.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimeInitializeLoadType.BeforeSceneLoad">
      <summary>
        <para>Before Scene is loaded.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimeInitializeLoadType.BeforeSplashScreen">
      <summary>
        <para>Immediately before the splash screen is shown.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimeInitializeLoadType.SubsystemRegistration">
      <summary>
        <para>Callback used for registration of subsystems</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RuntimeInitializeOnLoadMethodAttribute">
      <summary>
        <para>Allow a runtime class method to be initialized when a game is loaded at runtime
      without action from the user.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RuntimeInitializeOnLoadMethodAttribute.loadType">
      <summary>
        <para>Set RuntimeInitializeOnLoadMethod type.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RuntimeInitializeOnLoadMethodAttribute.#ctor">
      <summary>
        <para>Creation of the runtime class used when Scenes are loaded.</para>
      </summary>
      <param name="loadType">Determine whether methods are called before or after the
        Scene is loaded.</param>
    </member>
    <member name="M:UnityEngine.RuntimeInitializeOnLoadMethodAttribute.#ctor(UnityEngine.RuntimeInitializeLoadType)">
      <summary>
        <para>Creation of the runtime class used when Scenes are loaded.</para>
      </summary>
      <param name="loadType">Determine whether methods are called before or after the
        Scene is loaded.</param>
    </member>
    <member name="T:UnityEngine.RuntimePlatform">
      <summary>
        <para>The platform application is running. Returned by Application.platform.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.tvOS">
      <summary>
        <para>In the player on the Apple's tvOS.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.Android">
      <summary>
        <para>In the player on Android devices.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.CloudRendering">
      <summary>
        <para>In the player on CloudRendering.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.IPhonePlayer">
      <summary>
        <para>In the player on the iPhone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.LinuxEditor">
      <summary>
        <para>In the Unity editor on Linux.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.LinuxPlayer">
      <summary>
        <para>In the player on Linux.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.OSXDashboardPlayer">
      <summary>
        <para>In the Dashboard widget on macOS.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.OSXEditor">
      <summary>
        <para>In the Unity editor on macOS.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.OSXPlayer">
      <summary>
        <para>In the player on macOS.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.OSXWebPlayer">
      <summary>
        <para>In the web player on macOS.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.PS4">
      <summary>
        <para>In the player on the Playstation 4.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.PS5">
      <summary>
        <para>In the player on the Playstation 5.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.Stadia">
      <summary>
        <para>In the player on Stadia.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.Switch">
      <summary>
        <para>In the player on Nintendo Switch.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.WebGLPlayer">
      <summary>
        <para>In the player on WebGL</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.WindowsEditor">
      <summary>
        <para>In the Unity editor on Windows.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.WindowsPlayer">
      <summary>
        <para>In the player on Windows.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.WindowsWebPlayer">
      <summary>
        <para>In the web player on Windows.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.WSAPlayerARM">
      <summary>
        <para>In the player on Windows Store Apps when CPU architecture is ARM.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.WSAPlayerX64">
      <summary>
        <para>In the player on Windows Store Apps when CPU architecture is X64.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.WSAPlayerX86">
      <summary>
        <para>In the player on Windows Store Apps when CPU architecture is X86.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.XboxOne">
      <summary>
        <para>In the player on Xbox One.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ScalableBufferManager">
      <summary>
        <para>Scales render textures to support dynamic resolution if the target platform/graphics API supports it.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ScalableBufferManager.heightScaleFactor">
      <summary>
        <para>Height scale factor to control dynamic resolution.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ScalableBufferManager.widthScaleFactor">
      <summary>
        <para>Width scale factor to control dynamic resolution.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ScalableBufferManager.ResizeBuffers(System.Single,System.Single)">
      <summary>
        <para>Function to resize all buffers marked as DynamicallyScalable.</para>
      </summary>
      <param name="widthScale">New scale factor for the width the ScalableBufferManager will use to resize all render textures the user marked as DynamicallyScalable, has to be some value greater than 0.0 and less than or equal to 1.0.</param>
      <param name="heightScale">New scale factor for the height the ScalableBufferManager will use to resize all render textures the user marked as DynamicallyScalable, has to be some value greater than 0.0 and less than or equal to 1.0.</param>
    </member>
    <member name="T:UnityEngine.SceneManagement.CreateSceneParameters">
      <summary>
        <para>This struct collects all the CreateScene parameters in to a single place.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SceneManagement.CreateSceneParameters.localPhysicsMode">
      <summary>
        <para>See SceneManagement.LocalPhysicsMode.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SceneManagement.LoadSceneMode">
      <summary>
        <para>Used when loading a Scene in a player.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SceneManagement.LoadSceneMode.Additive">
      <summary>
        <para>Adds the Scene to the current loaded Scenes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SceneManagement.LoadSceneMode.Single">
      <summary>
        <para>Closes all current loaded Scenes
                and loads a Scene.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SceneManagement.LoadSceneParameters">
      <summary>
        <para>This struct collects all the LoadScene parameters in to a single place.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SceneManagement.LoadSceneParameters.loadSceneMode">
      <summary>
        <para>See LoadSceneMode.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SceneManagement.LoadSceneParameters.localPhysicsMode">
      <summary>
        <para>See SceneManagement.LocalPhysicsMode.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SceneManagement.LoadSceneParameters.#ctor(UnityEngine.SceneManagement.LoadSceneMode)">
      <summary>
        <para>Constructor for LoadSceneParameters. See SceneManager.LoadScene.</para>
      </summary>
      <param name="mode">See LoadSceneParameters.loadSceneMode.</param>
    </member>
    <member name="T:UnityEngine.SceneManagement.LocalPhysicsMode">
      <summary>
        <para>Provides options for 2D and 3D local physics.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SceneManagement.LocalPhysicsMode.None">
      <summary>
        <para>No local 2D or 3D physics Scene will be created.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SceneManagement.LocalPhysicsMode.Physics2D">
      <summary>
        <para>A local 2D physics Scene will be created and owned by the Scene.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SceneManagement.LocalPhysicsMode.Physics3D">
      <summary>
        <para>A local 3D physics Scene will be created and owned by the Scene.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SceneManagement.Scene">
      <summary>
        <para>Run-time data structure for *.unity file.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SceneManagement.Scene.buildIndex">
      <summary>
        <para>Return the index of the Scene in the Build Settings.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SceneManagement.Scene.isDirty">
      <summary>
        <para>Returns true if the Scene is modifed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SceneManagement.Scene.isLoaded">
      <summary>
        <para>Returns true if the Scene is loaded.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SceneManagement.Scene.name">
      <summary>
        <para>Returns the name of the Scene that is currently active in the game or app.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SceneManagement.Scene.path">
      <summary>
        <para>Returns the relative path of the Scene. Like: "AssetsMyScenesMyScene.unity".</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SceneManagement.Scene.rootCount">
      <summary>
        <para>The number of root transforms of this Scene.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SceneManagement.Scene.GetRootGameObjects">
      <summary>
        <para>Returns all the root game objects in the Scene.</para>
      </summary>
      <returns>
        <para>An array of game objects.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SceneManagement.Scene.GetRootGameObjects(System.Collections.Generic.List`1&lt;UnityEngine.GameObject&gt;)">
      <summary>
        <para>Returns all the root game objects in the Scene.</para>
      </summary>
      <param name="rootGameObjects">A list which is used to return the root game objects.</param>
    </member>
    <member name="M:UnityEngine.SceneManagement.Scene.IsValid">
      <summary>
        <para>Whether this is a valid Scene.
A Scene may be invalid if, for example, you tried to open a Scene that does not exist. In this case, the Scene returned from EditorSceneManager.OpenScene would return False for IsValid.</para>
      </summary>
      <returns>
        <para>Whether this is a valid Scene.</para>
      </returns>
    </member>
    <member name="?:UnityEngine.SceneManagement.Scene.op_Equal(UnityEngine.SceneManagement.Scene,UnityEngine.SceneManagement.Scene)">
      <summary>
        <para>Returns true if the Scenes are equal.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member name="?:UnityEngine.SceneManagement.Scene.op_NotEqual(UnityEngine.SceneManagement.Scene,UnityEngine.SceneManagement.Scene)">
      <summary>
        <para>Returns true if the Scenes are different.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member name="T:UnityEngine.SceneManagement.SceneManager">
      <summary>
        <para>Scene management at run-time.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.SceneManagement.SceneManager.activeSceneChanged(UnityEngine.Events.UnityAction`2&lt;UnityEngine.SceneManagement.Scene,UnityEngine.SceneManagement.Scene&gt;)">
      <summary>
        <para>Subscribe to this event to get notified when the active Scene has changed.</para>
      </summary>
      <param name="value">Use a subscription of either a UnityAction&lt;SceneManagement.Scene, SceneManagement.Scene&gt; or a method that takes two SceneManagement.Scene types arguments.</param>
    </member>
    <member name="P:UnityEngine.SceneManagement.SceneManager.sceneCount">
      <summary>
        <para>The total number of currently loaded Scenes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SceneManagement.SceneManager.sceneCountInBuildSettings">
      <summary>
        <para>Number of Scenes in Build Settings.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.SceneManagement.SceneManager.sceneLoaded(UnityEngine.Events.UnityAction`2&lt;UnityEngine.SceneManagement.Scene,UnityEngine.SceneManagement.LoadSceneMode&gt;)">
      <summary>
        <para>Add a delegate to this to get notifications when a Scene has loaded.</para>
      </summary>
      <param name="value">Use a subscription of either a UnityAction&lt;SceneManagement.Scene, SceneManagement.LoadSceneMode&gt; or a method that takes a SceneManagement.Scene and a SceneManagement.LoadSceneMode.</param>
    </member>
    <member name="?:UnityEngine.SceneManagement.SceneManager.sceneUnloaded(UnityEngine.Events.UnityAction`1&lt;UnityEngine.SceneManagement.Scene&gt;)">
      <summary>
        <para>Add a delegate to this to get notifications when a Scene has unloaded.</para>
      </summary>
      <param name="value">Use a subscription of either a UnityAction&lt;SceneManagement.Scene&gt; or a method that takes a SceneManagement.Scene type argument.</param>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneManager.CreateScene(System.String)">
      <summary>
        <para>Create an empty new Scene at runtime with the given name.</para>
      </summary>
      <param name="sceneName">The name of the new Scene. It cannot be empty or null, or same as the name of the existing Scenes.</param>
      <param name="parameters">Various parameters used to create the Scene.</param>
      <returns>
        <para>A reference to the new Scene that was created, or an invalid Scene if creation failed.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneManager.CreateScene(System.String,UnityEngine.SceneManagement.CreateSceneParameters)">
      <summary>
        <para>Create an empty new Scene at runtime with the given name.</para>
      </summary>
      <param name="sceneName">The name of the new Scene. It cannot be empty or null, or same as the name of the existing Scenes.</param>
      <param name="parameters">Various parameters used to create the Scene.</param>
      <returns>
        <para>A reference to the new Scene that was created, or an invalid Scene if creation failed.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneManager.GetActiveScene">
      <summary>
        <para>Gets the currently active Scene.</para>
      </summary>
      <returns>
        <para>The active Scene.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneManager.GetAllScenes">
      <summary>
        <para>Returns an array of all the Scenes currently open in the hierarchy.</para>
      </summary>
      <returns>
        <para>Array of Scenes in the Hierarchy.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneManager.GetSceneAt(System.Int32)">
      <summary>
        <para>Get the Scene at index in the SceneManager's list of loaded Scenes.</para>
      </summary>
      <param name="index">Index of the Scene to get. Index must be greater than or equal to 0 and less than SceneManager.sceneCount.</param>
      <returns>
        <para>A reference to the Scene at the index specified.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneManager.GetSceneByBuildIndex(System.Int32)">
      <summary>
        <para>Get a Scene struct from a build index.</para>
      </summary>
      <param name="buildIndex">Build index as shown in the Build Settings window.</param>
      <returns>
        <para>A reference to the Scene, if valid. If not, an invalid Scene is returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneManager.GetSceneByName(System.String)">
      <summary>
        <para>Searches through the Scenes loaded for a Scene with the given name.</para>
      </summary>
      <param name="name">Name of Scene to find.</param>
      <returns>
        <para>A reference to the Scene, if valid. If not, an invalid Scene is returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneManager.GetSceneByPath(System.String)">
      <summary>
        <para>Searches all Scenes loaded for a Scene that has the given asset path.</para>
      </summary>
      <param name="scenePath">Path of the Scene. Should be relative to the project folder. Like: "AssetsMyScenesMyScene.unity".</param>
      <returns>
        <para>A reference to the Scene, if valid. If not, an invalid Scene is returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneManager.LoadScene(System.Int32,UnityEngine.SceneManagement.LoadSceneMode)">
      <summary>
        <para>Loads the Scene by its name or index in Build Settings.</para>
      </summary>
      <param name="sceneName">Name or path of the Scene to load.</param>
      <param name="sceneBuildIndex">Index of the Scene in the Build Settings to load.</param>
      <param name="mode">Allows you to specify whether or not to load the Scene additively. See SceneManagement.LoadSceneMode for more information about the options.</param>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneManager.LoadScene(System.String,UnityEngine.SceneManagement.LoadSceneMode)">
      <summary>
        <para>Loads the Scene by its name or index in Build Settings.</para>
      </summary>
      <param name="sceneName">Name or path of the Scene to load.</param>
      <param name="sceneBuildIndex">Index of the Scene in the Build Settings to load.</param>
      <param name="mode">Allows you to specify whether or not to load the Scene additively. See SceneManagement.LoadSceneMode for more information about the options.</param>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneManager.LoadScene(System.Int32,UnityEngine.SceneManagement.LoadSceneParameters)">
      <summary>
        <para>Loads the Scene by its name or index in Build Settings.</para>
      </summary>
      <param name="sceneName">Name or path of the Scene to load.</param>
      <param name="sceneBuildIndex">Index of the Scene in the Build Settings to load.</param>
      <param name="parameters">Various parameters used to load the Scene.</param>
      <returns>
        <para>A handle to the Scene being loaded.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneManager.LoadScene(System.String,UnityEngine.SceneManagement.LoadSceneParameters)">
      <summary>
        <para>Loads the Scene by its name or index in Build Settings.</para>
      </summary>
      <param name="sceneName">Name or path of the Scene to load.</param>
      <param name="sceneBuildIndex">Index of the Scene in the Build Settings to load.</param>
      <param name="parameters">Various parameters used to load the Scene.</param>
      <returns>
        <para>A handle to the Scene being loaded.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneManager.LoadSceneAsync(System.String,UnityEngine.SceneManagement.LoadSceneMode)">
      <summary>
        <para>Loads the Scene asynchronously in the background.</para>
      </summary>
      <param name="sceneName">Name or path of the Scene to load.</param>
      <param name="sceneBuildIndex">Index of the Scene in the Build Settings to load.</param>
      <param name="mode">If LoadSceneMode.Single then all current Scenes will be unloaded before loading.</param>
      <param name="parameters">Struct that collects the various parameters into a single place except for the name and index.</param>
      <returns>
        <para>Use the AsyncOperation to determine if the operation has completed.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneManager.LoadSceneAsync(System.Int32,UnityEngine.SceneManagement.LoadSceneMode)">
      <summary>
        <para>Loads the Scene asynchronously in the background.</para>
      </summary>
      <param name="sceneName">Name or path of the Scene to load.</param>
      <param name="sceneBuildIndex">Index of the Scene in the Build Settings to load.</param>
      <param name="mode">If LoadSceneMode.Single then all current Scenes will be unloaded before loading.</param>
      <param name="parameters">Struct that collects the various parameters into a single place except for the name and index.</param>
      <returns>
        <para>Use the AsyncOperation to determine if the operation has completed.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneManager.LoadSceneAsync(System.String,UnityEngine.SceneManagement.LoadSceneParameters)">
      <summary>
        <para>Loads the Scene asynchronously in the background.</para>
      </summary>
      <param name="sceneName">Name or path of the Scene to load.</param>
      <param name="sceneBuildIndex">Index of the Scene in the Build Settings to load.</param>
      <param name="mode">If LoadSceneMode.Single then all current Scenes will be unloaded before loading.</param>
      <param name="parameters">Struct that collects the various parameters into a single place except for the name and index.</param>
      <returns>
        <para>Use the AsyncOperation to determine if the operation has completed.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneManager.LoadSceneAsync(System.Int32,UnityEngine.SceneManagement.LoadSceneParameters)">
      <summary>
        <para>Loads the Scene asynchronously in the background.</para>
      </summary>
      <param name="sceneName">Name or path of the Scene to load.</param>
      <param name="sceneBuildIndex">Index of the Scene in the Build Settings to load.</param>
      <param name="mode">If LoadSceneMode.Single then all current Scenes will be unloaded before loading.</param>
      <param name="parameters">Struct that collects the various parameters into a single place except for the name and index.</param>
      <returns>
        <para>Use the AsyncOperation to determine if the operation has completed.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneManager.MergeScenes(UnityEngine.SceneManagement.Scene,UnityEngine.SceneManagement.Scene)">
      <summary>
        <para>This will merge the source Scene into the destinationScene.</para>
      </summary>
      <param name="sourceScene">The Scene that will be merged into the destination Scene.</param>
      <param name="destinationScene">Existing Scene to merge the source Scene into.</param>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneManager.MoveGameObjectToScene(UnityEngine.GameObject,UnityEngine.SceneManagement.Scene)">
      <summary>
        <para>Move a GameObject from its current Scene to a new Scene.</para>
      </summary>
      <param name="go">GameObject to move.</param>
      <param name="scene">Scene to move into.</param>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneManager.SetActiveScene(UnityEngine.SceneManagement.Scene)">
      <summary>
        <para>Set the Scene to be active.</para>
      </summary>
      <param name="scene">The Scene to be set.</param>
      <returns>
        <para>Returns false if the Scene is not loaded yet.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneManager.UnloadScene(System.Int32)">
      <summary>
        <para>Destroys all GameObjects associated with the given Scene and removes the Scene from the SceneManager.</para>
      </summary>
      <param name="sceneBuildIndex">Index of the Scene in the Build Settings to unload.</param>
      <param name="sceneName">Name or path of the Scene to unload.</param>
      <param name="scene">Scene to unload.</param>
      <returns>
        <para>Returns true if the Scene is unloaded.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneManager.UnloadScene(System.String)">
      <summary>
        <para>Destroys all GameObjects associated with the given Scene and removes the Scene from the SceneManager.</para>
      </summary>
      <param name="sceneBuildIndex">Index of the Scene in the Build Settings to unload.</param>
      <param name="sceneName">Name or path of the Scene to unload.</param>
      <param name="scene">Scene to unload.</param>
      <returns>
        <para>Returns true if the Scene is unloaded.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneManager.UnloadScene(UnityEngine.SceneManagement.Scene)">
      <summary>
        <para>Destroys all GameObjects associated with the given Scene and removes the Scene from the SceneManager.</para>
      </summary>
      <param name="sceneBuildIndex">Index of the Scene in the Build Settings to unload.</param>
      <param name="sceneName">Name or path of the Scene to unload.</param>
      <param name="scene">Scene to unload.</param>
      <returns>
        <para>Returns true if the Scene is unloaded.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneManager.UnloadSceneAsync(System.Int32)">
      <summary>
        <para>Destroys all GameObjects associated with the given Scene and removes the Scene from the SceneManager.</para>
      </summary>
      <param name="sceneBuildIndex">Index of the Scene in BuildSettings.</param>
      <param name="sceneName">Name or path of the Scene to unload.</param>
      <param name="scene">Scene to unload.</param>
      <param name="options">Scene unloading options.</param>
      <returns>
        <para>Use the AsyncOperation to determine if the operation has completed.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneManager.UnloadSceneAsync(System.String)">
      <summary>
        <para>Destroys all GameObjects associated with the given Scene and removes the Scene from the SceneManager.</para>
      </summary>
      <param name="sceneBuildIndex">Index of the Scene in BuildSettings.</param>
      <param name="sceneName">Name or path of the Scene to unload.</param>
      <param name="scene">Scene to unload.</param>
      <param name="options">Scene unloading options.</param>
      <returns>
        <para>Use the AsyncOperation to determine if the operation has completed.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneManager.UnloadSceneAsync(UnityEngine.SceneManagement.Scene)">
      <summary>
        <para>Destroys all GameObjects associated with the given Scene and removes the Scene from the SceneManager.</para>
      </summary>
      <param name="sceneBuildIndex">Index of the Scene in BuildSettings.</param>
      <param name="sceneName">Name or path of the Scene to unload.</param>
      <param name="scene">Scene to unload.</param>
      <param name="options">Scene unloading options.</param>
      <returns>
        <para>Use the AsyncOperation to determine if the operation has completed.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneManager.UnloadSceneAsync(System.Int32,UnityEngine.SceneManagement.UnloadSceneOptions)">
      <summary>
        <para>Destroys all GameObjects associated with the given Scene and removes the Scene from the SceneManager.</para>
      </summary>
      <param name="sceneBuildIndex">Index of the Scene in BuildSettings.</param>
      <param name="sceneName">Name or path of the Scene to unload.</param>
      <param name="scene">Scene to unload.</param>
      <param name="options">Scene unloading options.</param>
      <returns>
        <para>Use the AsyncOperation to determine if the operation has completed.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneManager.UnloadSceneAsync(System.String,UnityEngine.SceneManagement.UnloadSceneOptions)">
      <summary>
        <para>Destroys all GameObjects associated with the given Scene and removes the Scene from the SceneManager.</para>
      </summary>
      <param name="sceneBuildIndex">Index of the Scene in BuildSettings.</param>
      <param name="sceneName">Name or path of the Scene to unload.</param>
      <param name="scene">Scene to unload.</param>
      <param name="options">Scene unloading options.</param>
      <returns>
        <para>Use the AsyncOperation to determine if the operation has completed.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneManager.UnloadSceneAsync(UnityEngine.SceneManagement.Scene,UnityEngine.SceneManagement.UnloadSceneOptions)">
      <summary>
        <para>Destroys all GameObjects associated with the given Scene and removes the Scene from the SceneManager.</para>
      </summary>
      <param name="sceneBuildIndex">Index of the Scene in BuildSettings.</param>
      <param name="sceneName">Name or path of the Scene to unload.</param>
      <param name="scene">Scene to unload.</param>
      <param name="options">Scene unloading options.</param>
      <returns>
        <para>Use the AsyncOperation to determine if the operation has completed.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.SceneManagement.SceneManagerAPI">
      <summary>
        <para>Derive from this base class to provide alternative implementations to the C# behavior of specific SceneManagement.SceneManager methods.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SceneManagement.SceneManagerAPI.overrideAPI">
      <summary>
        <para>The specific SceneManagement.SceneManagerAPI instance to use to handle overridden SceneManagement.SceneManager methods.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneManagerAPI.GetNumScenesInBuildSettings">
      <summary>
        <para>Override for customizing the behavior of the SceneManagement.SceneManager.sceneCountInBuildSettings function.</para>
      </summary>
      <returns>
        <para>Number of Scenes handled by SceneManagement.SceneManagerApi.GetSceneByBuildIndex.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneManagerAPI.GetSceneByBuildIndex(System.Int32)">
      <summary>
        <para>Override for customizing the behavior of the SceneManagement.SceneManager.GetSceneByBuildIndex function.</para>
      </summary>
      <param name="buildIndex">Build index as returned by SceneManagement.SceneManagerApi.GetNumScenesInBuildSettings.</param>
      <returns>
        <para>A reference to the Scene, if valid. If not, an invalid Scene is returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneManagerAPI.LoadFirstScene(System.Boolean)">
      <summary>
        <para>Override for customizing the behavior of loading the first Scene in a stub player build.</para>
      </summary>
      <param name="mustLoadAsync"></param>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneManagerAPI.LoadSceneAsyncByNameOrIndex(System.String,System.Int32,UnityEngine.SceneManagement.LoadSceneParameters,System.Boolean)">
      <summary>
        <para>Override for customizing the behavior of the SceneManagement.SceneManager.LoadScene and SceneManagement.SceneManager.LoadSceneAsync functions.</para>
      </summary>
      <param name="sceneName"></param>
      <param name="sceneBuildIndex"></param>
      <param name="parameters"></param>
      <param name="mustCompleteNextFrame"></param>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneManagerAPI.UnloadSceneAsyncByNameOrIndex(System.String,System.Int32,System.Boolean,UnityEngine.SceneManagement.UnloadSceneOptions,System.Boolean&amp;)">
      <summary>
        <para>Override for customizing the behavior of the SceneManagement.SceneManager.UnloadSceneAsync function.</para>
      </summary>
      <param name="sceneName"></param>
      <param name="sceneBuildIndex"></param>
      <param name="immediately"></param>
      <param name="options"></param>
      <param name="outSuccess"></param>
    </member>
    <member name="T:UnityEngine.SceneManagement.SceneUtility">
      <summary>
        <para>Scene and Build Settings related utilities.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneUtility.GetBuildIndexByScenePath(System.String)">
      <summary>
        <para>Get the build index from a Scene path.</para>
      </summary>
      <param name="scenePath">Scene path (e.g: "AssetsScenesScene1.unity").</param>
      <returns>
        <para>Build index.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SceneManagement.SceneUtility.GetScenePathByBuildIndex(System.Int32)">
      <summary>
        <para>Get the Scene path from a build index.</para>
      </summary>
      <param name="buildIndex"></param>
      <returns>
        <para>Scene path (e.g "AssetsScenesScene1.unity").</para>
      </returns>
    </member>
    <member name="T:UnityEngine.SceneManagement.UnloadSceneOptions">
      <summary>
        <para>Scene unloading options passed to SceneManager.UnloadScene.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SceneManagement.UnloadSceneOptions.None">
      <summary>
        <para>Unload the scene without any special options.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SceneManagement.UnloadSceneOptions.UnloadAllEmbeddedSceneObjects">
      <summary>
        <para>Unloads all objects that are loaded from the scene's serialized file. Without this flag, only GameObject and Components within the scene's hierarchy are unloaded.

Note: Objects that are dynamically created during the build process can be embedded in the scene's serialized file. This can occur when asset types are created and referenced inside the scene's post-processor callback. Some examples of these types are textures, meshes, and scriptable objects. Assets from your assets folder are not embedded in the scene's serialized file.
Note: This flag does not unload assets which can be referenced by other scenes.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Screen">
      <summary>
        <para>Access to display information.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Screen.autorotateToLandscapeLeft">
      <summary>
        <para>Allow auto-rotation to landscape left?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Screen.autorotateToLandscapeRight">
      <summary>
        <para>Allow auto-rotation to landscape right?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Screen.autorotateToPortrait">
      <summary>
        <para>Allow auto-rotation to portrait?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Screen.autorotateToPortraitUpsideDown">
      <summary>
        <para>Allow auto-rotation to portrait, upside down?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Screen.brightness">
      <summary>
        <para>The current brightness of the screen.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Screen.currentResolution">
      <summary>
        <para>The current screen resolution (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Screen.cutouts">
      <summary>
        <para>Returns a list of screen areas that are not functional for displaying content (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Screen.dpi">
      <summary>
        <para>The current DPI of the screen / device (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Screen.fullScreen">
      <summary>
        <para>Is the game running full-screen?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Screen.fullScreenMode">
      <summary>
        <para>Set this property to one of the values in FullScreenMode to change the display mode of your application.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Screen.height">
      <summary>
        <para>The current height of the screen window in pixels (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Screen.lockCursor">
      <summary>
        <para>Should the cursor be locked?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Screen.orientation">
      <summary>
        <para>Specifies logical orientation of the screen.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Screen.resolutions">
      <summary>
        <para>All full-screen resolutions supported by the monitor (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Screen.safeArea">
      <summary>
        <para>Returns the safe area of the screen in pixels (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Screen.showCursor">
      <summary>
        <para>Should the cursor be visible?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Screen.sleepTimeout">
      <summary>
        <para>A power saving setting, allowing the screen to dim some time after the last active user interaction.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Screen.width">
      <summary>
        <para>The current width of the screen window in pixels (Read Only).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Screen.SetResolution(System.Int32,System.Int32,System.Boolean)">
      <summary>
        <para>Switches the screen resolution.</para>
      </summary>
      <param name="width"></param>
      <param name="height"></param>
      <param name="fullscreen"></param>
      <param name="preferredRefreshRate"></param>
      <param name="fullscreenMode"></param>
    </member>
    <member name="M:UnityEngine.Screen.SetResolution(System.Int32,System.Int32,System.Boolean,System.Int32)">
      <summary>
        <para>Switches the screen resolution.</para>
      </summary>
      <param name="width"></param>
      <param name="height"></param>
      <param name="fullscreen"></param>
      <param name="preferredRefreshRate"></param>
      <param name="fullscreenMode"></param>
    </member>
    <member name="M:UnityEngine.Screen.SetResolution(System.Int32,System.Int32,UnityEngine.FullScreenMode,System.Int32)">
      <summary>
        <para>Switches the screen resolution.</para>
      </summary>
      <param name="width"></param>
      <param name="height"></param>
      <param name="fullscreen"></param>
      <param name="preferredRefreshRate"></param>
      <param name="fullscreenMode"></param>
    </member>
    <member name="T:UnityEngine.ScreenOrientation">
      <summary>
        <para>Describes screen orientation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ScreenOrientation.AutoRotation">
      <summary>
        <para>Auto-rotates the screen as necessary toward any of the enabled orientations.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ScreenOrientation.LandscapeLeft">
      <summary>
        <para>Landscape orientation, counter-clockwise from the portrait orientation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ScreenOrientation.LandscapeRight">
      <summary>
        <para>Landscape orientation, clockwise from the portrait orientation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ScreenOrientation.Portrait">
      <summary>
        <para>Portrait orientation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ScreenOrientation.PortraitUpsideDown">
      <summary>
        <para>Portrait orientation, upside down.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ScriptableObject">
      <summary>
        <para>A class you can derive from if you want to create objects that don't need to be attached to game objects.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ScriptableObject.CreateInstance(System.String)">
      <summary>
        <para>Creates an instance of a scriptable object.</para>
      </summary>
      <param name="className">The type of the ScriptableObject to create, as the name of the type.</param>
      <param name="type">The type of the ScriptableObject to create, as a System.Type instance.</param>
      <returns>
        <para>The created ScriptableObject.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.ScriptableObject.CreateInstance(System.Type)">
      <summary>
        <para>Creates an instance of a scriptable object.</para>
      </summary>
      <param name="className">The type of the ScriptableObject to create, as the name of the type.</param>
      <param name="type">The type of the ScriptableObject to create, as a System.Type instance.</param>
      <returns>
        <para>The created ScriptableObject.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.ScriptableObject.CreateInstance">
      <summary>
        <para>Creates an instance of a scriptable object.</para>
      </summary>
      <returns>
        <para>The created ScriptableObject.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Scripting.AlwaysLinkAssemblyAttribute">
      <summary>
        <para>Ensure an assembly is always processed during managed code stripping.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Scripting.GarbageCollector">
      <summary>
        <para>API to control the garbage collector on the Mono and IL2CPP scripting backends.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Scripting.GarbageCollector.incrementalTimeSliceNanoseconds">
      <summary>
        <para>The target duration of a collection step when performing incremental garbage collection.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Scripting.GarbageCollector.isIncremental">
      <summary>
        <para>Reports whether incremental garbage collection is enabled.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Scripting.GarbageCollector.CollectIncremental(System.UInt64)">
      <summary>
        <para>Perform incremental garbage collection for the duration specified by the nanoseconds parameter.</para>
      </summary>
      <param name="nanoseconds">The maximum number of nanoseconds to spend in garbage collection.</param>
      <returns>
        <para>Returns true if additional garbage collection work remains when the method returns and false if garbage collection is complete. Also returns false if incremental garbage collection is not enabled or is not supported on the current platform.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.Scripting.GarbageCollector.GCMode">
      <summary>
        <para>Set and get global garbage collector operation mode.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Scripting.GarbageCollector.GCModeChanged(System.Action`1&lt;UnityEngine.Scripting.GarbageCollector/Mode&gt;)">
      <summary>
        <para>Subscribe to this event to get notified when GarbageCollector.GCMode changes.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="T:UnityEngine.Scripting.GarbageCollector.Mode">
      <summary>
        <para>Garbage collector operation mode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Scripting.GarbageCollector.Mode.Disabled">
      <summary>
        <para>Disable garbage collector.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Scripting.GarbageCollector.Mode.Enabled">
      <summary>
        <para>Enable garbage collector.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Scripting.GarbageCollector.Mode.Manual">
      <summary>
        <para>Disable automatic invokations of the garbage collector, but allow manually invokations.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Scripting.PreserveAttribute">
      <summary>
        <para>PreserveAttribute prevents byte code stripping from removing a class, method, field, or property.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Scripting.RequireAttributeUsagesAttribute">
      <summary>
        <para>Only allowed on attribute types. If the attribute type is marked, then so too will all CustomAttributes of that type.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Scripting.RequireDerivedAttribute">
      <summary>
        <para>When the type is marked, all types derived from that type will also be marked.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Scripting.RequiredInterfaceAttribute">
      <summary>
        <para>When a type is marked, all interface implementations of the specified types will be marked.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Scripting.RequiredMemberAttribute">
      <summary>
        <para>When a type is marked, all of it's members with [RequiredMember] will be marked.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Scripting.RequireImplementorsAttribute">
      <summary>
        <para>When the interface type is marked, all types implementing that interface will be marked.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SearchService.ObjectSelectorHandlerWithLabelsAttribute">
      <summary>
        <para>A class attribute that allows you to define label constraints on a MonoBehavior or ScriptableObject's field in the object selector.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SearchService.ObjectSelectorHandlerWithLabelsAttribute.labels">
      <summary>
        <para>The labels to match.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SearchService.ObjectSelectorHandlerWithLabelsAttribute.matchAll">
      <summary>
        <para>Boolean that indicates whether all labels, or only one of them, should match. Default is true.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SearchService.ObjectSelectorHandlerWithLabelsAttribute.#ctor(System.String[])">
      <summary>
        <para>Constructor used to declare the SearchService.ObjectSelectorHandlerWithLabelsAttribute on a field.</para>
      </summary>
      <param name="labels">An array of strings that represents the different labels to use as constraints.</param>
      <param name="matchAll">This parameter specifies whether all labels must match, or only one of them must be present.</param>
    </member>
    <member name="M:UnityEngine.SearchService.ObjectSelectorHandlerWithLabelsAttribute.#ctor(System.Boolean,System.String[])">
      <summary>
        <para>Constructor used to declare the SearchService.ObjectSelectorHandlerWithLabelsAttribute on a field.</para>
      </summary>
      <param name="labels">An array of strings that represents the different labels to use as constraints.</param>
      <param name="matchAll">This parameter specifies whether all labels must match, or only one of them must be present.</param>
    </member>
    <member name="T:UnityEngine.SearchService.ObjectSelectorHandlerWithTagsAttribute">
      <summary>
        <para>A class attribute that allows you to define tag constraints on a MonoBehavior or ScriptableObject's field in the object selector.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SearchService.ObjectSelectorHandlerWithTagsAttribute.tags">
      <summary>
        <para>The tags to match. Because a GameObject can only have one tag, only one of them must be present.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SearchService.ObjectSelectorHandlerWithTagsAttribute.#ctor(System.String[])">
      <summary>
        <para>Constructor used to declare the SearchService.ObjectSelectorHandlerWithTagsAttribute on a field.</para>
      </summary>
      <param name="tags">An array of strings that represents the different tags to use as constraints.</param>
    </member>
    <member name="T:UnityEngine.SecondarySpriteTexture">
      <summary>
        <para>Encapsulates a Texture2D and its shader property name to give Sprite-based renderers access to a secondary texture, in addition to the main Sprite texture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SecondarySpriteTexture.name">
      <summary>
        <para>The shader property name of the secondary Sprite texture. Use this name to identify and sample the texture in the shader.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SecondarySpriteTexture.texture">
      <summary>
        <para>The texture to be used as a secondary Sprite texture.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Security">
      <summary>
        <para>Webplayer security related class. Not supported from 5.4.0 onwards.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Security.LoadAndVerifyAssembly(System.Byte[],System.String)">
      <summary>
        <para>Loads an assembly and checks that it is allowed to be used in the webplayer. (Web Player is no Longer Supported).</para>
      </summary>
      <param name="assemblyData">Assembly to verify.</param>
      <param name="authorizationKey">Public key used to verify assembly.</param>
      <returns>
        <para>Loaded, verified, assembly, or null if the assembly cannot be verfied.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Security.LoadAndVerifyAssembly(System.Byte[])">
      <summary>
        <para>Loads an assembly and checks that it is allowed to be used in the webplayer. (Web Player is no Longer Supported).</para>
      </summary>
      <param name="assemblyData">Assembly to verify.</param>
      <param name="authorizationKey">Public key used to verify assembly.</param>
      <returns>
        <para>Loaded, verified, assembly, or null if the assembly cannot be verfied.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Security.PrefetchSocketPolicy(System.String,System.Int32)">
      <summary>
        <para>Prefetch the webplayer socket security policy from a non-default port number.</para>
      </summary>
      <param name="ip">IP address of server.</param>
      <param name="atPort">Port from where socket policy is read.</param>
      <param name="timeout">Time to wait for response.</param>
    </member>
    <member name="M:UnityEngine.Security.PrefetchSocketPolicy(System.String,System.Int32,System.Int32)">
      <summary>
        <para>Prefetch the webplayer socket security policy from a non-default port number.</para>
      </summary>
      <param name="ip">IP address of server.</param>
      <param name="atPort">Port from where socket policy is read.</param>
      <param name="timeout">Time to wait for response.</param>
    </member>
    <member name="T:UnityEngine.SelectionBaseAttribute">
      <summary>
        <para>Add this attribute to a script class to mark its GameObject as a selection base object for Scene View picking.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SendMessageOptions">
      <summary>
        <para>Options for how to send a message.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SendMessageOptions.DontRequireReceiver">
      <summary>
        <para>No receiver is required for SendMessage.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SendMessageOptions.RequireReceiver">
      <summary>
        <para>A receiver is required for SendMessage.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Serialization.FormerlySerializedAsAttribute">
      <summary>
        <para>Use this attribute to rename a field without losing its serialized value.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Serialization.FormerlySerializedAsAttribute.oldName">
      <summary>
        <para>The name of the field before the rename.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Serialization.FormerlySerializedAsAttribute.#ctor(System.String)">
      <summary>
        <para></para>
      </summary>
      <param name="oldName">The name of the field before renaming.</param>
    </member>
    <member name="T:UnityEngine.SerializeField">
      <summary>
        <para>Force Unity to serialize a private field.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SerializeReference">
      <summary>
        <para>Instruct Unity to serialize a field as a reference.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Shader">
      <summary>
        <para>Shader scripts used for all rendering.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Shader.globalMaximumLOD">
      <summary>
        <para>Shader LOD level for all shaders.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Shader.globalRenderPipeline">
      <summary>
        <para>Render pipeline currently in use.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Shader.globalShaderHardwareTier">
      <summary>
        <para>Shader hardware tier classification for current device.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Shader.isSupported">
      <summary>
        <para>Can this shader run on the end-users graphics card? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Shader.maximumLOD">
      <summary>
        <para>Shader LOD level for this shader.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Shader.passCount">
      <summary>
        <para>Returns the number of shader passes on the active SubShader.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Shader.renderQueue">
      <summary>
        <para>Render queue of this shader. (Read Only)</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Shader.DisableKeyword(System.String)">
      <summary>
        <para>Unset a global shader keyword.</para>
      </summary>
      <param name="keyword"></param>
    </member>
    <member name="M:UnityEngine.Shader.EnableKeyword(System.String)">
      <summary>
        <para>Set a global shader keyword.</para>
      </summary>
      <param name="keyword"></param>
    </member>
    <member name="M:UnityEngine.Shader.Find(System.String)">
      <summary>
        <para>Finds a shader with the given name.</para>
      </summary>
      <param name="name"></param>
    </member>
    <member name="M:UnityEngine.Shader.FindPassTagValue(System.Int32,UnityEngine.Rendering.ShaderTagId)">
      <summary>
        <para>Search for the pass tag specified by tagName on the shader's active SubShader and returns the value of the tag.</para>
      </summary>
      <param name="passIndex">The index of the pass.</param>
      <param name="tagName">The name of the pass tag.</param>
    </member>
    <member name="M:UnityEngine.Shader.FindPropertyIndex(System.String)">
      <summary>
        <para>Finds the index of a shader property by its name.</para>
      </summary>
      <param name="propertyName">The name of the shader property.</param>
    </member>
    <member name="M:UnityEngine.Shader.FindTextureStack(System.Int32,System.String&amp;,System.Int32&amp;)">
      <summary>
        <para>Find the name of a texture stack a texture belongs too.</para>
      </summary>
      <param name="propertyIndex">Index of the property.</param>
      <param name="stackName">On exit, contanis the name of the stack if one was found.</param>
      <param name="layerIndex">On exit, contains the stack layer index of the texture property.</param>
      <returns>
        <para>True, if a stack was found for the given texture property, false if not.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Shader.GetDependency(System.String)">
      <summary>
        <para>Returns the dependency shader.</para>
      </summary>
      <param name="name">The name of the dependency to query.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetGlobalColor(System.String)">
      <summary>
        <para>Gets a global color property for all shaders previously set using SetGlobalColor.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetGlobalColor(System.Int32)">
      <summary>
        <para>Gets a global color property for all shaders previously set using SetGlobalColor.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetGlobalFloat(System.String)">
      <summary>
        <para>Gets a global float property for all shaders previously set using SetGlobalFloat.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetGlobalFloat(System.Int32)">
      <summary>
        <para>Gets a global float property for all shaders previously set using SetGlobalFloat.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetGlobalFloatArray(System.String)">
      <summary>
        <para>Gets a global float array for all shaders previously set using SetGlobalFloatArray.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetGlobalFloatArray(System.Int32)">
      <summary>
        <para>Gets a global float array for all shaders previously set using SetGlobalFloatArray.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetGlobalFloatArray(System.String,System.Collections.Generic.List`1&lt;System.Single&gt;)">
      <summary>
        <para>Fetches a global float array into a list.</para>
      </summary>
      <param name="values">The list to hold the returned array.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetGlobalFloatArray(System.Int32,System.Collections.Generic.List`1&lt;System.Single&gt;)">
      <summary>
        <para>Fetches a global float array into a list.</para>
      </summary>
      <param name="values">The list to hold the returned array.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetGlobalInt(System.String)">
      <summary>
        <para>Gets a global int property for all shaders previously set using SetGlobalInt.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetGlobalInt(System.Int32)">
      <summary>
        <para>Gets a global int property for all shaders previously set using SetGlobalInt.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetGlobalMatrix(System.String)">
      <summary>
        <para>Gets a global matrix property for all shaders previously set using SetGlobalMatrix.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetGlobalMatrix(System.Int32)">
      <summary>
        <para>Gets a global matrix property for all shaders previously set using SetGlobalMatrix.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetGlobalMatrixArray(System.String)">
      <summary>
        <para>Gets a global matrix array for all shaders previously set using SetGlobalMatrixArray.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetGlobalMatrixArray(System.Int32)">
      <summary>
        <para>Gets a global matrix array for all shaders previously set using SetGlobalMatrixArray.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetGlobalMatrixArray(System.String,System.Collections.Generic.List`1&lt;UnityEngine.Matrix4x4&gt;)">
      <summary>
        <para>Fetches a global matrix array into a list.</para>
      </summary>
      <param name="values">The list to hold the returned array.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetGlobalMatrixArray(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.Matrix4x4&gt;)">
      <summary>
        <para>Fetches a global matrix array into a list.</para>
      </summary>
      <param name="values">The list to hold the returned array.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetGlobalTexture(System.String)">
      <summary>
        <para>Gets a global texture property for all shaders previously set using SetGlobalTexture.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetGlobalTexture(System.Int32)">
      <summary>
        <para>Gets a global texture property for all shaders previously set using SetGlobalTexture.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetGlobalVector(System.String)">
      <summary>
        <para>Gets a global vector property for all shaders previously set using SetGlobalVector.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetGlobalVector(System.Int32)">
      <summary>
        <para>Gets a global vector property for all shaders previously set using SetGlobalVector.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetGlobalVectorArray(System.String)">
      <summary>
        <para>Gets a global vector array for all shaders previously set using SetGlobalVectorArray.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetGlobalVectorArray(System.Int32)">
      <summary>
        <para>Gets a global vector array for all shaders previously set using SetGlobalVectorArray.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetGlobalVectorArray(System.String,System.Collections.Generic.List`1&lt;UnityEngine.Vector4&gt;)">
      <summary>
        <para>Fetches a global vector array into a list.</para>
      </summary>
      <param name="values">The list to hold the returned array.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetGlobalVectorArray(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.Vector4&gt;)">
      <summary>
        <para>Fetches a global vector array into a list.</para>
      </summary>
      <param name="values">The list to hold the returned array.</param>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetPropertyAttributes(System.Int32)">
      <summary>
        <para>Returns an array of strings containing attributes of the shader property at the specified index.</para>
      </summary>
      <param name="propertyIndex">The index of the shader property.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetPropertyCount">
      <summary>
        <para>Returns the number of properties in this Shader.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Shader.GetPropertyDefaultFloatValue(System.Int32)">
      <summary>
        <para>Returns the default float value of the shader property at the specified index.</para>
      </summary>
      <param name="propertyIndex">The index of the shader property.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetPropertyDefaultVectorValue(System.Int32)">
      <summary>
        <para>Returns the default Vector4 value of the shader property at the specified index.</para>
      </summary>
      <param name="propertyIndex">The index of the shader property.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetPropertyDescription(System.Int32)">
      <summary>
        <para>Returns the description string of the shader property at the specified index.</para>
      </summary>
      <param name="propertyIndex">The index of the shader property.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetPropertyFlags(System.Int32)">
      <summary>
        <para>Returns the ShaderPropertyFlags of the shader property at the specified index.</para>
      </summary>
      <param name="propertyIndex">The index of the shader property.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetPropertyName(System.Int32)">
      <summary>
        <para>Returns the name of the shader property at the specified index.</para>
      </summary>
      <param name="propertyIndex">The index of the shader property.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetPropertyNameId(System.Int32)">
      <summary>
        <para>Returns the nameId of the shader property at the specified index.</para>
      </summary>
      <param name="propertyIndex">The index of the shader property.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetPropertyRangeLimits(System.Int32)">
      <summary>
        <para>Returns the min and max limits for a &lt;a href="Rendering.ShaderPropertyType.Range.html"&gt;Range&lt;/a&gt; property at the specified index.</para>
      </summary>
      <param name="propertyIndex">The index of the shader property.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetPropertyTextureDefaultName(System.Int32)">
      <summary>
        <para>Returns the default Texture name of a &lt;a href="Rendering.ShaderPropertyType.Texture.html"&gt;Texture&lt;/a&gt; shader property at the specified index.</para>
      </summary>
      <param name="propertyIndex">The index of the shader property.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetPropertyTextureDimension(System.Int32)">
      <summary>
        <para>Returns the TextureDimension of a &lt;a href="Rendering.ShaderPropertyType.Texture.html"&gt;Texture&lt;/a&gt; shader property at the specified index.</para>
      </summary>
      <param name="propertyIndex">The index of the shader property.</param>
    </member>
    <member name="M:UnityEngine.Shader.GetPropertyType(System.Int32)">
      <summary>
        <para>Returns the ShaderPropertyType of the property at the specified index.</para>
      </summary>
      <param name="propertyIndex">The index of the shader property.</param>
    </member>
    <member name="M:UnityEngine.Shader.IsKeywordEnabled(System.String)">
      <summary>
        <para>Is global shader keyword enabled?</para>
      </summary>
      <param name="keyword"></param>
    </member>
    <member name="M:UnityEngine.Shader.PropertyToID(System.String)">
      <summary>
        <para>Gets unique identifier for a shader property name.</para>
      </summary>
      <param name="name">Shader property name.</param>
      <returns>
        <para>Unique integer for the name.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalBuffer(System.String,UnityEngine.ComputeBuffer)">
      <summary>
        <para>Sets a global buffer property for all shaders.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="value">The buffer to set.</param>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalBuffer(System.Int32,UnityEngine.ComputeBuffer)">
      <summary>
        <para>Sets a global buffer property for all shaders.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="value">The buffer to set.</param>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalBuffer(System.String,UnityEngine.GraphicsBuffer)">
      <summary>
        <para>Sets a global buffer property for all shaders.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="value">The buffer to set.</param>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalBuffer(System.Int32,UnityEngine.GraphicsBuffer)">
      <summary>
        <para>Sets a global buffer property for all shaders.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="value">The buffer to set.</param>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalColor(System.String,UnityEngine.Color)">
      <summary>
        <para>Sets a global color property for all shaders.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalColor(System.Int32,UnityEngine.Color)">
      <summary>
        <para>Sets a global color property for all shaders.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalConstantBuffer(System.String,UnityEngine.ComputeBuffer,System.Int32,System.Int32)">
      <summary>
        <para>Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for all shader types.</para>
      </summary>
      <param name="nameID">The name ID of the constant buffer retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the constant buffer to override.</param>
      <param name="value">The buffer to override the constant buffer values with, or null to remove binding.</param>
      <param name="offset">Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.</param>
      <param name="size">The number of bytes to bind.</param>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalConstantBuffer(System.Int32,UnityEngine.ComputeBuffer,System.Int32,System.Int32)">
      <summary>
        <para>Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for all shader types.</para>
      </summary>
      <param name="nameID">The name ID of the constant buffer retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the constant buffer to override.</param>
      <param name="value">The buffer to override the constant buffer values with, or null to remove binding.</param>
      <param name="offset">Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.</param>
      <param name="size">The number of bytes to bind.</param>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalConstantBuffer(System.String,UnityEngine.GraphicsBuffer,System.Int32,System.Int32)">
      <summary>
        <para>Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for all shader types.</para>
      </summary>
      <param name="nameID">The name ID of the constant buffer retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the constant buffer to override.</param>
      <param name="value">The buffer to override the constant buffer values with, or null to remove binding.</param>
      <param name="offset">Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.</param>
      <param name="size">The number of bytes to bind.</param>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalConstantBuffer(System.Int32,UnityEngine.GraphicsBuffer,System.Int32,System.Int32)">
      <summary>
        <para>Sets a ComputeBuffer or GraphicsBuffer as a named constant buffer for all shader types.</para>
      </summary>
      <param name="nameID">The name ID of the constant buffer retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the constant buffer to override.</param>
      <param name="value">The buffer to override the constant buffer values with, or null to remove binding.</param>
      <param name="offset">Offset in bytes from the beginning of the buffer to bind. Must be a multiple of SystemInfo.constantBufferOffsetAlignment, or 0 if that value is 0.</param>
      <param name="size">The number of bytes to bind.</param>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalFloat(System.String,System.Single)">
      <summary>
        <para>Sets a global float property for all shaders.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalFloat(System.Int32,System.Single)">
      <summary>
        <para>Sets a global float property for all shaders.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalFloatArray(System.String,System.Single[])">
      <summary>
        <para>Sets a global float array property for all shaders.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="values"></param>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalFloatArray(System.Int32,System.Single[])">
      <summary>
        <para>Sets a global float array property for all shaders.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="values"></param>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalFloatArray(System.String,System.Collections.Generic.List`1&lt;System.Single&gt;)">
      <summary>
        <para>Sets a global float array property for all shaders.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="values"></param>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalFloatArray(System.Int32,System.Collections.Generic.List`1&lt;System.Single&gt;)">
      <summary>
        <para>Sets a global float array property for all shaders.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="values"></param>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalInt(System.String,System.Int32)">
      <summary>
        <para>Sets a global int property for all shaders.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalInt(System.Int32,System.Int32)">
      <summary>
        <para>Sets a global int property for all shaders.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalMatrix(System.String,UnityEngine.Matrix4x4)">
      <summary>
        <para>Sets a global matrix property for all shaders.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalMatrix(System.Int32,UnityEngine.Matrix4x4)">
      <summary>
        <para>Sets a global matrix property for all shaders.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalMatrixArray(System.String,UnityEngine.Matrix4x4[])">
      <summary>
        <para>Sets a global matrix array property for all shaders.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="values"></param>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalMatrixArray(System.Int32,UnityEngine.Matrix4x4[])">
      <summary>
        <para>Sets a global matrix array property for all shaders.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="values"></param>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalMatrixArray(System.String,System.Collections.Generic.List`1&lt;UnityEngine.Matrix4x4&gt;)">
      <summary>
        <para>Sets a global matrix array property for all shaders.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="values"></param>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalMatrixArray(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.Matrix4x4&gt;)">
      <summary>
        <para>Sets a global matrix array property for all shaders.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="values"></param>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalTexture(System.String,UnityEngine.Texture)">
      <summary>
        <para>Sets a global texture property for all shaders.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="value">The texture to set.</param>
      <param name="element">Optional parameter that specifies the type of data to set from the RenderTexture.</param>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalTexture(System.Int32,UnityEngine.Texture)">
      <summary>
        <para>Sets a global texture property for all shaders.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="value">The texture to set.</param>
      <param name="element">Optional parameter that specifies the type of data to set from the RenderTexture.</param>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalTexture(System.String,UnityEngine.RenderTexture,UnityEngine.Rendering.RenderTextureSubElement)">
      <summary>
        <para>Sets a global texture property for all shaders.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="value">The texture to set.</param>
      <param name="element">Optional parameter that specifies the type of data to set from the RenderTexture.</param>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalTexture(System.Int32,UnityEngine.RenderTexture,UnityEngine.Rendering.RenderTextureSubElement)">
      <summary>
        <para>Sets a global texture property for all shaders.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="value">The texture to set.</param>
      <param name="element">Optional parameter that specifies the type of data to set from the RenderTexture.</param>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalVector(System.String,UnityEngine.Vector4)">
      <summary>
        <para>Sets a global vector property for all shaders.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalVector(System.Int32,UnityEngine.Vector4)">
      <summary>
        <para>Sets a global vector property for all shaders.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalVectorArray(System.String,UnityEngine.Vector4[])">
      <summary>
        <para>Sets a global vector array property for all shaders.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="values"></param>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalVectorArray(System.Int32,UnityEngine.Vector4[])">
      <summary>
        <para>Sets a global vector array property for all shaders.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="values"></param>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalVectorArray(System.String,System.Collections.Generic.List`1&lt;UnityEngine.Vector4&gt;)">
      <summary>
        <para>Sets a global vector array property for all shaders.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="values"></param>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalVectorArray(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.Vector4&gt;)">
      <summary>
        <para>Sets a global vector array property for all shaders.</para>
      </summary>
      <param name="nameID">The name ID of the property retrieved by Shader.PropertyToID.</param>
      <param name="name">The name of the property.</param>
      <param name="values"></param>
    </member>
    <member name="M:UnityEngine.Shader.WarmupAllShaders">
      <summary>
        <para>Prewarms all shader variants of all Shaders currently in memory.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ShaderVariantCollection">
      <summary>
        <para>ShaderVariantCollection records which shader variants are actually used in each shader.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ShaderVariantCollection.isWarmedUp">
      <summary>
        <para>Is this ShaderVariantCollection already warmed up? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ShaderVariantCollection.shaderCount">
      <summary>
        <para>Number of shaders in this collection (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ShaderVariantCollection.variantCount">
      <summary>
        <para>Number of total varians in this collection (Read Only).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ShaderVariantCollection.Add(UnityEngine.ShaderVariantCollection/ShaderVariant)">
      <summary>
        <para>Adds a new shader variant to the collection.</para>
      </summary>
      <param name="variant">Shader variant to add.</param>
      <returns>
        <para>False if already in the collection.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.ShaderVariantCollection.Clear">
      <summary>
        <para>Remove all shader variants from the collection.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ShaderVariantCollection.Contains(UnityEngine.ShaderVariantCollection/ShaderVariant)">
      <summary>
        <para>Checks if a shader variant is in the collection.</para>
      </summary>
      <param name="variant">Shader variant to check.</param>
      <returns>
        <para>True if the variant is in the collection.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.ShaderVariantCollection.#ctor">
      <summary>
        <para>Create a new empty shader variant collection.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ShaderVariantCollection.Remove(UnityEngine.ShaderVariantCollection/ShaderVariant)">
      <summary>
        <para>Adds shader variant from the collection.</para>
      </summary>
      <param name="variant">Shader variant to add.</param>
      <returns>
        <para>False if was not in the collection.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.ShaderVariantCollection.ShaderVariant">
      <summary>
        <para>Identifies a specific variant of a shader.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ShaderVariantCollection.ShaderVariant.keywords">
      <summary>
        <para>Array of shader keywords to use in this variant.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ShaderVariantCollection.ShaderVariant.passType">
      <summary>
        <para>Pass type to use in this variant.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ShaderVariantCollection.ShaderVariant.shader">
      <summary>
        <para>Shader to use in this variant.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ShaderVariantCollection.ShaderVariant.#ctor(UnityEngine.Shader,UnityEngine.Rendering.PassType,System.String[])">
      <summary>
        <para>Creates a ShaderVariant structure.</para>
      </summary>
      <param name="shader"></param>
      <param name="passType"></param>
      <param name="keywords"></param>
    </member>
    <member name="M:UnityEngine.ShaderVariantCollection.WarmUp">
      <summary>
        <para>Prewarms all shader variants in this shader variant collection.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ShadowmaskMode">
      <summary>
        <para>The rendering mode of Shadowmask.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ShadowmaskMode.DistanceShadowmask">
      <summary>
        <para>Static shadow casters will be rendered into realtime shadow maps. Shadowmasks and occlusion from Light Probes will only be used past the realtime shadow distance.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ShadowmaskMode.Shadowmask">
      <summary>
        <para>Static shadow casters won't be rendered into realtime shadow maps. All shadows from static casters are handled via Shadowmasks and occlusion from Light Probes.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ShadowProjection">
      <summary>
        <para>Shadow projection type for.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ShadowProjection.CloseFit">
      <summary>
        <para>Close fit shadow maps with linear fadeout.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ShadowProjection.StableFit">
      <summary>
        <para>Stable shadow maps with spherical fadeout.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ShadowQuality">
      <summary>
        <para>Determines which type of shadows should be used.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ShadowQuality.All">
      <summary>
        <para>Hard and Soft Shadows.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ShadowQuality.Disable">
      <summary>
        <para>Disable Shadows.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ShadowQuality.HardOnly">
      <summary>
        <para>Hard Shadows Only.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ShadowResolution">
      <summary>
        <para>Default shadow resolution.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ShadowResolution.High">
      <summary>
        <para>High shadow map resolution.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ShadowResolution.Low">
      <summary>
        <para>Low shadow map resolution.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ShadowResolution.Medium">
      <summary>
        <para>Medium shadow map resolution.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ShadowResolution.VeryHigh">
      <summary>
        <para>Very high shadow map resolution.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SkinnedMeshRenderer">
      <summary>
        <para>The Skinned Mesh filter.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SkinnedMeshRenderer.bones">
      <summary>
        <para>The bones used to skin the mesh.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SkinnedMeshRenderer.forceMatrixRecalculationPerRender">
      <summary>
        <para>Forces the Skinned Mesh to recalculate its matricies when rendered</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SkinnedMeshRenderer.localBounds">
      <summary>
        <para>AABB of this Skinned Mesh in its local space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SkinnedMeshRenderer.quality">
      <summary>
        <para>The maximum number of bones per vertex that are taken into account during skinning.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SkinnedMeshRenderer.sharedMesh">
      <summary>
        <para>The mesh used for skinning.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SkinnedMeshRenderer.skinnedMotionVectors">
      <summary>
        <para>Specifies whether skinned motion vectors should be used for this renderer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SkinnedMeshRenderer.updateWhenOffscreen">
      <summary>
        <para>If enabled, the Skinned Mesh will be updated when offscreen. If disabled, this also disables updating animations.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SkinnedMeshRenderer.BakeMesh(UnityEngine.Mesh)">
      <summary>
        <para>Creates a snapshot of SkinnedMeshRenderer and stores it in mesh.</para>
      </summary>
      <param name="mesh">A static mesh that will receive the snapshot of the skinned mesh.</param>
      <param name="useScale">Whether to use the SkinnedMeshRenderer's Transform scale when baking the Mesh. If this is true, Unity bakes the Mesh using the position, rotation, and scale values from the SkinnedMeshRenderer's Transform. If this is false, Unity bakes the Mesh using the position and rotation values from the SkinnedMeshRenderer's Transform, but without using the scale value from the SkinnedMeshRenderer's Transform. The default value is false.</param>
    </member>
    <member name="M:UnityEngine.SkinnedMeshRenderer.BakeMesh(UnityEngine.Mesh,System.Boolean)">
      <summary>
        <para>Creates a snapshot of SkinnedMeshRenderer and stores it in mesh.</para>
      </summary>
      <param name="mesh">A static mesh that will receive the snapshot of the skinned mesh.</param>
      <param name="useScale">Whether to use the SkinnedMeshRenderer's Transform scale when baking the Mesh. If this is true, Unity bakes the Mesh using the position, rotation, and scale values from the SkinnedMeshRenderer's Transform. If this is false, Unity bakes the Mesh using the position and rotation values from the SkinnedMeshRenderer's Transform, but without using the scale value from the SkinnedMeshRenderer's Transform. The default value is false.</param>
    </member>
    <member name="M:UnityEngine.SkinnedMeshRenderer.GetBlendShapeWeight(System.Int32)">
      <summary>
        <para>Returns the weight of a BlendShape for this Renderer.</para>
      </summary>
      <param name="index">The index of the BlendShape whose weight you want to retrieve. Index must be smaller than the Mesh.blendShapeCount of the Mesh attached to this Renderer.</param>
      <returns>
        <para>The weight of the BlendShape.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SkinnedMeshRenderer.SetBlendShapeWeight(System.Int32,System.Single)">
      <summary>
        <para>Sets the weight of a BlendShape for this Renderer.</para>
      </summary>
      <param name="index">The index of the BlendShape to modify. Index must be smaller than the Mesh.blendShapeCount of the Mesh attached to this Renderer.</param>
      <param name="value">The weight for this BlendShape.</param>
    </member>
    <member name="T:UnityEngine.SkinQuality">
      <summary>
        <para>The maximum number of bones affecting a single vertex.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SkinQuality.Auto">
      <summary>
        <para>Chooses the number of bones from the number current QualitySettings. (Default)</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SkinQuality.Bone1">
      <summary>
        <para>Use only 1 bone to deform a single vertex. (The most important bone will be used).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SkinQuality.Bone2">
      <summary>
        <para>Use 2 bones to deform a single vertex. (The most important bones will be used).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SkinQuality.Bone4">
      <summary>
        <para>Use 4 bones to deform a single vertex.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SkinWeights">
      <summary>
        <para>Skin weights.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SkinWeights.FourBones">
      <summary>
        <para>Four bones affect each vertex.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SkinWeights.OneBone">
      <summary>
        <para>One bone affects each vertex.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SkinWeights.TwoBones">
      <summary>
        <para>Two bones affect each vertex.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SkinWeights.Unlimited">
      <summary>
        <para>An unlimited number of bones affect each vertex.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Skybox">
      <summary>
        <para>A script interface for the.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Skybox.material">
      <summary>
        <para>The material used by the skybox.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SleepTimeout">
      <summary>
        <para>Constants for special values of Screen.sleepTimeout.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SleepTimeout.NeverSleep">
      <summary>
        <para>Prevent screen dimming.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SleepTimeout.SystemSetting">
      <summary>
        <para>Set the sleep timeout to whatever the user has specified in the system settings.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SnapAxis">
      <summary>
        <para>Defines the axes that can be snapped.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SnapAxis.All">
      <summary>
        <para>Snapping is available on all axes: x, y, and z.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SnapAxis.None">
      <summary>
        <para>No axes support snapping.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SnapAxis.X">
      <summary>
        <para>Snapping is available only on the \x\ axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SnapAxis.Y">
      <summary>
        <para>Snapping is available only on the \y\ axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SnapAxis.Z">
      <summary>
        <para>Snapping is available only on the \z\ axis.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Snapping">
      <summary>
        <para>Snap values to rounded increments.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Snapping.Snap(System.Single,System.Single)">
      <summary>
        <para>Rounds value to the closest multiple of snap.</para>
      </summary>
      <param name="val">The value to round.</param>
      <param name="snap">The increment to round to.</param>
      <returns>
        <para>The rounded value.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Snapping.Snap(UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Rounds value to the closest multiple of snap.</para>
      </summary>
      <param name="val">The value to round.</param>
      <param name="snap">The increment to round to.</param>
      <returns>
        <para>The rounded value.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Snapping.Snap(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.SnapAxis)">
      <summary>
        <para>Rounds value to the closest multiple of snap.</para>
      </summary>
      <param name="val">The value to round.</param>
      <param name="snap">The increment to round to.</param>
      <param name="axis">Restrict snapping to the components on these axes.</param>
      <returns>
        <para>The rounded value.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.SortingLayer">
      <summary>
        <para>SortingLayer allows you to set the render order of multiple sprites easily. There is always a default SortingLayer named "Default" which all sprites are added to initially. Added more SortingLayers to easily control the order of rendering of groups of sprites. Layers can be ordered before or after the default layer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SortingLayer.id">
      <summary>
        <para>This is the unique id assigned to the layer. It is not an ordered running value and it should not be used to compare with other layers to determine the sorting order.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SortingLayer.layers">
      <summary>
        <para>Returns all the layers defined in this project.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SortingLayer.name">
      <summary>
        <para>Returns the name of the layer as defined in the TagManager.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SortingLayer.value">
      <summary>
        <para>This is the relative value that indicates the sort order of this layer relative to the other layers.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SortingLayer.GetLayerValueFromID(System.Int32)">
      <summary>
        <para>Returns the final sorting layer value. To determine the sorting order between the various sorting layers, use this method to retrieve the final sorting value and use CompareTo to determine the order.</para>
      </summary>
      <param name="id">The unique value of the sorting layer as returned by any renderer's sortingLayerID property.</param>
      <returns>
        <para>The final sorting value of the layer relative to other layers.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SortingLayer.GetLayerValueFromName(System.String)">
      <summary>
        <para>Returns the final sorting layer value. See Also: GetLayerValueFromID.</para>
      </summary>
      <param name="name">The unique value of the sorting layer as returned by any renderer's sortingLayerID property.</param>
      <returns>
        <para>The final sorting value of the layer relative to other layers.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SortingLayer.IDToName(System.Int32)">
      <summary>
        <para>Returns the unique id of the layer. Will return "&lt;unknown layer&gt;" if an invalid id is given.</para>
      </summary>
      <param name="id">The unique id of the layer.</param>
      <returns>
        <para>The name of the layer with id or "&lt;unknown layer&gt;" for invalid id.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SortingLayer.IsValid(System.Int32)">
      <summary>
        <para>Returns true if the id provided is a valid layer id.</para>
      </summary>
      <param name="id">The unique id of a layer.</param>
      <returns>
        <para>True if the id provided is valid and assigned to a layer.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SortingLayer.NameToID(System.String)">
      <summary>
        <para>Returns the id given the name. Will return 0 if an invalid name was given.</para>
      </summary>
      <param name="name">The name of the layer.</param>
      <returns>
        <para>The unique id of the layer with name.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Space">
      <summary>
        <para>The coordinate space in which to operate.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Space.Self">
      <summary>
        <para>Applies transformation relative to the local coordinate system.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Space.World">
      <summary>
        <para>Applies transformation relative to the world coordinate system.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SpaceAttribute">
      <summary>
        <para>Use this PropertyAttribute to add some spacing in the Inspector.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpaceAttribute.height">
      <summary>
        <para>The spacing in pixels.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SpaceAttribute.#ctor(System.Single)">
      <summary>
        <para>Use this DecoratorDrawer to add some spacing in the Inspector.</para>
      </summary>
      <param name="height">The spacing in pixels.</param>
    </member>
    <member name="T:UnityEngine.SparseTexture">
      <summary>
        <para>Class for handling Sparse Textures.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SparseTexture.isCreated">
      <summary>
        <para>Is the sparse texture actually created? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SparseTexture.tileHeight">
      <summary>
        <para>Get sparse texture tile height (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SparseTexture.tileWidth">
      <summary>
        <para>Get sparse texture tile width (Read Only).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SparseTexture.#ctor(System.Int32,System.Int32,UnityEngine.TextureFormat,System.Int32)">
      <summary>
        <para>Create a sparse texture.</para>
      </summary>
      <param name="width">Texture width in pixels.</param>
      <param name="height">Texture height in pixels.</param>
      <param name="format">Texture format.</param>
      <param name="mipCount">Mipmap count. Pass -1 to create full mipmap chain.</param>
      <param name="linear">Whether texture data will be in linear or sRGB color space (default is sRGB).</param>
      <param name="textureFormat"></param>
    </member>
    <member name="M:UnityEngine.SparseTexture.#ctor(System.Int32,System.Int32,UnityEngine.TextureFormat,System.Int32,System.Boolean)">
      <summary>
        <para>Create a sparse texture.</para>
      </summary>
      <param name="width">Texture width in pixels.</param>
      <param name="height">Texture height in pixels.</param>
      <param name="format">Texture format.</param>
      <param name="mipCount">Mipmap count. Pass -1 to create full mipmap chain.</param>
      <param name="linear">Whether texture data will be in linear or sRGB color space (default is sRGB).</param>
      <param name="textureFormat"></param>
    </member>
    <member name="M:UnityEngine.SparseTexture.UnloadTile(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Unload sparse texture tile.</para>
      </summary>
      <param name="tileX">Tile X coordinate.</param>
      <param name="tileY">Tile Y coordinate.</param>
      <param name="miplevel">Mipmap level of the texture.</param>
    </member>
    <member name="M:UnityEngine.SparseTexture.UpdateTile(System.Int32,System.Int32,System.Int32,UnityEngine.Color32[])">
      <summary>
        <para>Update sparse texture tile with color values.</para>
      </summary>
      <param name="tileX">Tile X coordinate.</param>
      <param name="tileY">Tile Y coordinate.</param>
      <param name="miplevel">Mipmap level of the texture.</param>
      <param name="data">Tile color data.</param>
    </member>
    <member name="M:UnityEngine.SparseTexture.UpdateTileRaw(System.Int32,System.Int32,System.Int32,System.Byte[])">
      <summary>
        <para>Update sparse texture tile with raw pixel values.</para>
      </summary>
      <param name="tileX">Tile X coordinate.</param>
      <param name="tileY">Tile Y coordinate.</param>
      <param name="miplevel">Mipmap level of the texture.</param>
      <param name="data">Tile raw pixel data.</param>
    </member>
    <member name="T:UnityEngine.Sprite">
      <summary>
        <para>Represents a Sprite object for use in 2D gameplay.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Sprite.associatedAlphaSplitTexture">
      <summary>
        <para>Returns the texture that contains the alpha channel from the source texture. Unity generates this texture under the hood for sprites that have alpha in the source, and need to be compressed using techniques like ETC1.

Returns NULL if there is no associated alpha texture for the source sprite. This is the case if the sprite has not been setup to use ETC1 compression.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Sprite.border">
      <summary>
        <para>Returns the border sizes of the sprite.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Sprite.bounds">
      <summary>
        <para>Bounds of the Sprite, specified by its center and extents in world space units.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Sprite.packed">
      <summary>
        <para>Returns true if this Sprite is packed in an atlas.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Sprite.packingMode">
      <summary>
        <para>If Sprite is packed (see Sprite.packed), returns its SpritePackingMode.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Sprite.packingRotation">
      <summary>
        <para>If Sprite is packed (see Sprite.packed), returns its SpritePackingRotation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Sprite.pivot">
      <summary>
        <para>Location of the Sprite's center point in the Rect on the original Texture, specified in pixels.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Sprite.pixelsPerUnit">
      <summary>
        <para>The number of pixels in the sprite that correspond to one unit in world space. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Sprite.rect">
      <summary>
        <para>Location of the Sprite on the original Texture, specified in pixels.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Sprite.spriteAtlasTextureScale">
      <summary>
        <para>The Variant scale of texture used by the Sprite. This is useful to check when a Variant SpriteAtlas is being used by Sprites.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Sprite.texture">
      <summary>
        <para>Get the reference to the used texture. If packed this will point to the atlas, if not packed will point to the source sprite.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Sprite.textureRect">
      <summary>
        <para>Get the rectangle this sprite uses on its texture. Raises an exception if this sprite is tightly packed in an atlas.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Sprite.textureRectOffset">
      <summary>
        <para>Gets the offset of the rectangle this sprite uses on its texture to the original sprite bounds. If sprite mesh type is FullRect, offset is zero.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Sprite.triangles">
      <summary>
        <para>Returns a copy of the array containing sprite mesh triangles.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Sprite.uv">
      <summary>
        <para>The base texture coordinates of the sprite mesh.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Sprite.vertices">
      <summary>
        <para>Returns a copy of the array containing sprite mesh vertex positions.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Sprite.Create(UnityEngine.Texture2D,UnityEngine.Rect,UnityEngine.Vector2,System.Single,System.UInt32)">
      <summary>
        <para>Create a new Sprite object.</para>
      </summary>
      <param name="texture">Texture from which to obtain the sprite graphic.</param>
      <param name="rect">Rectangular section of the texture to use for the sprite.</param>
      <param name="pivot">Sprite's pivot point relative to its graphic rectangle.</param>
      <param name="pixelsPerUnit">The number of pixels in the sprite that correspond to one unit in world space.</param>
      <param name="extrude">Amount by which the sprite mesh should be expanded outwards.</param>
      <param name="meshType">Controls the type of mesh generated for the sprite.</param>
      <param name="border">The border sizes of the sprite (X=left, Y=bottom, Z=right, W=top).</param>
      <param name="generateFallbackPhysicsShape">Generates a default physics shape for the sprite.</param>
    </member>
    <member name="M:UnityEngine.Sprite.Create(UnityEngine.Texture2D,UnityEngine.Rect,UnityEngine.Vector2,System.Single,System.UInt32,UnityEngine.SpriteMeshType)">
      <summary>
        <para>Create a new Sprite object.</para>
      </summary>
      <param name="texture">Texture from which to obtain the sprite graphic.</param>
      <param name="rect">Rectangular section of the texture to use for the sprite.</param>
      <param name="pivot">Sprite's pivot point relative to its graphic rectangle.</param>
      <param name="pixelsPerUnit">The number of pixels in the sprite that correspond to one unit in world space.</param>
      <param name="extrude">Amount by which the sprite mesh should be expanded outwards.</param>
      <param name="meshType">Controls the type of mesh generated for the sprite.</param>
      <param name="border">The border sizes of the sprite (X=left, Y=bottom, Z=right, W=top).</param>
      <param name="generateFallbackPhysicsShape">Generates a default physics shape for the sprite.</param>
    </member>
    <member name="M:UnityEngine.Sprite.Create(UnityEngine.Texture2D,UnityEngine.Rect,UnityEngine.Vector2,System.Single,System.UInt32,UnityEngine.SpriteMeshType,UnityEngine.Vector4,System.Boolean)">
      <summary>
        <para>Create a new Sprite object.</para>
      </summary>
      <param name="texture">Texture from which to obtain the sprite graphic.</param>
      <param name="rect">Rectangular section of the texture to use for the sprite.</param>
      <param name="pivot">Sprite's pivot point relative to its graphic rectangle.</param>
      <param name="pixelsPerUnit">The number of pixels in the sprite that correspond to one unit in world space.</param>
      <param name="extrude">Amount by which the sprite mesh should be expanded outwards.</param>
      <param name="meshType">Controls the type of mesh generated for the sprite.</param>
      <param name="border">The border sizes of the sprite (X=left, Y=bottom, Z=right, W=top).</param>
      <param name="generateFallbackPhysicsShape">Generates a default physics shape for the sprite.</param>
    </member>
    <member name="M:UnityEngine.Sprite.Create(UnityEngine.Texture2D,UnityEngine.Rect,UnityEngine.Vector2,System.Single,System.UInt32,UnityEngine.SpriteMeshType,UnityEngine.Vector4)">
      <summary>
        <para>Create a new Sprite object.</para>
      </summary>
      <param name="texture">Texture from which to obtain the sprite graphic.</param>
      <param name="rect">Rectangular section of the texture to use for the sprite.</param>
      <param name="pivot">Sprite's pivot point relative to its graphic rectangle.</param>
      <param name="pixelsPerUnit">The number of pixels in the sprite that correspond to one unit in world space.</param>
      <param name="extrude">Amount by which the sprite mesh should be expanded outwards.</param>
      <param name="meshType">Controls the type of mesh generated for the sprite.</param>
      <param name="border">The border sizes of the sprite (X=left, Y=bottom, Z=right, W=top).</param>
      <param name="generateFallbackPhysicsShape">Generates a default physics shape for the sprite.</param>
    </member>
    <member name="M:UnityEngine.Sprite.Create(UnityEngine.Texture2D,UnityEngine.Rect,UnityEngine.Vector2)">
      <summary>
        <para>Create a new Sprite object.</para>
      </summary>
      <param name="texture">Texture from which to obtain the sprite graphic.</param>
      <param name="rect">Rectangular section of the texture to use for the sprite.</param>
      <param name="pivot">Sprite's pivot point relative to its graphic rectangle.</param>
      <param name="pixelsPerUnit">The number of pixels in the sprite that correspond to one unit in world space.</param>
      <param name="extrude">Amount by which the sprite mesh should be expanded outwards.</param>
      <param name="meshType">Controls the type of mesh generated for the sprite.</param>
      <param name="border">The border sizes of the sprite (X=left, Y=bottom, Z=right, W=top).</param>
      <param name="generateFallbackPhysicsShape">Generates a default physics shape for the sprite.</param>
    </member>
    <member name="M:UnityEngine.Sprite.Create(UnityEngine.Texture2D,UnityEngine.Rect,UnityEngine.Vector2,System.Single)">
      <summary>
        <para>Create a new Sprite object.</para>
      </summary>
      <param name="texture">Texture from which to obtain the sprite graphic.</param>
      <param name="rect">Rectangular section of the texture to use for the sprite.</param>
      <param name="pivot">Sprite's pivot point relative to its graphic rectangle.</param>
      <param name="pixelsPerUnit">The number of pixels in the sprite that correspond to one unit in world space.</param>
      <param name="extrude">Amount by which the sprite mesh should be expanded outwards.</param>
      <param name="meshType">Controls the type of mesh generated for the sprite.</param>
      <param name="border">The border sizes of the sprite (X=left, Y=bottom, Z=right, W=top).</param>
      <param name="generateFallbackPhysicsShape">Generates a default physics shape for the sprite.</param>
    </member>
    <member name="M:UnityEngine.Sprite.GetPhysicsShape(System.Int32,System.Collections.Generic.List`1&lt;UnityEngine.Vector2&gt;)">
      <summary>
        <para>Gets a physics shape from the Sprite by its index.</para>
      </summary>
      <param name="shapeIdx">The index of the physics shape to retrieve.</param>
      <param name="physicsShape">An ordered list of the points in the selected physics shape to store points in.</param>
      <returns>
        <para>The number of points stored in the given list.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Sprite.GetPhysicsShapeCount">
      <summary>
        <para>The number of physics shapes for the Sprite.</para>
      </summary>
      <returns>
        <para>The number of physics shapes for the Sprite.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Sprite.GetPhysicsShapePointCount(System.Int32)">
      <summary>
        <para>The number of points in the selected physics shape for the Sprite.</para>
      </summary>
      <param name="shapeIdx">The index of the physics shape to retrieve the number of points from.</param>
      <returns>
        <para>The number of points in the selected physics shape for the Sprite.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Sprite.OverrideGeometry(UnityEngine.Vector2[],System.UInt16[])">
      <summary>
        <para>Sets up new Sprite geometry.</para>
      </summary>
      <param name="vertices">Array of vertex positions in Sprite Rect space.</param>
      <param name="triangles">Array of sprite mesh triangle indices.</param>
    </member>
    <member name="M:UnityEngine.Sprite.OverridePhysicsShape(System.Collections.Generic.IList`1&lt;UnityEngine.Vector2[]&gt;)">
      <summary>
        <para>Sets up a new Sprite physics shape.</para>
      </summary>
      <param name="physicsShapes">A multidimensional list of points in Sprite.rect space denoting the physics shape outlines.</param>
    </member>
    <member name="T:UnityEngine.SpriteAlignment">
      <summary>
        <para>How a Sprite's graphic rectangle is aligned with its pivot point.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpriteAlignment.BottomCenter">
      <summary>
        <para>Pivot is at the center of the bottom edge of the graphic rectangle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpriteAlignment.BottomLeft">
      <summary>
        <para>Pivot is at the bottom left corner of the graphic rectangle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpriteAlignment.BottomRight">
      <summary>
        <para>Pivot is at the bottom right corner of the graphic rectangle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpriteAlignment.Center">
      <summary>
        <para>Pivot is at the center of the graphic rectangle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpriteAlignment.Custom">
      <summary>
        <para>Pivot is at a custom position within the graphic rectangle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpriteAlignment.LeftCenter">
      <summary>
        <para>Pivot is at the center of the left edge of the graphic rectangle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpriteAlignment.RightCenter">
      <summary>
        <para>Pivot is at the center of the right edge of the graphic rectangle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpriteAlignment.TopCenter">
      <summary>
        <para>Pivot is at the center of the top edge of the graphic rectangle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpriteAlignment.TopLeft">
      <summary>
        <para>Pivot is at the top left corner of the graphic rectangle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpriteAlignment.TopRight">
      <summary>
        <para>Pivot is at the top right corner of the graphic rectangle.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SpriteDrawMode">
      <summary>
        <para>SpriteRenderer draw mode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpriteDrawMode.Simple">
      <summary>
        <para>Displays the full sprite.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpriteDrawMode.Sliced">
      <summary>
        <para>The SpriteRenderer will render the sprite as a 9-slice image where the corners will remain constant and the other sections will scale.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpriteDrawMode.Tiled">
      <summary>
        <para>The SpriteRenderer will render the sprite as a 9-slice image where the corners will remain constant and the other sections will tile.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SpriteMaskInteraction">
      <summary>
        <para>This enum controls the mode under which the sprite will interact with the masking system.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpriteMaskInteraction.None">
      <summary>
        <para>The sprite will not interact with the masking system.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpriteMaskInteraction.VisibleInsideMask">
      <summary>
        <para>The sprite will be visible only in areas where a mask is present.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpriteMaskInteraction.VisibleOutsideMask">
      <summary>
        <para>The sprite will be visible only in areas where no mask is present.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SpriteMeshType">
      <summary>
        <para>Defines the type of mesh generated for a sprite.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpriteMeshType.FullRect">
      <summary>
        <para>Rectangle mesh equal to the user specified sprite size.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpriteMeshType.Tight">
      <summary>
        <para>Tight mesh based on pixel alpha values. As many excess pixels are cropped as possible.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SpritePackingMode">
      <summary>
        <para>Sprite packing modes for the Sprite Packer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpritePackingMode.Rectangle">
      <summary>
        <para>Alpha-cropped ractangle packing.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpritePackingMode.Tight">
      <summary>
        <para>Tight mesh based packing.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SpritePackingRotation">
      <summary>
        <para>Sprite rotation modes for the Sprite Packer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpritePackingRotation.Any">
      <summary>
        <para>Any rotation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpritePackingRotation.FlipHorizontal">
      <summary>
        <para>Sprite is flipped horizontally when packed.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpritePackingRotation.FlipVertical">
      <summary>
        <para>Sprite is flipped vertically when packed.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpritePackingRotation.None">
      <summary>
        <para>No rotation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpritePackingRotation.Rotate180">
      <summary>
        <para>Sprite is rotated 180 degree when packed.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SpriteRenderer">
      <summary>
        <para>Renders a Sprite for 2D graphics.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SpriteRenderer.adaptiveModeThreshold">
      <summary>
        <para>The current threshold for Sprite Renderer tiling.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SpriteRenderer.color">
      <summary>
        <para>Rendering color for the Sprite graphic.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SpriteRenderer.drawMode">
      <summary>
        <para>The current draw mode of the Sprite Renderer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SpriteRenderer.flipX">
      <summary>
        <para>Flips the sprite on the X axis.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SpriteRenderer.flipY">
      <summary>
        <para>Flips the sprite on the Y axis.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SpriteRenderer.maskInteraction">
      <summary>
        <para>Specifies how the sprite interacts with the masks.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SpriteRenderer.size">
      <summary>
        <para>Property to set/get the size to render when the SpriteRenderer.drawMode is set to SpriteDrawMode.Sliced.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SpriteRenderer.sprite">
      <summary>
        <para>The Sprite to render.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SpriteRenderer.spriteSortPoint">
      <summary>
        <para>Determines the position of the Sprite used for sorting the SpriteRenderer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SpriteRenderer.tileMode">
      <summary>
        <para>The current tile mode of the Sprite Renderer.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Sprites.DataUtility">
      <summary>
        <para>Helper utilities for accessing Sprite data.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Sprites.DataUtility.GetInnerUV(UnityEngine.Sprite)">
      <summary>
        <para>Inner UV's of the Sprite.</para>
      </summary>
      <param name="sprite"></param>
    </member>
    <member name="M:UnityEngine.Sprites.DataUtility.GetMinSize(UnityEngine.Sprite)">
      <summary>
        <para>Minimum width and height of the Sprite.</para>
      </summary>
      <param name="sprite"></param>
    </member>
    <member name="M:UnityEngine.Sprites.DataUtility.GetOuterUV(UnityEngine.Sprite)">
      <summary>
        <para>Outer UV's of the Sprite.</para>
      </summary>
      <param name="sprite"></param>
    </member>
    <member name="M:UnityEngine.Sprites.DataUtility.GetPadding(UnityEngine.Sprite)">
      <summary>
        <para>Return the padding on the sprite.</para>
      </summary>
      <param name="sprite"></param>
    </member>
    <member name="T:UnityEngine.SpriteSortPoint">
      <summary>
        <para>Determines the position of the Sprite used for sorting the Renderer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpriteSortPoint.Center">
      <summary>
        <para>The center of the Sprite is used as the point for sorting the Renderer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpriteSortPoint.Pivot">
      <summary>
        <para>The pivot of the Sprite is used as the point for sorting the Renderer.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SpriteTileMode">
      <summary>
        <para>Tiling mode for SpriteRenderer.tileMode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpriteTileMode.Adaptive">
      <summary>
        <para>Sprite Renderer tiles the sprite once the Sprite Renderer size is above SpriteRenderer.adaptiveModeThreshold.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpriteTileMode.Continuous">
      <summary>
        <para>Sprite Renderer tiles the sprite continuously when is set to SpriteRenderer.tileMode.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.StackTraceLogType">
      <summary>
        <para>Stack trace logging options.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.StackTraceLogType.Full">
      <summary>
        <para>Native and managed stack trace will be logged.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.StackTraceLogType.None">
      <summary>
        <para>No stack trace will be outputed to log.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.StackTraceLogType.ScriptOnly">
      <summary>
        <para>Only managed stack trace will be outputed.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.StaticBatchingUtility">
      <summary>
        <para>StaticBatchingUtility can prepare your objects to take advantage of Unity's static batching.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.StaticBatchingUtility.Combine(UnityEngine.GameObject)">
      <summary>
        <para>StaticBatchingUtility.Combine prepares all children of the staticBatchRoot for static batching.</para>
      </summary>
      <param name="staticBatchRoot">The GameObject that should become the root of the combined batch.</param>
    </member>
    <member name="M:UnityEngine.StaticBatchingUtility.Combine(UnityEngine.GameObject[],UnityEngine.GameObject)">
      <summary>
        <para>StaticBatchingUtility.Combine prepares all GameObjects contained in gos for static batching. staticBatchRoot is treated as their parent.</para>
      </summary>
      <param name="gos">The GameObjects to prepare for static batching.</param>
      <param name="staticBatchRoot">The GameObject that should become the root of the combined batch.</param>
    </member>
    <member name="T:UnityEngine.StereoTargetEyeMask">
      <summary>
        <para>Enum values for the Camera's targetEye property.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.StereoTargetEyeMask.Both">
      <summary>
        <para>Render both eyes to the HMD.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.StereoTargetEyeMask.Left">
      <summary>
        <para>Render only the Left eye to the HMD.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.StereoTargetEyeMask.None">
      <summary>
        <para>Do not render either eye to the HMD.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.StereoTargetEyeMask.Right">
      <summary>
        <para>Render only the right eye to the HMD.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SystemInfo">
      <summary>
        <para>Access system and hardware information.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.batteryLevel">
      <summary>
        <para>The current battery level (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.batteryStatus">
      <summary>
        <para>Returns the current status of the device's battery (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.constantBufferOffsetAlignment">
      <summary>
        <para>Minimum buffer offset (in bytes) when binding a constant buffer using Shader.SetConstantBuffer or Material.SetConstantBuffer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.copyTextureSupport">
      <summary>
        <para>Support for various Graphics.CopyTexture cases (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.deviceModel">
      <summary>
        <para>The model of the device (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.deviceName">
      <summary>
        <para>The user defined name of the device (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.deviceType">
      <summary>
        <para>Returns the kind of device the application is running on (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.deviceUniqueIdentifier">
      <summary>
        <para>A unique device identifier. It is guaranteed to be unique for every device (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.graphicsDeviceID">
      <summary>
        <para>The identifier code of the graphics device (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.graphicsDeviceName">
      <summary>
        <para>The name of the graphics device (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.graphicsDeviceType">
      <summary>
        <para>The graphics API type used by the graphics device (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.graphicsDeviceVendor">
      <summary>
        <para>The vendor of the graphics device (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.graphicsDeviceVendorID">
      <summary>
        <para>The identifier code of the graphics device vendor (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.graphicsDeviceVersion">
      <summary>
        <para>The graphics API type and driver version used by the graphics device (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.graphicsMemorySize">
      <summary>
        <para>Amount of video memory present (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.graphicsMultiThreaded">
      <summary>
        <para>Is graphics device using multi-threaded rendering (Read Only)?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.graphicsShaderLevel">
      <summary>
        <para>Graphics device shader capability level (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.graphicsUVStartsAtTop">
      <summary>
        <para>Returns true if the texture UV coordinate convention for this platform has Y starting at the top of the image.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.hasDynamicUniformArrayIndexingInFragmentShaders">
      <summary>
        <para>Returns true when the GPU has native support for indexing uniform arrays in fragment shaders without restrictions.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.hasHiddenSurfaceRemovalOnGPU">
      <summary>
        <para>True if the GPU supports hidden surface removal.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.hasMipMaxLevel">
      <summary>
        <para>Returns true if the GPU supports partial mipmap chains (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.hdrDisplaySupportFlags">
      <summary>
        <para>Returns a bitwise combination of HDRDisplaySupportFlags describing the support for HDR displays on the system.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.maxComputeBufferInputsCompute">
      <summary>
        <para>Determines how many compute buffers Unity supports simultaneously in a compute shader for reading. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.maxComputeBufferInputsDomain">
      <summary>
        <para>Determines how many compute buffers Unity supports simultaneously in a domain shader for reading. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.maxComputeBufferInputsFragment">
      <summary>
        <para>Determines how many compute buffers Unity supports simultaneously in a fragment shader for reading. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.maxComputeBufferInputsGeometry">
      <summary>
        <para>Determines how many compute buffers Unity supports simultaneously in a geometry shader for reading. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.maxComputeBufferInputsHull">
      <summary>
        <para>Determines how many compute buffers Unity supports simultaneously in a hull shader for reading. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.maxComputeBufferInputsVertex">
      <summary>
        <para>Determines how many compute buffers Unity supports simultaneously in a vertex shader for reading. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.maxComputeWorkGroupSize">
      <summary>
        <para>The largest total number of invocations in a single local work group that can be dispatched to a compute shader (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.maxComputeWorkGroupSizeX">
      <summary>
        <para>The maximum number of work groups that a compute shader can use in X dimension (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.maxComputeWorkGroupSizeY">
      <summary>
        <para>The maximum number of work groups that a compute shader can use in Y dimension (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.maxComputeWorkGroupSizeZ">
      <summary>
        <para>The maximum number of work groups that a compute shader can use in Z dimension (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.maxCubemapSize">
      <summary>
        <para>Maximum Cubemap texture size (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.maxTextureSize">
      <summary>
        <para>Maximum texture size (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.minConstantBufferOffsetAlignment">
      <summary>
        <para>Obsolete - use SystemInfo.constantBufferOffsetAlignment instead. Minimum buffer offset (in bytes) when binding a constant buffer using Shader.SetConstantBuffer or Material.SetConstantBuffer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.npotSupport">
      <summary>
        <para>What NPOT (non-power of two size) texture support does the GPU provide? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.operatingSystem">
      <summary>
        <para>Operating system name with version (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.operatingSystemFamily">
      <summary>
        <para>Returns the operating system family the game is running on (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.processorCount">
      <summary>
        <para>Number of processors present (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.processorFrequency">
      <summary>
        <para>Processor frequency in MHz (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.processorType">
      <summary>
        <para>Processor name (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.renderingThreadingMode">
      <summary>
        <para>Application's actual rendering threading mode (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportedRandomWriteTargetCount">
      <summary>
        <para>The maximum number of random write targets (UAV) that Unity supports simultaneously. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportedRenderTargetCount">
      <summary>
        <para>How many simultaneous render targets (MRTs) are supported? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supports2DArrayTextures">
      <summary>
        <para>Are 2D Array textures supported? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supports32bitsIndexBuffer">
      <summary>
        <para>Are 32-bit index buffers supported? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supports3DRenderTextures">
      <summary>
        <para>Are 3D (volume) RenderTextures supported? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supports3DTextures">
      <summary>
        <para>Are 3D (volume) textures supported? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsAccelerometer">
      <summary>
        <para>Is an accelerometer available on the device?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsAsyncCompute">
      <summary>
        <para>Returns true when the platform supports asynchronous compute queues and false if otherwise.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsAsyncGPUReadback">
      <summary>
        <para>Returns true if asynchronous readback of GPU data is available for this device and false otherwise.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsAudio">
      <summary>
        <para>Is there an Audio device available for playback? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsCompressed3DTextures">
      <summary>
        <para>Are compressed formats for 3D (volume) textures supported? (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsComputeShaders">
      <summary>
        <para>Are compute shaders supported? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsConservativeRaster">
      <summary>
        <para>Is conservative rasterization supported? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsCubemapArrayTextures">
      <summary>
        <para>Are Cubemap Array textures supported? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsGeometryShaders">
      <summary>
        <para>Are geometry shaders supported? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsGPUFence">
      <summary>
        <para>This functionality is deprecated, and should no longer be used. Please use SystemInfo.supportsGraphicsFence.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsGpuRecorder">
      <summary>
        <para>Specifies whether the current platform supports the GPU Recorder or not. (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsGraphicsFence">
      <summary>
        <para>Returns true when the platform supports GraphicsFences, and false if otherwise.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsGyroscope">
      <summary>
        <para>Is a gyroscope available on the device?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsHardwareQuadTopology">
      <summary>
        <para>Does the hardware support quad topology? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsImageEffects">
      <summary>
        <para>Are image effects supported? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsInstancing">
      <summary>
        <para>Is GPU draw call instancing supported? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsLocationService">
      <summary>
        <para>Is the device capable of reporting its location?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsMipStreaming">
      <summary>
        <para>Is streaming of texture mip maps supported? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsMotionVectors">
      <summary>
        <para>Whether motion vectors are supported on this platform.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsMultisampleAutoResolve">
      <summary>
        <para>Returns true if multisampled textures are resolved automatically</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsMultisampled2DArrayTextures">
      <summary>
        <para>Boolean that indicates whether multisampled texture arrays are supported (true if supported, false if not supported).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsMultisampledTextures">
      <summary>
        <para>Are multisampled textures supported? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsMultiview">
      <summary>
        <para>Boolean that indicates whether Multiview is supported (true if supported, false if not supported). (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsRawShadowDepthSampling">
      <summary>
        <para>Is sampling raw depth from shadowmaps supported? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsRayTracing">
      <summary>
        <para>Checks if ray tracing is supported by the current configuration.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsRenderTargetArrayIndexFromVertexShader">
      <summary>
        <para>Boolean that indicates if SV_RenderTargetArrayIndex can be used in a vertex shader (true if it can be used, false if not).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsRenderTextures">
      <summary>
        <para>Are render textures supported? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsRenderToCubemap">
      <summary>
        <para>Are cubemap render textures supported? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsSeparatedRenderTargetsBlend">
      <summary>
        <para>Returns true when the platform supports different blend modes when rendering to multiple render targets, or false otherwise.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsSetConstantBuffer">
      <summary>
        <para>Does the current renderer support binding constant buffers directly? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsShadows">
      <summary>
        <para>Are built-in shadows supported? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsSparseTextures">
      <summary>
        <para>Are sparse textures supported? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsStencil">
      <summary>
        <para>Is the stencil buffer supported? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsStoreAndResolveAction">
      <summary>
        <para>This property is true if the graphics API of the target build platform takes RenderBufferStoreAction.StoreAndResolve into account, false if otherwise.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsTessellationShaders">
      <summary>
        <para>Are tessellation shaders supported? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsTextureWrapMirrorOnce">
      <summary>
        <para>Returns true if the 'Mirror Once' texture wrap mode is supported. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsVibration">
      <summary>
        <para>Is the device capable of providing the user haptic feedback by vibration?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.systemMemorySize">
      <summary>
        <para>Amount of system memory present (Read Only).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemInfo.unsupportedIdentifier">
      <summary>
        <para>Value returned by SystemInfo string properties which are not supported on the current platform.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.usesLoadStoreActions">
      <summary>
        <para>True if the Graphics API takes RenderBufferLoadAction and RenderBufferStoreAction into account, false if otherwise.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.usesReversedZBuffer">
      <summary>
        <para>This property is true if the current platform uses a reversed depth buffer (where values range from 1 at the near plane and 0 at far plane), and false if the depth buffer is normal (0 is near, 1 is far). (Read Only)</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SystemInfo.GetCompatibleFormat">
      <summary>
        <para>Returns a format supported by the platform for the specified usage.</para>
      </summary>
      <param name="Format">The Experimental.Rendering.GraphicsFormat format to look up.</param>
      <param name="Usage">The Experimental.Rendering.FormatUsage usage to look up.</param>
      <returns>
        <para>Returns a format supported by the platform. If no equivalent or compatible format is supported, the function returns GraphicsFormat.None.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SystemInfo.GetGraphicsFormat(UnityEngine.Experimental.Rendering.DefaultFormat)">
      <summary>
        <para>Returns the platform-specific GraphicsFormat that is associated with the DefaultFormat.</para>
      </summary>
      <param name="format">The DefaultFormat format to look up.</param>
    </member>
    <member name="M:UnityEngine.SystemInfo.GetRenderTextureSupportedMSAASampleCount(UnityEngine.RenderTextureDescriptor)">
      <summary>
        <para>Checks if the target platform supports the MSAA samples count in the RenderTextureDescriptor argument.</para>
      </summary>
      <param name="desc">The RenderTextureDescriptor to check.</param>
      <returns>
        <para>If the target platform supports the given MSAA samples count of RenderTextureDescriptor, returns the given MSAA samples count. Otherwise returns a lower fallback MSAA samples count value that the target platform supports.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SystemInfo.IsFormatSupported">
      <summary>
        <para>Verifies that the specified graphics format is supported for the specified usage.</para>
      </summary>
      <param name="Format">The Experimental.Rendering.GraphicsFormat format to look up.</param>
      <param name="Usage">The Experimental.Rendering.FormatUsage usage to look up.</param>
      <returns>
        <para>Returns true if the format is supported for the specific usage. Returns false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SystemInfo.SupportsBlendingOnRenderTextureFormat(UnityEngine.RenderTextureFormat)">
      <summary>
        <para>Is blending supported on render texture format?</para>
      </summary>
      <param name="format">The format to look up.</param>
      <returns>
        <para>True if blending is supported on the given format.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SystemInfo.SupportsRenderTextureFormat(UnityEngine.RenderTextureFormat)">
      <summary>
        <para>Is render texture format supported?</para>
      </summary>
      <param name="format">The format to look up.</param>
      <returns>
        <para>True if the format is supported.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SystemInfo.SupportsTextureFormat(UnityEngine.TextureFormat)">
      <summary>
        <para>Is texture format supported on this device?</para>
      </summary>
      <param name="format">The TextureFormat format to look up.</param>
      <returns>
        <para>True if the format is supported.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.SystemInfo.SupportsVertexAttributeFormat(UnityEngine.Rendering.VertexAttributeFormat,System.Int32)">
      <summary>
        <para>Indicates whether the given combination of a vertex attribute format and dimension is supported on this device.</para>
      </summary>
      <param name="format">The VertexAttributeFormat format to look up.</param>
      <param name="dimension">The dimension of vertex data to check for.</param>
      <returns>
        <para>True if the format with the given dimension is supported.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.SystemLanguage">
      <summary>
        <para>The language the user's operating system is running in. Returned by Application.systemLanguage.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Afrikaans">
      <summary>
        <para>Afrikaans.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Arabic">
      <summary>
        <para>Arabic.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Basque">
      <summary>
        <para>Basque.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Belarusian">
      <summary>
        <para>Belarusian.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Bulgarian">
      <summary>
        <para>Bulgarian.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Catalan">
      <summary>
        <para>Catalan.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Chinese">
      <summary>
        <para>Chinese.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.ChineseSimplified">
      <summary>
        <para>ChineseSimplified.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.ChineseTraditional">
      <summary>
        <para>ChineseTraditional.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Czech">
      <summary>
        <para>Czech.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Danish">
      <summary>
        <para>Danish.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Dutch">
      <summary>
        <para>Dutch.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.English">
      <summary>
        <para>English.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Estonian">
      <summary>
        <para>Estonian.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Faroese">
      <summary>
        <para>Faroese.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Finnish">
      <summary>
        <para>Finnish.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.French">
      <summary>
        <para>French.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.German">
      <summary>
        <para>German.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Greek">
      <summary>
        <para>Greek.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Hebrew">
      <summary>
        <para>Hebrew.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Hungarian">
      <summary>
        <para>Hungarian.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Icelandic">
      <summary>
        <para>Icelandic.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Indonesian">
      <summary>
        <para>Indonesian.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Italian">
      <summary>
        <para>Italian.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Japanese">
      <summary>
        <para>Japanese.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Korean">
      <summary>
        <para>Korean.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Latvian">
      <summary>
        <para>Latvian.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Lithuanian">
      <summary>
        <para>Lithuanian.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Norwegian">
      <summary>
        <para>Norwegian.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Polish">
      <summary>
        <para>Polish.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Portuguese">
      <summary>
        <para>Portuguese.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Romanian">
      <summary>
        <para>Romanian.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Russian">
      <summary>
        <para>Russian.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.SerboCroatian">
      <summary>
        <para>Serbo-Croatian.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Slovak">
      <summary>
        <para>Slovak.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Slovenian">
      <summary>
        <para>Slovenian.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Spanish">
      <summary>
        <para>Spanish.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Swedish">
      <summary>
        <para>Swedish.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Thai">
      <summary>
        <para>Thai.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Turkish">
      <summary>
        <para>Turkish.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Ukrainian">
      <summary>
        <para>Ukrainian.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Unknown">
      <summary>
        <para>Unknown.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Vietnamese">
      <summary>
        <para>Vietnamese.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TestTools.Coverage">
      <summary>
        <para>Describes the interface for the code coverage data exposed by mono.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TestTools.Coverage.enabled">
      <summary>
        <para>Enables or disables code coverage. Note that Code Coverage can affect the performance.</para>
      </summary>
      <returns>
        <para>Returns true if code coverage is enabled; otherwise, returns false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.TestTools.Coverage.GetSequencePointsFor(System.Reflection.MethodBase)">
      <summary>
        <para>Returns the coverage sequence points for the method you specify. See CoveredSequencePoint for more information about the coverage data this method returns.</para>
      </summary>
      <param name="method">The method to get the sequence points for.</param>
      <returns>
        <para>Array of sequence points.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.TestTools.Coverage.GetStatsFor(System.Reflection.MethodBase)">
      <summary>
        <para>Returns the coverage summary for the specified method. See CoveredMethodStats for more information about the coverage statistics returned by this method.</para>
      </summary>
      <param name="method">The method to get coverage statistics for.</param>
      <returns>
        <para>Coverage summary.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.TestTools.Coverage.GetStatsFor(System.Reflection.MethodBase[])">
      <summary>
        <para>Returns an array of coverage summaries for the specified array of methods.</para>
      </summary>
      <param name="methods">The array of methods.</param>
      <returns>
        <para>Array of coverage summaries.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.TestTools.Coverage.GetStatsFor(System.Type)">
      <summary>
        <para>Returns an array of coverage summaries for the specified type.</para>
      </summary>
      <param name="type">The type.</param>
      <returns>
        <para>Array of coverage summaries.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.TestTools.Coverage.GetStatsForAllCoveredMethods">
      <summary>
        <para>Returns the coverage summary for all methods that have been called since either the Unity process was started or Coverage.ResetAll() has been called.</para>
      </summary>
      <returns>
        <para>Array of coverage summaries.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.TestTools.Coverage.ResetAll">
      <summary>
        <para>Resets all coverage data.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.TestTools.Coverage.ResetFor(System.Reflection.MethodBase)">
      <summary>
        <para>Resets the coverage data for the specified method.</para>
      </summary>
      <param name="method">The method.</param>
    </member>
    <member name="T:UnityEngine.TestTools.CoveredMethodStats">
      <summary>
        <para>Describes the summary of the code coverage for the specified method used by TestTools.Coverage. For an example of typical usage, see TestTools.Coverage.GetStatsFor.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TestTools.CoveredMethodStats.method">
      <summary>
        <para>The covered method.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TestTools.CoveredMethodStats.totalSequencePoints">
      <summary>
        <para>The total number of sequence points in the method.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TestTools.CoveredMethodStats.uncoveredSequencePoints">
      <summary>
        <para>The total number of uncovered sequence points in the method.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TestTools.CoveredSequencePoint">
      <summary>
        <para>Describes a covered sequence point used by TestTools.Coverage. For an example of typical usage, see TestTools.Coverage.GetSequencePointsFor.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TestTools.CoveredSequencePoint.column">
      <summary>
        <para>The column number of the line of the file that contains the sequence point.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TestTools.CoveredSequencePoint.filename">
      <summary>
        <para>The name of the file that contains the sequence point.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TestTools.CoveredSequencePoint.hitCount">
      <summary>
        <para>The number of times the sequence point has been visited.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TestTools.CoveredSequencePoint.ilOffset">
      <summary>
        <para>The offset in bytes from the start of the method to the first Intermediate Language instruction of this sequence point.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TestTools.CoveredSequencePoint.line">
      <summary>
        <para>The line number of the file that contains the sequence point.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TestTools.CoveredSequencePoint.method">
      <summary>
        <para>The method covered by the sequence point.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TestTools.ExcludeFromCoverageAttribute">
      <summary>
        <para>Allows you to exclude an Assembly, Class, Constructor, Method or Struct from TestTools.Coverage.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TextAreaAttribute">
      <summary>
        <para>Attribute to make a string be edited with a height-flexible and scrollable text area.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextAreaAttribute.maxLines">
      <summary>
        <para>The maximum amount of lines the text area can show before it starts using a scrollbar.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextAreaAttribute.minLines">
      <summary>
        <para>The minimum amount of lines the text area will use.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.TextAreaAttribute.#ctor">
      <summary>
        <para>Attribute to make a string be edited with a height-flexible and scrollable text area.</para>
      </summary>
      <param name="minLines">The minimum amount of lines the text area will use.</param>
      <param name="maxLines">The maximum amount of lines the text area can show before it starts using a scrollbar.</param>
    </member>
    <member name="M:UnityEngine.TextAreaAttribute.#ctor(System.Int32,System.Int32)">
      <summary>
        <para>Attribute to make a string be edited with a height-flexible and scrollable text area.</para>
      </summary>
      <param name="minLines">The minimum amount of lines the text area will use.</param>
      <param name="maxLines">The maximum amount of lines the text area can show before it starts using a scrollbar.</param>
    </member>
    <member name="T:UnityEngine.TextAsset">
      <summary>
        <para>Text file assets.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TextAsset.bytes">
      <summary>
        <para>The raw bytes of the text asset. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TextAsset.text">
      <summary>
        <para>The text contents of the .txt file as a string. (Read Only)</para>
      </summary>
    </member>
    <member name="M:UnityEngine.TextAsset.#ctor(System.String)">
      <summary>
        <para>Create a new TextAsset with the specified text contents.

This constructor creates a TextAsset, which is not the same as a plain text file. When saved to disk using the AssetDatabase class, the TextAsset should be saved with the .asset extension.</para>
      </summary>
      <param name="text">The text contents for the TextAsset.</param>
    </member>
    <member name="M:UnityEngine.TextAsset.ToString">
      <summary>
        <para>Returns the contents of the TextAsset.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Texture">
      <summary>
        <para>Base class for Texture handling.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.allowThreadedTextureCreation">
      <summary>
        <para>Allow Unity internals to perform Texture creation on any thread (rather than the dedicated render thread).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.anisoLevel">
      <summary>
        <para>Defines the anisotropic filtering level of the Texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.currentTextureMemory">
      <summary>
        <para>The amount of memory that all Textures in the scene use.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.desiredTextureMemory">
      <summary>
        <para>The total size of the Textures, in bytes, that Unity loads if there were no other constraints. Before Unity loads any Textures, it applies the which reduces the loaded Texture resolution if the Texture sizes exceed its value. The `desiredTextureMemory` value takes into account the mipmap levels that Unity has requested or that you have set manually.

For example, if Unity does not load a Texture at full resolution because it is far away or its requested mipmap level is greater than 0,  Unity reduces the `desiredTextureMemory` value to match the total memory needed.

The `desiredTextureMemory` value can be greater than the `targetTextureMemory` value.
                </para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.dimension">
      <summary>
        <para>Dimensionality (type) of the Texture (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.filterMode">
      <summary>
        <para>Filtering mode of the Texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.graphicsFormat">
      <summary>
        <para>Returns the GraphicsFormat format or color format of a Texture object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.height">
      <summary>
        <para>Height of the Texture in pixels. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.imageContentsHash">
      <summary>
        <para>The hash value of the Texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.isReadable">
      <summary>
        <para>Returns true if the Read/Write Enabled checkbox was checked when the Texture was imported; otherwise returns false. For a dynamic Texture created from script, always returns true. For additional information, see TextureImporter.isReadable.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.mipMapBias">
      <summary>
        <para>The mipmap bias of the Texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.mipmapCount">
      <summary>
        <para>How many mipmap levels are in this Texture (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.nonStreamingTextureCount">
      <summary>
        <para>The number of non-streaming Textures in the scene. This includes instances of Texture2D and CubeMap Textures. This does not include any other Texture types, or 2D and CubeMap Textures that Unity creates internally.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.nonStreamingTextureMemory">
      <summary>
        <para>The amount of memory Unity allocates for non-streaming Textures in the scene. This only includes instances of Texture2D and CubeMap Textures. This does not include any other Texture types, or 2D and CubeMap Textures that Unity creates internally.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.streamingMipmapUploadCount">
      <summary>
        <para>How many times has a Texture been uploaded due to Texture mipmap streaming.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.streamingRendererCount">
      <summary>
        <para>Number of renderers registered with the Texture streaming system.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.streamingTextureCount">
      <summary>
        <para>Number of streaming Textures.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.streamingTextureDiscardUnusedMips">
      <summary>
        <para>This property forces the streaming Texture system to discard all unused mipmaps instead of caching them until the Texture is exceeded. This is useful when you profile or write tests to keep a predictable set of Textures in memory.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.streamingTextureForceLoadAll">
      <summary>
        <para>Force streaming Textures to load all mipmap levels.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.streamingTextureLoadingCount">
      <summary>
        <para>Number of streaming Textures with mipmaps currently loading.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.streamingTexturePendingLoadCount">
      <summary>
        <para>Number of streaming Textures with outstanding mipmaps to be loaded.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.targetTextureMemory">
      <summary>
        <para>The total amount of Texture memory that Unity allocates to the Textures in the scene after it applies the and finishes loading Textures. `targetTextureMemory`also takes mipmap streaming settings into account. This value only includes instances of Texture2D and CubeMap Textures. It does not include any other Texture types, or 2D and CubeMap Textures that Unity creates internally.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.totalTextureMemory">
      <summary>
        <para>The total amount of Texture memory that Unity would use if it loads all Textures at mipmap level 0.

This is a theoretical value that does not take into account any input from the streaming system or any other input, for example when you set the`Texture2D.requestedMipmapLevel` manually.

To see a Texture memory value that takes inputs into account, use `desiredTextureMemory`.

`totalTextureMemory` only includes instances of Texture2D and CubeMap Textures. It does not include any other Texture types, or 2D and CubeMap Textures that Unity creates internally.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.updateCount">
      <summary>
        <para>This counter is incremented when the Texture is updated.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.width">
      <summary>
        <para>Width of the Texture in pixels. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.wrapMode">
      <summary>
        <para>Texture coordinate wrapping mode.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.wrapModeU">
      <summary>
        <para>Texture U coordinate wrapping mode.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.wrapModeV">
      <summary>
        <para>Texture V coordinate wrapping mode.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.wrapModeW">
      <summary>
        <para>Texture W coordinate wrapping mode for Texture3D.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Texture.GenerateAllMips">
      <summary>
        <para>Can be used with Texture constructors that take a mip count to indicate that all mips should be generated.  The value of this field is -1.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture.GetNativeTexturePtr">
      <summary>
        <para>Retrieve a native (underlying graphics API) pointer to the Texture resource.</para>
      </summary>
      <returns>
        <para>Pointer to an underlying graphics API Texture resource.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Texture.IncrementUpdateCount">
      <summary>
        <para>Increment the update counter.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture.SetGlobalAnisotropicFilteringLimits(System.Int32,System.Int32)">
      <summary>
        <para>Sets Anisotropic limits.</para>
      </summary>
      <param name="forcedMin"></param>
      <param name="globalMax"></param>
    </member>
    <member name="M:UnityEngine.Texture.SetStreamingTextureMaterialDebugProperties">
      <summary>
        <para>This function sets mipmap streaming debug properties on any materials that use this Texture through the mipmap streaming system.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Texture2D">
      <summary>
        <para>Class that represents textures in C# code.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture2D.alphaIsTransparency">
      <summary>
        <para>Indicates whether this texture was imported with TextureImporter.alphaIsTransparency enabled. This setting is available only in the Editor scripts. Note that changing this setting will have no effect; it must be enabled in TextureImporter instead.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture2D.blackTexture">
      <summary>
        <para>Gets a small Texture with all black pixels.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture2D.calculatedMipmapLevel">
      <summary>
        <para>The mipmap level calculated by the streaming system, which takes into account the streaming Cameras and the location of the objects containing this Texture. This is unaffected by requestedMipmapLevel or minimumMipmapLevel.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture2D.desiredMipmapLevel">
      <summary>
        <para>The mipmap level that the streaming system would load before memory budgets are applied.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture2D.format">
      <summary>
        <para>The format of the pixel data in the texture (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture2D.grayTexture">
      <summary>
        <para>Gets a small Texture with all gray pixels.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture2D.isReadable">
      <summary>
        <para>Returns true if the Read/Write Enabled checkbox was checked when the texture was imported; otherwise returns false. For a dynamic Texture created from script, always returns true. For additional information, see TextureImporter.isReadable.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture2D.linearGrayTexture">
      <summary>
        <para>Gets a small Texture with all gray pixels.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture2D.loadedMipmapLevel">
      <summary>
        <para>The mipmap level that is currently loaded by the streaming system.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture2D.loadingMipmapLevel">
      <summary>
        <para>The mipmap level that the mipmap streaming system is in the process of loading.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture2D.minimumMipmapLevel">
      <summary>
        <para>Restricts the mipmap streaming system to a minimum mip level for this Texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture2D.normalTexture">
      <summary>
        <para>Gets a small Texture with pixels that represent surface normal vectors at a neutral position.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture2D.redTexture">
      <summary>
        <para>Gets a small Texture with all red pixels.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture2D.requestedMipmapLevel">
      <summary>
        <para>The mipmap level to load.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture2D.streamingMipmaps">
      <summary>
        <para>Determines whether mipmap streaming is enabled for this Texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture2D.streamingMipmapsPriority">
      <summary>
        <para>Sets the relative priority for this Texture when reducing memory size to fit within the memory budget.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture2D.vtOnly">
      <summary>
        <para>Returns true if the VTOnly checkbox was checked when the texture was imported; otherwise returns false. For additional information, see TextureImporter.vtOnly.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture2D.whiteTexture">
      <summary>
        <para>Gets a small Texture with all white pixels.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture2D.Apply(System.Boolean,System.Boolean)">
      <summary>
        <para>Actually apply all previous SetPixel and SetPixels changes.</para>
      </summary>
      <param name="updateMipmaps">When set to true, mipmap levels are recalculated.</param>
      <param name="makeNoLongerReadable">When set to true, system memory copy of a texture is released.</param>
    </member>
    <member name="M:UnityEngine.Texture2D.ClearMinimumMipmapLevel">
      <summary>
        <para>Resets the minimumMipmapLevel field.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture2D.ClearRequestedMipmapLevel">
      <summary>
        <para>Resets the requestedMipmapLevel field.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture2D.Compress(System.Boolean)">
      <summary>
        <para>Compress texture into DXT format.</para>
      </summary>
      <param name="highQuality"></param>
    </member>
    <member name="M:UnityEngine.Texture2D.CreateExternalTexture(System.Int32,System.Int32,UnityEngine.TextureFormat,System.Boolean,System.Boolean,System.IntPtr)">
      <summary>
        <para>Creates a Unity Texture out of an externally created native texture object.</para>
      </summary>
      <param name="nativeTex">Native 2D texture object.</param>
      <param name="width">Width of texture in pixels.</param>
      <param name="height">Height of texture in pixels.</param>
      <param name="format">Format of underlying texture object.</param>
      <param name="mipmap">Does the texture have mipmaps?</param>
      <param name="linear">Is texture using linear color space?</param>
      <param name="mipChain"></param>
    </member>
    <member name="M:UnityEngine.Texture2D.#ctor(System.Int32,System.Int32)">
      <summary>
        <para>Create a new empty texture.</para>
      </summary>
      <param name="width"></param>
      <param name="height"></param>
    </member>
    <member name="M:UnityEngine.Texture2D.#ctor(System.Int32,System.Int32,UnityEngine.TextureFormat,System.Boolean)">
      <summary>
        <para>Create a new empty texture.</para>
      </summary>
      <param name="width"></param>
      <param name="height"></param>
      <param name="textureFormat"></param>
      <param name="mipChain"></param>
    </member>
    <member name="M:UnityEngine.Texture2D.#ctor(System.Int32,System.Int32,UnityEngine.TextureFormat,System.Boolean,System.Boolean)">
      <summary>
        <para>Create a new empty texture.</para>
      </summary>
      <param name="width"></param>
      <param name="height"></param>
      <param name="textureFormat"></param>
      <param name="mipChain"></param>
      <param name="linear"></param>
    </member>
    <member name="T:UnityEngine.Texture2D.EXRFlags">
      <summary>
        <para>Flags used to control the encoding to an EXR file.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Texture2D.EXRFlags.CompressPIZ">
      <summary>
        <para>This texture will use Wavelet compression. This is best used for grainy images.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Texture2D.EXRFlags.CompressRLE">
      <summary>
        <para>The texture will use RLE (Run Length Encoding) EXR compression format (similar to Targa RLE compression).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Texture2D.EXRFlags.CompressZIP">
      <summary>
        <para>The texture will use the EXR ZIP compression format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Texture2D.EXRFlags.None">
      <summary>
        <para>No flag. This will result in an uncompressed 16-bit float EXR file.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Texture2D.EXRFlags.OutputAsFloat">
      <summary>
        <para>The texture will be exported as a 32-bit float EXR file (default is 16-bit).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture2D.GenerateAtlas">
      <summary>
        <para>Packs a set of rectangles into a square atlas, with optional padding between rectangles.</para>
      </summary>
      <param name="sizes">An array of rectangle dimensions.</param>
      <param name="padding">Amount of padding to insert between adjacent rectangles in the atlas.</param>
      <param name="atlasSize">The size of the atlas.</param>
      <returns>
        <para>If the function succeeds, this will contain the packed rectangles.  Otherwise, the return value is null.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Texture2D.GetPixel(System.Int32,System.Int32)">
      <summary>
        <para>Returns pixel color at coordinates (x, y).</para>
      </summary>
      <param name="x"></param>
      <param name="y"></param>
    </member>
    <member name="M:UnityEngine.Texture2D.GetPixelBilinear(System.Single,System.Single)">
      <summary>
        <para>Returns filtered pixel color at normalized coordinates (u, v).</para>
      </summary>
      <param name="u"></param>
      <param name="v"></param>
    </member>
    <member name="M:UnityEngine.Texture2D.GetPixelData(System.Int32)">
      <summary>
        <para>Gets raw data from a Texture for reading or writing.</para>
      </summary>
      <param name="mipLevel">The mip level to reference.</param>
    </member>
    <member name="M:UnityEngine.Texture2D.GetPixels(System.Int32)">
      <summary>
        <para>Get the pixel colors from the texture.</para>
      </summary>
      <param name="miplevel">The mipmap level to fetch the pixels from. Defaults to zero.</param>
      <returns>
        <para>The array of all pixels in the mipmap level of the texture.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Texture2D.GetPixels(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Get a block of pixel colors.</para>
      </summary>
      <param name="x">The x position of the pixel array to fetch.</param>
      <param name="y">The y position of the pixel array to fetch.</param>
      <param name="blockWidth">The width length of the pixel array to fetch.</param>
      <param name="blockHeight">The height length of the pixel array to fetch.</param>
      <param name="miplevel">The mipmap level to fetch the pixels. Defaults to zero, and is
        optional.</param>
      <returns>
        <para>The array of pixels in the texture that have been selected.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Texture2D.GetPixels32(System.Int32)">
      <summary>
        <para>Get a block of pixel colors in Color32 format.</para>
      </summary>
      <param name="miplevel"></param>
    </member>
    <member name="M:UnityEngine.Texture2D.GetRawTextureData">
      <summary>
        <para>Get raw data from a texture for reading or writing.</para>
      </summary>
      <returns>
        <para>Raw texture data view.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Texture2D.GetRawTextureData">
      <summary>
        <para>Get raw data from a texture.</para>
      </summary>
      <returns>
        <para>Raw texture data as a byte array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Texture2D.IsRequestedMipmapLevelLoaded">
      <summary>
        <para>Checks to see whether the mipmap level set by requestedMipmapLevel has finished loading.</para>
      </summary>
      <returns>
        <para>True if the mipmap level requested by requestedMipmapLevel has finished loading.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Texture2D.LoadRawTextureData(System.Byte[])">
      <summary>
        <para>Fills texture pixels with raw preformatted data.</para>
      </summary>
      <param name="data">Raw data array to initialize texture pixels with.</param>
      <param name="size">Size of data in bytes.</param>
    </member>
    <member name="M:UnityEngine.Texture2D.LoadRawTextureData(Unity.Collections.NativeArray`1&lt;T&gt;)">
      <summary>
        <para>Fills texture pixels with raw preformatted data.</para>
      </summary>
      <param name="data">Raw data array to initialize texture pixels with.</param>
      <param name="size">Size of data in bytes.</param>
    </member>
    <member name="M:UnityEngine.Texture2D.LoadRawTextureData(System.IntPtr,System.Int32)">
      <summary>
        <para>Fills texture pixels with raw preformatted data.</para>
      </summary>
      <param name="data">Raw data array to initialize texture pixels with.</param>
      <param name="size">Size of data in bytes.</param>
    </member>
    <member name="M:UnityEngine.Texture2D.PackTextures(UnityEngine.Texture2D[],System.Int32,System.Int32,System.Boolean)">
      <summary>
        <para>Packs multiple Textures into a texture atlas.</para>
      </summary>
      <param name="textures">Array of textures to pack into the atlas.</param>
      <param name="padding">Padding in pixels between the packed textures.</param>
      <param name="maximumAtlasSize">Maximum size of the resulting texture.</param>
      <param name="makeNoLongerReadable">Should the texture be marked as no longer readable?</param>
      <returns>
        <para>An array of rectangles containing the UV coordinates in the atlas for each input texture, or null if packing fails.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Texture2D.ReadPixels(UnityEngine.Rect,System.Int32,System.Int32,System.Boolean)">
      <summary>
        <para>Read pixels from screen into the saved texture data.</para>
      </summary>
      <param name="source">Rectangular region of the view to read from. Pixels are read from current render target.</param>
      <param name="destX">Horizontal pixel position in the texture to place the pixels that are read.</param>
      <param name="destY">Vertical pixel position in the texture to place the pixels that are read.</param>
      <param name="recalculateMipMaps">Should the texture's mipmaps be recalculated after reading?</param>
    </member>
    <member name="M:UnityEngine.Texture2D.Resize(System.Int32,System.Int32,UnityEngine.TextureFormat,System.Boolean)">
      <summary>
        <para>Resizes the texture.</para>
      </summary>
      <param name="width"></param>
      <param name="height"></param>
      <param name="format"></param>
      <param name="hasMipMap"></param>
    </member>
    <member name="M:UnityEngine.Texture2D.Resize(System.Int32,System.Int32)">
      <summary>
        <para>Resizes the texture.</para>
      </summary>
      <param name="width"></param>
      <param name="height"></param>
    </member>
    <member name="M:UnityEngine.Texture2D.SetPixel(System.Int32,System.Int32,UnityEngine.Color)">
      <summary>
        <para>Sets pixel color at coordinates (x,y).</para>
      </summary>
      <param name="x"></param>
      <param name="y"></param>
      <param name="color"></param>
    </member>
    <member name="M:UnityEngine.Texture2D.SetPixelData(T[],System.Int32,System.Int32)">
      <summary>
        <para>Set pixel values from raw preformatted data.</para>
      </summary>
      <param name="data">Data array to initialize texture pixels with.</param>
      <param name="mipLevel">Mip level to fill.</param>
      <param name="sourceDataStartIndex">Index in the source array to start copying from (default 0).</param>
    </member>
    <member name="M:UnityEngine.Texture2D.SetPixelData(Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32,System.Int32)">
      <summary>
        <para>Set pixel values from raw preformatted data.</para>
      </summary>
      <param name="data">Data array to initialize texture pixels with.</param>
      <param name="mipLevel">Mip level to fill.</param>
      <param name="sourceDataStartIndex">Index in the source array to start copying from (default 0).</param>
    </member>
    <member name="M:UnityEngine.Texture2D.SetPixels(UnityEngine.Color[],System.Int32)">
      <summary>
        <para>Set a block of pixel colors.</para>
      </summary>
      <param name="colors">The array of pixel colours to assign (a 2D image flattened to a 1D array).</param>
      <param name="miplevel">The mip level of the texture to write to.</param>
    </member>
    <member name="M:UnityEngine.Texture2D.SetPixels(System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Color[],System.Int32)">
      <summary>
        <para>Set a block of pixel colors.</para>
      </summary>
      <param name="x"></param>
      <param name="y"></param>
      <param name="blockWidth"></param>
      <param name="blockHeight"></param>
      <param name="colors"></param>
      <param name="miplevel"></param>
    </member>
    <member name="M:UnityEngine.Texture2D.SetPixels32(UnityEngine.Color32[],System.Int32)">
      <summary>
        <para>Set a block of pixel colors.</para>
      </summary>
      <param name="colors"></param>
      <param name="miplevel"></param>
    </member>
    <member name="M:UnityEngine.Texture2D.SetPixels32(System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Color32[],System.Int32)">
      <summary>
        <para>Set a block of pixel colors.</para>
      </summary>
      <param name="x"></param>
      <param name="y"></param>
      <param name="blockWidth"></param>
      <param name="blockHeight"></param>
      <param name="colors"></param>
      <param name="miplevel"></param>
    </member>
    <member name="M:UnityEngine.Texture2D.UpdateExternalTexture(System.IntPtr)">
      <summary>
        <para>Updates Unity texture to use different native texture object.</para>
      </summary>
      <param name="nativeTex">Native 2D texture object.</param>
    </member>
    <member name="T:UnityEngine.Texture2DArray">
      <summary>
        <para>Class for handling 2D texture arrays.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture2DArray.allSlices">
      <summary>
        <para>Read Only. This property is used as a parameter in some overloads of the CommandBuffer.Blit, Graphics.Blit, CommandBuffer.SetRenderTarget, and Graphics.SetRenderTarget methods to indicate that all texture array slices are bound. The value of this property is -1.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture2DArray.depth">
      <summary>
        <para>Number of elements in a texture array (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture2DArray.format">
      <summary>
        <para>Texture format (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture2DArray.isReadable">
      <summary>
        <para>Returns true if this texture array is Read/Write Enabled; otherwise returns false. For dynamic textures created from script, always returns true.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture2DArray.Apply(System.Boolean,System.Boolean)">
      <summary>
        <para>Actually apply all previous SetPixels changes.</para>
      </summary>
      <param name="updateMipmaps">When set to true, mipmap levels are recalculated.</param>
      <param name="makeNoLongerReadable">When set to true, system memory copy of a texture is released.</param>
    </member>
    <member name="M:UnityEngine.Texture2DArray.#ctor(System.Int32,System.Int32,System.Int32,UnityEngine.TextureFormat,System.Boolean)">
      <summary>
        <para>Create a new texture array.</para>
      </summary>
      <param name="width">Width of texture array in pixels.</param>
      <param name="height">Height of texture array in pixels.</param>
      <param name="depth">Number of elements in the texture array.</param>
      <param name="format">Format of the texture.</param>
      <param name="mipmap">Should mipmaps be created?</param>
      <param name="linear">Does the texture contain non-color data (i.e. don't do any color space conversions when sampling)? Default is false.</param>
      <param name="textureFormat"></param>
      <param name="mipChain"></param>
    </member>
    <member name="M:UnityEngine.Texture2DArray.#ctor(System.Int32,System.Int32,System.Int32,UnityEngine.TextureFormat,System.Boolean,System.Boolean)">
      <summary>
        <para>Create a new texture array.</para>
      </summary>
      <param name="width">Width of texture array in pixels.</param>
      <param name="height">Height of texture array in pixels.</param>
      <param name="depth">Number of elements in the texture array.</param>
      <param name="format">Format of the texture.</param>
      <param name="mipmap">Should mipmaps be created?</param>
      <param name="linear">Does the texture contain non-color data (i.e. don't do any color space conversions when sampling)? Default is false.</param>
      <param name="textureFormat"></param>
      <param name="mipChain"></param>
    </member>
    <member name="M:UnityEngine.Texture2DArray.GetPixelData(System.Int32,System.Int32)">
      <summary>
        <para>Gets raw data from a Texture for reading or writing.</para>
      </summary>
      <param name="mipLevel">The mip level to reference.</param>
      <param name="element">The array slice to reference.</param>
    </member>
    <member name="M:UnityEngine.Texture2DArray.GetPixels(System.Int32,System.Int32)">
      <summary>
        <para>Returns pixel colors of a single array slice.</para>
      </summary>
      <param name="arrayElement">Array slice to read pixels from.</param>
      <param name="miplevel">Mipmap level to read pixels from.</param>
      <returns>
        <para>Array of pixel colors.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Texture2DArray.GetPixels32(System.Int32,System.Int32)">
      <summary>
        <para>Returns pixel colors of a single array slice.</para>
      </summary>
      <param name="arrayElement">Array slice to read pixels from.</param>
      <param name="miplevel">Mipmap level to read pixels from.</param>
      <returns>
        <para>Array of pixel colors in low precision (8 bits/channel) format.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Texture2DArray.SetPixelData(T[],System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Set pixel values from raw preformatted data.</para>
      </summary>
      <param name="data">Data array to initialize texture pixels with.</param>
      <param name="mipLevel">Mip level to fill.</param>
      <param name="element">Array slice to copy pixels to.</param>
      <param name="sourceDataStartIndex">Index in the source array to start copying from (default 0).</param>
    </member>
    <member name="M:UnityEngine.Texture2DArray.SetPixelData(Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Set pixel values from raw preformatted data.</para>
      </summary>
      <param name="data">Data array to initialize texture pixels with.</param>
      <param name="mipLevel">Mip level to fill.</param>
      <param name="element">Array slice to copy pixels to.</param>
      <param name="sourceDataStartIndex">Index in the source array to start copying from (default 0).</param>
    </member>
    <member name="M:UnityEngine.Texture2DArray.SetPixels(UnityEngine.Color[],System.Int32,System.Int32)">
      <summary>
        <para>Set pixel colors for the whole mip level.</para>
      </summary>
      <param name="colors">An array of pixel colors.</param>
      <param name="arrayElement">The texture array element index.</param>
      <param name="miplevel">The mip level.</param>
    </member>
    <member name="M:UnityEngine.Texture2DArray.SetPixels32(UnityEngine.Color32[],System.Int32,System.Int32)">
      <summary>
        <para>Set pixel colors for the whole mip level.</para>
      </summary>
      <param name="colors">An array of pixel colors.</param>
      <param name="arrayElement">The texture array element index.</param>
      <param name="miplevel">The mip level.</param>
    </member>
    <member name="T:UnityEngine.Texture3D">
      <summary>
        <para>Class for handling 3D Textures, Use this to create.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture3D.depth">
      <summary>
        <para>The depth of the texture (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture3D.format">
      <summary>
        <para>The format of the pixel data in the texture (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture3D.isReadable">
      <summary>
        <para>Returns true if this 3D texture is Read/Write Enabled; otherwise returns false. For dynamic textures created from script, always returns true.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture3D.Apply(System.Boolean,System.Boolean)">
      <summary>
        <para>Actually apply all previous SetPixels changes.</para>
      </summary>
      <param name="updateMipmaps">When set to true, mipmap levels are recalculated.</param>
      <param name="makeNoLongerReadable">When set to true, system memory copy of a texture is released.</param>
    </member>
    <member name="M:UnityEngine.Texture3D.CreateExternalTexture(System.Int32,System.Int32,System.Int32,UnityEngine.TextureFormat,System.Boolean,System.IntPtr)">
      <summary>
        <para>Creates Unity Texture out of externally created native texture object.</para>
      </summary>
      <param name="nativeTex">Native 3D texture object.</param>
      <param name="width">Width of texture in pixels.</param>
      <param name="height">Height of texture in pixels.</param>
      <param name="depth">Depth of texture in pixels</param>
      <param name="format">Format of underlying texture object.</param>
      <param name="mipmap">Does the texture have mipmaps?</param>
      <param name="mipChain"></param>
    </member>
    <member name="M:UnityEngine.Texture3D.#ctor(System.Int32,System.Int32,System.Int32,UnityEngine.TextureFormat,System.Boolean)">
      <summary>
        <para>Create a new empty 3D Texture.</para>
      </summary>
      <param name="width">Width of texture in pixels.</param>
      <param name="height">Height of texture in pixels.</param>
      <param name="depth">Depth of texture in pixels.</param>
      <param name="textureFormat">Texture data format.</param>
      <param name="mipChain">Determines whether the texture has mipmaps or not. A value of 1 (true) means the texture does have mipmaps, and a value of 0 (false) means the texture doesn't have mipmaps.</param>
    </member>
    <member name="M:UnityEngine.Texture3D.GetPixel(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Returns the pixel color that represents one mip level of the 3D texture at coordinates (x,y,z).</para>
      </summary>
      <param name="x">X coordinate to access a pixel.</param>
      <param name="y">Y coordinate to access a pixel.</param>
      <param name="z">Z coordinate to access a pixel.</param>
      <param name="mipLevel">The mipmap level to be accessed.</param>
      <returns>
        <para>The color of the pixel.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Texture3D.GetPixelBilinear(System.Single,System.Single,System.Single,System.Int32)">
      <summary>
        <para>Returns the filtered pixel color that represents one mip level of the 3D texture at normalized coordinates (u,v,w).</para>
      </summary>
      <param name="u">U normalized coordinate to access a pixel.</param>
      <param name="v">V normalized coordinate to access a pixel.</param>
      <param name="w">W normalized coordinate to access a pixel.</param>
      <param name="mipLevel">The mipmap level to be accessed.</param>
      <returns>
        <para>The colors to return by bilinear filtering.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Texture3D.GetPixelData(System.Int32)">
      <summary>
        <para>Gets raw data from a Texture for reading or writing.</para>
      </summary>
      <param name="mipLevel">The mip level to reference.</param>
    </member>
    <member name="M:UnityEngine.Texture3D.GetPixels(System.Int32)">
      <summary>
        <para>Returns an array of pixel colors representing one mip level of the 3D texture.</para>
      </summary>
      <param name="miplevel">The mipmap level to be accessed.</param>
      <returns>
        <para>The colors to get the array of pixels.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Texture3D.GetPixels32(System.Int32)">
      <summary>
        <para>Returns an array of pixel colors representing one mip level of the 3D texture.</para>
      </summary>
      <param name="miplevel">The mipmap level to be accessed.</param>
      <returns>
        <para>The colors to get the array of pixels.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Texture3D.SetPixel(System.Int32,System.Int32,System.Int32,UnityEngine.Color,System.Int32)">
      <summary>
        <para>Sets the pixel color that represents one mip level of the 3D texture at coordinates (x,y,z).</para>
      </summary>
      <param name="x">X coordinate to access a pixel.</param>
      <param name="y">Y coordinate to access a pixel.</param>
      <param name="z">Z coordinate to access a pixel.</param>
      <param name="color">The colors to set the pixels to.</param>
      <param name="mipLevel">The mipmap level to be affected by the new colors.</param>
    </member>
    <member name="M:UnityEngine.Texture3D.SetPixelData(T[],System.Int32,System.Int32)">
      <summary>
        <para>Set pixel values from raw preformatted data.</para>
      </summary>
      <param name="data">Data array to initialize texture pixels with.</param>
      <param name="mipLevel">Mip level to fill.</param>
      <param name="sourceDataStartIndex">Index in the source array to start copying from (default 0).</param>
    </member>
    <member name="M:UnityEngine.Texture3D.SetPixelData(Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32,System.Int32)">
      <summary>
        <para>Set pixel values from raw preformatted data.</para>
      </summary>
      <param name="data">Data array to initialize texture pixels with.</param>
      <param name="mipLevel">Mip level to fill.</param>
      <param name="sourceDataStartIndex">Index in the source array to start copying from (default 0).</param>
    </member>
    <member name="M:UnityEngine.Texture3D.SetPixels(UnityEngine.Color[],System.Int32)">
      <summary>
        <para>Sets pixel colors of a 3D texture.</para>
      </summary>
      <param name="colors">The colors to set the pixels to.</param>
      <param name="miplevel">The mipmap level to be affected by the new colors.</param>
    </member>
    <member name="M:UnityEngine.Texture3D.SetPixels32(UnityEngine.Color32[],System.Int32)">
      <summary>
        <para>Sets pixel colors of a 3D texture.</para>
      </summary>
      <param name="colors">The colors to set the pixels to.</param>
      <param name="miplevel">The mipmap level to be affected by the new colors.</param>
    </member>
    <member name="M:UnityEngine.Texture3D.UpdateExternalTexture(System.IntPtr)">
      <summary>
        <para>Updates Unity texture to use different native texture object.</para>
      </summary>
      <param name="nativeTex">Native 3D texture object.</param>
    </member>
    <member name="T:UnityEngine.TextureFormat">
      <summary>
        <para>Format used when creating textures from scripts.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.Alpha8">
      <summary>
        <para>Alpha-only texture format, 8 bit integer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ARGB32">
      <summary>
        <para>Color with alpha texture format, 8-bits per channel.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ARGB4444">
      <summary>
        <para>A 16 bits/pixel texture format. Texture stores color with an alpha channel.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_10x10">
      <summary>
        <para>ASTC (10x10 pixel block in 128 bits) compressed RGB(A) texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_12x12">
      <summary>
        <para>ASTC (12x12 pixel block in 128 bits) compressed RGB(A) texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_4x4">
      <summary>
        <para>ASTC (4x4 pixel block in 128 bits) compressed RGB(A) texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_5x5">
      <summary>
        <para>ASTC (5x5 pixel block in 128 bits) compressed RGB(A) texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_6x6">
      <summary>
        <para>ASTC (6x6 pixel block in 128 bits) compressed RGB(A) texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_8x8">
      <summary>
        <para>ASTC (8x8 pixel block in 128 bits) compressed RGB(A) texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_HDR_10x10">
      <summary>
        <para>ASTC (10x10 pixel block in 128 bits) compressed RGB(A) HDR texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_HDR_12x12">
      <summary>
        <para>ASTC (12x12 pixel block in 128 bits) compressed RGB(A) HDR texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_HDR_4x4">
      <summary>
        <para>ASTC (4x4 pixel block in 128 bits) compressed RGB(A) HDR texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_HDR_5x5">
      <summary>
        <para>ASTC (5x5 pixel block in 128 bits) compressed RGB(A) HDR texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_HDR_6x6">
      <summary>
        <para>ASTC (6x6 pixel block in 128 bits) compressed RGB(A) HDR texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_HDR_8x8">
      <summary>
        <para>ASTC (8x8 pixel block in 128 bits) compressed RGB(A) texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_RGB_10x10">
      <summary>
        <para>ASTC (10x10 pixel block in 128 bits) compressed RGB texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_RGB_12x12">
      <summary>
        <para>ASTC (12x12 pixel block in 128 bits) compressed RGB texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_RGB_4x4">
      <summary>
        <para>ASTC (4x4 pixel block in 128 bits) compressed RGB texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_RGB_5x5">
      <summary>
        <para>ASTC (5x5 pixel block in 128 bits) compressed RGB texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_RGB_6x6">
      <summary>
        <para>ASTC (6x6 pixel block in 128 bits) compressed RGB texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_RGB_8x8">
      <summary>
        <para>ASTC (8x8 pixel block in 128 bits) compressed RGB texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_RGBA_10x10">
      <summary>
        <para>ASTC (10x10 pixel block in 128 bits) compressed RGBA texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_RGBA_12x12">
      <summary>
        <para>ASTC (12x12 pixel block in 128 bits) compressed RGBA texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_RGBA_4x4">
      <summary>
        <para>ASTC (4x4 pixel block in 128 bits) compressed RGBA texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_RGBA_5x5">
      <summary>
        <para>ASTC (5x5 pixel block in 128 bits) compressed RGBA texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_RGBA_6x6">
      <summary>
        <para>ASTC (6x6 pixel block in 128 bits) compressed RGBA texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_RGBA_8x8">
      <summary>
        <para>ASTC (8x8 pixel block in 128 bits) compressed RGBA texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.BC4">
      <summary>
        <para>Compressed one channel (R) texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.BC5">
      <summary>
        <para>Compressed two-channel (RG) texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.BC6H">
      <summary>
        <para>HDR compressed color texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.BC7">
      <summary>
        <para>High quality compressed color texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.BGRA32">
      <summary>
        <para>Color with alpha texture format, 8-bits per channel.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.DXT1">
      <summary>
        <para>Compressed color texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.DXT1Crunched">
      <summary>
        <para>Compressed color texture format with Crunch compression for smaller storage sizes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.DXT5">
      <summary>
        <para>Compressed color with alpha channel texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.DXT5Crunched">
      <summary>
        <para>Compressed color with alpha channel texture format with Crunch compression for smaller storage sizes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.EAC_R">
      <summary>
        <para>ETC2  EAC (GL ES 3.0) 4 bitspixel compressed unsigned single-channel texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.EAC_R_SIGNED">
      <summary>
        <para>ETC2  EAC (GL ES 3.0) 4 bitspixel compressed signed single-channel texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.EAC_RG">
      <summary>
        <para>ETC2  EAC (GL ES 3.0) 8 bitspixel compressed unsigned dual-channel (RG) texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.EAC_RG_SIGNED">
      <summary>
        <para>ETC2  EAC (GL ES 3.0) 8 bitspixel compressed signed dual-channel (RG) texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ETC_RGB4">
      <summary>
        <para>ETC (GLES2.0) 4 bits/pixel compressed RGB texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ETC_RGB4_3DS">
      <summary>
        <para>ETC 4 bits/pixel compressed RGB texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ETC_RGB4Crunched">
      <summary>
        <para>Compressed color texture format with Crunch compression for smaller storage sizes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ETC_RGBA8_3DS">
      <summary>
        <para>ETC 4 bitspixel RGB + 4 bitspixel Alpha compressed texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ETC2_RGB">
      <summary>
        <para>ETC2 (GL ES 3.0) 4 bits/pixel compressed RGB texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ETC2_RGBA1">
      <summary>
        <para>ETC2 (GL ES 3.0) 4 bits/pixel RGB+1-bit alpha texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ETC2_RGBA8">
      <summary>
        <para>ETC2 (GL ES 3.0) 8 bits/pixel compressed RGBA texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ETC2_RGBA8Crunched">
      <summary>
        <para>Compressed color with alpha channel texture format using Crunch compression for smaller storage sizes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.PVRTC_RGB2">
      <summary>
        <para>PowerVR (iOS) 2 bits/pixel compressed color texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.PVRTC_RGB4">
      <summary>
        <para>PowerVR (iOS) 4 bits/pixel compressed color texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.PVRTC_RGBA2">
      <summary>
        <para>PowerVR (iOS) 2 bits/pixel compressed with alpha channel texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.PVRTC_RGBA4">
      <summary>
        <para>PowerVR (iOS) 4 bits/pixel compressed with alpha channel texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.R16">
      <summary>
        <para>Single channel (R) texture format, 16 bit integer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.R8">
      <summary>
        <para>Single channel (R) texture format, 8 bit integer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.RFloat">
      <summary>
        <para>Scalar (R) texture format, 32 bit floating point.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.RG16">
      <summary>
        <para>Two color (RG) texture format, 8-bits per channel.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.RG32">
      <summary>
        <para>Two channel (RG) texture format, 16 bit integer per channel.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.RGB24">
      <summary>
        <para>Color texture format, 8-bits per channel.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.RGB48">
      <summary>
        <para>Three channel (RGB) texture format, 16 bit integer per channel.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.RGB565">
      <summary>
        <para>A 16 bit color texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.RGB9e5Float">
      <summary>
        <para>RGB HDR format, with 9 bit mantissa per channel and a 5 bit shared exponent.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.RGBA32">
      <summary>
        <para>Color with alpha texture format, 8-bits per channel.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.RGBA4444">
      <summary>
        <para>Color and alpha  texture format, 4 bit per channel.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.RGBA64">
      <summary>
        <para>Four channel (RGBA) texture format, 16 bit integer per channel.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.RGBAFloat">
      <summary>
        <para>RGB color and alpha texture format,  32-bit floats per channel.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.RGBAHalf">
      <summary>
        <para>RGB color and alpha texture format, 16 bit floating point per channel.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.RGFloat">
      <summary>
        <para>Two color (RG)  texture format, 32 bit floating point per channel.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.RGHalf">
      <summary>
        <para>Two color (RG)  texture format, 16 bit floating point per channel.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.RHalf">
      <summary>
        <para>Scalar (R)  texture format, 16 bit floating point.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.YUY2">
      <summary>
        <para>A format that uses the YUV color space and is often used for video encoding or playback.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TextureWrapMode">
      <summary>
        <para>Wrap mode for textures.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureWrapMode.Clamp">
      <summary>
        <para>Clamps the texture to the last pixel at the edge.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureWrapMode.Mirror">
      <summary>
        <para>Tiles the texture, creating a repeating pattern by mirroring it at every integer boundary.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureWrapMode.MirrorOnce">
      <summary>
        <para>Mirrors the texture once, then clamps to edge pixels.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureWrapMode.Repeat">
      <summary>
        <para>Tiles the texture, creating a repeating pattern.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ThreadPriority">
      <summary>
        <para>Priority of a thread.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ThreadPriority.BelowNormal">
      <summary>
        <para>Below normal thread priority.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ThreadPriority.High">
      <summary>
        <para>Highest thread priority.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ThreadPriority.Low">
      <summary>
        <para>Lowest thread priority.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ThreadPriority.Normal">
      <summary>
        <para>Normal thread priority.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Time">
      <summary>
        <para>Provides an interface to get time information from Unity.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.captureDeltaTime">
      <summary>
        <para>Slows your application’s playback time to allow Unity to save screenshots in between frames.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.captureFramerate">
      <summary>
        <para>The reciprocal of Time.captureDeltaTime.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.deltaTime">
      <summary>
        <para>The interval in seconds from the last frame to the current one (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.fixedDeltaTime">
      <summary>
        <para>The interval in seconds at which physics and other fixed frame rate updates (like MonoBehaviour's MonoBehaviour.FixedUpdate) are performed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.fixedTime">
      <summary>
        <para>The time since the last MonoBehaviour.FixedUpdate started (Read Only). This is the time in seconds since the start of the game.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.fixedTimeAsDouble">
      <summary>
        <para>The double precision time since the last MonoBehaviour.FixedUpdate started (Read Only). This is the time in seconds since the start of the game.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.fixedUnscaledDeltaTime">
      <summary>
        <para>The timeScale-independent interval in seconds from the last MonoBehaviour.FixedUpdate phase to the current one (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.fixedUnscaledTime">
      <summary>
        <para>The timeScale-independent time at the beginning of the last MonoBehaviour.FixedUpdate phase (Read Only). This is the time in seconds since the start of the game.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.fixedUnscaledTimeAsDouble">
      <summary>
        <para>The double precision timeScale-independent time at the beginning of the last MonoBehaviour.FixedUpdate (Read Only). This is the time in seconds since the start of the game.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.frameCount">
      <summary>
        <para>The total number of frames since the start of the game (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.inFixedTimeStep">
      <summary>
        <para>Returns true if called inside a fixed time step callback (like MonoBehaviour's MonoBehaviour.FixedUpdate), otherwise returns false.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.maximumDeltaTime">
      <summary>
        <para>The maximum value of Time.deltaTime in any given frame. This is a time in seconds that limits the increase of Time.time between two frames.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.maximumParticleDeltaTime">
      <summary>
        <para>The maximum time a frame can spend on particle updates. If the frame takes longer than this, then updates are split into multiple smaller updates.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.realtimeSinceStartup">
      <summary>
        <para>The real time in seconds since the game started (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.realtimeSinceStartupAsDouble">
      <summary>
        <para>The real time in seconds since the game started (Read Only). Double precision version of Time.realtimeSinceStartup. </para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.smoothDeltaTime">
      <summary>
        <para>A smoothed out Time.deltaTime (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.time">
      <summary>
        <para>The time at the beginning of this frame (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.timeAsDouble">
      <summary>
        <para>The double precision time at the beginning of this frame (Read Only). This is the time in seconds since the start of the game.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.timeScale">
      <summary>
        <para>The scale at which time passes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.timeSinceLevelLoad">
      <summary>
        <para>The time since this frame started (Read Only). This is the time in seconds since the last non-additive scene has finished loading.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.timeSinceLevelLoadAsDouble">
      <summary>
        <para>The double precision time since this frame started (Read Only). This is the time in seconds since the last non-additive scene has finished loading.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.unscaledDeltaTime">
      <summary>
        <para>The timeScale-independent interval in seconds from the last frame to the current one (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.unscaledTime">
      <summary>
        <para>The timeScale-independent time for this frame (Read Only). This is the time in seconds since the start of the game.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.unscaledTimeAsDouble">
      <summary>
        <para>The double precision timeScale-independent time for this frame (Read Only). This is the time in seconds since the start of the game.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TooltipAttribute">
      <summary>
        <para>Specify a tooltip for a field in the Inspector window.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TooltipAttribute.tooltip">
      <summary>
        <para>The tooltip text.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.TooltipAttribute.#ctor(System.String)">
      <summary>
        <para>Specify a tooltip for a field.</para>
      </summary>
      <param name="tooltip">The tooltip text.</param>
    </member>
    <member name="T:UnityEngine.TouchScreenKeyboard">
      <summary>
        <para>Interface for on-screen keyboards. Only native iPhone, Android, and Windows Store Apps are supported.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TouchScreenKeyboard.active">
      <summary>
        <para>Is the keyboard visible or sliding into the position on the screen?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TouchScreenKeyboard.area">
      <summary>
        <para>Returns portion of the screen which is covered by the keyboard.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TouchScreenKeyboard.canGetSelection">
      <summary>
        <para>Specifies whether the TouchScreenKeyboard supports the selection property. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TouchScreenKeyboard.canSetSelection">
      <summary>
        <para>Specifies whether the TouchScreenKeyboard supports the selection property. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TouchScreenKeyboard.characterLimit">
      <summary>
        <para>How many characters the keyboard input field is limited to. 0 = infinite.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TouchScreenKeyboard.done">
      <summary>
        <para>Specifies if input process was finished. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TouchScreenKeyboard.hideInput">
      <summary>
        <para>Will text input field above the keyboard be hidden when the keyboard is on screen?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TouchScreenKeyboard.isInPlaceEditingAllowed">
      <summary>
        <para>Checks if the text within an input field can be selected and modified while TouchScreenKeyboard is open.</para>
      </summary>
      <returns>
        <para>Returns true when you are able to select and modify the input field, returns false otherwise.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.TouchScreenKeyboard.isSupported">
      <summary>
        <para>Is touch screen keyboard supported.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TouchScreenKeyboard.selection">
      <summary>
        <para>Gets or sets the character range of the selected text within the string currently being edited.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TouchScreenKeyboard.status">
      <summary>
        <para>Returns the status of the on-screen keyboard. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TouchScreenKeyboard.targetDisplay">
      <summary>
        <para>Specified on which display the on-screen keyboard will appear.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TouchScreenKeyboard.text">
      <summary>
        <para>Returns the text displayed by the input field of the keyboard.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TouchScreenKeyboard.type">
      <summary>
        <para>Returns the TouchScreenKeyboardType of the keyboard.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TouchScreenKeyboard.visible">
      <summary>
        <para>Returns true whenever any keyboard is visible on the screen.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TouchScreenKeyboard.wasCanceled">
      <summary>
        <para>Specifies if input process was canceled. (Read Only)</para>
      </summary>
    </member>
    <member name="M:UnityEngine.TouchScreenKeyboard.Open(System.String)">
      <summary>
        <para>Opens the native keyboard provided by OS on the screen.</para>
      </summary>
      <param name="text">Text to edit.</param>
      <param name="keyboardType">Type of keyboard (eg, any text, numbers only, etc).</param>
      <param name="autocorrection">Is autocorrection applied?</param>
      <param name="multiline">Can more than one line of text be entered?</param>
      <param name="secure">Is the text masked (for passwords, etc)?</param>
      <param name="alert">Is the keyboard opened in alert mode?</param>
      <param name="textPlaceholder">Text to be used if no other text is present.</param>
      <param name="characterLimit">How many characters the keyboard input field is limited to. 0 = infinite. (Android and iOS only)</param>
    </member>
    <member name="M:UnityEngine.TouchScreenKeyboard.Open(System.String,UnityEngine.TouchScreenKeyboardType)">
      <summary>
        <para>Opens the native keyboard provided by OS on the screen.</para>
      </summary>
      <param name="text">Text to edit.</param>
      <param name="keyboardType">Type of keyboard (eg, any text, numbers only, etc).</param>
      <param name="autocorrection">Is autocorrection applied?</param>
      <param name="multiline">Can more than one line of text be entered?</param>
      <param name="secure">Is the text masked (for passwords, etc)?</param>
      <param name="alert">Is the keyboard opened in alert mode?</param>
      <param name="textPlaceholder">Text to be used if no other text is present.</param>
      <param name="characterLimit">How many characters the keyboard input field is limited to. 0 = infinite. (Android and iOS only)</param>
    </member>
    <member name="M:UnityEngine.TouchScreenKeyboard.Open(System.String,UnityEngine.TouchScreenKeyboardType,System.Boolean)">
      <summary>
        <para>Opens the native keyboard provided by OS on the screen.</para>
      </summary>
      <param name="text">Text to edit.</param>
      <param name="keyboardType">Type of keyboard (eg, any text, numbers only, etc).</param>
      <param name="autocorrection">Is autocorrection applied?</param>
      <param name="multiline">Can more than one line of text be entered?</param>
      <param name="secure">Is the text masked (for passwords, etc)?</param>
      <param name="alert">Is the keyboard opened in alert mode?</param>
      <param name="textPlaceholder">Text to be used if no other text is present.</param>
      <param name="characterLimit">How many characters the keyboard input field is limited to. 0 = infinite. (Android and iOS only)</param>
    </member>
    <member name="M:UnityEngine.TouchScreenKeyboard.Open(System.String,UnityEngine.TouchScreenKeyboardType,System.Boolean,System.Boolean)">
      <summary>
        <para>Opens the native keyboard provided by OS on the screen.</para>
      </summary>
      <param name="text">Text to edit.</param>
      <param name="keyboardType">Type of keyboard (eg, any text, numbers only, etc).</param>
      <param name="autocorrection">Is autocorrection applied?</param>
      <param name="multiline">Can more than one line of text be entered?</param>
      <param name="secure">Is the text masked (for passwords, etc)?</param>
      <param name="alert">Is the keyboard opened in alert mode?</param>
      <param name="textPlaceholder">Text to be used if no other text is present.</param>
      <param name="characterLimit">How many characters the keyboard input field is limited to. 0 = infinite. (Android and iOS only)</param>
    </member>
    <member name="M:UnityEngine.TouchScreenKeyboard.Open(System.String,UnityEngine.TouchScreenKeyboardType,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        <para>Opens the native keyboard provided by OS on the screen.</para>
      </summary>
      <param name="text">Text to edit.</param>
      <param name="keyboardType">Type of keyboard (eg, any text, numbers only, etc).</param>
      <param name="autocorrection">Is autocorrection applied?</param>
      <param name="multiline">Can more than one line of text be entered?</param>
      <param name="secure">Is the text masked (for passwords, etc)?</param>
      <param name="alert">Is the keyboard opened in alert mode?</param>
      <param name="textPlaceholder">Text to be used if no other text is present.</param>
      <param name="characterLimit">How many characters the keyboard input field is limited to. 0 = infinite. (Android and iOS only)</param>
    </member>
    <member name="M:UnityEngine.TouchScreenKeyboard.Open(System.String,UnityEngine.TouchScreenKeyboardType,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        <para>Opens the native keyboard provided by OS on the screen.</para>
      </summary>
      <param name="text">Text to edit.</param>
      <param name="keyboardType">Type of keyboard (eg, any text, numbers only, etc).</param>
      <param name="autocorrection">Is autocorrection applied?</param>
      <param name="multiline">Can more than one line of text be entered?</param>
      <param name="secure">Is the text masked (for passwords, etc)?</param>
      <param name="alert">Is the keyboard opened in alert mode?</param>
      <param name="textPlaceholder">Text to be used if no other text is present.</param>
      <param name="characterLimit">How many characters the keyboard input field is limited to. 0 = infinite. (Android and iOS only)</param>
    </member>
    <member name="M:UnityEngine.TouchScreenKeyboard.Open(System.String,UnityEngine.TouchScreenKeyboardType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String)">
      <summary>
        <para>Opens the native keyboard provided by OS on the screen.</para>
      </summary>
      <param name="text">Text to edit.</param>
      <param name="keyboardType">Type of keyboard (eg, any text, numbers only, etc).</param>
      <param name="autocorrection">Is autocorrection applied?</param>
      <param name="multiline">Can more than one line of text be entered?</param>
      <param name="secure">Is the text masked (for passwords, etc)?</param>
      <param name="alert">Is the keyboard opened in alert mode?</param>
      <param name="textPlaceholder">Text to be used if no other text is present.</param>
      <param name="characterLimit">How many characters the keyboard input field is limited to. 0 = infinite. (Android and iOS only)</param>
    </member>
    <member name="M:UnityEngine.TouchScreenKeyboard.Open(System.String,UnityEngine.TouchScreenKeyboardType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Int32)">
      <summary>
        <para>Opens the native keyboard provided by OS on the screen.</para>
      </summary>
      <param name="text">Text to edit.</param>
      <param name="keyboardType">Type of keyboard (eg, any text, numbers only, etc).</param>
      <param name="autocorrection">Is autocorrection applied?</param>
      <param name="multiline">Can more than one line of text be entered?</param>
      <param name="secure">Is the text masked (for passwords, etc)?</param>
      <param name="alert">Is the keyboard opened in alert mode?</param>
      <param name="textPlaceholder">Text to be used if no other text is present.</param>
      <param name="characterLimit">How many characters the keyboard input field is limited to. 0 = infinite. (Android and iOS only)</param>
    </member>
    <member name="T:UnityEngine.TouchScreenKeyboard.Status">
      <summary>
        <para>The status of the on-screen keyboard.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TouchScreenKeyboard.Status.Canceled">
      <summary>
        <para>The on-screen keyboard was canceled.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TouchScreenKeyboard.Status.Done">
      <summary>
        <para>The user has finished providing input.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TouchScreenKeyboard.Status.LostFocus">
      <summary>
        <para>The on-screen keyboard has lost focus.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TouchScreenKeyboard.Status.Visible">
      <summary>
        <para>The on-screen keyboard is visible.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TouchScreenKeyboardType">
      <summary>
        <para>Enumeration of the different types of supported touchscreen keyboards.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TouchScreenKeyboardType.ASCIICapable">
      <summary>
        <para>Keyboard with standard ASCII keys.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TouchScreenKeyboardType.DecimalPad">
      <summary>
        <para>Keyboard with numbers and a decimal point.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TouchScreenKeyboardType.Default">
      <summary>
        <para>The default keyboard layout of the target platform.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TouchScreenKeyboardType.EmailAddress">
      <summary>
        <para>Keyboard with additional keys suitable for typing email addresses.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TouchScreenKeyboardType.NamePhonePad">
      <summary>
        <para>Keyboard with alphanumeric keys.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TouchScreenKeyboardType.NintendoNetworkAccount">
      <summary>
        <para>Keyboard for the Nintendo Network (Deprecated).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TouchScreenKeyboardType.NumberPad">
      <summary>
        <para>Keyboard with standard numeric keys.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TouchScreenKeyboardType.NumbersAndPunctuation">
      <summary>
        <para>Keyboard with numbers and punctuation mark keys.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TouchScreenKeyboardType.OneTimeCode">
      <summary>
        <para>Keyboard with standard numeric keys.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TouchScreenKeyboardType.PhonePad">
      <summary>
        <para>Keyboard with a layout suitable for typing telephone numbers.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TouchScreenKeyboardType.Search">
      <summary>
        <para>Keyboard with the "." key beside the space key, suitable for typing search terms.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TouchScreenKeyboardType.Social">
      <summary>
        <para>Keyboard with symbol keys often used on social media, such as Twitter.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TouchScreenKeyboardType.URL">
      <summary>
        <para>Keyboard with keys for URL entry.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TrailRenderer">
      <summary>
        <para>The trail renderer is used to make trails behind objects in the Scene as they move about.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TrailRenderer.alignment">
      <summary>
        <para>Select whether the trail will face the camera, or the orientation of the Transform Component.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TrailRenderer.autodestruct">
      <summary>
        <para>Does the GameObject of this Trail Renderer auto destruct?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TrailRenderer.colorGradient">
      <summary>
        <para>Set the color gradient describing the color of the trail at various points along its length.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TrailRenderer.emitting">
      <summary>
        <para>Creates trails when the GameObject moves.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TrailRenderer.endColor">
      <summary>
        <para>Set the color at the end of the trail.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TrailRenderer.endWidth">
      <summary>
        <para>The width of the trail at the end of the trail.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TrailRenderer.generateLightingData">
      <summary>
        <para>Configures a trail to generate Normals and Tangents. With this data, Scene lighting can affect the trail via Normal Maps and the Unity Standard Shader, or your own custom-built Shaders.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TrailRenderer.minVertexDistance">
      <summary>
        <para>Set the minimum distance the trail can travel before a new vertex is added to it.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TrailRenderer.numCapVertices">
      <summary>
        <para>Set this to a value greater than 0, to get rounded corners on each end of the trail.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TrailRenderer.numCornerVertices">
      <summary>
        <para>Set this to a value greater than 0, to get rounded corners between each segment of the trail.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TrailRenderer.numPositions">
      <summary>
        <para>Get the number of line segments in the trail.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TrailRenderer.positionCount">
      <summary>
        <para>Get the number of line segments in the trail.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TrailRenderer.shadowBias">
      <summary>
        <para>Apply a shadow bias to prevent self-shadowing artifacts. The specified value is the proportion of the trail width at each segment.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TrailRenderer.startColor">
      <summary>
        <para>Set the color at the start of the trail.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TrailRenderer.startWidth">
      <summary>
        <para>The width of the trail at the spawning point.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TrailRenderer.textureMode">
      <summary>
        <para>Choose whether the U coordinate of the trail texture is tiled or stretched.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TrailRenderer.time">
      <summary>
        <para>How long does the trail take to fade out.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TrailRenderer.widthCurve">
      <summary>
        <para>Set the curve describing the width of the trail at various points along its length.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TrailRenderer.widthMultiplier">
      <summary>
        <para>Set an overall multiplier that is applied to the TrailRenderer.widthCurve to get the final width of the trail.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.TrailRenderer.AddPosition(UnityEngine.Vector3)">
      <summary>
        <para>Adds a position to the trail.</para>
      </summary>
      <param name="position">The position to add to the trail.</param>
    </member>
    <member name="M:UnityEngine.TrailRenderer.AddPositions(UnityEngine.Vector3[])">
      <summary>
        <para>Add an array of positions to the trail.</para>
      </summary>
      <param name="positions">The positions to add to the trail.</param>
    </member>
    <member name="M:UnityEngine.TrailRenderer.AddPositions(Unity.Collections.NativeArray`1&lt;UnityEngine.Vector3&gt;)">
      <summary>
        <para>Add an array of positions to the trail.</para>
      </summary>
      <param name="positions">The positions to add to the trail.</param>
    </member>
    <member name="M:UnityEngine.TrailRenderer.AddPositions(Unity.Collections.NativeSlice`1&lt;UnityEngine.Vector3&gt;)">
      <summary>
        <para>Add an array of positions to the trail.</para>
      </summary>
      <param name="positions">The positions to add to the trail.</param>
    </member>
    <member name="M:UnityEngine.TrailRenderer.BakeMesh(UnityEngine.Mesh)">
      <summary>
        <para>Creates a snapshot of TrailRenderer and stores it in mesh.</para>
      </summary>
      <param name="mesh">A static mesh that will receive the snapshot of the trail.</param>
      <param name="camera">The camera used for determining which way camera-space trails will face.</param>
      <param name="useTransform">Include the rotation and scale of the Transform in the baked mesh.</param>
    </member>
    <member name="M:UnityEngine.TrailRenderer.BakeMesh(UnityEngine.Mesh,System.Boolean)">
      <summary>
        <para>Creates a snapshot of TrailRenderer and stores it in mesh.</para>
      </summary>
      <param name="mesh">A static mesh that will receive the snapshot of the trail.</param>
      <param name="camera">The camera used for determining which way camera-space trails will face.</param>
      <param name="useTransform">Include the rotation and scale of the Transform in the baked mesh.</param>
    </member>
    <member name="M:UnityEngine.TrailRenderer.BakeMesh(UnityEngine.Mesh,UnityEngine.Camera)">
      <summary>
        <para>Creates a snapshot of TrailRenderer and stores it in mesh.</para>
      </summary>
      <param name="mesh">A static mesh that will receive the snapshot of the trail.</param>
      <param name="camera">The camera used for determining which way camera-space trails will face.</param>
      <param name="useTransform">Include the rotation and scale of the Transform in the baked mesh.</param>
    </member>
    <member name="M:UnityEngine.TrailRenderer.BakeMesh(UnityEngine.Mesh,UnityEngine.Camera,System.Boolean)">
      <summary>
        <para>Creates a snapshot of TrailRenderer and stores it in mesh.</para>
      </summary>
      <param name="mesh">A static mesh that will receive the snapshot of the trail.</param>
      <param name="camera">The camera used for determining which way camera-space trails will face.</param>
      <param name="useTransform">Include the rotation and scale of the Transform in the baked mesh.</param>
    </member>
    <member name="M:UnityEngine.TrailRenderer.Clear">
      <summary>
        <para>Removes all points from the TrailRenderer.
Useful for restarting a trail from a new position.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.TrailRenderer.GetPosition(System.Int32)">
      <summary>
        <para>Get the position of a vertex in the trail.</para>
      </summary>
      <param name="index">The index of the position to retrieve.</param>
      <returns>
        <para>The position at the specified index in the array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.TrailRenderer.GetPositions(UnityEngine.Vector3[])">
      <summary>
        <para>Get the positions of all vertices in the trail.</para>
      </summary>
      <param name="positions">The array of positions to retrieve.</param>
      <returns>
        <para>How many positions were actually stored in the output array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.TrailRenderer.GetPositions(Unity.Collections.NativeArray`1&lt;UnityEngine.Vector3&gt;)">
      <summary>
        <para>Get the positions of all vertices in the trail.</para>
      </summary>
      <param name="positions">The array of positions to retrieve.</param>
      <returns>
        <para>How many positions were actually stored in the output array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.TrailRenderer.GetPositions(Unity.Collections.NativeSlice`1&lt;UnityEngine.Vector3&gt;)">
      <summary>
        <para>Get the positions of all vertices in the trail.</para>
      </summary>
      <param name="positions">The array of positions to retrieve.</param>
      <returns>
        <para>How many positions were actually stored in the output array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.TrailRenderer.SetPosition(System.Int32,UnityEngine.Vector3)">
      <summary>
        <para>Set the position of a vertex in the trail.</para>
      </summary>
      <param name="index">Which position to set.</param>
      <param name="position">The new position.</param>
    </member>
    <member name="M:UnityEngine.TrailRenderer.SetPositions(UnityEngine.Vector3[])">
      <summary>
        <para>Sets the positions of all vertices in the trail.</para>
      </summary>
      <param name="positions">The array of positions to set.</param>
    </member>
    <member name="M:UnityEngine.TrailRenderer.SetPositions(Unity.Collections.NativeArray`1&lt;UnityEngine.Vector3&gt;)">
      <summary>
        <para>Sets the positions of all vertices in the trail.</para>
      </summary>
      <param name="positions">The array of positions to set.</param>
    </member>
    <member name="M:UnityEngine.TrailRenderer.SetPositions(Unity.Collections.NativeSlice`1&lt;UnityEngine.Vector3&gt;)">
      <summary>
        <para>Sets the positions of all vertices in the trail.</para>
      </summary>
      <param name="positions">The array of positions to set.</param>
    </member>
    <member name="T:UnityEngine.Transform">
      <summary>
        <para>Position, rotation and scale of an object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.childCount">
      <summary>
        <para>The number of children the parent Transform has.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.eulerAngles">
      <summary>
        <para>The rotation as Euler angles in degrees.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.forward">
      <summary>
        <para>Returns a normalized vector representing the blue axis of the transform in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.hasChanged">
      <summary>
        <para>Has the transform changed since the last time the flag was set to 'false'?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.hierarchyCapacity">
      <summary>
        <para>The transform capacity of the transform's hierarchy data structure.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.hierarchyCount">
      <summary>
        <para>The number of transforms in the transform's hierarchy data structure.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.localEulerAngles">
      <summary>
        <para>The rotation as Euler angles in degrees relative to the parent transform's rotation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.localPosition">
      <summary>
        <para>Position of the transform relative to the parent transform.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.localRotation">
      <summary>
        <para>The rotation of the transform relative to the transform rotation of the parent.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.localScale">
      <summary>
        <para>The scale of the transform relative to the GameObjects parent.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.localToWorldMatrix">
      <summary>
        <para>Matrix that transforms a point from local space into world space (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.lossyScale">
      <summary>
        <para>The global scale of the object (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.parent">
      <summary>
        <para>The parent of the transform.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.position">
      <summary>
        <para>The world space position of the Transform.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.right">
      <summary>
        <para>The red axis of the transform in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.root">
      <summary>
        <para>Returns the topmost transform in the hierarchy.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.rotation">
      <summary>
        <para>A Quaternion that stores the rotation of the Transform in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.up">
      <summary>
        <para>The green axis of the transform in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.worldToLocalMatrix">
      <summary>
        <para>Matrix that transforms a point from world space into local space (Read Only).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.DetachChildren">
      <summary>
        <para>Unparents all children.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.Find(System.String)">
      <summary>
        <para>Finds a child by n and returns it.</para>
      </summary>
      <param name="n">Name of child to be found.</param>
      <returns>
        <para>The returned child transform or null if no child is found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Transform.GetChild(System.Int32)">
      <summary>
        <para>Returns a transform child by index.</para>
      </summary>
      <param name="index">Index of the child transform to return. Must be smaller than Transform.childCount.</param>
      <returns>
        <para>Transform child by index.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Transform.GetSiblingIndex">
      <summary>
        <para>Gets the sibling index.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.InverseTransformDirection(UnityEngine.Vector3)">
      <summary>
        <para>Transforms a direction from world space to local space. The opposite of Transform.TransformDirection.</para>
      </summary>
      <param name="direction"></param>
    </member>
    <member name="M:UnityEngine.Transform.InverseTransformDirection(System.Single,System.Single,System.Single)">
      <summary>
        <para>Transforms the direction x, y, z from world space to local space. The opposite of Transform.TransformDirection.</para>
      </summary>
      <param name="x"></param>
      <param name="y"></param>
      <param name="z"></param>
    </member>
    <member name="M:UnityEngine.Transform.InverseTransformPoint(UnityEngine.Vector3)">
      <summary>
        <para>Transforms position from world space to local space.</para>
      </summary>
      <param name="position"></param>
    </member>
    <member name="M:UnityEngine.Transform.InverseTransformPoint(System.Single,System.Single,System.Single)">
      <summary>
        <para>Transforms the position x, y, z from world space to local space. The opposite of Transform.TransformPoint.</para>
      </summary>
      <param name="x"></param>
      <param name="y"></param>
      <param name="z"></param>
    </member>
    <member name="M:UnityEngine.Transform.InverseTransformVector(UnityEngine.Vector3)">
      <summary>
        <para>Transforms a vector from world space to local space. The opposite of Transform.TransformVector.</para>
      </summary>
      <param name="vector"></param>
    </member>
    <member name="M:UnityEngine.Transform.InverseTransformVector(System.Single,System.Single,System.Single)">
      <summary>
        <para>Transforms the vector x, y, z from world space to local space. The opposite of Transform.TransformVector.</para>
      </summary>
      <param name="x"></param>
      <param name="y"></param>
      <param name="z"></param>
    </member>
    <member name="M:UnityEngine.Transform.IsChildOf(UnityEngine.Transform)">
      <summary>
        <para>Is this transform a child of parent?</para>
      </summary>
      <param name="parent"></param>
    </member>
    <member name="M:UnityEngine.Transform.LookAt(UnityEngine.Transform)">
      <summary>
        <para>Rotates the transform so the forward vector points at target's current position.</para>
      </summary>
      <param name="target">Object to point towards.</param>
      <param name="worldUp">Vector specifying the upward direction.</param>
    </member>
    <member name="M:UnityEngine.Transform.LookAt(UnityEngine.Transform,UnityEngine.Vector3)">
      <summary>
        <para>Rotates the transform so the forward vector points at target's current position.</para>
      </summary>
      <param name="target">Object to point towards.</param>
      <param name="worldUp">Vector specifying the upward direction.</param>
    </member>
    <member name="M:UnityEngine.Transform.LookAt(UnityEngine.Vector3)">
      <summary>
        <para>Rotates the transform so the forward vector points at worldPosition.</para>
      </summary>
      <param name="worldPosition">Point to look at.</param>
      <param name="worldUp">Vector specifying the upward direction.</param>
    </member>
    <member name="M:UnityEngine.Transform.LookAt(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Rotates the transform so the forward vector points at worldPosition.</para>
      </summary>
      <param name="worldPosition">Point to look at.</param>
      <param name="worldUp">Vector specifying the upward direction.</param>
    </member>
    <member name="M:UnityEngine.Transform.Rotate(UnityEngine.Vector3,UnityEngine.Space)">
      <summary>
        <para>Applies a rotation of eulerAngles.z degrees around the z-axis, eulerAngles.x degrees around the x-axis, and eulerAngles.y degrees around the y-axis (in that order).</para>
      </summary>
      <param name="eulers">The rotation to apply in euler angles.</param>
      <param name="relativeTo">Determines whether to rotate the GameObject either locally to  the GameObject or relative to the Scene in world space.</param>
    </member>
    <member name="M:UnityEngine.Transform.Rotate(System.Single,System.Single,System.Single,UnityEngine.Space)">
      <summary>
        <para>The implementation of this method applies a rotation of zAngle degrees around the z axis, xAngle degrees around the x axis, and yAngle degrees around the y axis (in that order).</para>
      </summary>
      <param name="relativeTo">Determines whether to rotate the GameObject either locally to the GameObject or relative to the Scene in world space.</param>
      <param name="xAngle">Degrees to rotate the GameObject around the X axis.</param>
      <param name="yAngle">Degrees to rotate the GameObject around the Y axis.</param>
      <param name="zAngle">Degrees to rotate the GameObject around the Z axis.</param>
    </member>
    <member name="M:UnityEngine.Transform.Rotate(UnityEngine.Vector3,System.Single,UnityEngine.Space)">
      <summary>
        <para>Rotates the object around the given axis by the number of degrees defined by the given angle.</para>
      </summary>
      <param name="angle">The degrees of rotation to apply.</param>
      <param name="axis">The axis to apply rotation to.</param>
      <param name="relativeTo">Determines whether to rotate the GameObject either locally to the GameObject or relative to the Scene in world space.</param>
    </member>
    <member name="M:UnityEngine.Transform.Rotate(UnityEngine.Vector3)">
      <summary>
        <para>Applies a rotation of eulerAngles.z degrees around the z-axis, eulerAngles.x degrees around the x-axis, and eulerAngles.y degrees around the y-axis (in that order).</para>
      </summary>
      <param name="eulers">The rotation to apply in euler angles.</param>
    </member>
    <member name="M:UnityEngine.Transform.Rotate(System.Single,System.Single,System.Single)">
      <summary>
        <para>The implementation of this method applies a rotation of zAngle degrees around the z axis, xAngle degrees around the x axis, and yAngle degrees around the y axis (in that order).</para>
      </summary>
      <param name="xAngle">Degrees to rotate the GameObject around the X axis.</param>
      <param name="yAngle">Degrees to rotate the GameObject around the Y axis.</param>
      <param name="zAngle">Degrees to rotate the GameObject around the Z axis.</param>
    </member>
    <member name="M:UnityEngine.Transform.Rotate(UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Rotates the object around the given axis by the number of degrees defined by the given angle.</para>
      </summary>
      <param name="axis">The axis to apply rotation to.</param>
      <param name="angle">The degrees of rotation to apply.</param>
    </member>
    <member name="M:UnityEngine.Transform.RotateAround(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Rotates the transform about axis passing through point in world coordinates by angle degrees.</para>
      </summary>
      <param name="point"></param>
      <param name="axis"></param>
      <param name="angle"></param>
    </member>
    <member name="M:UnityEngine.Transform.RotateAround(UnityEngine.Vector3,System.Single)">
      <summary>
        <para></para>
      </summary>
      <param name="axis"></param>
      <param name="angle"></param>
    </member>
    <member name="M:UnityEngine.Transform.SetAsFirstSibling">
      <summary>
        <para>Move the transform to the start of the local transform list.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.SetAsLastSibling">
      <summary>
        <para>Move the transform to the end of the local transform list.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.SetParent(UnityEngine.Transform)">
      <summary>
        <para>Set the parent of the transform.</para>
      </summary>
      <param name="parent">The parent Transform to use.</param>
      <param name="worldPositionStays">If true, the parent-relative position, scale and rotation are modified such that the object keeps the same world space position, rotation and scale as before.</param>
      <param name="p"></param>
    </member>
    <member name="M:UnityEngine.Transform.SetParent(UnityEngine.Transform,System.Boolean)">
      <summary>
        <para>Set the parent of the transform.</para>
      </summary>
      <param name="parent">The parent Transform to use.</param>
      <param name="worldPositionStays">If true, the parent-relative position, scale and rotation are modified such that the object keeps the same world space position, rotation and scale as before.</param>
      <param name="p"></param>
    </member>
    <member name="M:UnityEngine.Transform.SetPositionAndRotation(UnityEngine.Vector3,UnityEngine.Quaternion)">
      <summary>
        <para>Sets the world space position and rotation of the Transform component.</para>
      </summary>
      <param name="position"></param>
      <param name="rotation"></param>
    </member>
    <member name="M:UnityEngine.Transform.SetSiblingIndex(System.Int32)">
      <summary>
        <para>Sets the sibling index.</para>
      </summary>
      <param name="index">Index to set.</param>
    </member>
    <member name="M:UnityEngine.Transform.TransformDirection(UnityEngine.Vector3)">
      <summary>
        <para>Transforms direction from local space to world space.</para>
      </summary>
      <param name="direction"></param>
    </member>
    <member name="M:UnityEngine.Transform.TransformDirection(System.Single,System.Single,System.Single)">
      <summary>
        <para>Transforms direction x, y, z from local space to world space.</para>
      </summary>
      <param name="x"></param>
      <param name="y"></param>
      <param name="z"></param>
    </member>
    <member name="M:UnityEngine.Transform.TransformPoint(UnityEngine.Vector3)">
      <summary>
        <para>Transforms position from local space to world space.</para>
      </summary>
      <param name="position"></param>
    </member>
    <member name="M:UnityEngine.Transform.TransformPoint(System.Single,System.Single,System.Single)">
      <summary>
        <para>Transforms the position x, y, z from local space to world space.</para>
      </summary>
      <param name="x"></param>
      <param name="y"></param>
      <param name="z"></param>
    </member>
    <member name="M:UnityEngine.Transform.TransformVector(UnityEngine.Vector3)">
      <summary>
        <para>Transforms vector from local space to world space.</para>
      </summary>
      <param name="vector"></param>
    </member>
    <member name="M:UnityEngine.Transform.TransformVector(System.Single,System.Single,System.Single)">
      <summary>
        <para>Transforms vector x, y, z from local space to world space.</para>
      </summary>
      <param name="x"></param>
      <param name="y"></param>
      <param name="z"></param>
    </member>
    <member name="M:UnityEngine.Transform.Translate(UnityEngine.Vector3)">
      <summary>
        <para>Moves the transform in the direction and distance of translation.</para>
      </summary>
      <param name="translation"></param>
      <param name="relativeTo"></param>
    </member>
    <member name="M:UnityEngine.Transform.Translate(UnityEngine.Vector3,UnityEngine.Space)">
      <summary>
        <para>Moves the transform in the direction and distance of translation.</para>
      </summary>
      <param name="translation"></param>
      <param name="relativeTo"></param>
    </member>
    <member name="M:UnityEngine.Transform.Translate(System.Single,System.Single,System.Single)">
      <summary>
        <para>Moves the transform by x along the x axis, y along the y axis, and z along the z axis.</para>
      </summary>
      <param name="x"></param>
      <param name="y"></param>
      <param name="z"></param>
      <param name="relativeTo"></param>
    </member>
    <member name="M:UnityEngine.Transform.Translate(System.Single,System.Single,System.Single,UnityEngine.Space)">
      <summary>
        <para>Moves the transform by x along the x axis, y along the y axis, and z along the z axis.</para>
      </summary>
      <param name="x"></param>
      <param name="y"></param>
      <param name="z"></param>
      <param name="relativeTo"></param>
    </member>
    <member name="M:UnityEngine.Transform.Translate(UnityEngine.Vector3,UnityEngine.Transform)">
      <summary>
        <para>Moves the transform in the direction and distance of translation.</para>
      </summary>
      <param name="translation"></param>
      <param name="relativeTo"></param>
    </member>
    <member name="M:UnityEngine.Transform.Translate(System.Single,System.Single,System.Single,UnityEngine.Transform)">
      <summary>
        <para>Moves the transform by x along the x axis, y along the y axis, and z along the z axis.</para>
      </summary>
      <param name="x"></param>
      <param name="y"></param>
      <param name="z"></param>
      <param name="relativeTo"></param>
    </member>
    <member name="T:UnityEngine.TransparencySortMode">
      <summary>
        <para>Transparent object sorting mode of a Camera.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TransparencySortMode.CustomAxis">
      <summary>
        <para>Sort objects based on distance along a custom axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TransparencySortMode.Default">
      <summary>
        <para>Default transparency sorting mode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TransparencySortMode.Orthographic">
      <summary>
        <para>Orthographic transparency sorting mode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TransparencySortMode.Perspective">
      <summary>
        <para>Perspective transparency sorting mode.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.tvOS.Device">
      <summary>
        <para>Interface into tvOS specific functionality.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.tvOS.Device.advertisingIdentifier">
      <summary>
        <para>Advertising ID.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.tvOS.Device.advertisingTrackingEnabled">
      <summary>
        <para>Is advertising tracking enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.tvOS.Device.generation">
      <summary>
        <para>The generation of the device. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.tvOS.Device.systemVersion">
      <summary>
        <para>iOS version.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.tvOS.Device.vendorIdentifier">
      <summary>
        <para>Vendor ID.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.tvOS.Device.ResetNoBackupFlag(System.String)">
      <summary>
        <para>Reset "no backup" file flag: file will be synced with iCloud/iTunes backup and can be deleted by OS in low storage situations.</para>
      </summary>
      <param name="path"></param>
    </member>
    <member name="M:UnityEngine.tvOS.Device.SetNoBackupFlag(System.String)">
      <summary>
        <para>Set file flag to be excluded from iCloud/iTunes backup.</para>
      </summary>
      <param name="path"></param>
    </member>
    <member name="T:UnityEngine.tvOS.DeviceGeneration">
      <summary>
        <para>iOS device generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.tvOS.DeviceGeneration.AppleTV1Gen">
      <summary>
        <para>First generation Apple TV.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.tvOS.DeviceGeneration.AppleTV2Gen">
      <summary>
        <para>Second generation (4K) Apple TV.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.tvOS.Remote">
      <summary>
        <para>A class for Apple TV remote input configuration.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.tvOS.Remote.allowExitToHome">
      <summary>
        <para>Configures how "Menu" button behaves on Apple TV Remote. If this property is set to true hitting "Menu" on Remote will exit to system home screen. When this property is false current application is responsible for handling "Menu" button. It is recommended to set this property to true on top level menus of your application.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.tvOS.Remote.allowRemoteRotation">
      <summary>
        <para>Configures if Apple TV Remote should autorotate all the inputs when Remote is being held in horizontal orientation. Default is false.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.tvOS.Remote.reportAbsoluteDpadValues">
      <summary>
        <para>Configures how touches are mapped to analog joystick axes in relative or absolute values. If set to true it will return +1 on Horizontal axis when very far right is being touched on Remote touch aread (and -1 when very left area is touched correspondingly). The same applies for Vertical axis too. When this property is set to false player should swipe instead of touching specific area of remote to generate Horizontal or Vertical input.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.tvOS.Remote.touchesEnabled">
      <summary>
        <para>Disables Apple TV Remote touch propagation to Unity Input.touches API. Useful for 3rd party frameworks, which do not respect Touch.type == Indirect.
Default is false.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.U2D.PixelPerfectRendering">
      <summary>
        <para>A collection of APIs that facilitate pixel perfect rendering of sprite-based renderers.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.U2D.PixelPerfectRendering.pixelSnapSpacing">
      <summary>
        <para>To achieve a pixel perfect render, Sprites must be displaced to discrete positions at render time. This value defines the minimum distance between these positions. This doesn’t affect the GameObject's transform position.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.U2D.SpriteAtlas">
      <summary>
        <para>Sprite Atlas is an asset created within Unity. It is part of the built-in sprite packing solution.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.U2D.SpriteAtlas.isVariant">
      <summary>
        <para>Return true if this SpriteAtlas is a variant.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.U2D.SpriteAtlas.spriteCount">
      <summary>
        <para>Get the total number of Sprite packed into this atlas.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.U2D.SpriteAtlas.tag">
      <summary>
        <para>Get the tag of this SpriteAtlas.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.U2D.SpriteAtlas.CanBindTo(UnityEngine.Sprite)">
      <summary>
        <para>Return true if Sprite is packed into this SpriteAtlas.</para>
      </summary>
      <param name="sprite"></param>
    </member>
    <member name="M:UnityEngine.U2D.SpriteAtlas.GetSprite(System.String)">
      <summary>
        <para>Clone the first Sprite in this atlas that matches the name packed in this atlas and return it.</para>
      </summary>
      <param name="name">The name of the Sprite.</param>
    </member>
    <member name="M:UnityEngine.U2D.SpriteAtlas.GetSprites(UnityEngine.Sprite[])">
      <summary>
        <para>Clone all the Sprite in this atlas and fill them into the supplied array.</para>
      </summary>
      <param name="sprites">Array of Sprite that will be filled.</param>
      <returns>
        <para>The size of the returned array.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.U2D.SpriteAtlas.GetSprites(UnityEngine.Sprite[],System.String)">
      <summary>
        <para>Clone all the Sprite matching the name in this atlas and fill them into the supplied array.</para>
      </summary>
      <param name="sprites">Array of Sprite that will be filled.</param>
      <param name="name">The name of the Sprite.</param>
    </member>
    <member name="T:UnityEngine.U2D.SpriteAtlasManager">
      <summary>
        <para>Manages SpriteAtlas during runtime.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.U2D.SpriteAtlasManager.atlasRegistered(System.Action`1&lt;UnityEngine.U2D.SpriteAtlas&gt;)">
      <summary>
        <para>Trigger when a SpriteAtlas is registered via invoking the callback in U2D.SpriteAtlasManager.atlasRequested.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="?:UnityEngine.U2D.SpriteAtlasManager.atlasRequested(System.Action`2&lt;System.String,System.Action`1&lt;UnityEngine.U2D.SpriteAtlas&gt;&gt;)">
      <summary>
        <para>Trigger when any Sprite was bound to SpriteAtlas but couldn't locate the atlas asset during runtime.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="T:UnityEngine.U2D.SpriteBone">
      <summary>
        <para>A struct that holds a rich set of information that describes the bind pose of this Sprite.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.U2D.SpriteBone.length">
      <summary>
        <para>The length of the bone. This is important for the leaf bones to describe their length without needing another bone as the terminal bone.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.U2D.SpriteBone.name">
      <summary>
        <para>The name of the bone. This is useful when recreating bone hierarchy at editor or runtime. You can also use this as a way of resolving the bone path when a Sprite is bound to a more complex or richer hierarchy.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.U2D.SpriteBone.parentId">
      <summary>
        <para>The ID of the parent of this bone.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.U2D.SpriteBone.position">
      <summary>
        <para>The position in local space of this bone.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.U2D.SpriteBone.rotation">
      <summary>
        <para>The rotation of this bone in local space.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.U2D.SpriteDataAccessExtensions">
      <summary>
        <para>A list of methods designed for reading and writing to the rich internal data of a Sprite.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.U2D.SpriteDataAccessExtensions.GetBindPoses(UnityEngine.Sprite)">
      <summary>
        <para>Returns an array of BindPoses.</para>
      </summary>
      <param name="sprite">The sprite to retrieve the bind pose from.</param>
      <returns>
        <para>A list of bind poses for this sprite. There is no need to dispose the returned NativeArray.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.U2D.SpriteDataAccessExtensions.GetBones(UnityEngine.Sprite)">
      <summary>
        <para>Returns a list of SpriteBone in this Sprite.</para>
      </summary>
      <param name="sprite">The sprite to get the list of SpriteBone from.</param>
      <returns>
        <para>An array of SpriteBone that belongs to this Sprite.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.U2D.SpriteDataAccessExtensions.GetIndices(UnityEngine.Sprite)">
      <summary>
        <para>Returns a list of indices. This is the same as Sprite.triangle.</para>
      </summary>
      <param name="sprite"></param>
      <returns>
        <para>A read-only list of indices indicating how the triangles are formed between the vertices. The array is marked as undisposable.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.U2D.SpriteDataAccessExtensions.GetVertexAttribute(UnityEngine.Sprite,UnityEngine.Rendering.VertexAttribute)">
      <summary>
        <para>Retrieves a strided accessor to the internal vertex attributes.</para>
      </summary>
      <param name="sprite"></param>
      <param name="channel"></param>
      <returns>
        <para>A read-only list of.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.U2D.SpriteDataAccessExtensions.GetVertexCount(UnityEngine.Sprite)">
      <summary>
        <para>Returns the number of vertices in this Sprite.</para>
      </summary>
      <param name="sprite"></param>
    </member>
    <member name="M:UnityEngine.U2D.SpriteDataAccessExtensions.HasVertexAttribute(UnityEngine.Sprite,UnityEngine.Rendering.VertexAttribute)">
      <summary>
        <para>Checks if a specific channel exists for this Sprite.</para>
      </summary>
      <param name="sprite"></param>
      <param name="channel"></param>
      <returns>
        <para>True if the channel exists.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.U2D.SpriteDataAccessExtensions.SetBindPoses(UnityEngine.Sprite,Unity.Collections.NativeArray`1&lt;UnityEngine.Matrix4x4&gt;)">
      <summary>
        <para>Sets the bind poses for this Sprite.</para>
      </summary>
      <param name="src">The list of bind poses for this Sprite. The array must be disposed of by the caller.</param>
      <param name="sprite"></param>
    </member>
    <member name="M:UnityEngine.U2D.SpriteDataAccessExtensions.SetBones(UnityEngine.Sprite,UnityEngine.U2D.SpriteBone[])">
      <summary>
        <para>Sets the SpriteBones for this Sprite.</para>
      </summary>
      <param name="sprite"></param>
      <param name="src"></param>
    </member>
    <member name="M:UnityEngine.U2D.SpriteDataAccessExtensions.SetIndices(UnityEngine.Sprite,Unity.Collections.NativeArray`1&lt;System.UInt16&gt;)">
      <summary>
        <para>Set the indices for this Sprite. This is the same as Sprite.triangle.</para>
      </summary>
      <param name="src">The list of indices for this Sprite. The array must be disposed of by the caller.</param>
      <param name="sprite"></param>
    </member>
    <member name="M:UnityEngine.U2D.SpriteDataAccessExtensions.SetVertexAttribute(UnityEngine.Sprite,UnityEngine.Rendering.VertexAttribute,Unity.Collections.NativeArray`1&lt;T&gt;)">
      <summary>
        <para>Sets a specific channel of the VertexAttribute.</para>
      </summary>
      <param name="src">The list of values for this specific VertexAttribute channel. The array must be disposed of by the caller.</param>
      <param name="sprite"></param>
      <param name="channel"></param>
    </member>
    <member name="M:UnityEngine.U2D.SpriteDataAccessExtensions.SetVertexCount(UnityEngine.Sprite,System.Int32)">
      <summary>
        <para>Sets the vertex count. This resizes the internal buffer. It also preserves any configurations of VertexAttributes.</para>
      </summary>
      <param name="sprite"></param>
      <param name="count"></param>
    </member>
    <member name="T:UnityEngine.U2D.SpriteRendererDataAccessExtensions">
      <summary>
        <para>A list of methods that allow the caller to override what the SpriteRenderer renders.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.U2D.SpriteRendererDataAccessExtensions.DeactivateDeformableBuffer(UnityEngine.SpriteRenderer)">
      <summary>
        <para>Stop using the deformable buffer to render the Sprite and use the original mesh instead.</para>
      </summary>
      <param name="renderer"></param>
    </member>
    <member name="T:Unity.Burst.BurstDiscardAttribute">
      <summary>
        <para>The BurstDiscard attribute lets you remove a method or property from being compiled to native code by the burst compiler.</para>
      </summary>
    </member>
    <member name="T:Unity.Burst.BurstDiscardAttribute">
      <summary>
        <para>The BurstDiscard attribute lets you remove a method or property from being compiled to native code by the burst compiler.</para>
      </summary>
    </member>
    <member name="T:Unity.Collections.Allocator">
      <summary>
        <para>Used to specify allocation type for NativeArray.</para>
      </summary>
    </member>
    <member name="F:Unity.Collections.Allocator.AudioKernel">
      <summary>
        <para>Allocation associated with a DSPGraph audio kernel.</para>
      </summary>
    </member>
    <member name="F:Unity.Collections.Allocator.Invalid">
      <summary>
        <para>Invalid allocation.</para>
      </summary>
    </member>
    <member name="F:Unity.Collections.Allocator.None">
      <summary>
        <para>No allocation.</para>
      </summary>
    </member>
    <member name="F:Unity.Collections.Allocator.Persistent">
      <summary>
        <para>Persistent allocation.</para>
      </summary>
    </member>
    <member name="F:Unity.Collections.Allocator.Temp">
      <summary>
        <para>Temporary allocation.</para>
      </summary>
    </member>
    <member name="F:Unity.Collections.Allocator.TempJob">
      <summary>
        <para>Temporary job allocation.</para>
      </summary>
    </member>
    <member name="T:Unity.Collections.DeallocateOnJobCompletionAttribute">
      <summary>
        <para>DeallocateOnJobCompletionAttribute.</para>
      </summary>
    </member>
    <member name="T:Unity.Collections.LowLevel.Unsafe.AtomicSafetyErrorType">
      <summary>
        <para>Enumeration of AtomicSafetyHandle errors.</para>
      </summary>
    </member>
    <member name="F:Unity.Collections.LowLevel.Unsafe.AtomicSafetyErrorType.Deallocated">
      <summary>
        <para>Corresponds to an error triggered when the object protected by this AtomicSafetyHandle is accessed on the main thread after it is deallocated.</para>
      </summary>
    </member>
    <member name="F:Unity.Collections.LowLevel.Unsafe.AtomicSafetyErrorType.DeallocatedFromJob">
      <summary>
        <para>Corresponds to an error triggered when the object protected by this AtomicSafetyHandle is accessed by a worker thread after it is deallocated.</para>
      </summary>
    </member>
    <member name="F:Unity.Collections.LowLevel.Unsafe.AtomicSafetyErrorType.NotAllocatedFromJob">
      <summary>
        <para>Corresponds to an error triggered when the object protected by this AtomicSafetyHandle is accessed by a worker thread before it is allocated.</para>
      </summary>
    </member>
    <member name="T:Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle">
      <summary>
        <para>AtomicSafetyHandle is used by the job system to provide validation and full safety.</para>
      </summary>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle.CheckDeallocateAndThrow(Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle)">
      <summary>
        <para>Checks if the handle can be deallocated. Throws an exception if it has already been destroyed or a job is currently accessing the data.</para>
      </summary>
      <param name="handle">Safety handle.</param>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle.CheckExistsAndThrow(Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle&amp;)">
      <summary>
        <para>Checks if the handle is still valid and throws an exception if it is already destroyed.</para>
      </summary>
      <param name="handle">Safety handle.</param>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle.CheckGetSecondaryDataPointerAndThrow(Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle)">
      <summary>
        <para>CheckGetSecondaryDataPointerAndThrow.</para>
      </summary>
      <param name="handle">Safety handle.</param>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle.CheckReadAndThrow(Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle)">
      <summary>
        <para>Checks if the handle can be read from. Throws an exception if already destroyed or a job is currently writing to the data.</para>
      </summary>
      <param name="handle">Safety handle.</param>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle.CheckWriteAndBumpSecondaryVersion(Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle)">
      <summary>
        <para>Performs CheckWriteAndThrow and then bumps the secondary version.</para>
      </summary>
      <param name="handle">Safety handle.</param>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle.CheckWriteAndThrow(Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle)">
      <summary>
        <para>Checks if the handle can be written to. Throws an exception if already destroyed or a job is currently reading or writing to the data.</para>
      </summary>
      <param name="handle">Safety handle.</param>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle.Create">
      <summary>
        <para>Creates a new AtomicSafetyHandle that is valid until AtomicSafetyHandle.Release is called.</para>
      </summary>
      <returns>
        <para>Safety handle.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle.EnforceAllBufferJobsHaveCompleted(Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle)">
      <summary>
        <para>Waits for all jobs running against this AtomicSafetyHandle to complete.</para>
      </summary>
      <param name="handle">Safety handle.</param>
      <returns>
        <para>Result.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle.EnforceAllBufferJobsHaveCompletedAndDisableReadWrite(Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle)">
      <summary>
        <para>Waits for all jobs running against this AtomicSafetyHandle to complete and then disables the read and write access on this atomic safety handle.</para>
      </summary>
      <param name="handle">Safety handle.</param>
      <returns>
        <para>Result.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle.EnforceAllBufferJobsHaveCompletedAndRelease(Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle)">
      <summary>
        <para>Waits for all jobs running against this AtomicSafetyHandle to complete and then releases the atomic safety handle.</para>
      </summary>
      <param name="handle">Safety handle.</param>
      <returns>
        <para>Result.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle.GetAllowReadOrWriteAccess(Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle)">
      <summary>
        <para>Returns true if the AtomicSafetyHandle is configured to allow reading or writing.</para>
      </summary>
      <param name="handle">Safety handle.</param>
      <returns>
        <para>True if the AtomicSafetyHandle is configured to allow reading or writing, false otherwise.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle.GetReaderArray(Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle,System.Int32,System.IntPtr)">
      <summary>
        <para>Fetch the job handles of all jobs reading from the safety handle.</para>
      </summary>
      <param name="handle">The atomic safety handle to return readers for.</param>
      <param name="maxCount">The maximum number of handles to be written to the output array.</param>
      <param name="output">A buffer where the job handles will be written.</param>
      <returns>
        <para>The actual number of readers on the handle, which can be greater than the maximum count provided.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle.GetReaderName(Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle,System.Int32)">
      <summary>
        <para>Return the name of the specified reading job.</para>
      </summary>
      <param name="handle">Safety handle.</param>
      <param name="readerIndex">Index of the reader.</param>
      <returns>
        <para>The debug name of the reader.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle.GetTempMemoryHandle">
      <summary>
        <para>Returns the safety handle which should be used for all temp memory allocations in this temp memory scope. All temp memory allocations share the same safety handle since they are automatically disposed of at the same time.</para>
      </summary>
      <returns>
        <para>The safety handle for temp memory allocations in the current scope.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle.GetTempUnsafePtrSliceHandle">
      <summary>
        <para>Returns a single shared handle, that can be shared by for example NativeSlice pointing to stack memory.</para>
      </summary>
      <returns>
        <para>Safety handle.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle.GetWriter(Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle)">
      <summary>
        <para>Return the writer (if any) on an atomic safety handle.</para>
      </summary>
      <param name="handle">Safety handle.</param>
      <returns>
        <para>The job handle of the writer.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle.GetWriterName(Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle)">
      <summary>
        <para>Return the debug name of the current writer on an atomic safety handle.</para>
      </summary>
      <param name="handle">Safety handle.</param>
      <returns>
        <para>Name of the writer, if any.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle.IsTempMemoryHandle(Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle)">
      <summary>
        <para>Checks if an AtomicSafetyHandle is the temp memory safety handle for the currently active temp memory scope.</para>
      </summary>
      <param name="handle">Safety handle.</param>
      <returns>
        <para>True if the safety handle is the temp memory handle for the current scope.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle.NewStaticSafetyId(System.Byte*,System.Int32)">
      <summary>
        <para>Allocates a new static safety ID, to store information for the provided type T.</para>
      </summary>
      <param name="ownerTypeNameBytes">The name of the scripting type that owns this AtomicSafetyHandle, to be embedded in error messages involving the handle. This is expected to be a UTF8-encoded byte array, and is not required to be null-terminated.</param>
      <param name="byteCount">The number of bytes in the ownerTypeNameBytes array, excluding the optional null terminator.</param>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle.NewStaticSafetyId">
      <summary>
        <para>Allocates a new static safety ID, to store information for the provided type T.</para>
      </summary>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle.PrepareUndisposable(Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle&amp;)">
      <summary>
        <para>Marks the AtomicSafetyHandle so that it cannot be disposed of.</para>
      </summary>
      <param name="handle">Safety handle.</param>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle.Release(Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle)">
      <summary>
        <para>Releases a previously created AtomicSafetyHandle.</para>
      </summary>
      <param name="handle">Safety handle.</param>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle.SetAllowReadOrWriteAccess(Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle,System.Boolean)">
      <summary>
        <para>Lets you prevent read or write access on the atomic safety handle.</para>
      </summary>
      <param name="handle">Safety handle.</param>
      <param name="allowReadWriteAccess">Use false to disallow read or write access, or true otherwise.</param>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle.SetAllowSecondaryVersionWriting(Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle,System.Boolean)">
      <summary>
        <para>Switches the AtomicSafetyHandle to the secondary version number.</para>
      </summary>
      <param name="handle">Safety handle.</param>
      <param name="allowWriting">Allow writing.</param>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle.SetBumpSecondaryVersionOnScheduleWrite(Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle,System.Boolean)">
      <summary>
        <para>Lets you bump the secondary version when scheduling a job that has write access to the atomic safety handle.</para>
      </summary>
      <param name="handle">Safety handle.</param>
      <param name="value">Use true to bump secondary version on schedule.</param>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle.SetCustomErrorMessage(System.Int32,Unity.Collections.LowLevel.Unsafe.AtomicSafetyErrorType,System.Byte*,System.Int32)">
      <summary>
        <para>Provide a custom error message for a specific job debugger error type, in cases where additional context can be provided.</para>
      </summary>
      <param name="staticSafetyId">The static safety ID with which the provided custom error message should be associated. This ID must have been allocated with NewStaticSafetyId. Passing 0 is invalid; this is the default static safety ID, and its error messages can not be modified.</param>
      <param name="errorType">The class of error that should use the provided custom error message instead of the default job debugger error message.</param>
      <param name="messageBytes">The error message to use for the specified error type. This is expected to be a UTF8-encoded byte array, and is not required to be null-terminated.</param>
      <param name="byteCount">The number of bytes in the messageBytes array, excluding the optional null terminator.</param>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle.SetStaticSafetyId(Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle&amp;,System.Int32)">
      <summary>
        <para>Assigns the provided static safety ID to an AtomicSafetyHandle. The ID's owner type name and any custom error messages are used by the job debugger when reporting errors involving the target handle.</para>
      </summary>
      <param name="handle">The AtomicSafetyHandle to modify.</param>
      <param name="staticSafetyId">The static safety ID to associate with the provided handle. This ID must have been allocated with NewStaticSafetyId.</param>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle.UseSecondaryVersion(Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle&amp;)">
      <summary>
        <para>Switches the AtomicSafetyHandle to the secondary version number.</para>
      </summary>
      <param name="handle">Safety handle.</param>
    </member>
    <member name="T:Unity.Collections.LowLevel.Unsafe.DisposeSentinel">
      <summary>
        <para>DisposeSentinel is used to automatically detect memory leaks.</para>
      </summary>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.DisposeSentinel.Clear(Unity.Collections.LowLevel.Unsafe.DisposeSentinel&amp;)">
      <summary>
        <para>Clears the DisposeSentinel.</para>
      </summary>
      <param name="sentinel">The DisposeSentinel to clear.</param>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.DisposeSentinel.Create">
      <summary>
        <para>Creates a new AtomicSafetyHandle and a new DisposeSentinel, to be used to track safety and leaks on some native data.</para>
      </summary>
      <param name="safety">The AtomicSafetyHandle that can be used to control access to the data related to the DisposeSentinel being created.</param>
      <param name="sentinel">The new DisposeSentinel.</param>
      <param name="callSiteStackDepth">The stack depth where to extract the logging information from.</param>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.DisposeSentinel.Dispose(Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle&amp;,Unity.Collections.LowLevel.Unsafe.DisposeSentinel&amp;)">
      <summary>
        <para>Releases the AtomicSafetyHandle and clears the DisposeSentinel.</para>
      </summary>
      <param name="safety">The AtomicSafetyHandle returned when invoking Create.</param>
      <param name="sentinel">The DisposeSentinel.</param>
    </member>
    <member name="T:Unity.Collections.LowLevel.Unsafe.EnforceJobResult">
      <summary>
        <para>EnforceJobResult.</para>
      </summary>
    </member>
    <member name="F:Unity.Collections.LowLevel.Unsafe.EnforceJobResult.AllJobsAlreadySynced">
      <summary>
        <para>AllJobsAlreadySynced.</para>
      </summary>
    </member>
    <member name="F:Unity.Collections.LowLevel.Unsafe.EnforceJobResult.DidSyncRunningJobs">
      <summary>
        <para>DidSyncRunningJobs.</para>
      </summary>
    </member>
    <member name="F:Unity.Collections.LowLevel.Unsafe.EnforceJobResult.HandleWasAlreadyDeallocated">
      <summary>
        <para>HandleWasAlreadyDeallocated.</para>
      </summary>
    </member>
    <member name="T:Unity.Collections.LowLevel.Unsafe.NativeArrayUnsafeUtility">
      <summary>
        <para>NativeArray Unsafe Utility.</para>
      </summary>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.NativeArrayUnsafeUtility.ConvertExistingDataToNativeArray(System.Void*,System.Int32,Unity.Collections.Allocator)">
      <summary>
        <para>Converts an existing buffer to a NativeArray.</para>
      </summary>
      <param name="dataPointer">Pointer to the preallocated data.</param>
      <param name="length">Number of elements. The length of the data in bytes will be computed automatically from this.</param>
      <param name="allocator">Allocation strategy to use.</param>
      <returns>
        <para>A new NativeArray, allocated with the given strategy and wrapping the provided data.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.NativeArrayUnsafeUtility.GetAtomicSafetyHandle(Unity.Collections.NativeArray`1&lt;T&gt;)">
      <summary>
        <para>Returns the AtomicSafetyHandle that is used for safety control on the NativeArray.</para>
      </summary>
      <param name="array">NativeArray.</param>
      <returns>
        <para>Safety handle.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.NativeArrayUnsafeUtility.GetUnsafeBufferPointerWithoutChecks(Unity.Collections.NativeArray`1&lt;T&gt;)">
      <summary>
        <para>Gets the pointer to the data owner by the NativeArray, without performing checks.</para>
      </summary>
      <param name="nativeArray">NativeArray.</param>
      <returns>
        <para>NativeArray memory buffer pointer.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.NativeArrayUnsafeUtility.GetUnsafePtr(Unity.Collections.NativeArray`1&lt;T&gt;)">
      <summary>
        <para>Gets the pointer to the memory buffer owner by the NativeArray, performing checks on whether the native array can be written to.</para>
      </summary>
      <param name="nativeArray">NativeArray.</param>
      <returns>
        <para>NativeArray memory buffer pointer.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.NativeArrayUnsafeUtility.GetUnsafeReadOnlyPtr(Unity.Collections.NativeArray`1&lt;T&gt;)">
      <summary>
        <para>Gets a pointer to the memory buffer of the NativeArray or NativeArray.ReadOnly.</para>
      </summary>
      <param name="nativeArray">NativeArray.</param>
      <returns>
        <para>NativeArray memory buffer pointer.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.NativeArrayUnsafeUtility.GetUnsafeReadOnlyPtr(Unity.Collections.NativeArray`1/ReadOnly&lt;T&gt;)">
      <summary>
        <para>Gets a pointer to the memory buffer of the NativeArray or NativeArray.ReadOnly.</para>
      </summary>
      <param name="nativeArray">NativeArray.</param>
      <returns>
        <para>NativeArray memory buffer pointer.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.NativeArrayUnsafeUtility.SetAtomicSafetyHandle(Unity.Collections.NativeArray`1&lt;T&gt;&amp;,Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle)">
      <summary>
        <para>Sets a new AtomicSafetyHandle for the provided NativeArray.</para>
      </summary>
      <param name="array">NativeArray.</param>
      <param name="safety">Safety handle.</param>
    </member>
    <member name="T:Unity.Collections.LowLevel.Unsafe.NativeContainerAttribute">
      <summary>
        <para>Allows you to create your own custom native container.</para>
      </summary>
    </member>
    <member name="T:Unity.Collections.LowLevel.Unsafe.NativeContainerIsAtomicWriteOnlyAttribute">
      <summary>
        <para>NativeContainerIsAtomicWriteOnlyAttribute.</para>
      </summary>
    </member>
    <member name="T:Unity.Collections.LowLevel.Unsafe.NativeContainerIsReadOnlyAttribute">
      <summary>
        <para>NativeContainerIsReadOnlyAttribute.</para>
      </summary>
    </member>
    <member name="T:Unity.Collections.LowLevel.Unsafe.NativeContainerSupportsDeallocateOnJobCompletionAttribute">
      <summary>
        <para>NativeContainerSupportsDeallocateOnJobCompletionAttribute.</para>
      </summary>
    </member>
    <member name="T:Unity.Collections.LowLevel.Unsafe.NativeContainerSupportsDeferredConvertListToArray">
      <summary>
        <para>NativeContainerSupportsDeferredConvertListToArray.</para>
      </summary>
    </member>
    <member name="T:Unity.Collections.LowLevel.Unsafe.NativeContainerSupportsMinMaxWriteRestrictionAttribute">
      <summary>
        <para>NativeContainerSupportsMinMaxWriteRestrictionAttribute.</para>
      </summary>
    </member>
    <member name="T:Unity.Collections.LowLevel.Unsafe.NativeDisableContainerSafetyRestrictionAttribute">
      <summary>
        <para>By default native containers are tracked by the safety system to avoid race conditions. The safety system encapsulates the best practices and catches many race condition bugs from the start.</para>
      </summary>
    </member>
    <member name="T:Unity.Collections.LowLevel.Unsafe.NativeDisableUnsafePtrRestrictionAttribute">
      <summary>
        <para>By default unsafe Pointers are not allowed to be used in a job since it is not possible for the Job Debugger to gurantee race condition free behaviour. This attribute lets you explicitly disable the restriction on a job.</para>
      </summary>
    </member>
    <member name="T:Unity.Collections.LowLevel.Unsafe.NativeSetClassTypeToNullOnScheduleAttribute">
      <summary>
        <para>When this attribute is applied to a field in a job struct, the managed reference to the class will be set to null on the copy of the job struct that is passed to the job.</para>
      </summary>
    </member>
    <member name="T:Unity.Collections.LowLevel.Unsafe.NativeSetThreadIndexAttribute">
      <summary>
        <para>This attribute can inject a worker thread index into an int on the job struct. This is usually used in the implementation of atomic containers. The index is guaranteed to be unique to any other job that might be running in parallel.</para>
      </summary>
    </member>
    <member name="T:Unity.Collections.LowLevel.Unsafe.NativeSliceUnsafeUtility">
      <summary>
        <para>NativeSlice unsafe utility class.</para>
      </summary>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.NativeSliceUnsafeUtility.ConvertExistingDataToNativeSlice">
      <summary>
        <para>ConvertExistingDataToNativeSlice.</para>
      </summary>
      <param name="ptr">Memory pointer.</param>
      <param name="length">Number of elements.</param>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.NativeSliceUnsafeUtility.GetAtomicSafetyHandle(Unity.Collections.NativeSlice`1&lt;T&gt;)">
      <summary>
        <para>Get safety handle for native slice.</para>
      </summary>
      <param name="slice">NativeSlice.</param>
      <returns>
        <para>Safety handle.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.NativeSliceUnsafeUtility.GetUnsafePtr(Unity.Collections.NativeSlice`1&lt;T&gt;)">
      <summary>
        <para>Get NativeSlice memory buffer pointer.  Checks whether the native array can be written to.</para>
      </summary>
      <param name="nativeSlice">NativeSlice.</param>
      <returns>
        <para>Memory pointer.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.NativeSliceUnsafeUtility.GetUnsafeReadOnlyPtr(Unity.Collections.NativeSlice`1&lt;T&gt;)">
      <summary>
        <para>Get NativeSlice memory buffer pointer.  Checks whether the native array can be read from.</para>
      </summary>
      <param name="nativeSlice">NativeSlice.</param>
      <returns>
        <para>Memory pointer.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.NativeSliceUnsafeUtility.SetAtomicSafetyHandle(Unity.Collections.NativeSlice`1&lt;T&gt;&amp;,Unity.Collections.LowLevel.Unsafe.AtomicSafetyHandle)">
      <summary>
        <para>Set safetly handle on NativeSlice.</para>
      </summary>
      <param name="slice">NativeSlice.</param>
      <param name="safety">Safety handle.</param>
    </member>
    <member name="T:Unity.Collections.LowLevel.Unsafe.UnsafeUtility">
      <summary>
        <para>Unsafe utility class.</para>
      </summary>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.AddressOf(T&amp;)">
      <summary>
        <para>The memory address of the struct.</para>
      </summary>
      <param name="output">Struct.</param>
      <returns>
        <para>Memory pointer.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.AlignOf">
      <summary>
        <para>Minimum alignment of a struct.</para>
      </summary>
      <returns>
        <para>Memory pointer.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.ArrayElementAsRef">
      <summary>
        <para>Gets a reference to the array element at its current location in memory.</para>
      </summary>
      <param name="ptr">The pointer to beginning of array of struct to reference.</param>
      <param name="index">Index of element in array.</param>
      <returns>
        <para>A reference to a value of type T.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.As">
      <summary>
        <para>Reinterprets the reference as a reference of a different type.</para>
      </summary>
      <param name="from">The reference to reinterpret.</param>
      <returns>
        <para>A reference to a value of type T.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.AsRef">
      <summary>
        <para>Gets a reference to the struct at its current location in memory.</para>
      </summary>
      <param name="ptr">The pointer of struct to reference.</param>
      <returns>
        <para>A reference to a value of type T.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.CopyObjectAddressToPtr(System.Object,System.Void*)">
      <summary>
        <para>Assigns an Object reference to a struct or pinned class. See Also: UnsafeUtility.PinGCObjectAndGetAddress.</para>
      </summary>
      <param name="target"></param>
      <param name="dstPtr"></param>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.CopyPtrToStructure(System.Void*,T&amp;)">
      <summary>
        <para>Copies sizeof(T) bytes from ptr to output.</para>
      </summary>
      <param name="ptr">Memory pointer.</param>
      <param name="output">Struct.</param>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.CopyStructureToPtr(T&amp;,System.Void*)">
      <summary>
        <para>Copies sizeof(T) bytes from input to ptr.</para>
      </summary>
      <param name="ptr">Memory pointer.</param>
      <param name="input">Struct.</param>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.EnumEquals(T,T)">
      <summary>
        <para>Determines whether the specified enums are equal without boxing.</para>
      </summary>
      <param name="lhs">The first enum to compare.</param>
      <param name="rhs">The second enum to compare.</param>
      <returns>
        <para>True if equal, otherwise false.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.EnumToInt(T)">
      <summary>
        <para>Return integer representation of enum value without boxing.</para>
      </summary>
      <param name="enumValue">Enum value to convert.</param>
      <returns>
        <para>Returns the integer representation of the enum value.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.Free(System.Void*,Unity.Collections.Allocator)">
      <summary>
        <para>Free memory.</para>
      </summary>
      <param name="memory">Memory pointer.</param>
      <param name="allocator">Allocator.</param>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.GetFieldOffset(System.Reflection.FieldInfo)">
      <summary>
        <para>Returns the offset of the field relative struct or class it is contained in.</para>
      </summary>
      <param name="field"></param>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.IsBlittable">
      <summary>
        <para>Returns whether the struct is blittable.</para>
      </summary>
      <param name="type">The System.Type of a struct.</param>
      <returns>
        <para>True if struct is blittable, otherwise false.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.IsBlittable(System.Type)">
      <summary>
        <para>Returns whether the struct is blittable.</para>
      </summary>
      <param name="type">The System.Type of a struct.</param>
      <returns>
        <para>True if struct is blittable, otherwise false.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.IsUnmanaged">
      <summary>
        <para>Returns whether the struct or type is unmanaged. An unmanaged type contains no managed fields, and can be freely copied in memory.</para>
      </summary>
      <param name="type">The System.Type of a struct.</param>
      <returns>
        <para>True if struct is unmanaged, otherwise false.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.IsUnmanaged(System.Type)">
      <summary>
        <para>Returns whether the struct or type is unmanaged. An unmanaged type contains no managed fields, and can be freely copied in memory.</para>
      </summary>
      <param name="type">The System.Type of a struct.</param>
      <returns>
        <para>True if struct is unmanaged, otherwise false.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.IsValidAllocator(Unity.Collections.Allocator)">
      <summary>
        <para>Returns true if the allocator label is valid and can be used to allocate or deallocate memory.</para>
      </summary>
      <param name="allocator"></param>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.IsValidNativeContainerElementType(System.Type)">
      <summary>
        <para>Returns whether the type is acceptable as an element type in native containers.</para>
      </summary>
      <param name="type">The System.Type to check.</param>
      <returns>
        <para>True if type is acceptable as a native container element.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.IsValidNativeContainerElementType">
      <summary>
        <para>Returns whether the type is acceptable as an element type in native containers.</para>
      </summary>
      <param name="type">The System.Type to check.</param>
      <returns>
        <para>True if type is acceptable as a native container element.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.Malloc">
      <summary>
        <para>Allocate memory.</para>
      </summary>
      <param name="size">Size.</param>
      <param name="alignment">Alignment.</param>
      <param name="allocator">Allocator.</param>
      <returns>
        <para>Memory pointer.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.MemClear">
      <summary>
        <para>Clear memory.</para>
      </summary>
      <param name="destination">Memory pointer.</param>
      <param name="size">Size.</param>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.MemCmp">
      <summary>
        <para>Checks to see whether two memory regions are identical or not by comparing a specified memory region in the first given memory buffer with the same region in the second given memory buffer.</para>
      </summary>
      <param name="ptr1">Pointer to the first memory buffer.</param>
      <param name="ptr2">Pointer to the second memory buffer to compare the first one to.</param>
      <param name="size">Number of bytes to compare.</param>
      <returns>
        <para>0 if the contents are identical, non-zero otherwise.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.MemCpy">
      <summary>
        <para>Copy memory.</para>
      </summary>
      <param name="destination">Destination memory pointer.</param>
      <param name="source">Source memory pointer.</param>
      <param name="size">Size.</param>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.MemCpyReplicate">
      <summary>
        <para>Copy memory and replicate.</para>
      </summary>
      <param name="destination">Destination memory pointer.</param>
      <param name="source">Source memory pointer.</param>
      <param name="size">Size.</param>
      <param name="count">Count.</param>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.MemCpyStride(System.Void*,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Similar to UnsafeUtility.MemCpy but can skip bytes via desinationStride and sourceStride.</para>
      </summary>
      <param name="destination"></param>
      <param name="destinationStride"></param>
      <param name="source"></param>
      <param name="sourceStride"></param>
      <param name="elementSize"></param>
      <param name="count"></param>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.MemMove">
      <summary>
        <para>Move memory.</para>
      </summary>
      <param name="destination">Destination memory pointer.</param>
      <param name="source">Source memory pointer.</param>
      <param name="size">Size.</param>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.MemSet">
      <summary>
        <para>Set memory to specified value.</para>
      </summary>
      <param name="destination">Destination memory pointer.</param>
      <param name="value">Value to be set.</param>
      <param name="size">Size.</param>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.PinGCArrayAndGetDataAddress">
      <summary>
        <para>Keeps a strong GC reference to the object and pins it. The object is guranteed to not move its memory location in a moving GC. Returns the address of the first element of the array.

See Also: UnsafeUtility.ReleaseGCObject.</para>
      </summary>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.PinGCObjectAndGetAddress(System.Object,System.UInt64&amp;)">
      <summary>
        <para>Keeps a strong GC reference to the object and pins it. The object is guranteed to not move its memory location in a moving GC. Returns the address of the memory location of the object.

See Also: UnsafeUtility.ReleaseGCObject.</para>
      </summary>
      <param name="target"></param>
      <param name="gcHandle"></param>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.ReadArrayElement(System.Void*,System.Int32)">
      <summary>
        <para>Read array element.</para>
      </summary>
      <param name="source">Memory pointer.</param>
      <param name="index">Array index.</param>
      <returns>
        <para>Array Element.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.ReadArrayElementWithStride(System.Void*,System.Int32,System.Int32)">
      <summary>
        <para>Read array element with stride.</para>
      </summary>
      <param name="source">Memory pointer.</param>
      <param name="index">Array index.</param>
      <param name="stride">Stride.</param>
      <returns>
        <para>Array element.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.ReleaseGCObject(System.UInt64)">
      <summary>
        <para>Releases a GC Object Handle, previously aquired by UnsafeUtility.PinGCObjectAndGetAddress.</para>
      </summary>
      <param name="gcHandle"></param>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.SizeOf">
      <summary>
        <para>Size of struct.</para>
      </summary>
      <returns>
        <para>Size of struct.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.WriteArrayElement(System.Void*,System.Int32,T)">
      <summary>
        <para>Write array element.</para>
      </summary>
      <param name="destination">Memory pointer.</param>
      <param name="index">Array index.</param>
      <param name="value">Value to write.</param>
    </member>
    <member name="M:Unity.Collections.LowLevel.Unsafe.UnsafeUtility.WriteArrayElementWithStride(System.Void*,System.Int32,System.Int32,T)">
      <summary>
        <para>Write array element with stride.</para>
      </summary>
      <param name="destination">Memory pointer.</param>
      <param name="index">Array index.</param>
      <param name="stride">Stride.</param>
      <param name="value">Value to write.</param>
    </member>
    <member name="T:Unity.Collections.LowLevel.Unsafe.WriteAccessRequiredAttribute">
      <summary>
        <para>Used in conjunction with the ReadOnlyAttribute, WriteAccessRequiredAttribute lets you specify which struct method and property require write access to be invoked.</para>
      </summary>
    </member>
    <member name="T:Unity.Collections.NativeArray`1">
      <summary>
        <para>A NativeArray exposes a buffer of native memory to managed code, making it possible to share data between managed and native without marshalling costs.</para>
      </summary>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.AsReadOnly">
      <summary>
        <para>Cast NativeArray to read-only array.</para>
      </summary>
      <returns>
        <para>Read-only array.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.Copy(Unity.Collections.NativeArray`1&lt;T&gt;,Unity.Collections.NativeArray`1&lt;T&gt;)">
      <summary>
        <para>Copies a range of elements from a source array to a destination array, starting from the source index and copying them to the destination index.</para>
      </summary>
      <param name="src">The data to copy.</param>
      <param name="dst">The array that receives the data.</param>
      <param name="length">A 32-bit integer that represents the number of elements to copy. The integer must be equal or greater than zero.</param>
      <param name="srcIndex">A 32-bit integer that represents the index in the srcArray at which copying begins.</param>
      <param name="dstIndex">A 32-bit integer that represents the index in the dstArray at which storing begins.</param>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.Copy(T[],Unity.Collections.NativeArray`1&lt;T&gt;)">
      <summary>
        <para>Copies a range of elements from a source array to a destination array, starting from the source index and copying them to the destination index.</para>
      </summary>
      <param name="src">The data to copy.</param>
      <param name="dst">The array that receives the data.</param>
      <param name="length">A 32-bit integer that represents the number of elements to copy. The integer must be equal or greater than zero.</param>
      <param name="srcIndex">A 32-bit integer that represents the index in the srcArray at which copying begins.</param>
      <param name="dstIndex">A 32-bit integer that represents the index in the dstArray at which storing begins.</param>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.Copy(Unity.Collections.NativeArray`1/ReadOnly&lt;T&gt;,Unity.Collections.NativeArray`1&lt;T&gt;)">
      <summary>
        <para>Copies a range of elements from a source array to a destination array, starting from the source index and copying them to the destination index.</para>
      </summary>
      <param name="src">The data to copy.</param>
      <param name="dst">The array that receives the data.</param>
      <param name="length">A 32-bit integer that represents the number of elements to copy. The integer must be equal or greater than zero.</param>
      <param name="srcIndex">A 32-bit integer that represents the index in the srcArray at which copying begins.</param>
      <param name="dstIndex">A 32-bit integer that represents the index in the dstArray at which storing begins.</param>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.Copy(Unity.Collections.NativeArray`1&lt;T&gt;,T[])">
      <summary>
        <para>Copies a range of elements from a source array to a destination array, starting from the source index and copying them to the destination index.</para>
      </summary>
      <param name="src">The data to copy.</param>
      <param name="dst">The array that receives the data.</param>
      <param name="length">A 32-bit integer that represents the number of elements to copy. The integer must be equal or greater than zero.</param>
      <param name="srcIndex">A 32-bit integer that represents the index in the srcArray at which copying begins.</param>
      <param name="dstIndex">A 32-bit integer that represents the index in the dstArray at which storing begins.</param>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.Copy(Unity.Collections.NativeArray`1/ReadOnly&lt;T&gt;,T[])">
      <summary>
        <para>Copies a range of elements from a source array to a destination array, starting from the source index and copying them to the destination index.</para>
      </summary>
      <param name="src">The data to copy.</param>
      <param name="dst">The array that receives the data.</param>
      <param name="length">A 32-bit integer that represents the number of elements to copy. The integer must be equal or greater than zero.</param>
      <param name="srcIndex">A 32-bit integer that represents the index in the srcArray at which copying begins.</param>
      <param name="dstIndex">A 32-bit integer that represents the index in the dstArray at which storing begins.</param>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.Copy(Unity.Collections.NativeArray`1&lt;T&gt;,Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32)">
      <summary>
        <para>Copies a range of elements from a source array to a destination array, starting from the source index and copying them to the destination index.</para>
      </summary>
      <param name="src">The data to copy.</param>
      <param name="dst">The array that receives the data.</param>
      <param name="length">A 32-bit integer that represents the number of elements to copy. The integer must be equal or greater than zero.</param>
      <param name="srcIndex">A 32-bit integer that represents the index in the srcArray at which copying begins.</param>
      <param name="dstIndex">A 32-bit integer that represents the index in the dstArray at which storing begins.</param>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.Copy(Unity.Collections.NativeArray`1/ReadOnly&lt;T&gt;,Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32)">
      <summary>
        <para>Copies a range of elements from a source array to a destination array, starting from the source index and copying them to the destination index.</para>
      </summary>
      <param name="src">The data to copy.</param>
      <param name="dst">The array that receives the data.</param>
      <param name="length">A 32-bit integer that represents the number of elements to copy. The integer must be equal or greater than zero.</param>
      <param name="srcIndex">A 32-bit integer that represents the index in the srcArray at which copying begins.</param>
      <param name="dstIndex">A 32-bit integer that represents the index in the dstArray at which storing begins.</param>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.Copy(T[],Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32)">
      <summary>
        <para>Copies a range of elements from a source array to a destination array, starting from the source index and copying them to the destination index.</para>
      </summary>
      <param name="src">The data to copy.</param>
      <param name="dst">The array that receives the data.</param>
      <param name="length">A 32-bit integer that represents the number of elements to copy. The integer must be equal or greater than zero.</param>
      <param name="srcIndex">A 32-bit integer that represents the index in the srcArray at which copying begins.</param>
      <param name="dstIndex">A 32-bit integer that represents the index in the dstArray at which storing begins.</param>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.Copy(Unity.Collections.NativeArray`1&lt;T&gt;,T[],System.Int32)">
      <summary>
        <para>Copies a range of elements from a source array to a destination array, starting from the source index and copying them to the destination index.</para>
      </summary>
      <param name="src">The data to copy.</param>
      <param name="dst">The array that receives the data.</param>
      <param name="length">A 32-bit integer that represents the number of elements to copy. The integer must be equal or greater than zero.</param>
      <param name="srcIndex">A 32-bit integer that represents the index in the srcArray at which copying begins.</param>
      <param name="dstIndex">A 32-bit integer that represents the index in the dstArray at which storing begins.</param>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.Copy(Unity.Collections.NativeArray`1/ReadOnly&lt;T&gt;,T[],System.Int32)">
      <summary>
        <para>Copies a range of elements from a source array to a destination array, starting from the source index and copying them to the destination index.</para>
      </summary>
      <param name="src">The data to copy.</param>
      <param name="dst">The array that receives the data.</param>
      <param name="length">A 32-bit integer that represents the number of elements to copy. The integer must be equal or greater than zero.</param>
      <param name="srcIndex">A 32-bit integer that represents the index in the srcArray at which copying begins.</param>
      <param name="dstIndex">A 32-bit integer that represents the index in the dstArray at which storing begins.</param>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.Copy(Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32,Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32,System.Int32)">
      <summary>
        <para>Copies a range of elements from a source array to a destination array, starting from the source index and copying them to the destination index.</para>
      </summary>
      <param name="src">The data to copy.</param>
      <param name="dst">The array that receives the data.</param>
      <param name="length">A 32-bit integer that represents the number of elements to copy. The integer must be equal or greater than zero.</param>
      <param name="srcIndex">A 32-bit integer that represents the index in the srcArray at which copying begins.</param>
      <param name="dstIndex">A 32-bit integer that represents the index in the dstArray at which storing begins.</param>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.Copy(Unity.Collections.NativeArray`1/ReadOnly&lt;T&gt;,System.Int32,T[],System.Int32,System.Int32)">
      <summary>
        <para>Copies a range of elements from a source array to a destination array, starting from the source index and copying them to the destination index.</para>
      </summary>
      <param name="src">The data to copy.</param>
      <param name="dst">The array that receives the data.</param>
      <param name="length">A 32-bit integer that represents the number of elements to copy. The integer must be equal or greater than zero.</param>
      <param name="srcIndex">A 32-bit integer that represents the index in the srcArray at which copying begins.</param>
      <param name="dstIndex">A 32-bit integer that represents the index in the dstArray at which storing begins.</param>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.Copy(T[],System.Int32,Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32,System.Int32)">
      <summary>
        <para>Copies a range of elements from a source array to a destination array, starting from the source index and copying them to the destination index.</para>
      </summary>
      <param name="src">The data to copy.</param>
      <param name="dst">The array that receives the data.</param>
      <param name="length">A 32-bit integer that represents the number of elements to copy. The integer must be equal or greater than zero.</param>
      <param name="srcIndex">A 32-bit integer that represents the index in the srcArray at which copying begins.</param>
      <param name="dstIndex">A 32-bit integer that represents the index in the dstArray at which storing begins.</param>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.Copy(Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32,T[],System.Int32,System.Int32)">
      <summary>
        <para>Copies a range of elements from a source array to a destination array, starting from the source index and copying them to the destination index.</para>
      </summary>
      <param name="src">The data to copy.</param>
      <param name="dst">The array that receives the data.</param>
      <param name="length">A 32-bit integer that represents the number of elements to copy. The integer must be equal or greater than zero.</param>
      <param name="srcIndex">A 32-bit integer that represents the index in the srcArray at which copying begins.</param>
      <param name="dstIndex">A 32-bit integer that represents the index in the dstArray at which storing begins.</param>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.Copy(Unity.Collections.NativeArray`1/ReadOnly&lt;T&gt;,System.Int32,Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32,System.Int32)">
      <summary>
        <para>Copies a range of elements from a source array to a destination array, starting from the source index and copying them to the destination index.</para>
      </summary>
      <param name="src">The data to copy.</param>
      <param name="dst">The array that receives the data.</param>
      <param name="length">A 32-bit integer that represents the number of elements to copy. The integer must be equal or greater than zero.</param>
      <param name="srcIndex">A 32-bit integer that represents the index in the srcArray at which copying begins.</param>
      <param name="dstIndex">A 32-bit integer that represents the index in the dstArray at which storing begins.</param>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.CopyFrom(T[])">
      <summary>
        <para>Copy all the elements from another NativeArray or managed array of the same length.</para>
      </summary>
      <param name="array">Source array.</param>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.CopyFrom(Unity.Collections.NativeArray`1&lt;T&gt;)">
      <summary>
        <para>Copy all the elements from another NativeArray or managed array of the same length.</para>
      </summary>
      <param name="array">Source array.</param>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.CopyTo(T[])">
      <summary>
        <para>Copy all elements to another NativeArray or managed array of the same length.</para>
      </summary>
      <param name="array">Destination array.</param>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.CopyTo(Unity.Collections.NativeArray`1&lt;T&gt;)">
      <summary>
        <para>Copy all elements to another NativeArray or managed array of the same length.</para>
      </summary>
      <param name="array">Destination array.</param>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.#ctor(T[],Unity.Collections.Allocator)">
      <summary>
        <para>Creates a new NativeArray from an existing array of elements.</para>
      </summary>
      <param name="array">An array to copy the data from.</param>
      <param name="allocator">The allocation strategy used for the data.</param>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.#ctor(Unity.Collections.NativeArray`1&lt;T&gt;,Unity.Collections.Allocator)">
      <summary>
        <para>Creates a new NativeArray from an existing NativeArray.</para>
      </summary>
      <param name="array">NativeArray to copy the data from.</param>
      <param name="allocator">The allocation strategy used for the data.</param>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.#ctor(System.Int32,Unity.Collections.Allocator,Unity.Collections.NativeArrayOptions)">
      <summary>
        <para>Creates a new NativeArray allocating enough memory to fit the provided amount of elements.</para>
      </summary>
      <param name="length">Number of elements to be allocated.</param>
      <param name="allocator">The allocation strategy used for the data.</param>
      <param name="options">Options to control the behaviour of the NativeArray.</param>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.Dispose">
      <summary>
        <para>Disposes the NativeArray.</para>
      </summary>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.Equals(Unity.Collections.NativeArray`1&lt;T&gt;)">
      <summary>
        <para>Compares to NativeArray.</para>
      </summary>
      <param name="other">NativeArray to compare against.</param>
      <returns>
        <para>True in case the two NativeArray are the same, false otherwise.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.Equals(System.Object)">
      <summary>
        <para>Compares to NativeArray.</para>
      </summary>
      <param name="obj">Object to compare against.</param>
      <returns>
        <para>True in case the two NativeArray are the same, false otherwise.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.GetEnumerator">
      <summary>
        <para>Get enumerator.</para>
      </summary>
      <returns>
        <para>Enumerator.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.GetHashCode">
      <summary>
        <para>Returns a hash code for the current instance.</para>
      </summary>
      <returns>
        <para>Hash code.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.GetSubArray(System.Int32,System.Int32)">
      <summary>
        <para>Return a view into the array starting at the specified index.</para>
      </summary>
      <param name="start">The start index of the sub array.</param>
      <param name="length">The length of the sub array.</param>
      <returns>
        <para>A view into the array that aliases the original array. Cannot be disposed.</para>
      </returns>
    </member>
    <member name="P:Unity.Collections.NativeArray_1.IsCreated">
      <summary>
        <para>Indicates that the NativeArray has an allocated memory buffer.</para>
      </summary>
    </member>
    <member name="P:Unity.Collections.NativeArray_1.Length">
      <summary>
        <para>Number of elements in the NativeArray.</para>
      </summary>
    </member>
    <member name="T:Unity.Collections.NativeArray`1.ReadOnly">
      <summary>
        <para>NativeArray interface constrained to read-only operation.</para>
      </summary>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.ReadOnly.CopyTo(T[])">
      <summary>
        <para>Copy all elements to a NativeArray or managed array of the same length.</para>
      </summary>
      <param name="array">The destination array to copy to.</param>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.ReadOnly.CopyTo(Unity.Collections.NativeArray`1&lt;T&gt;)">
      <summary>
        <para>Copy all elements to a NativeArray or managed array of the same length.</para>
      </summary>
      <param name="array">The destination array to copy to.</param>
    </member>
    <member name="P:Unity.Collections.NativeArray_1.ReadOnly.Length">
      <summary>
        <para>Number of elements in the NativeArray.ReadOnly.</para>
      </summary>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.ReadOnly.Reinterpret">
      <summary>
        <para>Reinterpret the array as having a different data type (type punning).</para>
      </summary>
      <returns>
        <para>An alias of the same array, but reinterpreted as the target type.</para>
      </returns>
    </member>
    <member name="P:Unity.Collections.NativeArray_1.ReadOnly.this">
      <summary>
        <para>Read-only access to NativeArray.ReadOnly elements by index.</para>
      </summary>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.ReadOnly.ToArray">
      <summary>
        <para>Convert the data in this NativeArray.ReadOnly to a managed array.</para>
      </summary>
      <returns>
        <para>A new managed array with the same contents as this array.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.Reinterpret">
      <summary>
        <para>Reinterpret the array as having a different data type (type punning).</para>
      </summary>
      <param name="expectedTypeSize">The expected size (in bytes, as given by sizeof) of the current element type of the array.</param>
      <returns>
        <para>An alias of the same array, but reinterpreted as the target type.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.Reinterpret(System.Int32)">
      <summary>
        <para>Reinterpret the array as having a different data type (type punning).</para>
      </summary>
      <param name="expectedTypeSize">The expected size (in bytes, as given by sizeof) of the current element type of the array.</param>
      <returns>
        <para>An alias of the same array, but reinterpreted as the target type.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.ReinterpretLoad(System.Int32)">
      <summary>
        <para>Reinterpret and load data starting at underlying index as a different type.</para>
      </summary>
      <param name="sourceIndex">Index in underlying array where the load should start.</param>
      <returns>
        <para>The loaded data.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.ReinterpretStore(System.Int32,U)">
      <summary>
        <para>Reinterpret and store data starting at underlying index as a different type.</para>
      </summary>
      <param name="destIndex">Index in the underlying array where the data is to be stored.</param>
      <param name="data">The data to store.</param>
    </member>
    <member name="P:Unity.Collections.NativeArray_1.this">
      <summary>
        <para>Access NativeArray elements by index. Notice that structs are returned by value and not by reference.</para>
      </summary>
    </member>
    <member name="M:Unity.Collections.NativeArray_1.ToArray">
      <summary>
        <para>Convert NativeArray to array.</para>
      </summary>
      <returns>
        <para>Array.</para>
      </returns>
    </member>
    <member name="T:Unity.Collections.NativeArrayOptions">
      <summary>
        <para>NativeArrayOptions lets you control if memory should be cleared on allocation or left uninitialized.</para>
      </summary>
    </member>
    <member name="F:Unity.Collections.NativeArrayOptions.ClearMemory">
      <summary>
        <para>Clear NativeArray memory on allocation.</para>
      </summary>
    </member>
    <member name="F:Unity.Collections.NativeArrayOptions.UninitializedMemory">
      <summary>
        <para>Uninitialized memory can improve performance, but results in the contents of the array elements being undefined.
In performance sensitive code it can make sense to use NativeArrayOptions.Uninitialized, if you are writing to the entire array right after creating it without reading any of the elements first.
</para>
      </summary>
    </member>
    <member name="T:Unity.Collections.NativeDisableParallelForRestrictionAttribute">
      <summary>
        <para>NativeDisableParallelForRestrictionAttribute.</para>
      </summary>
    </member>
    <member name="T:Unity.Collections.NativeFixedLengthAttribute">
      <summary>
        <para>The container has from start a size that will never change.</para>
      </summary>
    </member>
    <member name="M:Unity.Collections.NativeFixedLengthAttribute.#ctor(System.Int32)">
      <summary>
        <para>The specified number of elements will never change.</para>
      </summary>
      <param name="fixedLength">The fixed number of elements in the container.</param>
    </member>
    <member name="F:Unity.Collections.NativeFixedLengthAttribute.FixedLength">
      <summary>
        <para>The fixed number of elements in the container.</para>
      </summary>
    </member>
    <member name="T:Unity.Collections.NativeLeakDetection">
      <summary>
        <para>Static class for native leak detection settings.</para>
      </summary>
    </member>
    <member name="P:Unity.Collections.NativeLeakDetection.Mode">
      <summary>
        <para>Set whether native memory leak detection should be enabled or disabled.</para>
      </summary>
    </member>
    <member name="T:Unity.Collections.NativeLeakDetectionMode">
      <summary>
        <para>Native leak memory leak detection mode enum.</para>
      </summary>
    </member>
    <member name="F:Unity.Collections.NativeLeakDetectionMode.Disabled">
      <summary>
        <para>Indicates that native memory leak detection is disabled.</para>
      </summary>
    </member>
    <member name="F:Unity.Collections.NativeLeakDetectionMode.Enabled">
      <summary>
        <para>Indicates that native memory leak detection is enabled. It is lightweight and will not collect any stacktraces.</para>
      </summary>
    </member>
    <member name="F:Unity.Collections.NativeLeakDetectionMode.EnabledWithStackTrace">
      <summary>
        <para>Indicates that native memory leak detection is enabled with full stack trace extraction &amp; logging.</para>
      </summary>
    </member>
    <member name="T:Unity.Collections.NativeSlice`1">
      <summary>
        <para>Native Slice.</para>
      </summary>
    </member>
    <member name="M:Unity.Collections.NativeSlice_1.CopyFrom(Unity.Collections.NativeSlice`1&lt;T&gt;)">
      <summary>
        <para>Copy all the elements from a NativeSlice or managed array of the same length.</para>
      </summary>
      <param name="slice">NativeSlice.</param>
      <param name="array">Array.</param>
    </member>
    <member name="M:Unity.Collections.NativeSlice_1.CopyFrom(T[])">
      <summary>
        <para>Copy all the elements from a NativeSlice or managed array of the same length.</para>
      </summary>
      <param name="slice">NativeSlice.</param>
      <param name="array">Array.</param>
    </member>
    <member name="M:Unity.Collections.NativeSlice_1.CopyTo(Unity.Collections.NativeArray`1&lt;T&gt;)">
      <summary>
        <para>Copy all the elements of the slice to a NativeArray or managed array of the same length.</para>
      </summary>
      <param name="array">Array.</param>
    </member>
    <member name="M:Unity.Collections.NativeSlice_1.CopyTo(T[])">
      <summary>
        <para>Copy all the elements of the slice to a NativeArray or managed array of the same length.</para>
      </summary>
      <param name="array">Array.</param>
    </member>
    <member name="M:Unity.Collections.NativeSlice_1.#ctor(Unity.Collections.NativeArray`1&lt;T&gt;)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="array">NativeArray.</param>
      <param name="start">Start index.</param>
      <param name="ptr">Memory pointer.</param>
      <param name="length">Length.</param>
    </member>
    <member name="M:Unity.Collections.NativeSlice_1.#ctor(Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="array">NativeArray.</param>
      <param name="start">Start index.</param>
      <param name="ptr">Memory pointer.</param>
      <param name="length">Length.</param>
    </member>
    <member name="M:Unity.Collections.NativeSlice_1.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="array">NativeArray.</param>
      <param name="start">Start index.</param>
      <param name="ptr">Memory pointer.</param>
      <param name="length">Length.</param>
    </member>
    <member name="M:Unity.Collections.NativeSlice_1.#ctor(Unity.Collections.NativeArray`1&lt;T&gt;,System.Int32,System.Int32)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="array">NativeArray.</param>
      <param name="start">Start index.</param>
      <param name="ptr">Memory pointer.</param>
      <param name="length">Length.</param>
    </member>
    <member name="M:Unity.Collections.NativeSlice_1.GetEnumerator">
      <summary>
        <para>GetEnumerator.</para>
      </summary>
      <returns>
        <para>Enumerator.</para>
      </returns>
    </member>
    <member name="?:Unity.Collections.NativeSlice_1.implop_NativeSlice&lt;T&gt;(NativeArray&lt;T&gt;)(Unity.Collections.NativeArray`1&lt;T&gt;)">
      <summary>
        <para>Implicit operator for creating a NativeSlice from a NativeArray.</para>
      </summary>
      <param name="array">NativeArray.</param>
    </member>
    <member name="P:Unity.Collections.NativeSlice_1.Length">
      <summary>
        <para>Number of elements in the slice.</para>
      </summary>
    </member>
    <member name="M:Unity.Collections.NativeSlice_1.SliceConvert">
      <summary>
        <para>SliceConvert.</para>
      </summary>
      <returns>
        <para>NativeSlice.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.NativeSlice_1.SliceWithStride(System.Int32)">
      <summary>
        <para>SliceWithStride.</para>
      </summary>
      <param name="offset">Stride offset.</param>
      <param name="offsetFieldName">Field name whos offset should be used as stride.</param>
      <returns>
        <para>NativeSlice.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.NativeSlice_1.SliceWithStride">
      <summary>
        <para>SliceWithStride.</para>
      </summary>
      <param name="offset">Stride offset.</param>
      <param name="offsetFieldName">Field name whos offset should be used as stride.</param>
      <returns>
        <para>NativeSlice.</para>
      </returns>
    </member>
    <member name="M:Unity.Collections.NativeSlice_1.SliceWithStride">
      <summary>
        <para>SliceWithStride.</para>
      </summary>
      <param name="offset">Stride offset.</param>
      <param name="offsetFieldName">Field name whos offset should be used as stride.</param>
      <returns>
        <para>NativeSlice.</para>
      </returns>
    </member>
    <member name="P:Unity.Collections.NativeSlice_1.Stride">
      <summary>
        <para>Returns stride set for Slice.</para>
      </summary>
    </member>
    <member name="P:Unity.Collections.NativeSlice_1.this">
      <summary>
        <para>Access NativeSlice elements by index. Notice that structs are returned by value and not by reference.</para>
      </summary>
    </member>
    <member name="M:Unity.Collections.NativeSlice_1.ToArray">
      <summary>
        <para>Convert NativeSlice to array.</para>
      </summary>
      <returns>
        <para>Array.</para>
      </returns>
    </member>
    <member name="T:Unity.Collections.ReadOnlyAttribute">
      <summary>
        <para>The ReadOnly attribute lets you mark a member of a struct used in a job as read-only.</para>
      </summary>
    </member>
    <member name="T:Unity.Collections.ReadOnlyAttribute">
      <summary>
        <para>The ReadOnly attribute lets you mark a member of a struct used in a job as read-only.</para>
      </summary>
    </member>
    <member name="T:Unity.Collections.WriteOnlyAttribute">
      <summary>
        <para>The WriteOnly attribute lets you mark a member of a struct used in a job as write-only.</para>
      </summary>
    </member>
    <member name="T:Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem">
      <summary>
        <para>Subsystem tags for the read request, describing broad asset type or subsystem that triggered the read request.</para>
      </summary>
    </member>
    <member name="F:Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem.Audio">
      <summary>
        <para>The read request originated from an audio subsystem.</para>
      </summary>
    </member>
    <member name="F:Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem.EntitiesScene">
      <summary>
        <para>The read request originated in a Unity.Entities scene loading subsystem.</para>
      </summary>
    </member>
    <member name="F:Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem.EntitiesStreamBinaryReader">
      <summary>
        <para>The read request originated in a Unity.Entities.Serialization binary reader subsystem.</para>
      </summary>
    </member>
    <member name="F:Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem.Mesh">
      <summary>
        <para>The read request originated in mesh loading.</para>
      </summary>
    </member>
    <member name="F:Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem.Other">
      <summary>
        <para>The subsystem where the read request originated is unknown.</para>
      </summary>
    </member>
    <member name="F:Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem.Scripts">
      <summary>
        <para>The read request originated in scripts.</para>
      </summary>
    </member>
    <member name="F:Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem.Texture">
      <summary>
        <para>The read request originated in texture loading.</para>
      </summary>
    </member>
    <member name="F:Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem.VirtualTexture">
      <summary>
        <para>The read request originated in Virtual Texturing.</para>
      </summary>
    </member>
    <member name="T:Unity.IO.LowLevel.Unsafe.AsyncReadManager">
      <summary>
        <para>With the AsyncReadManager, you can perform asynchronous I/O operations through Unity's virtual file system. You can perform these operations on any thread or job.</para>
      </summary>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManager.Read(System.String,Unity.IO.LowLevel.Unsafe.ReadCommand*,System.UInt32,System.String,System.UInt64,Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem)">
      <summary>
        <para>Issues an asynchronous file read operation. Returns a ReadHandle.</para>
      </summary>
      <param name="filename">The filename to read from.</param>
      <param name="readCmds">A pointer to an array of ReadCommand structs that specify offset, size, and destination buffer.</param>
      <param name="readCmdCount">The number of read commands pointed to by readCmds.</param>
      <param name="assetName">(Optional) The name of the object being read, for metrics purposes.</param>
      <param name="typeID">(Optional) The of the object being read, for metrics purposes.</param>
      <param name="subsystem">(Optional) The AssetLoadingSubsystem|Subsystem tag for the read operation, for metrics purposes.</param>
      <returns>
        <para>Used to monitor the progress and status of the read command.</para>
      </returns>
    </member>
    <member name="T:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics">
      <summary>
        <para>Manages the recording and retrieval of metrics from the AsyncReadManager.</para>
      </summary>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics.ClearCompletedMetrics">
      <summary>
        <para>Clears the metrics for all completed requests, including failed and canceled requests.</para>
      </summary>
    </member>
    <member name="T:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics.Flags">
      <summary>
        <para>Flags controlling the behaviour of AsyncReadManagerMetrics.GetMetrics and AsyncReadManagerMetrics.GetCurrentSummaryMetrics.</para>
      </summary>
    </member>
    <member name="F:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics.Flags.ClearOnRead">
      <summary>
        <para>Clear metrics for completed read requests after returning.</para>
      </summary>
    </member>
    <member name="F:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics.Flags.None">
      <summary>
        <para>Pass no flags.</para>
      </summary>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics.GetCurrentSummaryMetrics(Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics/Flags)">
      <summary>
        <para>Gets a summary of the metrics collected for AsyncReadManager read operations since you started data collection or last cleared the metrics data.</para>
      </summary>
      <param name="flags">Flags to control the behavior, including clearing the underlying completed metrics after reading.</param>
      <returns>
        <para>A summary of the current metrics data.</para>
      </returns>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics.GetCurrentSummaryMetrics(Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters,Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics/Flags)">
      <summary>
        <para>Gets a filtered summary of the metrics collected for AsyncReadManager read operations since you started data collection or last cleared the metrics data.</para>
      </summary>
      <param name="metricsFilters">The filters to apply to the metrics before calculating the summary.</param>
      <param name="flags">Flags to control the behavior, including clearing the underlying completed metrics after reading.</param>
      <returns>
        <para>A summary of the current metric data, filtered by the specified metricsFilters.</para>
      </returns>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics.GetMetrics(Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics/Flags)">
      <summary>
        <para>Returns the current AsyncReadManager metrics.</para>
      </summary>
      <param name="flags">Flags to control the behaviour, including clearing the underlying completed metrics after reading.</param>
      <param name="filters">(Optional) The AsyncReadManagerMetricsFilters|filters to control the data returned.</param>
      <returns>
        <para>Array of AsyncReadManagerRequestMetric|read request metrics currently stored in the AsyncReadManager, which can be filtered by passing AsyncReadManagerMetricsFilters.</para>
      </returns>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics.GetMetrics(Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters,Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics/Flags)">
      <summary>
        <para>Returns the current AsyncReadManager metrics.</para>
      </summary>
      <param name="flags">Flags to control the behaviour, including clearing the underlying completed metrics after reading.</param>
      <param name="filters">(Optional) The AsyncReadManagerMetricsFilters|filters to control the data returned.</param>
      <returns>
        <para>Array of AsyncReadManagerRequestMetric|read request metrics currently stored in the AsyncReadManager, which can be filtered by passing AsyncReadManagerMetricsFilters.</para>
      </returns>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics.GetMetrics(System.Collections.Generic.List`1&lt;Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric&gt;,Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics/Flags)">
      <summary>
        <para>Writes the current AsyncReadManager metrics into the given List.</para>
      </summary>
      <param name="outMetrics">The pre-allocated list to store the metrics in.</param>
      <param name="flags">Flags to control the behaviour, including clearing the underlying completed metrics after reading.</param>
      <param name="filters">(Optional) The AsyncReadManagerMetricsFilters|filters to control the data returned.</param>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics.GetMetrics(System.Collections.Generic.List`1&lt;Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric&gt;,Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters,Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics/Flags)">
      <summary>
        <para>Writes the current AsyncReadManager metrics into the given List.</para>
      </summary>
      <param name="outMetrics">The pre-allocated list to store the metrics in.</param>
      <param name="flags">Flags to control the behaviour, including clearing the underlying completed metrics after reading.</param>
      <param name="filters">(Optional) The AsyncReadManagerMetricsFilters|filters to control the data returned.</param>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics.GetSummaryOfMetrics(Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric[])">
      <summary>
        <para>Summarizes an array containing AsyncReadManagerRequestMetric records.</para>
      </summary>
      <param name="metrics">Array of previously collected AsyncReadManagerRequestMetrics.</param>
      <returns>
        <para>Calculated summary of the given metrics.</para>
      </returns>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics.GetSummaryOfMetrics(System.Collections.Generic.List`1&lt;Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric&gt;)">
      <summary>
        <para>Summarizes an array containing AsyncReadManagerRequestMetric records.</para>
      </summary>
      <param name="metrics">Array of previously collected AsyncReadManagerRequestMetrics.</param>
      <returns>
        <para>Calculated summary of the given metrics.</para>
      </returns>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics.GetSummaryOfMetrics(Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric[],Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters)">
      <summary>
        <para>Summarizes AsyncReadManagerRequestMetric records that match the specified filter.</para>
      </summary>
      <param name="metrics">List of previously collected AsyncReadManagerRequestMetrics.</param>
      <param name="metricsFilters">AsyncReadManagerMetricsFilters|Filters to apply to the data used in calculating the summary.</param>
      <returns>
        <para>Calculated summary of given metrics that match the filters.</para>
      </returns>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics.GetSummaryOfMetrics(System.Collections.Generic.List`1&lt;Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric&gt;,Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters)">
      <summary>
        <para>Summarizes AsyncReadManagerRequestMetric records that match the specified filter.</para>
      </summary>
      <param name="metrics">List of previously collected AsyncReadManagerRequestMetrics.</param>
      <param name="metricsFilters">AsyncReadManagerMetricsFilters|Filters to apply to the data used in calculating the summary.</param>
      <returns>
        <para>Calculated summary of given metrics that match the filters.</para>
      </returns>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics.GetTotalSizeOfNonASRMReadsBytes(System.Boolean)">
      <summary>
        <para>Returns the amount of data (in bytes) read through systems other than the AsyncReadManager.</para>
      </summary>
      <param name="emptyAfterRead">Set to true to reset the underlying data counter to zero after calling this function. Set to false if you want each call to this function to return the running, cumulative total.</param>
      <returns>
        <para>Number of bytes of data read through systems other than the AsyncReadManager since you started metrics collection or you cleared this data counter by setting emptyAfterRead to true.</para>
      </returns>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics.IsEnabled">
      <summary>
        <para>Reports whether the metrics system for the AsyncReadManager is currently recording data.</para>
      </summary>
      <returns>
        <para>True, if the metrics system of the AsyncReadManager is currently recording data; false, otherwise.</para>
      </returns>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics.StartCollectingMetrics">
      <summary>
        <para>Begin recording metrics data for AsyncReadManager read operations.</para>
      </summary>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetrics.StopCollectingMetrics">
      <summary>
        <para>Stop recording metrics data for AsyncReadManager read operations.</para>
      </summary>
    </member>
    <member name="T:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters">
      <summary>
        <para>Defines a filter for selecting specific categories of data when summarizing AsyncReadManager metrics.</para>
      </summary>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters.ClearFilters">
      <summary>
        <para>Clears all the filters on an existing AsyncReadManagerMetricsFilters instance.</para>
      </summary>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters.#ctor">
      <summary>
        <para>Constructor for an instance of the Summary Metrics Filters, used to filter the metrics data that is included in the calculation of a summary.</para>
      </summary>
      <param name="typeID">The YAML Class ID for the asset type to include in the summary calculations. See the page.</param>
      <param name="state">The Processing State to include in the summary calculations.</param>
      <param name="readType">The type of file read (async or sync) to include in the summary calculations.</param>
      <param name="priorityLevel">The priority level to include in the summary calculations.</param>
      <param name="subsystem">The Subsystem 'tag' to include in the summary calculations.</param>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters.#ctor(System.UInt64)">
      <summary>
        <para>Constructor for an instance of the Summary Metrics Filters, used to filter the metrics data that is included in the calculation of a summary.</para>
      </summary>
      <param name="typeID">The YAML Class ID for the asset type to include in the summary calculations. See the page.</param>
      <param name="state">The Processing State to include in the summary calculations.</param>
      <param name="readType">The type of file read (async or sync) to include in the summary calculations.</param>
      <param name="priorityLevel">The priority level to include in the summary calculations.</param>
      <param name="subsystem">The Subsystem 'tag' to include in the summary calculations.</param>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters.#ctor(Unity.IO.LowLevel.Unsafe.ProcessingState)">
      <summary>
        <para>Constructor for an instance of the Summary Metrics Filters, used to filter the metrics data that is included in the calculation of a summary.</para>
      </summary>
      <param name="typeID">The YAML Class ID for the asset type to include in the summary calculations. See the page.</param>
      <param name="state">The Processing State to include in the summary calculations.</param>
      <param name="readType">The type of file read (async or sync) to include in the summary calculations.</param>
      <param name="priorityLevel">The priority level to include in the summary calculations.</param>
      <param name="subsystem">The Subsystem 'tag' to include in the summary calculations.</param>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters.#ctor(Unity.IO.LowLevel.Unsafe.FileReadType)">
      <summary>
        <para>Constructor for an instance of the Summary Metrics Filters, used to filter the metrics data that is included in the calculation of a summary.</para>
      </summary>
      <param name="typeID">The YAML Class ID for the asset type to include in the summary calculations. See the page.</param>
      <param name="state">The Processing State to include in the summary calculations.</param>
      <param name="readType">The type of file read (async or sync) to include in the summary calculations.</param>
      <param name="priorityLevel">The priority level to include in the summary calculations.</param>
      <param name="subsystem">The Subsystem 'tag' to include in the summary calculations.</param>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters.#ctor(Unity.IO.LowLevel.Unsafe.Priority)">
      <summary>
        <para>Constructor for an instance of the Summary Metrics Filters, used to filter the metrics data that is included in the calculation of a summary.</para>
      </summary>
      <param name="typeID">The YAML Class ID for the asset type to include in the summary calculations. See the page.</param>
      <param name="state">The Processing State to include in the summary calculations.</param>
      <param name="readType">The type of file read (async or sync) to include in the summary calculations.</param>
      <param name="priorityLevel">The priority level to include in the summary calculations.</param>
      <param name="subsystem">The Subsystem 'tag' to include in the summary calculations.</param>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters.#ctor(Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem)">
      <summary>
        <para>Constructor for an instance of the Summary Metrics Filters, used to filter the metrics data that is included in the calculation of a summary.</para>
      </summary>
      <param name="typeID">The YAML Class ID for the asset type to include in the summary calculations. See the page.</param>
      <param name="state">The Processing State to include in the summary calculations.</param>
      <param name="readType">The type of file read (async or sync) to include in the summary calculations.</param>
      <param name="priorityLevel">The priority level to include in the summary calculations.</param>
      <param name="subsystem">The Subsystem 'tag' to include in the summary calculations.</param>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters.#ctor(System.UInt64[],Unity.IO.LowLevel.Unsafe.ProcessingState[],Unity.IO.LowLevel.Unsafe.FileReadType[],Unity.IO.LowLevel.Unsafe.Priority[],Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem[])">
      <summary>
        <para>Constructor for an instance of the Summary Metrics Filters, used to filter the metrics data that is included in the calculation of a summary.</para>
      </summary>
      <param name="typeIDs">An array of all the to include in the summary calculations.</param>
      <param name="states">An array of all the ProcessingStates to include in the summary calculations.</param>
      <param name="readTypes">An array of all the FileReadTypes to include in the summary calculations. As there are only two options, this is generally unnecesary.</param>
      <param name="priorityLevels">An array of all the Priority levels to include in the summary calculations. As there are only two options, this is generally unnecesary.</param>
      <param name="subsystems">An array of all the Subsystem 'tags' to include in the summary calculations.</param>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters.#ctor(System.UInt64[])">
      <summary>
        <para>Constructor for an instance of the Summary Metrics Filters, used to filter the metrics data that is included in the calculation of a summary.</para>
      </summary>
      <param name="typeIDs">An array of all the to include in the summary calculations.</param>
      <param name="states">An array of all the ProcessingStates to include in the summary calculations.</param>
      <param name="readTypes">An array of all the FileReadTypes to include in the summary calculations. As there are only two options, this is generally unnecesary.</param>
      <param name="priorityLevels">An array of all the Priority levels to include in the summary calculations. As there are only two options, this is generally unnecesary.</param>
      <param name="subsystems">An array of all the Subsystem 'tags' to include in the summary calculations.</param>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters.#ctor(Unity.IO.LowLevel.Unsafe.ProcessingState[])">
      <summary>
        <para>Constructor for an instance of the Summary Metrics Filters, used to filter the metrics data that is included in the calculation of a summary.</para>
      </summary>
      <param name="typeIDs">An array of all the to include in the summary calculations.</param>
      <param name="states">An array of all the ProcessingStates to include in the summary calculations.</param>
      <param name="readTypes">An array of all the FileReadTypes to include in the summary calculations. As there are only two options, this is generally unnecesary.</param>
      <param name="priorityLevels">An array of all the Priority levels to include in the summary calculations. As there are only two options, this is generally unnecesary.</param>
      <param name="subsystems">An array of all the Subsystem 'tags' to include in the summary calculations.</param>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters.#ctor(Unity.IO.LowLevel.Unsafe.FileReadType[])">
      <summary>
        <para>Constructor for an instance of the Summary Metrics Filters, used to filter the metrics data that is included in the calculation of a summary.</para>
      </summary>
      <param name="typeIDs">An array of all the to include in the summary calculations.</param>
      <param name="states">An array of all the ProcessingStates to include in the summary calculations.</param>
      <param name="readTypes">An array of all the FileReadTypes to include in the summary calculations. As there are only two options, this is generally unnecesary.</param>
      <param name="priorityLevels">An array of all the Priority levels to include in the summary calculations. As there are only two options, this is generally unnecesary.</param>
      <param name="subsystems">An array of all the Subsystem 'tags' to include in the summary calculations.</param>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters.#ctor(Unity.IO.LowLevel.Unsafe.Priority[])">
      <summary>
        <para>Constructor for an instance of the Summary Metrics Filters, used to filter the metrics data that is included in the calculation of a summary.</para>
      </summary>
      <param name="typeIDs">An array of all the to include in the summary calculations.</param>
      <param name="states">An array of all the ProcessingStates to include in the summary calculations.</param>
      <param name="readTypes">An array of all the FileReadTypes to include in the summary calculations. As there are only two options, this is generally unnecesary.</param>
      <param name="priorityLevels">An array of all the Priority levels to include in the summary calculations. As there are only two options, this is generally unnecesary.</param>
      <param name="subsystems">An array of all the Subsystem 'tags' to include in the summary calculations.</param>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters.#ctor(Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem[])">
      <summary>
        <para>Constructor for an instance of the Summary Metrics Filters, used to filter the metrics data that is included in the calculation of a summary.</para>
      </summary>
      <param name="typeIDs">An array of all the to include in the summary calculations.</param>
      <param name="states">An array of all the ProcessingStates to include in the summary calculations.</param>
      <param name="readTypes">An array of all the FileReadTypes to include in the summary calculations. As there are only two options, this is generally unnecesary.</param>
      <param name="priorityLevels">An array of all the Priority levels to include in the summary calculations. As there are only two options, this is generally unnecesary.</param>
      <param name="subsystems">An array of all the Subsystem 'tags' to include in the summary calculations.</param>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters.RemovePriorityFilter">
      <summary>
        <para>Remove the Priority filters from an existing SummaryMetricsFilters instance.</para>
      </summary>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters.RemoveReadTypeFilter">
      <summary>
        <para>Remove the ReadType filters from an existing SummaryMetricsFilters instance.</para>
      </summary>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters.RemoveStateFilter">
      <summary>
        <para>Remove the State filters from an existing SummaryMetricsFilters instance.</para>
      </summary>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters.RemoveSubsystemFilter">
      <summary>
        <para>Remove the Subsystem filters from an existing SummaryMetricsFilters instance.</para>
      </summary>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters.RemoveTypeIDFilter">
      <summary>
        <para>Remove the TypeID filters from an existing SummaryMetricsFilters instance.</para>
      </summary>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters.SetPriorityFilter(Unity.IO.LowLevel.Unsafe.Priority)">
      <summary>
        <para>Set Priority filters on an existing SummaryMetricsFilters instance.</para>
      </summary>
      <param name="_priorityLevel">Priority level to filter by. Summary will include reads that had this priority level only.</param>
      <param name="_priorityLevels">Array of priority levels to filter by. Summary will include reads that have any of these priority levels.</param>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters.SetPriorityFilter(Unity.IO.LowLevel.Unsafe.Priority[])">
      <summary>
        <para>Set Priority filters on an existing SummaryMetricsFilters instance.</para>
      </summary>
      <param name="_priorityLevel">Priority level to filter by. Summary will include reads that had this priority level only.</param>
      <param name="_priorityLevels">Array of priority levels to filter by. Summary will include reads that have any of these priority levels.</param>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters.SetReadTypeFilter(Unity.IO.LowLevel.Unsafe.FileReadType)">
      <summary>
        <para>Set FileReadType filters on an existing SummaryMetricsFilters instance.</para>
      </summary>
      <param name="_readType">FileReadType to filter by. Summary will include reads that had this read type only.</param>
      <param name="_readTypes">Array of FileReadType|FileReadTypes to filter by. Summary will include reads that have any of these read types.</param>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters.SetReadTypeFilter(Unity.IO.LowLevel.Unsafe.FileReadType[])">
      <summary>
        <para>Set FileReadType filters on an existing SummaryMetricsFilters instance.</para>
      </summary>
      <param name="_readType">FileReadType to filter by. Summary will include reads that had this read type only.</param>
      <param name="_readTypes">Array of FileReadType|FileReadTypes to filter by. Summary will include reads that have any of these read types.</param>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters.SetStateFilter(Unity.IO.LowLevel.Unsafe.ProcessingState)">
      <summary>
        <para>Set ProcessingState filters on an existing SummaryMetricsFilters instance.</para>
      </summary>
      <param name="_state">ProcessingState to filter by. Summary will include reads that have this state only.</param>
      <param name="_states">Array of ProcessingState|ProcessingStates to filter by. Summary will include reads that have any of these states.</param>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters.SetStateFilter(Unity.IO.LowLevel.Unsafe.ProcessingState[])">
      <summary>
        <para>Set ProcessingState filters on an existing SummaryMetricsFilters instance.</para>
      </summary>
      <param name="_state">ProcessingState to filter by. Summary will include reads that have this state only.</param>
      <param name="_states">Array of ProcessingState|ProcessingStates to filter by. Summary will include reads that have any of these states.</param>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters.SetSubsystemFilter(Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem)">
      <summary>
        <para>Set AssetLoadingSubsystem filters on an existing SummaryMetricsFilters instance.</para>
      </summary>
      <param name="_subsystem">AssetLoadingSubsystem to filter by. Summary will include reads that have this subsystem tag only.</param>
      <param name="_subsystems">Array of AssetLoadingSubsystem|AssetLoadingSubsystems to filter by. Summary will include reads that have any of these subsystem tags.</param>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters.SetSubsystemFilter(Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem[])">
      <summary>
        <para>Set AssetLoadingSubsystem filters on an existing SummaryMetricsFilters instance.</para>
      </summary>
      <param name="_subsystem">AssetLoadingSubsystem to filter by. Summary will include reads that have this subsystem tag only.</param>
      <param name="_subsystems">Array of AssetLoadingSubsystem|AssetLoadingSubsystems to filter by. Summary will include reads that have any of these subsystem tags.</param>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters.SetTypeIDFilter(System.UInt64)">
      <summary>
        <para>Set TypeID filters on an existing SummaryMetricsFilters instance.</para>
      </summary>
      <param name="_typeID"> to filter by. Summary will include reads that have this type ID only.</param>
      <param name="_typeIDs">Array of to filter by. Summary will include reads that have any of these Type IDs.</param>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.AsyncReadManagerMetricsFilters.SetTypeIDFilter(System.UInt64[])">
      <summary>
        <para>Set TypeID filters on an existing SummaryMetricsFilters instance.</para>
      </summary>
      <param name="_typeID"> to filter by. Summary will include reads that have this type ID only.</param>
      <param name="_typeIDs">Array of to filter by. Summary will include reads that have any of these Type IDs.</param>
    </member>
    <member name="T:Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric">
      <summary>
        <para>Metrics for an individual read request.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric.AssetName">
      <summary>
        <para>The name of the asset being read.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric.AssetTypeId">
      <summary>
        <para>The of the asset being read in the read request.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric.BatchReadCount">
      <summary>
        <para>The number of batch read commands contained in the read request.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric.CurrentBytesRead">
      <summary>
        <para>Total number of bytes of the read request read so far.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric.FileName">
      <summary>
        <para>The filename the read request is reading from.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric.IsBatchRead">
      <summary>
        <para>Returns whether this read request contained batch read commands.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric.OffsetBytes">
      <summary>
        <para>The offset of the read request from the start of the file, in bytes.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric.PriorityLevel">
      <summary>
        <para>The Priority|priority level of the read request.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric.ReadType">
      <summary>
        <para>The FileReadType|read type (sync or async) of the read request.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric.RequestTimeMicroseconds">
      <summary>
        <para>The time at which the read request was made, in microseconds elapsed since application startup.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric.SizeBytes">
      <summary>
        <para>The size of the read request, in bytes.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric.State">
      <summary>
        <para>The ProcessingState|state of the read request at the time of retrieving the metrics.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric.Subsystem">
      <summary>
        <para>The AssetLoadingSubsystem|Subsystem tag assigned to the read operation.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric.TimeInQueueMicroseconds">
      <summary>
        <para>The amount of time the read request waited in the AsyncReadManager queue, in microseconds.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerRequestMetric.TotalTimeMicroseconds">
      <summary>
        <para>The total time in microseconds from the read request being added until its completion, or the time of metrics retrieval, depending whether the read has completed or not.</para>
      </summary>
    </member>
    <member name="T:Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics">
      <summary>
        <para>A summary of the metrics collected for AsyncReadManager read operations.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics.AverageBandwidthMBPerSecond">
      <summary>
        <para>The mean rate of reading of data (bandwidth), in Mbps, for read request metrics included in the summary calculation.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics.AverageReadSizeInBytes">
      <summary>
        <para>The mean size of data read, in bytes, for read request metrics included in the summary calculation.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics.AverageReadTimeMicroseconds">
      <summary>
        <para>The mean time taken for reading (excluding queue time), in microseconds, for read request metrics included in the summary calculation.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics.AverageThroughputMBPerSecond">
      <summary>
        <para>The mean rate of request throughput, in Mbps, for read request metrics included in the summary calculation.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics.AverageTotalRequestTimeMicroseconds">
      <summary>
        <para>The mean time taken from request to completion, in microseconds, for completed read request metrics included in the summary calculation.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics.AverageWaitTimeMicroseconds">
      <summary>
        <para>The mean time taken from request to the start of reading, in microseconds, for read request metrics included in the summary calculation.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics.LongestReadAssetType">
      <summary>
        <para>The for the longest read included in the summary calculation.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics.LongestReadSubsystem">
      <summary>
        <para>The Subsystem tag for the longest read included in the summary calculation.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics.LongestReadTimeMicroseconds">
      <summary>
        <para>The longest read time (not including time in queue) included in the summary calculation in microseconds.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics.LongestWaitAssetType">
      <summary>
        <para>The for the longest wait time included in the summary calculation.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics.LongestWaitSubsystem">
      <summary>
        <para>The Subsystem tag for the longest wait time included in the summary calculation.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics.LongestWaitTimeMicroseconds">
      <summary>
        <para>The longest time spent waiting of metrics included in the summary calculation, in microseconds.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics.NumberOfAsyncReads">
      <summary>
        <para>The total number of Async reads in the metrics included in the summary calculation.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics.NumberOfCachedReads">
      <summary>
        <para>The total number of cached reads (so read time was zero) in the metrics included in the summary calculation.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics.NumberOfCanceledRequests">
      <summary>
        <para>The total number of canceled requests in the metrics included in the summary calculation.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics.NumberOfCompletedRequests">
      <summary>
        <para>The total number of completed requests in the metrics included in the summary calculation.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics.NumberOfFailedRequests">
      <summary>
        <para>The total number of failed requests in the metrics included in the summary calculation.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics.NumberOfInProgressRequests">
      <summary>
        <para>The total number of in progress requests in the metrics included in the summary calculation.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics.NumberOfSyncReads">
      <summary>
        <para>The total number of Sync reads in the metrics included in the summary calculation.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics.NumberOfWaitingRequests">
      <summary>
        <para>The total number of waiting requests in the metrics included in the summary calculation.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics.TotalBytesRead">
      <summary>
        <para>The total number of bytes read in the metrics included in the summary calculation.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.AsyncReadManagerSummaryMetrics.TotalNumberOfRequests">
      <summary>
        <para>The total number of read requests included in the summary calculation.</para>
      </summary>
    </member>
    <member name="T:Unity.IO.LowLevel.Unsafe.FileReadType">
      <summary>
        <para>The type of FileReadType|file read requested from the AsyncReadManager.</para>
      </summary>
    </member>
    <member name="F:Unity.IO.LowLevel.Unsafe.FileReadType.Async">
      <summary>
        <para>Async Read Request.</para>
      </summary>
    </member>
    <member name="F:Unity.IO.LowLevel.Unsafe.FileReadType.Sync">
      <summary>
        <para>Sync Read Request.</para>
      </summary>
    </member>
    <member name="T:Unity.IO.LowLevel.Unsafe.Priority">
      <summary>
        <para>The priority level attached to the AsyncReadManager read request.</para>
      </summary>
    </member>
    <member name="F:Unity.IO.LowLevel.Unsafe.Priority.PriorityHigh">
      <summary>
        <para>High priority request.</para>
      </summary>
    </member>
    <member name="F:Unity.IO.LowLevel.Unsafe.Priority.PriorityLow">
      <summary>
        <para>Low priority request.</para>
      </summary>
    </member>
    <member name="T:Unity.IO.LowLevel.Unsafe.ProcessingState">
      <summary>
        <para>The state of the read request at the time of retrieval of AsyncReadManagerMetrics.</para>
      </summary>
    </member>
    <member name="F:Unity.IO.LowLevel.Unsafe.ProcessingState.Canceled">
      <summary>
        <para>The read was canceled before completion.</para>
      </summary>
    </member>
    <member name="F:Unity.IO.LowLevel.Unsafe.ProcessingState.Completed">
      <summary>
        <para>The read request had fully completed.</para>
      </summary>
    </member>
    <member name="F:Unity.IO.LowLevel.Unsafe.ProcessingState.Failed">
      <summary>
        <para>The read request had failed before completion.</para>
      </summary>
    </member>
    <member name="F:Unity.IO.LowLevel.Unsafe.ProcessingState.InQueue">
      <summary>
        <para>The read request was waiting in the queue to be read.</para>
      </summary>
    </member>
    <member name="F:Unity.IO.LowLevel.Unsafe.ProcessingState.Reading">
      <summary>
        <para>The read request was in the process of being read.</para>
      </summary>
    </member>
    <member name="F:Unity.IO.LowLevel.Unsafe.ProcessingState.Unknown">
      <summary>
        <para>The read request status was unknown.</para>
      </summary>
    </member>
    <member name="T:Unity.IO.LowLevel.Unsafe.ReadCommand">
      <summary>
        <para>Describes the offset, size, and destination buffer of a single read operation.</para>
      </summary>
    </member>
    <member name="F:Unity.IO.LowLevel.Unsafe.ReadCommand.Buffer">
      <summary>
        <para>The buffer that receives the read data.</para>
      </summary>
    </member>
    <member name="F:Unity.IO.LowLevel.Unsafe.ReadCommand.Offset">
      <summary>
        <para>The offset where the read begins, within the file.</para>
      </summary>
    </member>
    <member name="F:Unity.IO.LowLevel.Unsafe.ReadCommand.Size">
      <summary>
        <para>The size of the read in bytes.</para>
      </summary>
    </member>
    <member name="T:Unity.IO.LowLevel.Unsafe.ReadHandle">
      <summary>
        <para>You can use this handle to query the status of an asynchronous read operation. Note: To avoid a memory leak, you must call Dispose.</para>
      </summary>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.ReadHandle.Dispose">
      <summary>
        <para>Disposes the ReadHandle. Use this to free up internal resources for reuse.</para>
      </summary>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.ReadHandle.IsValid">
      <summary>
        <para>Check if the ReadHandle is valid.</para>
      </summary>
      <returns>
        <para>True if the ReadHandle is valid.</para>
      </returns>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.ReadHandle.JobHandle">
      <summary>
        <para>JobHandle that completes when the read operation completes.</para>
      </summary>
    </member>
    <member name="P:Unity.IO.LowLevel.Unsafe.ReadHandle.Status">
      <summary>
        <para>Current state of the read operation.</para>
      </summary>
    </member>
    <member name="T:Unity.IO.LowLevel.Unsafe.ReadStatus">
      <summary>
        <para>State of the read operation.</para>
      </summary>
    </member>
    <member name="F:Unity.IO.LowLevel.Unsafe.ReadStatus.Complete">
      <summary>
        <para>All the ReadCommand operations completed successfully.</para>
      </summary>
    </member>
    <member name="F:Unity.IO.LowLevel.Unsafe.ReadStatus.Failed">
      <summary>
        <para>One or more of the ReadCommand operations failed.</para>
      </summary>
    </member>
    <member name="F:Unity.IO.LowLevel.Unsafe.ReadStatus.InProgress">
      <summary>
        <para>The read operation is in progress.</para>
      </summary>
    </member>
    <member name="T:Unity.IO.LowLevel.Unsafe.VirtualFileSystem">
      <summary>
        <para>Class that provides access to some of the Unity low level virtual file system APIs.</para>
      </summary>
    </member>
    <member name="M:Unity.IO.LowLevel.Unsafe.VirtualFileSystem.GetLocalFileSystemName(System.String,System.String&amp;,System.UInt64&amp;,System.UInt64&amp;)">
      <summary>
        <para>This method looks up the virtual file entry specified, and returns the details of that file within the file on the local filesystem.</para>
      </summary>
      <param name="vfsFileName">Virtual file entry to find.</param>
      <param name="localFileName">Out parameter containing the file on the local filesystem.</param>
      <param name="localFileOffset">Out parameter containing the offset inside of file on the local filesystem.</param>
      <param name="localFileSize">Out parameter containing the size inside of file on the local filesystem.</param>
      <returns>
        <para>Details were successfully found.</para>
      </returns>
    </member>
    <member name="?:Unity.Jobs.IJob">
      <summary>
        <para>Use IJob to schedule a single job that runs in parallel to other jobs and the main thread.</para>
      </summary>
    </member>
    <member name="M:Unity.Jobs.IJob.Execute">
      <summary>
        <para>Implement this method to perform work on a worker thread.</para>
      </summary>
    </member>
    <member name="T:Unity.Jobs.IJobExtensions">
      <summary>
        <para>Extension methods for Jobs using the IJob interface.</para>
      </summary>
    </member>
    <member name="M:Unity.Jobs.IJobExtensions.Run(T)">
      <summary>
        <para>Perform the job's Execute method immediately on the same thread.</para>
      </summary>
      <param name="jobData">The job and data to Run.</param>
    </member>
    <member name="M:Unity.Jobs.IJobExtensions.Schedule(T,Unity.Jobs.JobHandle)">
      <summary>
        <para>Schedule the job for execution on a worker thread.</para>
      </summary>
      <param name="jobData">The job and data to schedule.</param>
      <param name="dependsOn">Dependencies are used to ensure that a job executes on workerthreads after the dependency has completed execution. Making sure that two jobs reading or writing to same data do not run in parallel.</param>
      <returns>
        <para>The handle identifying the scheduled job. Can be used as a dependency for a later job or ensure completion on the main thread.</para>
      </returns>
    </member>
    <member name="?:Unity.Jobs.IJobFor">
      <summary>
        <para>For jobs allow you to perform the same independent operation for each element of a native container or for a fixed number of iterations.
This Job type gives you the most flexibility over how you want your job scheduled.</para>
      </summary>
    </member>
    <member name="M:Unity.Jobs.IJobFor.Execute(System.Int32)">
      <summary>
        <para>Implement this method to perform work against a specific iteration index.</para>
      </summary>
      <param name="index">The index of the for loop at which to perform work.</param>
    </member>
    <member name="T:Unity.Jobs.IJobForExtensions">
      <summary>
        <para>Extension methods for Jobs using the IJobFor.</para>
      </summary>
    </member>
    <member name="M:Unity.Jobs.IJobForExtensions.Run(T,System.Int32)">
      <summary>
        <para>Perform the job's Execute method immediately on the main thread.</para>
      </summary>
      <param name="jobData">The job and data to Run.</param>
      <param name="arrayLength">The number of iterations the for loop will execute.</param>
    </member>
    <member name="M:Unity.Jobs.IJobForExtensions.Schedule">
      <summary>
        <para>Schedule the job for execution on a single worker thread.</para>
      </summary>
      <param name="jobData">The job and data to Schedule.</param>
      <param name="arrayLength">The number of iterations the for loop will execute.</param>
      <param name="dependency">Dependencies are used to ensure that a job executes on worker threads after the dependency has completed execution. Making sure that two jobs reading or writing to same data do not run in parallel.</param>
      <returns>
        <para>The handle identifying the scheduled job. Can be used as a dependency for a later job or ensure completion on the main thread.</para>
      </returns>
    </member>
    <member name="M:Unity.Jobs.IJobForExtensions.ScheduleParallel(T,System.Int32,System.Int32,Unity.Jobs.JobHandle)">
      <summary>
        <para>Schedule the job for concurrent execution on a number of worker threads.</para>
      </summary>
      <param name="jobData">The job and data to Schedule.</param>
      <param name="arrayLength">The number of iterations the for loop will execute.</param>
      <param name="innerloopBatchCount">Granularity in which workstealing is performed. A value of 32, means the job queue will steal 32 iterations and then perform them in an efficient inner loop.</param>
      <param name="dependency">Dependencies are used to ensure that a job executes on worker threads after the dependency has completed execution. Making sure that two jobs reading or writing to same data do not run in parallel.</param>
      <returns>
        <para>The handle identifying the scheduled job. Can be used as a dependency for a later job or ensure completion on the main thread.</para>
      </returns>
    </member>
    <member name="?:Unity.Jobs.IJobParallelFor">
      <summary>
        <para>Parallel-for jobs allow you to perform the same independent operation for each element of a native container or for a fixed number of iterations.</para>
      </summary>
    </member>
    <member name="M:Unity.Jobs.IJobParallelFor.Execute(System.Int32)">
      <summary>
        <para>Implement this method to perform work against a specific iteration index.</para>
      </summary>
      <param name="index">The index of the Parallel for loop at which to perform work.</param>
    </member>
    <member name="T:Unity.Jobs.IJobParallelForExtensions">
      <summary>
        <para>Extension methods for Jobs using the IJobParallelFor.</para>
      </summary>
    </member>
    <member name="M:Unity.Jobs.IJobParallelForExtensions.Run(T,System.Int32)">
      <summary>
        <para>Perform the job's Execute method immediately on the same thread.</para>
      </summary>
      <param name="jobData">The job and data to Run.</param>
      <param name="arrayLength">The number of iterations the for loop will execute.</param>
    </member>
    <member name="M:Unity.Jobs.IJobParallelForExtensions.Schedule(T,System.Int32,System.Int32,Unity.Jobs.JobHandle)">
      <summary>
        <para>Schedule the job for execution on a worker thread.</para>
      </summary>
      <param name="jobData">The job and data to Schedule.</param>
      <param name="arrayLength">The number of iterations the for loop will execute.</param>
      <param name="innerloopBatchCount">Granularity in which workstealing is performed. A value of 32, means the job queue will steal 32 iterations and then perform them in an efficient inner loop.</param>
      <param name="dependsOn">Dependencies are used to ensure that a job executes on workerthreads after the dependency has completed execution. Making sure that two jobs reading or writing to same data do not run in parallel.</param>
      <returns>
        <para>The handle identifying the scheduled job. Can be used as a dependency for a later job or ensure completion on the main thread.</para>
      </returns>
    </member>
    <member name="T:Unity.Jobs.JobHandle">
      <summary>
        <para>JobHandle.</para>
      </summary>
    </member>
    <member name="M:Unity.Jobs.JobHandle.CheckFenceIsDependencyOrDidSyncFence(Unity.Jobs.JobHandle,Unity.Jobs.JobHandle)">
      <summary>
        <para>CheckFenceIsDependencyOrDidSyncFence.</para>
      </summary>
      <param name="jobHandle">Job handle.</param>
      <param name="dependsOn">Job handle dependency.</param>
      <returns>
        <para>Return value.</para>
      </returns>
    </member>
    <member name="M:Unity.Jobs.JobHandle.CombineDependencies(Unity.Jobs.JobHandle,Unity.Jobs.JobHandle)">
      <summary>
        <para>Combines multiple dependencies into a single one.</para>
      </summary>
      <param name="job0"></param>
      <param name="job1"></param>
      <param name="job2"></param>
      <param name="jobs"></param>
    </member>
    <member name="M:Unity.Jobs.JobHandle.CombineDependencies(Unity.Jobs.JobHandle,Unity.Jobs.JobHandle,Unity.Jobs.JobHandle)">
      <summary>
        <para>Combines multiple dependencies into a single one.</para>
      </summary>
      <param name="job0"></param>
      <param name="job1"></param>
      <param name="job2"></param>
      <param name="jobs"></param>
    </member>
    <member name="M:Unity.Jobs.JobHandle.CombineDependencies(Unity.Collections.NativeArray`1&lt;Unity.Jobs.JobHandle&gt;)">
      <summary>
        <para>Combines multiple dependencies into a single one.</para>
      </summary>
      <param name="job0"></param>
      <param name="job1"></param>
      <param name="job2"></param>
      <param name="jobs"></param>
    </member>
    <member name="M:Unity.Jobs.JobHandle.CombineDependencies(Unity.Collections.NativeSlice`1&lt;Unity.Jobs.JobHandle&gt;)">
      <summary>
        <para>Combines multiple dependencies into a single one.</para>
      </summary>
      <param name="job0"></param>
      <param name="job1"></param>
      <param name="job2"></param>
      <param name="jobs"></param>
    </member>
    <member name="M:Unity.Jobs.JobHandle.Complete">
      <summary>
        <para>Ensures that the job has completed.</para>
      </summary>
    </member>
    <member name="M:Unity.Jobs.JobHandle.CompleteAll(Unity.Jobs.JobHandle&amp;,Unity.Jobs.JobHandle&amp;)">
      <summary>
        <para>Ensures that all jobs have completed.</para>
      </summary>
      <param name="job0"></param>
      <param name="job1"></param>
      <param name="job2"></param>
      <param name="jobs"></param>
    </member>
    <member name="M:Unity.Jobs.JobHandle.CompleteAll(Unity.Jobs.JobHandle&amp;,Unity.Jobs.JobHandle&amp;,Unity.Jobs.JobHandle&amp;)">
      <summary>
        <para>Ensures that all jobs have completed.</para>
      </summary>
      <param name="job0"></param>
      <param name="job1"></param>
      <param name="job2"></param>
      <param name="jobs"></param>
    </member>
    <member name="M:Unity.Jobs.JobHandle.CompleteAll(Unity.Collections.NativeArray`1&lt;Unity.Jobs.JobHandle&gt;)">
      <summary>
        <para>Ensures that all jobs have completed.</para>
      </summary>
      <param name="job0"></param>
      <param name="job1"></param>
      <param name="job2"></param>
      <param name="jobs"></param>
    </member>
    <member name="P:Unity.Jobs.JobHandle.IsCompleted">
      <summary>
        <para>Returns false if the task is currently running. Returns true if the task has completed.</para>
      </summary>
    </member>
    <member name="M:Unity.Jobs.JobHandle.ScheduleBatchedJobs">
      <summary>
        <para>By default jobs are only put on a local queue when using Job Schedule functions, this actually makes them available to the worker threads to execute them.</para>
      </summary>
    </member>
    <member name="T:Unity.Jobs.LowLevel.Unsafe.BatchQueryJob`2">
      <summary>
        <para>Struct used to implement batch query jobs.</para>
      </summary>
    </member>
    <member name="M:Unity.Jobs.LowLevel.Unsafe.BatchQueryJob_2.#ctor">
      <summary>
        <para>Create BatchQueryJob.</para>
      </summary>
      <param name="commands">NativeArray containing the commands to execute during a batch. The job executing the query will only read from the array, not write to it.</param>
      <param name="results">NativeArray which can contain the results from the commands. The job executing the query will write to the array.</param>
    </member>
    <member name="T:Unity.Jobs.LowLevel.Unsafe.BatchQueryJobStruct`1">
      <summary>
        <para>Struct used to schedule batch query jobs.</para>
      </summary>
    </member>
    <member name="M:Unity.Jobs.LowLevel.Unsafe.BatchQueryJobStruct_1.Initialize">
      <summary>
        <para>Initializes a BatchQueryJobStruct and returns a pointer to an internal structure (System.IntPtr) which should be passed to JobsUtility.JobScheduleParameters.</para>
      </summary>
    </member>
    <member name="T:Unity.Jobs.LowLevel.Unsafe.JobHandleUnsafeUtility">
      <summary>
        <para>JobHandle Unsafe Utilities.</para>
      </summary>
    </member>
    <member name="M:Unity.Jobs.LowLevel.Unsafe.JobHandleUnsafeUtility.CombineDependencies(Unity.Jobs.JobHandle*,System.Int32)">
      <summary>
        <para>Combines multiple dependencies into a single one using an unsafe array of job handles.
See Also: JobHandle.CombineDependencies.</para>
      </summary>
      <param name="jobs"></param>
      <param name="count"></param>
    </member>
    <member name="T:Unity.Jobs.LowLevel.Unsafe.JobProducerTypeAttribute">
      <summary>
        <para>All job interface types must be marked with the JobProducerType. This is used to compile the Execute method by the Burst ASM inspector.</para>
      </summary>
    </member>
    <member name="M:Unity.Jobs.LowLevel.Unsafe.JobProducerTypeAttribute.#ctor(System.Type)">
      <summary>
        <para></para>
      </summary>
      <param name="producerType">The type containing a static method named "Execute" method which is the method invokes by the job system.</param>
    </member>
    <member name="P:Unity.Jobs.LowLevel.Unsafe.JobProducerTypeAttribute.ProducerType">
      <summary>
        <para>ProducerType is the type containing a static method named "Execute" method which is the method invokes by the job system.</para>
      </summary>
    </member>
    <member name="T:Unity.Jobs.LowLevel.Unsafe.JobRanges">
      <summary>
        <para>Struct containing information about a range the job is allowed to work on.</para>
      </summary>
    </member>
    <member name="F:Unity.Jobs.LowLevel.Unsafe.JobRanges.TotalIterationCount">
      <summary>
        <para>Total iteration count.</para>
      </summary>
    </member>
    <member name="T:Unity.Jobs.LowLevel.Unsafe.JobsUtility">
      <summary>
        <para>Static class containing functionality to create, run and debug jobs.</para>
      </summary>
    </member>
    <member name="F:Unity.Jobs.LowLevel.Unsafe.JobsUtility.CacheLineSize">
      <summary>
        <para>Size of a cache line.</para>
      </summary>
    </member>
    <member name="M:Unity.Jobs.LowLevel.Unsafe.JobsUtility.CreateJobReflectionData(System.Type,System.Object,System.Object,System.Object)">
      <summary>
        <para>Creates job reflection data.</para>
      </summary>
      <param name="type"></param>
      <param name="managedJobFunction0"></param>
      <param name="managedJobFunction1"></param>
      <param name="managedJobFunction2"></param>
      <param name="wrapperJobType"></param>
      <param name="userJobType"></param>
      <returns>
        <para>Returns pointer to internal JobReflectionData.</para>
      </returns>
    </member>
    <member name="M:Unity.Jobs.LowLevel.Unsafe.JobsUtility.CreateJobReflectionData(System.Type,System.Type,System.Object)">
      <summary>
        <para>Creates job reflection data.</para>
      </summary>
      <param name="type"></param>
      <param name="managedJobFunction0"></param>
      <param name="managedJobFunction1"></param>
      <param name="managedJobFunction2"></param>
      <param name="wrapperJobType"></param>
      <param name="userJobType"></param>
      <returns>
        <para>Returns pointer to internal JobReflectionData.</para>
      </returns>
    </member>
    <member name="M:Unity.Jobs.LowLevel.Unsafe.JobsUtility.GetJobRange(Unity.Jobs.LowLevel.Unsafe.JobRanges&amp;,System.Int32,System.Int32&amp;,System.Int32&amp;)">
      <summary>
        <para>Returns the begin index and end index of the range.</para>
      </summary>
      <param name="ranges"></param>
      <param name="jobIndex"></param>
      <param name="beginIndex"></param>
      <param name="endIndex"></param>
    </member>
    <member name="M:Unity.Jobs.LowLevel.Unsafe.JobsUtility.GetWorkStealingRange(Unity.Jobs.LowLevel.Unsafe.JobRanges&amp;,System.Int32,System.Int32&amp;,System.Int32&amp;)">
      <summary>
        <para>Returns the work stealing range.</para>
      </summary>
      <param name="ranges"></param>
      <param name="jobIndex"></param>
      <param name="beginIndex"></param>
      <param name="endIndex"></param>
      <returns>
        <para>Returns true if successful.</para>
      </returns>
    </member>
    <member name="P:Unity.Jobs.LowLevel.Unsafe.JobsUtility.IsExecutingJob">
      <summary>
        <para>Returns true if we this is called from inside of a C# job.</para>
      </summary>
    </member>
    <member name="P:Unity.Jobs.LowLevel.Unsafe.JobsUtility.JobCompilerEnabled">
      <summary>
        <para>When disabled, forces jobs that have already been compiled with burst to run in mono instead. For example if you want to debug the C# jobs or just want to compare behaviour or performance.</para>
      </summary>
    </member>
    <member name="P:Unity.Jobs.LowLevel.Unsafe.JobsUtility.JobDebuggerEnabled">
      <summary>
        <para>Enables and disables the job debugger at runtime. Note that currently the job debugger is only supported in the Editor. Thus this only has effect in the editor.</para>
      </summary>
    </member>
    <member name="T:Unity.Jobs.LowLevel.Unsafe.JobsUtility.JobScheduleParameters">
      <summary>
        <para>Struct containing job parameters for scheduling.</para>
      </summary>
    </member>
    <member name="M:Unity.Jobs.LowLevel.Unsafe.JobsUtility.JobScheduleParameters.#ctor(System.Void*,System.IntPtr,Unity.Jobs.JobHandle,Unity.Jobs.LowLevel.Unsafe.ScheduleMode)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="i_jobData"></param>
      <param name="i_reflectionData"></param>
      <param name="i_dependency"></param>
      <param name="i_scheduleMode"></param>
    </member>
    <member name="F:Unity.Jobs.LowLevel.Unsafe.JobsUtility.JobScheduleParameters.Dependency">
      <summary>
        <para>A JobHandle to any dependency this job would have.</para>
      </summary>
    </member>
    <member name="F:Unity.Jobs.LowLevel.Unsafe.JobsUtility.JobScheduleParameters.JobDataPtr">
      <summary>
        <para>Pointer to the job data.</para>
      </summary>
    </member>
    <member name="F:Unity.Jobs.LowLevel.Unsafe.JobsUtility.JobScheduleParameters.ReflectionData">
      <summary>
        <para>Pointer to the reflection data.</para>
      </summary>
    </member>
    <member name="F:Unity.Jobs.LowLevel.Unsafe.JobsUtility.JobScheduleParameters.ScheduleMode">
      <summary>
        <para>ScheduleMode option.</para>
      </summary>
    </member>
    <member name="P:Unity.Jobs.LowLevel.Unsafe.JobsUtility.JobWorkerCount">
      <summary>
        <para>Current number of worker threads available to the Unity JobQueue.</para>
      </summary>
    </member>
    <member name="P:Unity.Jobs.LowLevel.Unsafe.JobsUtility.JobWorkerMaximumCount">
      <summary>
        <para>Maximum number of worker threads available to the Unity JobQueue (Read Only).</para>
      </summary>
    </member>
    <member name="F:Unity.Jobs.LowLevel.Unsafe.JobsUtility.MaxJobThreadCount">
      <summary>
        <para>Maximum job thread count.</para>
      </summary>
    </member>
    <member name="M:Unity.Jobs.LowLevel.Unsafe.JobsUtility.PatchBufferMinMaxRanges">
      <summary>
        <para>Injects debug checks for min and max ranges of native array.</para>
      </summary>
    </member>
    <member name="M:Unity.Jobs.LowLevel.Unsafe.JobsUtility.ResetJobWorkerCount">
      <summary>
        <para>Reset JobWorkerCount to the Unity adjusted value.</para>
      </summary>
    </member>
    <member name="M:Unity.Jobs.LowLevel.Unsafe.JobsUtility.Schedule(Unity.Jobs.LowLevel.Unsafe.JobsUtility/JobScheduleParameters&amp;)">
      <summary>
        <para>Schedule a single IJob.</para>
      </summary>
      <param name="parameters"></param>
      <returns>
        <para>Returns a JobHandle to the newly created Job.</para>
      </returns>
    </member>
    <member name="M:Unity.Jobs.LowLevel.Unsafe.JobsUtility.ScheduleParallelFor(Unity.Jobs.LowLevel.Unsafe.JobsUtility/JobScheduleParameters&amp;,System.Int32,System.Int32)">
      <summary>
        <para>Schedule a IJobParallelFor job.</para>
      </summary>
      <param name="parameters"></param>
      <param name="arrayLength"></param>
      <param name="innerloopBatchCount"></param>
      <returns>
        <para>Returns a JobHandle to the newly created Job.</para>
      </returns>
    </member>
    <member name="M:Unity.Jobs.LowLevel.Unsafe.JobsUtility.ScheduleParallelForDeferArraySize(Unity.Jobs.LowLevel.Unsafe.JobsUtility/JobScheduleParameters&amp;,System.Int32,System.Void*,System.Void*)">
      <summary>
        <para>Schedule a IJobParallelFor job.</para>
      </summary>
      <param name="parameters"></param>
      <param name="innerloopBatchCount"></param>
      <param name="listData"></param>
      <param name="listDataAtomicSafetyHandle"></param>
      <returns>
        <para>Returns a JobHandle to the newly created Job.</para>
      </returns>
    </member>
    <member name="M:Unity.Jobs.LowLevel.Unsafe.JobsUtility.ScheduleParallelForTransform(Unity.Jobs.LowLevel.Unsafe.JobsUtility/JobScheduleParameters&amp;,System.IntPtr)">
      <summary>
        <para>Schedule an IJobParallelForTransform job.</para>
      </summary>
      <param name="parameters"></param>
      <param name="transfromAccesssArray"></param>
      <returns>
        <para>Returns a JobHandle to the newly created Job.</para>
      </returns>
    </member>
    <member name="M:Unity.Jobs.LowLevel.Unsafe.JobsUtility.ScheduleParallelForTransformReadOnly(Unity.Jobs.LowLevel.Unsafe.JobsUtility/JobScheduleParameters&amp;,System.IntPtr,System.Int32)">
      <summary>
        <para>Schedule an IJobParallelForTransform job with read-only access to the transform data. This method provides better parallelization because it can read all transforms in parallel instead of just parallelizing across transforms in different hierarchies.</para>
      </summary>
      <param name="parameters"></param>
      <param name="transfromAccesssArray"></param>
      <param name="innerloopBatchCount"></param>
      <returns>
        <para>Returns a JobHandle to the newly created Job.</para>
      </returns>
    </member>
    <member name="T:Unity.Jobs.LowLevel.Unsafe.JobType">
      <summary>
        <para>Determines what the job is used for (ParallelFor or a single job).</para>
      </summary>
    </member>
    <member name="F:Unity.Jobs.LowLevel.Unsafe.JobType.ParallelFor">
      <summary>
        <para>A parallel for job.</para>
      </summary>
    </member>
    <member name="F:Unity.Jobs.LowLevel.Unsafe.JobType.Single">
      <summary>
        <para>A single job.</para>
      </summary>
    </member>
    <member name="T:Unity.Jobs.LowLevel.Unsafe.ScheduleMode">
      <summary>
        <para>ScheduleMode options for scheduling a manage job.</para>
      </summary>
    </member>
    <member name="F:Unity.Jobs.LowLevel.Unsafe.ScheduleMode.Batched">
      <summary>
        <para>Schedule job as batched (ScheduleMode.Batched is the same as ScheduleMode.Parallel; this enumeration value is retained to support legacy code)</para>
      </summary>
    </member>
    <member name="F:Unity.Jobs.LowLevel.Unsafe.ScheduleMode.Parallel">
      <summary>
        <para>Schedule job to run on multiple worker threads if possible. Jobs that cannot run concurrently will run on one thread only.</para>
      </summary>
    </member>
    <member name="F:Unity.Jobs.LowLevel.Unsafe.ScheduleMode.Run">
      <summary>
        <para>Run job immediately on calling thread.</para>
      </summary>
    </member>
    <member name="F:Unity.Jobs.LowLevel.Unsafe.ScheduleMode.Single">
      <summary>
        <para>Schedule job to run on a single worker thread.</para>
      </summary>
    </member>
    <member name="T:Unity.Profiling.LowLevel.MarkerFlags">
      <summary>
        <para>Profiler marker usage flags.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.MarkerFlags.AvailabilityEditor">
      <summary>
        <para>Specifies that marker is present only in the Editor.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.MarkerFlags.Counter">
      <summary>
        <para>Marker represents a counter.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.MarkerFlags.Default">
      <summary>
        <para>Default value for markers created in native code.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.MarkerFlags.Script">
      <summary>
        <para>Marker is created by scripting code.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.MarkerFlags.ScriptDeepProfiler">
      <summary>
        <para>Specifies that marker is generated by deep profiling.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.MarkerFlags.ScriptInvoke">
      <summary>
        <para>Specifies that marker is generated by invocation of scripting method from native code.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.MarkerFlags.Warning">
      <summary>
        <para>Specifies that marker highlights performance suboptimal behavior.</para>
      </summary>
    </member>
    <member name="T:Unity.Profiling.LowLevel.ProfilerMarkerDataType">
      <summary>
        <para>Options for the Profiler metadata type.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.ProfilerMarkerDataType.Blob8">
      <summary>
        <para>Signifies that ProfilerMarkerData.Ptr points to a raw byte array.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.ProfilerMarkerDataType.Double">
      <summary>
        <para>Signifies that ProfilerMarkerData.Ptr points to a value of type double.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.ProfilerMarkerDataType.Float">
      <summary>
        <para>Signifies that ProfilerMarkerData.Ptr points to a value of type float.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.ProfilerMarkerDataType.Int32">
      <summary>
        <para>Signifies that ProfilerMarkerData.Ptr points to a value of type int.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.ProfilerMarkerDataType.Int64">
      <summary>
        <para>Signifies that ProfilerMarkerData.Ptr points to a value of type long.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.ProfilerMarkerDataType.String16">
      <summary>
        <para>Signifies that ProfilerMarkerData.Ptr points to a char*.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.ProfilerMarkerDataType.UInt32">
      <summary>
        <para>Signifies that ProfilerMarkerData.Ptr points to a value of type uint.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.ProfilerMarkerDataType.UInt64">
      <summary>
        <para>Signifies that ProfilerMarkerData.Ptr points to a value of type ulong.</para>
      </summary>
    </member>
    <member name="T:Unity.Profiling.LowLevel.Unsafe.ProfilerCategoryDescription">
      <summary>
        <para>Provides information about Profiler category.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.Unsafe.ProfilerCategoryDescription.Color">
      <summary>
        <para>Profiler category color.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.Unsafe.ProfilerCategoryDescription.Id">
      <summary>
        <para>Profiler category identifier.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.LowLevel.Unsafe.ProfilerCategoryDescription.Name">
      <summary>
        <para>Gets Profiler category name as string.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.Unsafe.ProfilerCategoryDescription.NameUtf8">
      <summary>
        <para>Profiler category name pointer.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.Unsafe.ProfilerCategoryDescription.NameUtf8Len">
      <summary>
        <para>Profiler category name length.</para>
      </summary>
    </member>
    <member name="T:Unity.Profiling.LowLevel.Unsafe.ProfilerMarkerData">
      <summary>
        <para>Describes Profiler metadata parameter that can be associated with a sample.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.Unsafe.ProfilerMarkerData.Ptr">
      <summary>
        <para>Raw pointer to the metadata value.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.Unsafe.ProfilerMarkerData.Size">
      <summary>
        <para>Size of the metadata value in bytes.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.Unsafe.ProfilerMarkerData.Type">
      <summary>
        <para>Metadata type.</para>
      </summary>
    </member>
    <member name="T:Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderDescription">
      <summary>
        <para>Gets the description of a Profiler metric.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderDescription.Category">
      <summary>
        <para>Gets the ProfilerCategory value of the Profiler metric.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderDescription.DataType">
      <summary>
        <para>Gets the data value type of the Profiler metric.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderDescription.Flags">
      <summary>
        <para>Profiler marker flags of the metric.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderDescription.Name">
      <summary>
        <para>The name of the Profiler metric.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderDescription.NameUtf8">
      <summary>
        <para>The name of the Profiler metric as a pointer to UTF-8 byte array.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderDescription.NameUtf8Len">
      <summary>
        <para>Name length excluding null terminator.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderDescription.UnitType">
      <summary>
        <para>Gets the data unit type of the Profiler metric.</para>
      </summary>
    </member>
    <member name="T:Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle">
      <summary>
        <para>Gets the handle of a Profiler metric.</para>
      </summary>
    </member>
    <member name="M:Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle.GetAvailable(System.Collections.Generic.List`1&lt;Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle&gt;)">
      <summary>
        <para>Gets all available handles which can be accessed with ProfilerRecorder.</para>
      </summary>
      <param name="outRecorderHandleList"></param>
    </member>
    <member name="M:Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle.GetDescription(Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle)">
      <summary>
        <para>Gets description of Profiler marker or counter handle.</para>
      </summary>
      <param name="handle"></param>
    </member>
    <member name="P:Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle.Valid">
      <summary>
        <para>Indicates if a handle is valid and can be used with ProfilerRecorder.</para>
      </summary>
    </member>
    <member name="T:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility">
      <summary>
        <para>Utility class which provides access to low level Profiler API.</para>
      </summary>
    </member>
    <member name="M:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.BeginSample(System.IntPtr)">
      <summary>
        <para>Starts profiling a piece of code marked with a custom name that the markerPtr handle has defined.</para>
      </summary>
      <param name="markerPtr">Profiler marker handle.</param>
    </member>
    <member name="M:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.BeginSampleWithMetadata(System.IntPtr,System.Int32,System.Void*)">
      <summary>
        <para>Starts profiling a piece of code marked with a custom name that the markerPtr handle and metadata parameters has defined.</para>
      </summary>
      <param name="markerPtr">Profiler marker handle.</param>
      <param name="metadataCount">Metadata parameters count.</param>
      <param name="metadata">Unsafe pointer to the ProfilerMarkerData array.</param>
    </member>
    <member name="F:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.CategoryAi">
      <summary>
        <para>AI and NavMesh Profiler category.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.CategoryAllocation">
      <summary>
        <para>Memory allocation Profiler category.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.CategoryAnimation">
      <summary>
        <para>Animation Profiler category.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.CategoryAudio">
      <summary>
        <para>Audio system Profiler category.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.CategoryGUI">
      <summary>
        <para>UI Profiler category.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.CategoryInput">
      <summary>
        <para>Input system Profiler category.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.CategoryInternal">
      <summary>
        <para>Internal Unity systems Profiler category.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.CategoryLighting">
      <summary>
        <para>Global Illumination Profiler category.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.CategoryLoading">
      <summary>
        <para>Loading system Profiler category.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.CategoryNetwork">
      <summary>
        <para>Networking system Profiler category.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.CategoryOther">
      <summary>
        <para>Uncategorized Profiler category.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.CategoryParticles">
      <summary>
        <para>Particle system Profiler category.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.CategoryPhysics">
      <summary>
        <para>Physics system Profiler category.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.CategoryRender">
      <summary>
        <para>Rendering system Profiler category.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.CategoryScripts">
      <summary>
        <para>Generic C# code Profiler category.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.CategoryVideo">
      <summary>
        <para>Video system Profiler category.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.CategoryVirtualTexturing">
      <summary>
        <para>Virtual Texturing system Profiler category.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.CategoryVr">
      <summary>
        <para>VR systen Profiler category.</para>
      </summary>
    </member>
    <member name="M:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.CreateFlow(System.UInt16)">
      <summary>
        <para>Create a new Profiler flow identifier.</para>
      </summary>
      <param name="categoryId"></param>
      <returns>
        <para>Returns flow identifier.</para>
      </returns>
    </member>
    <member name="M:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.CreateMarker(System.String,System.UInt16,Unity.Profiling.LowLevel.MarkerFlags,System.Int32)">
      <summary>
        <para>Constructs a new Profiler marker handle for code instrumentation.</para>
      </summary>
      <param name="name">A marker name.</param>
      <param name="categoryId">A profiler category identifier.</param>
      <param name="flags">The marker flags.</param>
      <param name="metadataCount">The metadata parameters count, or 0 if no parameters are expected.</param>
      <param name="nameLen">Marker name string length.</param>
      <returns>
        <para>Returns the marker native handle.</para>
      </returns>
    </member>
    <member name="M:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.CreateMarker(System.Char*,System.Int32,System.UInt16,Unity.Profiling.LowLevel.MarkerFlags,System.Int32)">
      <summary>
        <para>Constructs a new Profiler marker handle for code instrumentation.</para>
      </summary>
      <param name="name">A marker name.</param>
      <param name="categoryId">A profiler category identifier.</param>
      <param name="flags">The marker flags.</param>
      <param name="metadataCount">The metadata parameters count, or 0 if no parameters are expected.</param>
      <param name="nameLen">Marker name string length.</param>
      <returns>
        <para>Returns the marker native handle.</para>
      </returns>
    </member>
    <member name="M:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.EndSample(System.IntPtr)">
      <summary>
        <para>End profiling a piece of code marked with a custom name defined by this instance of ProfilerMarker.</para>
      </summary>
      <param name="markerPtr">Marker handle.</param>
    </member>
    <member name="M:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.FlowEvent(System.UInt32,Unity.Profiling.ProfilerFlowEventType)">
      <summary>
        <para>Add flow event to a Profiler sample.</para>
      </summary>
      <param name="flowId">Profiler flow identifier.</param>
      <param name="flowEventType">Flow event type.</param>
    </member>
    <member name="M:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.GetCategoryByName(System.Char*,System.Int32)">
      <summary>
        <para>Gets the Profiler category identifier.</para>
      </summary>
      <param name="name">Category name.</param>
      <param name="nameLen">Category name length.</param>
      <returns>
        <para>Returns Profiler category identifier.</para>
      </returns>
    </member>
    <member name="M:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.GetCategoryDescription(System.UInt16)">
      <summary>
        <para>Retrieves Profiler category information such as name or color.</para>
      </summary>
      <param name="categoryId">Profiler category identifier.</param>
      <returns>
        <para>Returns description of the category.</para>
      </returns>
    </member>
    <member name="M:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.SetMarkerMetadata(System.IntPtr,System.Int32,System.String,System.Byte,System.Byte)">
      <summary>
        <para>Set Profiler marker metadata name and type.</para>
      </summary>
      <param name="markerPtr">Profiler marker handle.</param>
      <param name="index">Metadata parameter index.</param>
      <param name="name">Metadata parameter name.</param>
      <param name="type">Metadata type. Must be one of ProfilerMarkerDataType values.</param>
      <param name="unit">Metadata unit. Must be one of ProfilerMarkerDataUnit values.</param>
      <param name="nameLen">Metadata parameter name length.</param>
    </member>
    <member name="M:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.SetMarkerMetadata(System.IntPtr,System.Int32,System.Char*,System.Int32,System.Byte,System.Byte)">
      <summary>
        <para>Set Profiler marker metadata name and type.</para>
      </summary>
      <param name="markerPtr">Profiler marker handle.</param>
      <param name="index">Metadata parameter index.</param>
      <param name="name">Metadata parameter name.</param>
      <param name="type">Metadata type. Must be one of ProfilerMarkerDataType values.</param>
      <param name="unit">Metadata unit. Must be one of ProfilerMarkerDataUnit values.</param>
      <param name="nameLen">Metadata parameter name length.</param>
    </member>
    <member name="M:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.SingleSampleWithMetadata(System.IntPtr,System.Int32,System.Void*)">
      <summary>
        <para>Creates profiling sample with a custom name that the markerPtr handle and metadata parameters has defined.</para>
      </summary>
      <param name="markerPtr">Profiler marker handle.</param>
      <param name="metadataCount">Metadata parameters count.</param>
      <param name="metadata">Unsafe pointer to the ProfilerMarkerData array.</param>
    </member>
    <member name="P:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.Timestamp">
      <summary>
        <para>Gets Profiler timestamp.</para>
      </summary>
    </member>
    <member name="T:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.TimestampConversionRatio">
      <summary>
        <para>Fraction that converts the Profiler timestamp to nanoseconds.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.TimestampConversionRatio.Denominator">
      <summary>
        <para>Denominator of timestamp to nanoseconds conversion fraction.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.TimestampConversionRatio.Numerator">
      <summary>
        <para>Numerator of timestamp to nanoseconds conversion fraction.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.LowLevel.Unsafe.ProfilerUnsafeUtility.TimestampToNanosecondsConversionRatio">
      <summary>
        <para>Gets conversion ratio from Profiler timestamp to nanoseconds.</para>
      </summary>
    </member>
    <member name="T:Unity.Profiling.ProfilerCategory">
      <summary>
        <para>Use to specify category for instrumentation Profiler markers.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.ProfilerCategory.Ai">
      <summary>
        <para>AI and NavMesh Profiler category.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.ProfilerCategory.Animation">
      <summary>
        <para>Animation Profiler category.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.ProfilerCategory.Audio">
      <summary>
        <para>Audio system Profiler category.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.ProfilerCategory.Color">
      <summary>
        <para>Gets Profiler category color.</para>
      </summary>
    </member>
    <member name="M:Unity.Profiling.ProfilerCategory.#ctor(System.String)">
      <summary>
        <para>Use to construct ProfilerCategory by category name.</para>
      </summary>
      <param name="categoryName">Profiler category name.</param>
    </member>
    <member name="P:Unity.Profiling.ProfilerCategory.Gui">
      <summary>
        <para>UI Profiler category.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.ProfilerCategory.Input">
      <summary>
        <para>Input system Profiler category.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.ProfilerCategory.Internal">
      <summary>
        <para>Internal Unity systems Profiler category.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.ProfilerCategory.Lighting">
      <summary>
        <para>Global Illumination Profiler category.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.ProfilerCategory.Loading">
      <summary>
        <para>Loading system Profiler category.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.ProfilerCategory.Memory">
      <summary>
        <para>Memory allocation Profiler category.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.ProfilerCategory.Name">
      <summary>
        <para>Gets Profiler category name.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.ProfilerCategory.Network">
      <summary>
        <para>Networking system Profiler category.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.ProfilerCategory.Particles">
      <summary>
        <para>Particle system Profiler category.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.ProfilerCategory.Physics">
      <summary>
        <para>Physics system Profiler category.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.ProfilerCategory.Render">
      <summary>
        <para>Rendering system Profiler category.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.ProfilerCategory.Scripts">
      <summary>
        <para>Generic C# code Profiler category.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.ProfilerCategory.Video">
      <summary>
        <para>Video system Profiler category.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.ProfilerCategory.VirtualTexturing">
      <summary>
        <para>Virtual Texturing system Profiler category.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.ProfilerCategory.Vr">
      <summary>
        <para>VR systen Profiler category.</para>
      </summary>
    </member>
    <member name="T:Unity.Profiling.ProfilerCategoryFlags">
      <summary>
        <para>Options for determining if a Profiler category is built into Unity by default.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.ProfilerCategoryFlags.Builtin">
      <summary>
        <para>Use this flag to determine that a Profiler category is built into the Unity Editor by default.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.ProfilerCategoryFlags.None">
      <summary>
        <para>Use this flag to determine that a Profiler category is not built into Unity by default.</para>
      </summary>
    </member>
    <member name="T:Unity.Profiling.ProfilerFlowEventType">
      <summary>
        <para>Defines Profiler flow event type.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.ProfilerFlowEventType.Begin">
      <summary>
        <para>Use for the flow start point.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.ProfilerFlowEventType.End">
      <summary>
        <para>Use for the flow end point.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.ProfilerFlowEventType.Next">
      <summary>
        <para>Use for the flow continuation point.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.ProfilerFlowEventType.ParallelNext">
      <summary>
        <para>Use for the parallel flow continuation point.</para>
      </summary>
    </member>
    <member name="T:Unity.Profiling.ProfilerMarker">
      <summary>
        <para>Performance marker used for profiling arbitrary code blocks.</para>
      </summary>
    </member>
    <member name="M:Unity.Profiling.ProfilerMarker.Auto">
      <summary>
        <para>Creates a helper struct for the scoped using blocks.</para>
      </summary>
      <returns>
        <para>IDisposable struct which calls Begin and End automatically.</para>
      </returns>
    </member>
    <member name="T:Unity.Profiling.ProfilerMarker.AutoScope">
      <summary>
        <para>Helper IDisposable struct for use with ProfilerMarker.Auto.</para>
      </summary>
    </member>
    <member name="M:Unity.Profiling.ProfilerMarker.Begin">
      <summary>
        <para>Begin profiling a piece of code marked with a custom name defined by this instance of ProfilerMarker.</para>
      </summary>
      <param name="contextUnityObject">Object associated with the operation.</param>
    </member>
    <member name="M:Unity.Profiling.ProfilerMarker.Begin(UnityEngine.Object)">
      <summary>
        <para>Begin profiling a piece of code marked with a custom name defined by this instance of ProfilerMarker.</para>
      </summary>
      <param name="contextUnityObject">Object associated with the operation.</param>
    </member>
    <member name="M:Unity.Profiling.ProfilerMarker.#ctor(System.String)">
      <summary>
        <para>Constructs a new performance marker for code instrumentation.</para>
      </summary>
      <param name="name">Marker name.</param>
      <param name="category">Profiler category.</param>
      <param name="nameLen">Marker name length.</param>
    </member>
    <member name="M:Unity.Profiling.ProfilerMarker.#ctor(Unity.Profiling.ProfilerCategory,System.String)">
      <summary>
        <para>Constructs a new performance marker for code instrumentation.</para>
      </summary>
      <param name="name">Marker name.</param>
      <param name="category">Profiler category.</param>
      <param name="nameLen">Marker name length.</param>
    </member>
    <member name="M:Unity.Profiling.ProfilerMarker.#ctor(Unity.Profiling.ProfilerCategory,System.Char*,System.Int32)">
      <summary>
        <para>Constructs a new performance marker for code instrumentation.</para>
      </summary>
      <param name="name">Marker name.</param>
      <param name="category">Profiler category.</param>
      <param name="nameLen">Marker name length.</param>
    </member>
    <member name="M:Unity.Profiling.ProfilerMarker.#ctor(System.Char*,System.Int32)">
      <summary>
        <para>Constructs a new performance marker for code instrumentation.</para>
      </summary>
      <param name="name">Marker name.</param>
      <param name="category">Profiler category.</param>
      <param name="nameLen">Marker name length.</param>
    </member>
    <member name="M:Unity.Profiling.ProfilerMarker.End">
      <summary>
        <para>End profiling a piece of code marked with a custom name defined by this instance of ProfilerMarker.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.ProfilerMarker.Handle">
      <summary>
        <para>Gets native handle of the ProfilerMarker.</para>
      </summary>
    </member>
    <member name="T:Unity.Profiling.ProfilerMarkerDataUnit">
      <summary>
        <para>Options for Profiler marker data unit types.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.ProfilerMarkerDataUnit.Bytes">
      <summary>
        <para>Display data value as a size, specified in bytes.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.ProfilerMarkerDataUnit.Count">
      <summary>
        <para>Display data value as a simple number without any unit abbreviations.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.ProfilerMarkerDataUnit.FrequencyHz">
      <summary>
        <para>Display data value as a frequency, specified in hertz.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.ProfilerMarkerDataUnit.Percent">
      <summary>
        <para>Display data value as a percentage value with % postfix.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.ProfilerMarkerDataUnit.TimeNanoseconds">
      <summary>
        <para>Display data value as a time, specified in nanoseconds.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.ProfilerMarkerDataUnit.Undefined">
      <summary>
        <para>Use to display data value as string if ProfilerMarkerDataTypes.String16 or as a simple number without any unit abbreviations. Also use Undefined in combination with ProfilerMarkerDataTypes.Blob8 which won't be visualized.</para>
      </summary>
    </member>
    <member name="T:Unity.Profiling.ProfilerRecorder">
      <summary>
        <para>Records the Profiler metric data that a Profiler marker or counter produces.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.ProfilerRecorder.Capacity">
      <summary>
        <para>Maximum amount of samples ProfilerRecorder can capture.</para>
      </summary>
    </member>
    <member name="M:Unity.Profiling.ProfilerRecorder.CopyTo(Unity.Profiling.ProfilerRecorderSample*,System.Int32,System.Boolean)">
      <summary>
        <para>Copies collected samples to the destination array.</para>
      </summary>
      <param name="dest">Pointer to the destination samples array.</param>
      <param name="destSize">Destination samples array size.</param>
      <param name="reset">Reset ProfilerRecorder.</param>
      <returns>
        <para>Returns the count of the copied elements.</para>
      </returns>
    </member>
    <member name="M:Unity.Profiling.ProfilerRecorder.CopyTo(System.Collections.Generic.List`1&lt;Unity.Profiling.ProfilerRecorderSample&gt;,System.Boolean)">
      <summary>
        <para>Copies all collected samples to the destination list.</para>
      </summary>
      <param name="outSamples">Destination list.</param>
      <param name="reset">Reset ProfilerRecorder.</param>
    </member>
    <member name="P:Unity.Profiling.ProfilerRecorder.Count">
      <summary>
        <para>Collected samples count.</para>
      </summary>
    </member>
    <member name="M:Unity.Profiling.ProfilerRecorder.#ctor(System.String,System.String,System.Int32,Unity.Profiling.ProfilerRecorderOptions)">
      <summary>
        <para>Constructs ProfilerRecorder instance with a Profiler metric name and category.</para>
      </summary>
      <param name="categoryName">Profiler category name.</param>
      <param name="statName">Profiler marker or counter name.</param>
      <param name="capacity">Maximum amount of samples to be collected.</param>
      <param name="options">Profiler recorder options.</param>
      <param name="category">Profiler category identifier.</param>
    </member>
    <member name="M:Unity.Profiling.ProfilerRecorder.#ctor(Unity.Profiling.ProfilerCategory,System.String,System.Int32,Unity.Profiling.ProfilerRecorderOptions)">
      <summary>
        <para>Constructs ProfilerRecorder instance with a Profiler metric name and category.</para>
      </summary>
      <param name="categoryName">Profiler category name.</param>
      <param name="statName">Profiler marker or counter name.</param>
      <param name="capacity">Maximum amount of samples to be collected.</param>
      <param name="options">Profiler recorder options.</param>
      <param name="category">Profiler category identifier.</param>
    </member>
    <member name="M:Unity.Profiling.ProfilerRecorder.#ctor(System.String,System.Int32,Unity.Profiling.ProfilerRecorderOptions)">
      <summary>
        <para>Constructs ProfilerRecorder instance with a Profiler metric name.</para>
      </summary>
      <param name="statName">Profiler marker or counter name.</param>
      <param name="capacity">Maximum amount of samples to be collected.</param>
      <param name="options">Profiler recorder options.</param>
    </member>
    <member name="M:Unity.Profiling.ProfilerRecorder.#ctor(Unity.Profiling.ProfilerCategory,System.Char*,System.Int32,System.Int32,Unity.Profiling.ProfilerRecorderOptions)">
      <summary>
        <para>Constructs ProfilerRecorder instance with a Profiler metric name pointer or other unsafe handles.</para>
      </summary>
      <param name="category">Profiler category identifier.</param>
      <param name="statName">Profiler marker or counter name pointer.</param>
      <param name="statNameLen">Profiler marker or counter name length.</param>
      <param name="capacity">Maximum amount of samples to be collected.</param>
      <param name="options">Profiler recorder options.</param>
      <param name="marker">Profiler marker instance.</param>
      <param name="statHandle">Profiler recorder handle.</param>
    </member>
    <member name="M:Unity.Profiling.ProfilerRecorder.#ctor(Unity.Profiling.ProfilerMarker,System.Int32,Unity.Profiling.ProfilerRecorderOptions)">
      <summary>
        <para>Constructs ProfilerRecorder instance with a Profiler metric name pointer or other unsafe handles.</para>
      </summary>
      <param name="category">Profiler category identifier.</param>
      <param name="statName">Profiler marker or counter name pointer.</param>
      <param name="statNameLen">Profiler marker or counter name length.</param>
      <param name="capacity">Maximum amount of samples to be collected.</param>
      <param name="options">Profiler recorder options.</param>
      <param name="marker">Profiler marker instance.</param>
      <param name="statHandle">Profiler recorder handle.</param>
    </member>
    <member name="M:Unity.Profiling.ProfilerRecorder.#ctor(Unity.Profiling.LowLevel.Unsafe.ProfilerRecorderHandle,System.Int32,Unity.Profiling.ProfilerRecorderOptions)">
      <summary>
        <para>Constructs ProfilerRecorder instance with a Profiler metric name pointer or other unsafe handles.</para>
      </summary>
      <param name="category">Profiler category identifier.</param>
      <param name="statName">Profiler marker or counter name pointer.</param>
      <param name="statNameLen">Profiler marker or counter name length.</param>
      <param name="capacity">Maximum amount of samples to be collected.</param>
      <param name="options">Profiler recorder options.</param>
      <param name="marker">Profiler marker instance.</param>
      <param name="statHandle">Profiler recorder handle.</param>
    </member>
    <member name="P:Unity.Profiling.ProfilerRecorder.CurrentValue">
      <summary>
        <para>Gets current value of the Profiler metric.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.ProfilerRecorder.CurrentValueAsDouble">
      <summary>
        <para>Gets current value of the Profiler metric as double value.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.ProfilerRecorder.DataType">
      <summary>
        <para>Value data type of the Profiler metric.</para>
      </summary>
    </member>
    <member name="M:Unity.Profiling.ProfilerRecorder.Dispose">
      <summary>
        <para>Releases unmanaged instance of the ProfilerRecorder.</para>
      </summary>
    </member>
    <member name="M:Unity.Profiling.ProfilerRecorder.GetSample(System.Int32)">
      <summary>
        <para>Gets sample data.</para>
      </summary>
      <param name="index"></param>
    </member>
    <member name="P:Unity.Profiling.ProfilerRecorder.IsRunning">
      <summary>
        <para>Indicates if ProfilerRecorder is attached to the Profiler metric.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.ProfilerRecorder.LastValue">
      <summary>
        <para>Gets the last value collected by the ProfilerRecorder.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.ProfilerRecorder.LastValueAsDouble">
      <summary>
        <para>Gets the last value collected by the ProfilerRecorder as double.</para>
      </summary>
    </member>
    <member name="M:Unity.Profiling.ProfilerRecorder.Reset">
      <summary>
        <para>Clears collected samples.</para>
      </summary>
    </member>
    <member name="M:Unity.Profiling.ProfilerRecorder.Start">
      <summary>
        <para>Start data collection.</para>
      </summary>
    </member>
    <member name="M:Unity.Profiling.ProfilerRecorder.StartNew(Unity.Profiling.ProfilerCategory,System.String,System.Int32,Unity.Profiling.ProfilerRecorderOptions)">
      <summary>
        <para>Initialize a new instance of ProfilerRecorder and start data collection.</para>
      </summary>
      <param name="category">Profiler category.</param>
      <param name="statName">Profiler marker or counter name.</param>
      <param name="capacity">Maximum amount of samples to collect.</param>
      <param name="options">ProfilerRecorder options.</param>
      <returns>
        <para>Returns new enabled recorder instance.</para>
      </returns>
    </member>
    <member name="M:Unity.Profiling.ProfilerRecorder.StartNew(Unity.Profiling.ProfilerMarker,System.Int32,Unity.Profiling.ProfilerRecorderOptions)">
      <summary>
        <para>Initialize a new instance of ProfilerRecorder for ProfilerMarker and start data collection.</para>
      </summary>
      <param name="capacity">Maximum amount of samples to be collected.</param>
      <param name="options">Profiler recorder options.</param>
      <param name="marker">Profiler marker instance.</param>
      <returns>
        <para>Returns new enabled recorder instance.</para>
      </returns>
    </member>
    <member name="M:Unity.Profiling.ProfilerRecorder.Stop">
      <summary>
        <para>Stops data collection.</para>
      </summary>
    </member>
    <member name="M:Unity.Profiling.ProfilerRecorder.ToArray">
      <summary>
        <para>Use to convert collected samples to an array.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.ProfilerRecorder.UnitType">
      <summary>
        <para>Unit type.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.ProfilerRecorder.Valid">
      <summary>
        <para>Indicates whether ProfilerRecorder is associated with a valid Profiler marker or counter.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.ProfilerRecorder.WrappedAround">
      <summary>
        <para>Indicates if ProfilerRecorder capacity has been exceeded.</para>
      </summary>
    </member>
    <member name="T:Unity.Profiling.ProfilerRecorderOptions">
      <summary>
        <para>ProfilerRecorder lifecycle and collection options.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.ProfilerRecorderOptions.CollectOnlyOnCurrentThread">
      <summary>
        <para>Use to collect samples only on the thread ProfilerRecorder was initialized on.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.ProfilerRecorderOptions.Default">
      <summary>
        <para>Default initialization options. Equivalent to (SumSamplesInFrame | WrapAroundWhenCapacityReached).</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.ProfilerRecorderOptions.KeepAliveDuringDomainReload">
      <summary>
        <para>Use to keep the ProfilerRecorder unmanaged instance running across a Unity domain reload.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.ProfilerRecorderOptions.StartImmediately">
      <summary>
        <para>Use to start data collection immediately upon ProfilerRecorder initialization.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.ProfilerRecorderOptions.SumAllSamplesInFrame">
      <summary>
        <para>Use to sum all samples within a frame and collect those as one sample per frame.</para>
      </summary>
    </member>
    <member name="F:Unity.Profiling.ProfilerRecorderOptions.WrapAroundWhenCapacityReached">
      <summary>
        <para>Use to allow sample value overwrite when ProfilerRecorder capacity is exceeded.</para>
      </summary>
    </member>
    <member name="T:Unity.Profiling.ProfilerRecorderSample">
      <summary>
        <para>Sample value structure.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.ProfilerRecorderSample.Count">
      <summary>
        <para>Sample count.</para>
      </summary>
    </member>
    <member name="P:Unity.Profiling.ProfilerRecorderSample.Value">
      <summary>
        <para>Raw sample value.</para>
      </summary>
    </member>
    <member name="T:Unity.Rendering.HybridV2.DOTSInstancingCbuffer">
      <summary>
        <para>Reflection data for a DOTS instancing constant buffer.</para>
      </summary>
    </member>
    <member name="F:Unity.Rendering.HybridV2.DOTSInstancingCbuffer.CbufferIndex">
      <summary>
        <para>The index of this constant buffer in the list of constant buffers returned by HybridV2ShaderReflection.GetDOTSInstancingCbuffers.</para>
      </summary>
    </member>
    <member name="F:Unity.Rendering.HybridV2.DOTSInstancingCbuffer.NameID">
      <summary>
        <para>The value returned by Shader.PropertyToID for the name of this constant buffer.</para>
      </summary>
    </member>
    <member name="F:Unity.Rendering.HybridV2.DOTSInstancingCbuffer.SizeBytes">
      <summary>
        <para>The size of this constant buffer in bytes.</para>
      </summary>
    </member>
    <member name="T:Unity.Rendering.HybridV2.DOTSInstancingProperty">
      <summary>
        <para>Reflection data for a DOTS instancing property.</para>
      </summary>
    </member>
    <member name="F:Unity.Rendering.HybridV2.DOTSInstancingProperty.CbufferIndex">
      <summary>
        <para>The index of the constant buffer that contains this property in the list of constant buffers returned by HybridV2ShaderReflection.GetDOTSInstancingCbuffers.</para>
      </summary>
    </member>
    <member name="F:Unity.Rendering.HybridV2.DOTSInstancingProperty.Cols">
      <summary>
        <para>The amount of columns or elements of this property if it's a matrix or a vector, respectively.</para>
      </summary>
    </member>
    <member name="F:Unity.Rendering.HybridV2.DOTSInstancingProperty.ConstantNameID">
      <summary>
        <para>The value returned by Shader.PropertyToID for the name of this property.</para>
      </summary>
    </member>
    <member name="F:Unity.Rendering.HybridV2.DOTSInstancingProperty.ConstantType">
      <summary>
        <para>The type of this property.</para>
      </summary>
    </member>
    <member name="F:Unity.Rendering.HybridV2.DOTSInstancingProperty.MetadataNameID">
      <summary>
        <para>The value returned by Shader.PropertyToID for the DOTS instancing metadata constant of this property.</para>
      </summary>
    </member>
    <member name="F:Unity.Rendering.HybridV2.DOTSInstancingProperty.MetadataOffset">
      <summary>
        <para>The offset of the metadata constant of this property in its DOTS instancing metadata constant buffer.</para>
      </summary>
    </member>
    <member name="F:Unity.Rendering.HybridV2.DOTSInstancingProperty.Rows">
      <summary>
        <para>The amount of rows of this property if it's a matrix.</para>
      </summary>
    </member>
    <member name="F:Unity.Rendering.HybridV2.DOTSInstancingProperty.SizeBytes">
      <summary>
        <para>The size of this property in bytes.</para>
      </summary>
    </member>
    <member name="T:Unity.Rendering.HybridV2.DOTSInstancingPropertyType">
      <summary>
        <para>Describes the type of a DOTS instancing property.</para>
      </summary>
    </member>
    <member name="F:Unity.Rendering.HybridV2.DOTSInstancingPropertyType.Bool">
      <summary>
        <para>The property has type bool.</para>
      </summary>
    </member>
    <member name="F:Unity.Rendering.HybridV2.DOTSInstancingPropertyType.Float">
      <summary>
        <para>The property has type float.</para>
      </summary>
    </member>
    <member name="F:Unity.Rendering.HybridV2.DOTSInstancingPropertyType.Half">
      <summary>
        <para>The property has type half.</para>
      </summary>
    </member>
    <member name="F:Unity.Rendering.HybridV2.DOTSInstancingPropertyType.Int">
      <summary>
        <para>The property has type int.</para>
      </summary>
    </member>
    <member name="F:Unity.Rendering.HybridV2.DOTSInstancingPropertyType.Short">
      <summary>
        <para>The property has type short.</para>
      </summary>
    </member>
    <member name="F:Unity.Rendering.HybridV2.DOTSInstancingPropertyType.Struct">
      <summary>
        <para>The property has a structure type.</para>
      </summary>
    </member>
    <member name="F:Unity.Rendering.HybridV2.DOTSInstancingPropertyType.Uint">
      <summary>
        <para>The property has type uint.</para>
      </summary>
    </member>
    <member name="F:Unity.Rendering.HybridV2.DOTSInstancingPropertyType.Unknown">
      <summary>
        <para>The property has an unknown type.</para>
      </summary>
    </member>
    <member name="T:Unity.Rendering.HybridV2.HybridV2ShaderReflection">
      <summary>
        <para>Contains methods for reading Hybrid Renderer specific reflection data from shaders.</para>
      </summary>
    </member>
    <member name="M:Unity.Rendering.HybridV2.HybridV2ShaderReflection.GetDOTSInstancingCbuffers(UnityEngine.Shader)">
      <summary>
        <para>Returns the list of detected Hybrid Renderer DOTS instancing constant buffers for the given shader.</para>
      </summary>
      <param name="shader">Shader to get reflection data from.</param>
      <returns>
        <para>List of detected DOTS instancing constant buffers.</para>
      </returns>
    </member>
    <member name="M:Unity.Rendering.HybridV2.HybridV2ShaderReflection.GetDOTSInstancingProperties(UnityEngine.Shader)">
      <summary>
        <para>Returns the list of detected DOTS instancing properties for the given shader.</para>
      </summary>
      <param name="shader">Shader to get reflection data from.</param>
      <returns>
        <para>List of detected DOTS instancing properties.</para>
      </returns>
    </member>
    <member name="M:Unity.Rendering.HybridV2.HybridV2ShaderReflection.GetDOTSReflectionVersionNumber">
      <summary>
        <para>Returns a monotonically increasing DOTS reflection data version number, which is incremented whenever a shader is loaded that contains DOTS instancing properties.</para>
      </summary>
      <returns>
        <para>DOTS reflection data version number.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.UnityAPICompatibilityVersionAttribute">
      <summary>
        <para>Declares an assembly to be compatible (API wise) with a specific Unity API. Used by internal tools to avoid processing the assembly in order to decide whether assemblies may be using old Unity API.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.UnityAPICompatibilityVersionAttribute.version">
      <summary>
        <para>Version of Unity API.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.UnityAPICompatibilityVersionAttribute.#ctor(System.String,System.Boolean)">
      <summary>
        <para>Initializes a new instance of UnityAPICompatibilityVersionAttribute.</para>
      </summary>
      <param name="version">Unity version that this assembly is compatible with.</param>
      <param name="checkOnlyUnityVersion">Must be set to true.</param>
    </member>
    <member name="M:UnityEngine.UnityAPICompatibilityVersionAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of UnityAPICompatibilityVersionAttribute. This overload has been deprecated.</para>
      </summary>
      <param name="version">Unity version that this assembly is compatible with.</param>
    </member>
    <member name="M:UnityEngine.UnityAPICompatibilityVersionAttribute.#ctor(System.String,System.String[])">
      <summary>
        <para>Initializes a new instance of UnityAPICompatibilityVersionAttribute. This constructor is used by internal tooling.</para>
      </summary>
      <param name="version">Unity version that this assembly is compatible with.</param>
      <param name="configurationAssembliesHashes">A comma-separated list comprised of the assembly name and attribute hash pairs. For example, assemblyname:hash,assemblyname:hash.</param>
    </member>
    <member name="A:UnityEngine.CoreModule">
      <summary>
        <para>The Core module implements basic classes required for Unity to function.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UserAuthorization">
      <summary>
        <para>Constants to pass to Application.RequestUserAuthorization.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UserAuthorization.Microphone">
      <summary>
        <para>Request permission to use any audio input sources attached to the computer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UserAuthorization.WebCam">
      <summary>
        <para>Request permission to use any video input sources attached to the computer.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Vector2">
      <summary>
        <para>Representation of 2D vectors and points.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector2.down">
      <summary>
        <para>Shorthand for writing Vector2(0, -1).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector2.left">
      <summary>
        <para>Shorthand for writing Vector2(-1, 0).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector2.magnitude">
      <summary>
        <para>Returns the length of this vector (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector2.negativeInfinity">
      <summary>
        <para>Shorthand for writing Vector2(float.NegativeInfinity, float.NegativeInfinity).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector2.normalized">
      <summary>
        <para>Returns this vector with a magnitude of 1 (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector2.one">
      <summary>
        <para>Shorthand for writing Vector2(1, 1).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector2.positiveInfinity">
      <summary>
        <para>Shorthand for writing Vector2(float.PositiveInfinity, float.PositiveInfinity).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector2.right">
      <summary>
        <para>Shorthand for writing Vector2(1, 0).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector2.sqrMagnitude">
      <summary>
        <para>Returns the squared length of this vector (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector2.up">
      <summary>
        <para>Shorthand for writing Vector2(0, 1).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Vector2.x">
      <summary>
        <para>X component of the vector.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Vector2.y">
      <summary>
        <para>Y component of the vector.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector2.zero">
      <summary>
        <para>Shorthand for writing Vector2(0, 0).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector2.Angle(UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Returns the unsigned angle in degrees between from and to.</para>
      </summary>
      <param name="from">The vector from which the angular difference is measured.</param>
      <param name="to">The vector to which the angular difference is measured.</param>
    </member>
    <member name="M:UnityEngine.Vector2.ClampMagnitude(UnityEngine.Vector2,System.Single)">
      <summary>
        <para>Returns a copy of vector with its magnitude clamped to maxLength.</para>
      </summary>
      <param name="vector"></param>
      <param name="maxLength"></param>
    </member>
    <member name="M:UnityEngine.Vector2.#ctor(System.Single,System.Single)">
      <summary>
        <para>Constructs a new vector with given x, y components.</para>
      </summary>
      <param name="x"></param>
      <param name="y"></param>
    </member>
    <member name="M:UnityEngine.Vector2.Distance(UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Returns the distance between a and b.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="M:UnityEngine.Vector2.Dot(UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Dot Product of two vectors.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member name="M:UnityEngine.Vector2.Equals(System.Object)">
      <summary>
        <para>Returns true if the given vector is exactly equal to this vector.</para>
      </summary>
      <param name="other"></param>
    </member>
    <member name="?:UnityEngine.Vector2.implop_Vector2(Vector3)(UnityEngine.Vector3)">
      <summary>
        <para>Converts a Vector3 to a Vector2.</para>
      </summary>
      <param name="v"></param>
    </member>
    <member name="?:UnityEngine.Vector2.implop_Vector3(Vector2)(UnityEngine.Vector2)">
      <summary>
        <para>Converts a Vector2 to a Vector3.</para>
      </summary>
      <param name="v"></param>
    </member>
    <member name="M:UnityEngine.Vector2.Lerp(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
      <summary>
        <para>Linearly interpolates between vectors a and b by t.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
      <param name="t"></param>
    </member>
    <member name="M:UnityEngine.Vector2.LerpUnclamped(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
      <summary>
        <para>Linearly interpolates between vectors a and b by t.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
      <param name="t"></param>
    </member>
    <member name="M:UnityEngine.Vector2.Max(UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Returns a vector that is made from the largest components of two vectors.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member name="M:UnityEngine.Vector2.Min(UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Returns a vector that is made from the smallest components of two vectors.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member name="M:UnityEngine.Vector2.MoveTowards(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
      <summary>
        <para>Moves a point current towards target.</para>
      </summary>
      <param name="current"></param>
      <param name="target"></param>
      <param name="maxDistanceDelta"></param>
    </member>
    <member name="M:UnityEngine.Vector2.Normalize">
      <summary>
        <para>Makes this vector have a magnitude of 1.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Vector2.op_Divide(UnityEngine.Vector2,System.Single)">
      <summary>
        <para>Divides a vector by a number.</para>
      </summary>
      <param name="a"></param>
      <param name="d"></param>
    </member>
    <member name="?:UnityEngine.Vector2.op_Divide(UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Divides a vector by another vector.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="?:UnityEngine.Vector2.op_Equal(UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Returns true if two vectors are approximately equal.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member name="?:UnityEngine.Vector2.op_Minus(UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Subtracts one vector from another.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="?:UnityEngine.Vector2.op_Minus(UnityEngine.Vector2)">
      <summary>
        <para>Negates a vector.</para>
      </summary>
      <param name="a"></param>
    </member>
    <member name="?:UnityEngine.Vector2.op_Multiply(UnityEngine.Vector2,System.Single)">
      <summary>
        <para>Multiplies a vector by a number.</para>
      </summary>
      <param name="a"></param>
      <param name="d"></param>
    </member>
    <member name="?:UnityEngine.Vector2.op_Multiply(System.Single,UnityEngine.Vector2)">
      <summary>
        <para>Multiplies a vector by a number.</para>
      </summary>
      <param name="d"></param>
      <param name="a"></param>
    </member>
    <member name="?:UnityEngine.Vector2.op_Multiply(UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Multiplies a vector by another vector.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="?:UnityEngine.Vector2.op_Plus(UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Adds two vectors.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="M:UnityEngine.Vector2.Perpendicular(UnityEngine.Vector2)">
      <summary>
        <para>Returns the 2D vector perpendicular to this 2D vector. The result is always rotated 90-degrees in a counter-clockwise direction for a 2D coordinate system where the positive Y axis goes up.</para>
      </summary>
      <param name="inDirection">The input direction.</param>
      <returns>
        <para>The perpendicular direction.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Vector2.Reflect(UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Reflects a vector off the vector defined by a normal.</para>
      </summary>
      <param name="inDirection"></param>
      <param name="inNormal"></param>
    </member>
    <member name="M:UnityEngine.Vector2.Scale(UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Multiplies two vectors component-wise.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="M:UnityEngine.Vector2.Scale(UnityEngine.Vector2)">
      <summary>
        <para>Multiplies every component of this vector by the same component of scale.</para>
      </summary>
      <param name="scale"></param>
    </member>
    <member name="M:UnityEngine.Vector2.Set(System.Single,System.Single)">
      <summary>
        <para>Set x and y components of an existing Vector2.</para>
      </summary>
      <param name="newX"></param>
      <param name="newY"></param>
    </member>
    <member name="M:UnityEngine.Vector2.SignedAngle(UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Returns the signed angle in degrees between from and to.</para>
      </summary>
      <param name="from">The vector from which the angular difference is measured.</param>
      <param name="to">The vector to which the angular difference is measured.</param>
    </member>
    <member name="M:UnityEngine.Vector2.SmoothDamp(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2&amp;,System.Single)">
      <summary>
        <para>Gradually changes a vector towards a desired goal over time.</para>
      </summary>
      <param name="current">The current position.</param>
      <param name="target">The position we are trying to reach.</param>
      <param name="currentVelocity">The current velocity, this value is modified by the function every time you call it.</param>
      <param name="smoothTime">Approximately the time it will take to reach the target. A smaller value will reach the target faster.</param>
      <param name="maxSpeed">Optionally allows you to clamp the maximum speed.</param>
      <param name="deltaTime">The time since the last call to this function. By default Time.deltaTime.</param>
    </member>
    <member name="M:UnityEngine.Vector2.SmoothDamp(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2&amp;,System.Single,System.Single)">
      <summary>
        <para>Gradually changes a vector towards a desired goal over time.</para>
      </summary>
      <param name="current">The current position.</param>
      <param name="target">The position we are trying to reach.</param>
      <param name="currentVelocity">The current velocity, this value is modified by the function every time you call it.</param>
      <param name="smoothTime">Approximately the time it will take to reach the target. A smaller value will reach the target faster.</param>
      <param name="maxSpeed">Optionally allows you to clamp the maximum speed.</param>
      <param name="deltaTime">The time since the last call to this function. By default Time.deltaTime.</param>
    </member>
    <member name="M:UnityEngine.Vector2.SmoothDamp(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2&amp;,System.Single,System.Single,System.Single)">
      <summary>
        <para>Gradually changes a vector towards a desired goal over time.</para>
      </summary>
      <param name="current">The current position.</param>
      <param name="target">The position we are trying to reach.</param>
      <param name="currentVelocity">The current velocity, this value is modified by the function every time you call it.</param>
      <param name="smoothTime">Approximately the time it will take to reach the target. A smaller value will reach the target faster.</param>
      <param name="maxSpeed">Optionally allows you to clamp the maximum speed.</param>
      <param name="deltaTime">The time since the last call to this function. By default Time.deltaTime.</param>
    </member>
    <member name="P:UnityEngine.Vector2.this">
      <summary>
        <para>Access the x or y component using [0] or [1] respectively.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector2.ToString">
      <summary>
        <para>Returns a formatted string for this vector.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="M:UnityEngine.Vector2.ToString(System.String)">
      <summary>
        <para>Returns a formatted string for this vector.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="M:UnityEngine.Vector2.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Returns a formatted string for this vector.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="T:UnityEngine.Vector2Int">
      <summary>
        <para>Representation of 2D vectors and points using integers.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector2Int.down">
      <summary>
        <para>Shorthand for writing Vector2Int(0, -1).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector2Int.left">
      <summary>
        <para>Shorthand for writing Vector2Int(-1, 0).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector2Int.magnitude">
      <summary>
        <para>Returns the length of this vector (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector2Int.one">
      <summary>
        <para>Shorthand for writing Vector2Int(1, 1).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector2Int.right">
      <summary>
        <para>Shorthand for writing Vector2Int(1, 0).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector2Int.sqrMagnitude">
      <summary>
        <para>Returns the squared length of this vector (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector2Int.up">
      <summary>
        <para>Shorthand for writing Vector2Int(0, 1).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector2Int.x">
      <summary>
        <para>X component of the vector.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector2Int.y">
      <summary>
        <para>Y component of the vector.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector2Int.zero">
      <summary>
        <para>Shorthand for writing Vector2Int(0, 0).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector2Int.CeilToInt(UnityEngine.Vector2)">
      <summary>
        <para>Converts a  Vector2 to a Vector2Int by doing a Ceiling to each value.</para>
      </summary>
      <param name="v"></param>
    </member>
    <member name="M:UnityEngine.Vector2Int.Clamp(UnityEngine.Vector2Int,UnityEngine.Vector2Int)">
      <summary>
        <para>Clamps the Vector2Int to the bounds given by min and max.</para>
      </summary>
      <param name="min"></param>
      <param name="max"></param>
    </member>
    <member name="M:UnityEngine.Vector2Int.Distance(UnityEngine.Vector2Int,UnityEngine.Vector2Int)">
      <summary>
        <para>Returns the distance between a and b.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="M:UnityEngine.Vector2Int.Equals(System.Object)">
      <summary>
        <para>Returns true if the objects are equal.</para>
      </summary>
      <param name="other"></param>
    </member>
    <member name="M:UnityEngine.Vector2Int.FloorToInt(UnityEngine.Vector2)">
      <summary>
        <para>Converts a Vector2 to a Vector2Int by doing a Floor to each value.</para>
      </summary>
      <param name="v"></param>
    </member>
    <member name="M:UnityEngine.Vector2Int.GetHashCode">
      <summary>
        <para>Gets the hash code for the Vector2Int.</para>
      </summary>
      <returns>
        <para>The hash code of the Vector2Int.</para>
      </returns>
    </member>
    <member name="?:UnityEngine.Vector2Int.implop_Vector2(Vector2Int)(UnityEngine.Vector2Int)">
      <summary>
        <para>Converts a Vector2Int to a Vector2.</para>
      </summary>
      <param name="v"></param>
    </member>
    <member name="M:UnityEngine.Vector2Int.Max(UnityEngine.Vector2Int,UnityEngine.Vector2Int)">
      <summary>
        <para>Returns a vector that is made from the largest components of two vectors.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member name="M:UnityEngine.Vector2Int.Min(UnityEngine.Vector2Int,UnityEngine.Vector2Int)">
      <summary>
        <para>Returns a vector that is made from the smallest components of two vectors.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member name="?:UnityEngine.Vector2Int.op_Divide(UnityEngine.Vector2Int,System.Int32)">
      <summary>
        <para>Divides a vector by a number.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="?:UnityEngine.Vector2Int.op_Equal(UnityEngine.Vector2Int,UnityEngine.Vector2Int)">
      <summary>
        <para>Returns true if the vectors are equal.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member name="?:UnityEngine.Vector2Int.op_Explicit(UnityEngine.Vector2Int)">
      <summary>
        <para>Converts a Vector2Int to a Vector3Int.</para>
      </summary>
      <param name="v"></param>
    </member>
    <member name="?:UnityEngine.Vector2Int.op_Minus(UnityEngine.Vector2Int,UnityEngine.Vector2Int)">
      <summary>
        <para>Subtracts one vector from another.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="?:UnityEngine.Vector2Int.op_Multiply(UnityEngine.Vector2Int,UnityEngine.Vector2Int)">
      <summary>
        <para>Multiplies a vector by a number.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="?:UnityEngine.Vector2Int.op_Multiply(UnityEngine.Vector2Int,System.Int32)">
      <summary>
        <para>Multiplies a vector by a number.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="?:UnityEngine.Vector2Int.op_NotEqual(UnityEngine.Vector2Int,UnityEngine.Vector2Int)">
      <summary>
        <para>Returns true if vectors different.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member name="?:UnityEngine.Vector2Int.op_Plus(UnityEngine.Vector2Int,UnityEngine.Vector2Int)">
      <summary>
        <para>Adds two vectors.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="M:UnityEngine.Vector2Int.RoundToInt(UnityEngine.Vector2)">
      <summary>
        <para>Converts a  Vector2 to a Vector2Int by doing a Round to each value.</para>
      </summary>
      <param name="v"></param>
    </member>
    <member name="M:UnityEngine.Vector2Int.Scale(UnityEngine.Vector2Int,UnityEngine.Vector2Int)">
      <summary>
        <para>Multiplies two vectors component-wise.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="M:UnityEngine.Vector2Int.Scale(UnityEngine.Vector2Int)">
      <summary>
        <para>Multiplies every component of this vector by the same component of scale.</para>
      </summary>
      <param name="scale"></param>
    </member>
    <member name="M:UnityEngine.Vector2Int.Set(System.Int32,System.Int32)">
      <summary>
        <para>Set x and y components of an existing Vector2Int.</para>
      </summary>
      <param name="x"></param>
      <param name="y"></param>
    </member>
    <member name="P:UnityEngine.Vector2Int.this">
      <summary>
        <para>Access the x or y component using [0] or [1] respectively.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector2Int.ToString">
      <summary>
        <para>Returns a formatted string for this vector.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="M:UnityEngine.Vector2Int.ToString(System.String)">
      <summary>
        <para>Returns a formatted string for this vector.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="M:UnityEngine.Vector2Int.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Returns a formatted string for this vector.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="T:UnityEngine.Vector3">
      <summary>
        <para>Representation of 3D vectors and points.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3.back">
      <summary>
        <para>Shorthand for writing Vector3(0, 0, -1).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3.down">
      <summary>
        <para>Shorthand for writing Vector3(0, -1, 0).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3.forward">
      <summary>
        <para>Shorthand for writing Vector3(0, 0, 1).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3.left">
      <summary>
        <para>Shorthand for writing Vector3(-1, 0, 0).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3.magnitude">
      <summary>
        <para>Returns the length of this vector (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3.negativeInfinity">
      <summary>
        <para>Shorthand for writing Vector3(float.NegativeInfinity, float.NegativeInfinity, float.NegativeInfinity).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3.normalized">
      <summary>
        <para>Returns this vector with a magnitude of 1 (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3.one">
      <summary>
        <para>Shorthand for writing Vector3(1, 1, 1).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3.positiveInfinity">
      <summary>
        <para>Shorthand for writing Vector3(float.PositiveInfinity, float.PositiveInfinity, float.PositiveInfinity).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3.right">
      <summary>
        <para>Shorthand for writing Vector3(1, 0, 0).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3.sqrMagnitude">
      <summary>
        <para>Returns the squared length of this vector (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3.up">
      <summary>
        <para>Shorthand for writing Vector3(0, 1, 0).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Vector3.x">
      <summary>
        <para>X component of the vector.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Vector3.y">
      <summary>
        <para>Y component of the vector.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Vector3.z">
      <summary>
        <para>Z component of the vector.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3.zero">
      <summary>
        <para>Shorthand for writing Vector3(0, 0, 0).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector3.Angle(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Returns the angle in degrees between from and to.</para>
      </summary>
      <param name="from">The vector from which the angular difference is measured.</param>
      <param name="to">The vector to which the angular difference is measured.</param>
      <returns>
        <para>The angle in degrees between the two vectors.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Vector3.ClampMagnitude(UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Returns a copy of vector with its magnitude clamped to maxLength.</para>
      </summary>
      <param name="vector"></param>
      <param name="maxLength"></param>
    </member>
    <member name="M:UnityEngine.Vector3.Cross(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Cross Product of two vectors.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member name="M:UnityEngine.Vector3.#ctor(System.Single,System.Single,System.Single)">
      <summary>
        <para>Creates a new vector with given x, y, z components.</para>
      </summary>
      <param name="x"></param>
      <param name="y"></param>
      <param name="z"></param>
    </member>
    <member name="M:UnityEngine.Vector3.#ctor(System.Single,System.Single)">
      <summary>
        <para>Creates a new vector with given x, y components and sets z to zero.</para>
      </summary>
      <param name="x"></param>
      <param name="y"></param>
    </member>
    <member name="M:UnityEngine.Vector3.Distance(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Returns the distance between a and b.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="M:UnityEngine.Vector3.Dot(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Dot Product of two vectors.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member name="M:UnityEngine.Vector3.Equals(System.Object)">
      <summary>
        <para>Returns true if the given vector is exactly equal to this vector.</para>
      </summary>
      <param name="other"></param>
    </member>
    <member name="M:UnityEngine.Vector3.Lerp(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Linearly interpolates between two points.</para>
      </summary>
      <param name="a">Start value, returned when t = 0.</param>
      <param name="b">End value, returned when t = 1.</param>
      <param name="t">Value used to interpolate between a and b.</param>
      <returns>
        <para>Interpolated value, equals to a + (b - a) * t.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Vector3.LerpUnclamped(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Linearly interpolates between two vectors.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
      <param name="t"></param>
    </member>
    <member name="M:UnityEngine.Vector3.Max(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Returns a vector that is made from the largest components of two vectors.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member name="M:UnityEngine.Vector3.Min(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Returns a vector that is made from the smallest components of two vectors.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member name="M:UnityEngine.Vector3.MoveTowards(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Calculate a position between the points specified by current and target, moving no farther than the distance specified by maxDistanceDelta.</para>
      </summary>
      <param name="current">The position to move from.</param>
      <param name="target">The position to move towards.</param>
      <param name="maxDistanceDelta">Distance to move current per call.</param>
      <returns>
        <para>The new position.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Vector3.Normalize(UnityEngine.Vector3)">
      <summary>
        <para>Makes this vector have a magnitude of 1.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="?:UnityEngine.Vector3.op_Divide(UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Divides a vector by a number.</para>
      </summary>
      <param name="a"></param>
      <param name="d"></param>
    </member>
    <member name="?:UnityEngine.Vector3.op_Equal(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Returns true if two vectors are approximately equal.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member name="?:UnityEngine.Vector3.op_Minus(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Subtracts one vector from another.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="?:UnityEngine.Vector3.op_Minus(UnityEngine.Vector3)">
      <summary>
        <para>Negates a vector.</para>
      </summary>
      <param name="a"></param>
    </member>
    <member name="?:UnityEngine.Vector3.op_Multiply(UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Multiplies a vector by a number.</para>
      </summary>
      <param name="a"></param>
      <param name="d"></param>
    </member>
    <member name="?:UnityEngine.Vector3.op_Multiply(System.Single,UnityEngine.Vector3)">
      <summary>
        <para>Multiplies a vector by a number.</para>
      </summary>
      <param name="d"></param>
      <param name="a"></param>
    </member>
    <member name="?:UnityEngine.Vector3.op_NotEqual(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Returns true if vectors different.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member name="?:UnityEngine.Vector3.op_Plus(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Adds two vectors.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="M:UnityEngine.Vector3.OrthoNormalize(UnityEngine.Vector3&amp;,UnityEngine.Vector3&amp;)">
      <summary>
        <para>Makes vectors normalized and orthogonal to each other.</para>
      </summary>
      <param name="normal"></param>
      <param name="tangent"></param>
    </member>
    <member name="M:UnityEngine.Vector3.OrthoNormalize(UnityEngine.Vector3&amp;,UnityEngine.Vector3&amp;,UnityEngine.Vector3&amp;)">
      <summary>
        <para>Makes vectors normalized and orthogonal to each other.</para>
      </summary>
      <param name="normal"></param>
      <param name="tangent"></param>
      <param name="binormal"></param>
    </member>
    <member name="M:UnityEngine.Vector3.Project(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Projects a vector onto another vector.</para>
      </summary>
      <param name="vector"></param>
      <param name="onNormal"></param>
    </member>
    <member name="M:UnityEngine.Vector3.ProjectOnPlane(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Projects a vector onto a plane defined by a normal orthogonal to the plane.</para>
      </summary>
      <param name="planeNormal">The direction from the vector towards the plane.</param>
      <param name="vector">The location of the vector above the plane.</param>
      <returns>
        <para>The location of the vector on the plane.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Vector3.Reflect(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Reflects a vector off the plane defined by a normal.</para>
      </summary>
      <param name="inDirection"></param>
      <param name="inNormal"></param>
    </member>
    <member name="M:UnityEngine.Vector3.RotateTowards(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
      <summary>
        <para>Rotates a vector current towards target.</para>
      </summary>
      <param name="current">The vector being managed.</param>
      <param name="target">The vector.</param>
      <param name="maxRadiansDelta">The maximum angle in radians allowed for this rotation.</param>
      <param name="maxMagnitudeDelta">The maximum allowed change in vector magnitude for this rotation.</param>
      <returns>
        <para>The location that RotateTowards generates.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Vector3.Scale(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Multiplies two vectors component-wise.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="M:UnityEngine.Vector3.Scale(UnityEngine.Vector3)">
      <summary>
        <para>Multiplies every component of this vector by the same component of scale.</para>
      </summary>
      <param name="scale"></param>
    </member>
    <member name="M:UnityEngine.Vector3.Set(System.Single,System.Single,System.Single)">
      <summary>
        <para>Set x, y and z components of an existing Vector3.</para>
      </summary>
      <param name="newX"></param>
      <param name="newY"></param>
      <param name="newZ"></param>
    </member>
    <member name="M:UnityEngine.Vector3.SignedAngle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Returns the signed angle in degrees between from and to.</para>
      </summary>
      <param name="from">The vector from which the angular difference is measured.</param>
      <param name="to">The vector to which the angular difference is measured.</param>
      <param name="axis">A vector around which the other vectors are rotated.</param>
    </member>
    <member name="M:UnityEngine.Vector3.Slerp(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Spherically interpolates between two vectors.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
      <param name="t"></param>
    </member>
    <member name="M:UnityEngine.Vector3.SlerpUnclamped(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Spherically interpolates between two vectors.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
      <param name="t"></param>
    </member>
    <member name="M:UnityEngine.Vector3.SmoothDamp(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3&amp;,System.Single)">
      <summary>
        <para>Gradually changes a vector towards a desired goal over time.</para>
      </summary>
      <param name="current">The current position.</param>
      <param name="target">The position we are trying to reach.</param>
      <param name="currentVelocity">The current velocity, this value is modified by the function every time you call it.</param>
      <param name="smoothTime">Approximately the time it will take to reach the target. A smaller value will reach the target faster.</param>
      <param name="maxSpeed">Optionally allows you to clamp the maximum speed.</param>
      <param name="deltaTime">The time since the last call to this function. By default Time.deltaTime.</param>
    </member>
    <member name="M:UnityEngine.Vector3.SmoothDamp(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3&amp;,System.Single,System.Single)">
      <summary>
        <para>Gradually changes a vector towards a desired goal over time.</para>
      </summary>
      <param name="current">The current position.</param>
      <param name="target">The position we are trying to reach.</param>
      <param name="currentVelocity">The current velocity, this value is modified by the function every time you call it.</param>
      <param name="smoothTime">Approximately the time it will take to reach the target. A smaller value will reach the target faster.</param>
      <param name="maxSpeed">Optionally allows you to clamp the maximum speed.</param>
      <param name="deltaTime">The time since the last call to this function. By default Time.deltaTime.</param>
    </member>
    <member name="M:UnityEngine.Vector3.SmoothDamp(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3&amp;,System.Single,System.Single,System.Single)">
      <summary>
        <para>Gradually changes a vector towards a desired goal over time.</para>
      </summary>
      <param name="current">The current position.</param>
      <param name="target">The position we are trying to reach.</param>
      <param name="currentVelocity">The current velocity, this value is modified by the function every time you call it.</param>
      <param name="smoothTime">Approximately the time it will take to reach the target. A smaller value will reach the target faster.</param>
      <param name="maxSpeed">Optionally allows you to clamp the maximum speed.</param>
      <param name="deltaTime">The time since the last call to this function. By default Time.deltaTime.</param>
    </member>
    <member name="P:UnityEngine.Vector3.this">
      <summary>
        <para>Access the x, y, z components using [0], [1], [2] respectively.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector3.ToString">
      <summary>
        <para>Returns a formatted string for this vector.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="M:UnityEngine.Vector3.ToString(System.String)">
      <summary>
        <para>Returns a formatted string for this vector.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="M:UnityEngine.Vector3.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Returns a formatted string for this vector.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="T:UnityEngine.Vector3Int">
      <summary>
        <para>Representation of 3D vectors and points using integers.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3Int.back">
      <summary>
        <para>Shorthand for writing Vector3Int(0, 0, -1).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3Int.down">
      <summary>
        <para>Shorthand for writing Vector3Int(0, -1, 0).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3Int.forward">
      <summary>
        <para>Shorthand for writing Vector3Int(0, 0, 1).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3Int.left">
      <summary>
        <para>Shorthand for writing Vector3Int(-1, 0, 0).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3Int.magnitude">
      <summary>
        <para>Returns the length of this vector (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3Int.one">
      <summary>
        <para>Shorthand for writing Vector3Int(1, 1, 1).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3Int.right">
      <summary>
        <para>Shorthand for writing Vector3Int(1, 0, 0).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3Int.sqrMagnitude">
      <summary>
        <para>Returns the squared length of this vector (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3Int.up">
      <summary>
        <para>Shorthand for writing Vector3Int(0, 1, 0).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3Int.x">
      <summary>
        <para>X component of the vector.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3Int.y">
      <summary>
        <para>Y component of the vector.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3Int.z">
      <summary>
        <para>Z component of the vector.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3Int.zero">
      <summary>
        <para>Shorthand for writing Vector3Int(0, 0, 0).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector3Int.CeilToInt(UnityEngine.Vector3)">
      <summary>
        <para>Converts a  Vector3 to a Vector3Int by doing a Ceiling to each value.</para>
      </summary>
      <param name="v"></param>
    </member>
    <member name="M:UnityEngine.Vector3Int.Clamp(UnityEngine.Vector3Int,UnityEngine.Vector3Int)">
      <summary>
        <para>Clamps the Vector3Int to the bounds given by min and max.</para>
      </summary>
      <param name="min"></param>
      <param name="max"></param>
    </member>
    <member name="M:UnityEngine.Vector3Int.Distance(UnityEngine.Vector3Int,UnityEngine.Vector3Int)">
      <summary>
        <para>Returns the distance between a and b.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="M:UnityEngine.Vector3Int.Equals(System.Object)">
      <summary>
        <para>Returns true if the objects are equal.</para>
      </summary>
      <param name="other"></param>
    </member>
    <member name="M:UnityEngine.Vector3Int.FloorToInt(UnityEngine.Vector3)">
      <summary>
        <para>Converts a  Vector3 to a Vector3Int by doing a Floor to each value.</para>
      </summary>
      <param name="v"></param>
    </member>
    <member name="M:UnityEngine.Vector3Int.GetHashCode">
      <summary>
        <para>Gets the hash code for the Vector3Int.</para>
      </summary>
      <returns>
        <para>The hash code of the Vector3Int.</para>
      </returns>
    </member>
    <member name="?:UnityEngine.Vector3Int.implop_Vector3(Vector3Int)(UnityEngine.Vector3Int)">
      <summary>
        <para>Converts a Vector3Int to a Vector3.</para>
      </summary>
      <param name="v"></param>
    </member>
    <member name="M:UnityEngine.Vector3Int.Max(UnityEngine.Vector3Int,UnityEngine.Vector3Int)">
      <summary>
        <para>Returns a vector that is made from the largest components of two vectors.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member name="M:UnityEngine.Vector3Int.Min(UnityEngine.Vector3Int,UnityEngine.Vector3Int)">
      <summary>
        <para>Returns a vector that is made from the smallest components of two vectors.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member name="?:UnityEngine.Vector3Int.op_Divide(UnityEngine.Vector3Int,System.Int32)">
      <summary>
        <para>Divides a vector by a number.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="?:UnityEngine.Vector3Int.op_Equal(UnityEngine.Vector3Int,UnityEngine.Vector3Int)">
      <summary>
        <para>Returns true if the vectors are equal.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member name="?:UnityEngine.Vector3Int.op_Explicit(UnityEngine.Vector3Int)">
      <summary>
        <para>Converts a Vector3Int to a Vector2Int.</para>
      </summary>
      <param name="v"></param>
    </member>
    <member name="?:UnityEngine.Vector3Int.op_Minus(UnityEngine.Vector3Int,UnityEngine.Vector3Int)">
      <summary>
        <para>Subtracts one vector from another.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="?:UnityEngine.Vector3Int.op_Multiply(UnityEngine.Vector3Int,UnityEngine.Vector3Int)">
      <summary>
        <para>Multiplies a vector by a number.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="?:UnityEngine.Vector3Int.op_Multiply(UnityEngine.Vector3Int,System.Int32)">
      <summary>
        <para>Multiplies a vector by a number.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="?:UnityEngine.Vector3Int.op_NotEqual(UnityEngine.Vector3Int,UnityEngine.Vector3Int)">
      <summary>
        <para>Returns true if vectors different.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member name="?:UnityEngine.Vector3Int.op_Plus(UnityEngine.Vector3Int,UnityEngine.Vector3Int)">
      <summary>
        <para>Adds two vectors.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="M:UnityEngine.Vector3Int.RoundToInt(UnityEngine.Vector3)">
      <summary>
        <para>Converts a  Vector3 to a Vector3Int by doing a Round to each value.</para>
      </summary>
      <param name="v"></param>
    </member>
    <member name="M:UnityEngine.Vector3Int.Scale(UnityEngine.Vector3Int,UnityEngine.Vector3Int)">
      <summary>
        <para>Multiplies two vectors component-wise.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="M:UnityEngine.Vector3Int.Scale(UnityEngine.Vector3Int)">
      <summary>
        <para>Multiplies every component of this vector by the same component of scale.</para>
      </summary>
      <param name="scale"></param>
    </member>
    <member name="M:UnityEngine.Vector3Int.Set(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Set x, y and z components of an existing Vector3Int.</para>
      </summary>
      <param name="x"></param>
      <param name="y"></param>
      <param name="z"></param>
    </member>
    <member name="P:UnityEngine.Vector3Int.this">
      <summary>
        <para>Access the x, y or z component using [0], [1] or [2] respectively.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector3Int.ToString">
      <summary>
        <para>Returns a formatted string for this vector.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="M:UnityEngine.Vector3Int.ToString(System.String)">
      <summary>
        <para>Returns a formatted string for this vector.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="M:UnityEngine.Vector3Int.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Returns a formatted string for this vector.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="T:UnityEngine.Vector4">
      <summary>
        <para>Representation of four-dimensional vectors.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector4.magnitude">
      <summary>
        <para>Returns the length of this vector (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector4.negativeInfinity">
      <summary>
        <para>Shorthand for writing Vector4(float.NegativeInfinity, float.NegativeInfinity, float.NegativeInfinity, float.NegativeInfinity).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector4.normalized">
      <summary>
        <para>Returns this vector with a magnitude of 1 (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector4.one">
      <summary>
        <para>Shorthand for writing Vector4(1,1,1,1).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector4.positiveInfinity">
      <summary>
        <para>Shorthand for writing Vector4(float.PositiveInfinity, float.PositiveInfinity, float.PositiveInfinity, float.PositiveInfinity).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector4.sqrMagnitude">
      <summary>
        <para>Returns the squared length of this vector (Read Only).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Vector4.w">
      <summary>
        <para>W component of the vector.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Vector4.x">
      <summary>
        <para>X component of the vector.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Vector4.y">
      <summary>
        <para>Y component of the vector.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Vector4.z">
      <summary>
        <para>Z component of the vector.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector4.zero">
      <summary>
        <para>Shorthand for writing Vector4(0,0,0,0).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Creates a new vector with given x, y, z, w components.</para>
      </summary>
      <param name="x"></param>
      <param name="y"></param>
      <param name="z"></param>
      <param name="w"></param>
    </member>
    <member name="M:UnityEngine.Vector4.#ctor(System.Single,System.Single,System.Single)">
      <summary>
        <para>Creates a new vector with given x, y, z components and sets w to zero.</para>
      </summary>
      <param name="x"></param>
      <param name="y"></param>
      <param name="z"></param>
    </member>
    <member name="M:UnityEngine.Vector4.#ctor(System.Single,System.Single)">
      <summary>
        <para>Creates a new vector with given x, y components and sets z and w to zero.</para>
      </summary>
      <param name="x"></param>
      <param name="y"></param>
    </member>
    <member name="M:UnityEngine.Vector4.Distance(UnityEngine.Vector4,UnityEngine.Vector4)">
      <summary>
        <para>Returns the distance between a and b.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="M:UnityEngine.Vector4.Dot(UnityEngine.Vector4,UnityEngine.Vector4)">
      <summary>
        <para>Dot Product of two vectors.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="M:UnityEngine.Vector4.Equals(System.Object)">
      <summary>
        <para>Returns true if the given vector is exactly equal to this vector.</para>
      </summary>
      <param name="other"></param>
    </member>
    <member name="?:UnityEngine.Vector4.implop_Vector2(Vector4)(UnityEngine.Vector4)">
      <summary>
        <para>Converts a Vector4 to a Vector2.</para>
      </summary>
      <param name="v"></param>
    </member>
    <member name="?:UnityEngine.Vector4.implop_Vector3(Vector4)(UnityEngine.Vector4)">
      <summary>
        <para>Converts a Vector4 to a Vector3.</para>
      </summary>
      <param name="v"></param>
    </member>
    <member name="?:UnityEngine.Vector4.implop_Vector4(Vector2)(UnityEngine.Vector2)">
      <summary>
        <para>Converts a Vector2 to a Vector4.</para>
      </summary>
      <param name="v"></param>
    </member>
    <member name="?:UnityEngine.Vector4.implop_Vector4(Vector3)(UnityEngine.Vector3)">
      <summary>
        <para>Converts a Vector3 to a Vector4.</para>
      </summary>
      <param name="v"></param>
    </member>
    <member name="M:UnityEngine.Vector4.Lerp(UnityEngine.Vector4,UnityEngine.Vector4,System.Single)">
      <summary>
        <para>Linearly interpolates between two vectors.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
      <param name="t"></param>
    </member>
    <member name="M:UnityEngine.Vector4.LerpUnclamped(UnityEngine.Vector4,UnityEngine.Vector4,System.Single)">
      <summary>
        <para>Linearly interpolates between two vectors.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
      <param name="t"></param>
    </member>
    <member name="M:UnityEngine.Vector4.Max(UnityEngine.Vector4,UnityEngine.Vector4)">
      <summary>
        <para>Returns a vector that is made from the largest components of two vectors.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member name="M:UnityEngine.Vector4.Min(UnityEngine.Vector4,UnityEngine.Vector4)">
      <summary>
        <para>Returns a vector that is made from the smallest components of two vectors.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member name="M:UnityEngine.Vector4.MoveTowards(UnityEngine.Vector4,UnityEngine.Vector4,System.Single)">
      <summary>
        <para>Moves a point current towards target.</para>
      </summary>
      <param name="current"></param>
      <param name="target"></param>
      <param name="maxDistanceDelta"></param>
    </member>
    <member name="M:UnityEngine.Vector4.Normalize(UnityEngine.Vector4)">
      <summary>
        <para></para>
      </summary>
      <param name="a"></param>
    </member>
    <member name="M:UnityEngine.Vector4.Normalize">
      <summary>
        <para>Makes this vector have a magnitude of 1.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Vector4.op_Divide(UnityEngine.Vector4,System.Single)">
      <summary>
        <para>Divides a vector by a number.</para>
      </summary>
      <param name="a"></param>
      <param name="d"></param>
    </member>
    <member name="?:UnityEngine.Vector4.op_Equal(UnityEngine.Vector4,UnityEngine.Vector4)">
      <summary>
        <para>Returns true if two vectors are approximately equal.</para>
      </summary>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member name="?:UnityEngine.Vector4.op_Minus(UnityEngine.Vector4,UnityEngine.Vector4)">
      <summary>
        <para>Subtracts one vector from another.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="?:UnityEngine.Vector4.op_Minus(UnityEngine.Vector4)">
      <summary>
        <para>Negates a vector.</para>
      </summary>
      <param name="a"></param>
    </member>
    <member name="?:UnityEngine.Vector4.op_Multiply(UnityEngine.Vector4,System.Single)">
      <summary>
        <para>Multiplies a vector by a number.</para>
      </summary>
      <param name="a"></param>
      <param name="d"></param>
    </member>
    <member name="?:UnityEngine.Vector4.op_Multiply(System.Single,UnityEngine.Vector4)">
      <summary>
        <para>Multiplies a vector by a number.</para>
      </summary>
      <param name="d"></param>
      <param name="a"></param>
    </member>
    <member name="?:UnityEngine.Vector4.op_Plus(UnityEngine.Vector4,UnityEngine.Vector4)">
      <summary>
        <para>Adds two vectors.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="M:UnityEngine.Vector4.Project(UnityEngine.Vector4,UnityEngine.Vector4)">
      <summary>
        <para>Projects a vector onto another vector.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="M:UnityEngine.Vector4.Scale(UnityEngine.Vector4,UnityEngine.Vector4)">
      <summary>
        <para>Multiplies two vectors component-wise.</para>
      </summary>
      <param name="a"></param>
      <param name="b"></param>
    </member>
    <member name="M:UnityEngine.Vector4.Scale(UnityEngine.Vector4)">
      <summary>
        <para>Multiplies every component of this vector by the same component of scale.</para>
      </summary>
      <param name="scale"></param>
    </member>
    <member name="M:UnityEngine.Vector4.Set(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Set x, y, z and w components of an existing Vector4.</para>
      </summary>
      <param name="newX"></param>
      <param name="newY"></param>
      <param name="newZ"></param>
      <param name="newW"></param>
    </member>
    <member name="P:UnityEngine.Vector4.this">
      <summary>
        <para>Access the x, y, z, w components using [0], [1], [2], [3] respectively.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector4.ToString">
      <summary>
        <para>Returns a formatted string for this vector.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="M:UnityEngine.Vector4.ToString(System.String)">
      <summary>
        <para>Returns a formatted string for this vector.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="M:UnityEngine.Vector4.ToString(System.String,System.IFormatProvider)">
      <summary>
        <para>Returns a formatted string for this vector.</para>
      </summary>
      <param name="format">A numeric format string.</param>
      <param name="formatProvider">An object that specifies culture-specific formatting.</param>
    </member>
    <member name="T:UnityEngine.VRTextureUsage">
      <summary>
        <para>This enum describes how the RenderTexture is used as a VR eye texture. Instead of using the values of this enum manually, use the value returned by XR.XRSettings.eyeTextureDesc|eyeTextureDesc or other VR functions returning a RenderTextureDescriptor.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.VRTextureUsage.DeviceSpecific">
      <summary>
        <para>The texture used by an external XR provider.  The provider is responsible for defining the texture's layout and use.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.VRTextureUsage.None">
      <summary>
        <para>The RenderTexture is not a VR eye texture. No special rendering behavior will occur.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.VRTextureUsage.OneEye">
      <summary>
        <para>This texture corresponds to a single eye on a stereoscopic display.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.VRTextureUsage.TwoEyes">
      <summary>
        <para>This texture corresponds to two eyes on a stereoscopic display. This will be taken into account when using Graphics.Blit and other rendering functions.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.WaitForEndOfFrame">
      <summary>
        <para>Waits until the end of the frame after Unity has rendererd every Camera and GUI, just before displaying the frame on screen.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.WaitForFixedUpdate">
      <summary>
        <para>Waits until next fixed frame rate update function. See Also: MonoBehaviour.FixedUpdate.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.WaitForSeconds">
      <summary>
        <para>Suspends the coroutine execution for the given amount of seconds using scaled time.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WaitForSeconds.#ctor(System.Single)">
      <summary>
        <para>Suspends the coroutine execution for the given amount of seconds using scaled time.</para>
      </summary>
      <param name="seconds">Delay execution by the amount of time in seconds.</param>
    </member>
    <member name="T:UnityEngine.WaitForSecondsRealtime">
      <summary>
        <para>Suspends the coroutine execution for the given amount of seconds using unscaled time.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WaitForSecondsRealtime.waitTime">
      <summary>
        <para>The given amount of seconds that the yield instruction will wait for.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WaitForSecondsRealtime.#ctor(System.Single)">
      <summary>
        <para>Creates a yield instruction to wait for a given number of seconds using unscaled time.</para>
      </summary>
      <param name="time"></param>
    </member>
    <member name="T:UnityEngine.WaitUntil">
      <summary>
        <para>Suspends the coroutine execution until the supplied delegate evaluates to true.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WaitUntil.#ctor(System.Func`1&lt;System.Boolean&gt;)">
      <summary>
        <para>Initializes a yield instruction with a given delegate to be evaluated.</para>
      </summary>
      <param name="predicate">Supplied delegate will be evaluated each frame after MonoBehaviour.Update and before MonoBehaviour.LateUpdate until delegate returns true.</param>
    </member>
    <member name="T:UnityEngine.WaitWhile">
      <summary>
        <para>Suspends the coroutine execution until the supplied delegate evaluates to false.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WaitWhile.#ctor(System.Func`1&lt;System.Boolean&gt;)">
      <summary>
        <para>Initializes a yield instruction with a given delegate to be evaluated.</para>
      </summary>
      <param name="predicate">The supplied delegate will be evaluated each frame after MonoBehaviour.Update and before MonoBehaviour.LateUpdate until delegate returns false.</param>
    </member>
    <member name="T:UnityEngine.WeightedMode">
      <summary>
        <para>Sets which weights to use when calculating curve segments.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.WeightedMode.Both">
      <summary>
        <para>Include inWeight and outWeight when calculating curve segments.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.WeightedMode.In">
      <summary>
        <para>Include inWeight when calculating the previous curve segment.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.WeightedMode.None">
      <summary>
        <para>Exclude both inWeight or outWeight when calculating curve segments.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.WeightedMode.Out">
      <summary>
        <para>Include outWeight when calculating the next curve segment.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Windows.CrashReporting">
      <summary>
        <para>Exposes useful information related to crash reporting on Windows platforms.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Windows.CrashReporting.crashReportFolder">
      <summary>
        <para>Returns the path to the crash report folder on Windows.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Windows.Crypto">
      <summary>
        <para>Class representing cryptography algorithms.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Windows.Crypto.ComputeMD5Hash(System.Byte[])">
      <summary>
        <para>Computes MD5 hash value for the specified byte array.</para>
      </summary>
      <param name="buffer">The input to compute the hash code for.</param>
    </member>
    <member name="M:UnityEngine.Windows.Crypto.ComputeSHA1Hash(System.Byte[])">
      <summary>
        <para>Computes SHA1 hash value for the specified byte array.</para>
      </summary>
      <param name="buffer">The input to compute the hash code for.</param>
    </member>
    <member name="T:UnityEngine.Windows.Directory">
      <summary>
        <para>Exposes static methods for directory operations.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Windows.Directory.localFolder">
      <summary>
        <para>Returns a path to local folder.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Windows.Directory.roamingFolder">
      <summary>
        <para>Returns a path to roaming folder.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Windows.Directory.temporaryFolder">
      <summary>
        <para>Returns a path to temporary folder.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Windows.Directory.CreateDirectory(System.String)">
      <summary>
        <para>Creates directory in the specified path.</para>
      </summary>
      <param name="path">The directory path to create.</param>
    </member>
    <member name="M:UnityEngine.Windows.Directory.Delete(System.String)">
      <summary>
        <para>Deletes a directory from a specified path.</para>
      </summary>
      <param name="path">The name of the directory to remove.</param>
    </member>
    <member name="M:UnityEngine.Windows.Directory.Exists(System.String)">
      <summary>
        <para>Determines whether the given path refers to an existing directory.</para>
      </summary>
      <param name="path">The path to test.</param>
    </member>
    <member name="T:UnityEngine.Windows.File">
      <summary>
        <para>Provides static methods for file operations.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Windows.File.Delete(System.String)">
      <summary>
        <para>Deletes the specified file.</para>
      </summary>
      <param name="path">The name of the file to be deleted.</param>
    </member>
    <member name="M:UnityEngine.Windows.File.Exists(System.String)">
      <summary>
        <para>Determines whether the specified file exists.</para>
      </summary>
      <param name="path">The file to check.</param>
    </member>
    <member name="M:UnityEngine.Windows.File.ReadAllBytes(System.String)">
      <summary>
        <para>Opens a binary file, reads the contents of the file into a byte array, and then closes the file.</para>
      </summary>
      <param name="path">The file to open for reading.</param>
    </member>
    <member name="M:UnityEngine.Windows.File.WriteAllBytes(System.String,System.Byte[])">
      <summary>
        <para>Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten.</para>
      </summary>
      <param name="path">The file to write to.</param>
      <param name="bytes">The bytes to write to the file.</param>
    </member>
    <member name="T:UnityEngine.Windows.LicenseInformation">
      <summary>
        <para>This class provides information regarding application's trial status and allows initiating application purchase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Windows.LicenseInformation.isOnAppTrial">
      <summary>
        <para>Checks whether the application is installed in trial mode.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Windows.LicenseInformation.PurchaseApp">
      <summary>
        <para>Attempts to purchase the app if it is in installed in trial mode.</para>
      </summary>
      <returns>
        <para>Purchase receipt.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Windows.Speech.ConfidenceLevel">
      <summary>
        <para>Used by KeywordRecognizer, GrammarRecognizer, DictationRecognizer. Phrases under the specified minimum level will be ignored.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.Speech.ConfidenceLevel.High">
      <summary>
        <para>High confidence level.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.Speech.ConfidenceLevel.Low">
      <summary>
        <para>Low confidence level.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.Speech.ConfidenceLevel.Medium">
      <summary>
        <para>Medium confidence level.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.Speech.ConfidenceLevel.Rejected">
      <summary>
        <para>Everything is rejected.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Windows.Speech.DictationCompletionCause">
      <summary>
        <para>Represents the reason why dictation session has completed.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.Speech.DictationCompletionCause.AudioQualityFailure">
      <summary>
        <para>Dictation session completion was caused by bad audio quality.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.Speech.DictationCompletionCause.Canceled">
      <summary>
        <para>Dictation session was either cancelled, or the application was paused while dictation session was in progress.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.Speech.DictationCompletionCause.Complete">
      <summary>
        <para>Dictation session has completed successfully.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.Speech.DictationCompletionCause.MicrophoneUnavailable">
      <summary>
        <para>Dictation session has finished because a microphone was not available.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.Speech.DictationCompletionCause.NetworkFailure">
      <summary>
        <para>Dictation session has finished because network connection was not available.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.Speech.DictationCompletionCause.TimeoutExceeded">
      <summary>
        <para>Dictation session has reached its timeout.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.Speech.DictationCompletionCause.UnknownError">
      <summary>
        <para>Dictation session has completed due to an unknown error.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Windows.Speech.DictationRecognizer">
      <summary>
        <para>DictationRecognizer listens to speech input and attempts to determine what phrase was uttered.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Windows.Speech.DictationRecognizer.AutoSilenceTimeoutSeconds">
      <summary>
        <para>The time length in seconds before dictation recognizer session ends due to lack of audio input.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Windows.Speech.DictationRecognizer.#ctor">
      <summary>
        <para>Create a DictationRecognizer with the specified minimum confidence and dictation topic constraint. Phrases under the specified minimum level will be ignored.</para>
      </summary>
      <param name="minimumConfidence">The confidence level at which the recognizer will begin accepting phrases.</param>
      <param name="topic">The dictation topic that this dictation recognizer should optimize its recognition for.</param>
      <param name="confidenceLevel"></param>
    </member>
    <member name="M:UnityEngine.Windows.Speech.DictationRecognizer.#ctor(UnityEngine.Windows.Speech.ConfidenceLevel)">
      <summary>
        <para>Create a DictationRecognizer with the specified minimum confidence and dictation topic constraint. Phrases under the specified minimum level will be ignored.</para>
      </summary>
      <param name="minimumConfidence">The confidence level at which the recognizer will begin accepting phrases.</param>
      <param name="topic">The dictation topic that this dictation recognizer should optimize its recognition for.</param>
      <param name="confidenceLevel"></param>
    </member>
    <member name="M:UnityEngine.Windows.Speech.DictationRecognizer.#ctor(UnityEngine.Windows.Speech.DictationTopicConstraint)">
      <summary>
        <para>Create a DictationRecognizer with the specified minimum confidence and dictation topic constraint. Phrases under the specified minimum level will be ignored.</para>
      </summary>
      <param name="minimumConfidence">The confidence level at which the recognizer will begin accepting phrases.</param>
      <param name="topic">The dictation topic that this dictation recognizer should optimize its recognition for.</param>
      <param name="confidenceLevel"></param>
    </member>
    <member name="M:UnityEngine.Windows.Speech.DictationRecognizer.#ctor(UnityEngine.Windows.Speech.ConfidenceLevel,UnityEngine.Windows.Speech.DictationTopicConstraint)">
      <summary>
        <para>Create a DictationRecognizer with the specified minimum confidence and dictation topic constraint. Phrases under the specified minimum level will be ignored.</para>
      </summary>
      <param name="minimumConfidence">The confidence level at which the recognizer will begin accepting phrases.</param>
      <param name="topic">The dictation topic that this dictation recognizer should optimize its recognition for.</param>
      <param name="confidenceLevel"></param>
    </member>
    <member name="?:UnityEngine.Windows.Speech.DictationRecognizer.DictationComplete(UnityEngine.Windows.Speech.DictationRecognizer/DictationCompletedDelegate)">
      <summary>
        <para>Event that is triggered when the recognizer session completes.</para>
      </summary>
      <param name="value">Delegate that is to be invoked on DictationComplete event.</param>
    </member>
    <member name="T:UnityEngine.Windows.Speech.DictationRecognizer.DictationCompletedDelegate">
      <summary>
        <para>Delegate for DictationComplete event.</para>
      </summary>
      <param name="cause">The cause of dictation session completion.</param>
    </member>
    <member name="?:UnityEngine.Windows.Speech.DictationRecognizer.DictationError(UnityEngine.Windows.Speech.DictationRecognizer/DictationErrorHandler)">
      <summary>
        <para>Event that is triggered when the recognizer session encouters an error.</para>
      </summary>
      <param name="value">Delegate that is to be invoked on DictationError event.</param>
    </member>
    <member name="T:UnityEngine.Windows.Speech.DictationRecognizer.DictationErrorHandler">
      <summary>
        <para>Delegate for DictationError event.</para>
      </summary>
      <param name="error">The error mesage.</param>
      <param name="hresult">HRESULT code that corresponds to the error.</param>
    </member>
    <member name="?:UnityEngine.Windows.Speech.DictationRecognizer.DictationHypothesis(UnityEngine.Windows.Speech.DictationRecognizer/DictationHypothesisDelegate)">
      <summary>
        <para>Event that is triggered when the recognizer changes its hypothesis for the current fragment.</para>
      </summary>
      <param name="value">Delegate to be triggered in the event of a hypothesis changed event.</param>
    </member>
    <member name="T:UnityEngine.Windows.Speech.DictationRecognizer.DictationHypothesisDelegate">
      <summary>
        <para>Callback indicating a hypothesis change event. You should register with DictationHypothesis event.</para>
      </summary>
      <param name="text">The text that the recognizer believes may have been recognized.</param>
    </member>
    <member name="?:UnityEngine.Windows.Speech.DictationRecognizer.DictationResult(UnityEngine.Windows.Speech.DictationRecognizer/DictationResultDelegate)">
      <summary>
        <para>Event indicating a phrase has been recognized with the specified confidence level.</para>
      </summary>
      <param name="value">The delegate to be triggered when this event is triggered.</param>
    </member>
    <member name="T:UnityEngine.Windows.Speech.DictationRecognizer.DictationResultDelegate">
      <summary>
        <para>Callback indicating a phrase has been recognized with the specified confidence level. You should register with DictationResult event.</para>
      </summary>
      <param name="text">The recognized text.</param>
      <param name="confidence">The confidence level at which the text was recognized.</param>
    </member>
    <member name="M:UnityEngine.Windows.Speech.DictationRecognizer.Dispose">
      <summary>
        <para>Disposes the resources this dictation recognizer uses.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Windows.Speech.DictationRecognizer.InitialSilenceTimeoutSeconds">
      <summary>
        <para>The time length in seconds before dictation recognizer session ends due to lack of audio input in case there was no audio heard in the current session.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Windows.Speech.DictationRecognizer.Start">
      <summary>
        <para>Starts the dictation recognization session. Dictation recognizer can only be started if PhraseRecognitionSystem is not running.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Windows.Speech.DictationRecognizer.Status">
      <summary>
        <para>Indicates the status of dictation recognizer.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Windows.Speech.DictationRecognizer.Stop">
      <summary>
        <para>Stops the dictation recognization session.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Windows.Speech.DictationTopicConstraint">
      <summary>
        <para>DictationTopicConstraint enum specifies the scenario for which a specific dictation recognizer should optimize.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.Speech.DictationTopicConstraint.Dictation">
      <summary>
        <para>Dictation recognizer will optimize for dictation scenario.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.Speech.DictationTopicConstraint.Form">
      <summary>
        <para>Dictation recognizer will optimize for form-filling scenario.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.Speech.DictationTopicConstraint.WebSearch">
      <summary>
        <para>Dictation recognizer will optimize for web search scenario.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Windows.Speech.GrammarRecognizer">
      <summary>
        <para>The GrammarRecognizer is a complement to the KeywordRecognizer. In many cases developers will find the KeywordRecognizer fills all their development needs. However, in some cases, more complex grammars will be better expressed in the form of an xml file on disk.
The GrammarRecognizer uses Extensible Markup Language (XML) elements and attributes, as specified in the World Wide Web Consortium (W3C) Speech Recognition Grammar Specification (SRGS) Version 1.0. These XML elements and attributes represent the rule structures that define the words or phrases (commands) recognized by speech recognition engines.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Windows.Speech.GrammarRecognizer.#ctor(System.String)">
      <summary>
        <para>Creates a grammar recognizer using specified file path and minimum confidence.</para>
      </summary>
      <param name="grammarFilePath">Path of the grammar file.</param>
      <param name="minimumConfidence">The confidence level at which the recognizer will begin accepting phrases.</param>
    </member>
    <member name="M:UnityEngine.Windows.Speech.GrammarRecognizer.#ctor(System.String,UnityEngine.Windows.Speech.ConfidenceLevel)">
      <summary>
        <para>Creates a grammar recognizer using specified file path and minimum confidence.</para>
      </summary>
      <param name="grammarFilePath">Path of the grammar file.</param>
      <param name="minimumConfidence">The confidence level at which the recognizer will begin accepting phrases.</param>
    </member>
    <member name="P:UnityEngine.Windows.Speech.GrammarRecognizer.GrammarFilePath">
      <summary>
        <para>Returns the grammar file path which was supplied when the grammar recognizer was created.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Windows.Speech.KeywordRecognizer">
      <summary>
        <para>KeywordRecognizer listens to speech input and attempts to match uttered phrases to a list of registered keywords.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Windows.Speech.KeywordRecognizer.#ctor(System.String[])">
      <summary>
        <para>Create a KeywordRecognizer which listens to specified keywords with the specified minimum confidence.  Phrases under the specified minimum level will be ignored.</para>
      </summary>
      <param name="keywords">The keywords that the recognizer will listen to.</param>
      <param name="minimumConfidence">The minimum confidence level of speech recognition that the recognizer will accept.</param>
    </member>
    <member name="M:UnityEngine.Windows.Speech.KeywordRecognizer.#ctor(System.String[],UnityEngine.Windows.Speech.ConfidenceLevel)">
      <summary>
        <para>Create a KeywordRecognizer which listens to specified keywords with the specified minimum confidence.  Phrases under the specified minimum level will be ignored.</para>
      </summary>
      <param name="keywords">The keywords that the recognizer will listen to.</param>
      <param name="minimumConfidence">The minimum confidence level of speech recognition that the recognizer will accept.</param>
    </member>
    <member name="P:UnityEngine.Windows.Speech.KeywordRecognizer.Keywords">
      <summary>
        <para>Returns the list of keywords which was supplied when the keyword recognizer was created.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Windows.Speech.PhraseRecognitionSystem">
      <summary>
        <para>Phrase recognition system is responsible for managing phrase recognizers and dispatching recognition events to them.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Windows.Speech.PhraseRecognitionSystem.isSupported">
      <summary>
        <para>Returns whether speech recognition is supported on the machine that the application is running on.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Windows.Speech.PhraseRecognitionSystem.ErrorDelegate">
      <summary>
        <para>Delegate for OnError event.</para>
      </summary>
      <param name="errorCode">Error code for the error that occurred.</param>
    </member>
    <member name="?:UnityEngine.Windows.Speech.PhraseRecognitionSystem.OnError(UnityEngine.Windows.Speech.PhraseRecognitionSystem/ErrorDelegate)">
      <summary>
        <para>Event that gets invoked when phrase recognition system encounters an error.</para>
      </summary>
      <param name="value">Delegate that will be invoked when the event occurs.</param>
    </member>
    <member name="?:UnityEngine.Windows.Speech.PhraseRecognitionSystem.OnStatusChanged(UnityEngine.Windows.Speech.PhraseRecognitionSystem/StatusDelegate)">
      <summary>
        <para>Event which occurs when the status of the phrase recognition system changes.</para>
      </summary>
      <param name="value">Delegate that will be invoked when the event occurs.</param>
    </member>
    <member name="M:UnityEngine.Windows.Speech.PhraseRecognitionSystem.Restart">
      <summary>
        <para>Attempts to restart the phrase recognition system.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Windows.Speech.PhraseRecognitionSystem.Shutdown">
      <summary>
        <para>Shuts phrase recognition system down.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Windows.Speech.PhraseRecognitionSystem.Status">
      <summary>
        <para>Returns the current status of the phrase recognition system.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Windows.Speech.PhraseRecognitionSystem.StatusDelegate">
      <summary>
        <para>Delegate for OnStatusChanged event.</para>
      </summary>
      <param name="status">The new status of the phrase recognition system.</param>
    </member>
    <member name="T:UnityEngine.Windows.Speech.PhraseRecognizedEventArgs">
      <summary>
        <para>Provides information about a phrase recognized event.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.Speech.PhraseRecognizedEventArgs.confidence">
      <summary>
        <para>A measure of correct recognition certainty.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.Speech.PhraseRecognizedEventArgs.phraseDuration">
      <summary>
        <para>The time it took for the phrase to be uttered.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.Speech.PhraseRecognizedEventArgs.phraseStartTime">
      <summary>
        <para>The moment in time when uttering of the phrase began.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.Speech.PhraseRecognizedEventArgs.semanticMeanings">
      <summary>
        <para>A semantic meaning of recognized phrase.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.Speech.PhraseRecognizedEventArgs.text">
      <summary>
        <para>The text that was recognized.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Windows.Speech.PhraseRecognizer">
      <summary>
        <para>A common base class for both keyword recognizer and grammar recognizer.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Windows.Speech.PhraseRecognizer.Dispose">
      <summary>
        <para>Disposes the resources used by phrase recognizer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Windows.Speech.PhraseRecognizer.IsRunning">
      <summary>
        <para>Tells whether the phrase recognizer is listening for phrases.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Windows.Speech.PhraseRecognizer.OnPhraseRecognized(UnityEngine.Windows.Speech.PhraseRecognizer/PhraseRecognizedDelegate)">
      <summary>
        <para>Event that gets fired when the phrase recognizer recognizes a phrase.</para>
      </summary>
      <param name="value">Delegate that will be invoked when the event occurs.</param>
    </member>
    <member name="T:UnityEngine.Windows.Speech.PhraseRecognizer.PhraseRecognizedDelegate">
      <summary>
        <para>Delegate for OnPhraseRecognized event.</para>
      </summary>
      <param name="args">Information about a phrase recognized event.</param>
    </member>
    <member name="M:UnityEngine.Windows.Speech.PhraseRecognizer.Start">
      <summary>
        <para>Makes the phrase recognizer start listening to phrases.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Windows.Speech.PhraseRecognizer.Stop">
      <summary>
        <para>Stops the phrase recognizer from listening to phrases.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Windows.Speech.SemanticMeaning">
      <summary>
        <para>Semantic meaning is a collection of semantic properties of a recognized phrase. These semantic properties can be specified in SRGS grammar files.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.Speech.SemanticMeaning.key">
      <summary>
        <para>A key of semantic meaning.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.Speech.SemanticMeaning.values">
      <summary>
        <para>Values of semantic property that the correspond to the semantic meaning key.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Windows.Speech.SpeechError">
      <summary>
        <para>Represents an error in a speech recognition system.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.Speech.SpeechError.AudioQualityFailure">
      <summary>
        <para>Speech recognition engine failed because the audio quality was too low.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.Speech.SpeechError.GrammarCompilationFailure">
      <summary>
        <para>Speech recognition engine failed to compiled specified grammar.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.Speech.SpeechError.MicrophoneUnavailable">
      <summary>
        <para>Speech error occurred because a microphone was not available.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.Speech.SpeechError.NetworkFailure">
      <summary>
        <para>Speech error occurred due to a network failure.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.Speech.SpeechError.NoError">
      <summary>
        <para>No error occurred.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.Speech.SpeechError.TimeoutExceeded">
      <summary>
        <para>A speech recognition system has timed out.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.Speech.SpeechError.TopicLanguageNotSupported">
      <summary>
        <para>Supplied grammar file language is not supported.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.Speech.SpeechError.UnknownError">
      <summary>
        <para>A speech recognition system has encountered an unknown error.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Windows.Speech.SpeechSystemStatus">
      <summary>
        <para>Represents the current status of the speech recognition system or a dictation recognizer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.Speech.SpeechSystemStatus.Failed">
      <summary>
        <para>Speech recognition system has encountered an error and is in an indeterminate state.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.Speech.SpeechSystemStatus.Running">
      <summary>
        <para>Speech recognition system is running.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.Speech.SpeechSystemStatus.Stopped">
      <summary>
        <para>Speech recognition system is stopped.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Windows.WebCam.CameraParameters">
      <summary>
        <para>When calling PhotoCapture.StartPhotoModeAsync, you must pass in a CameraParameters object that contains the various settings that the web camera will use.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Windows.WebCam.CameraParameters.cameraResolutionHeight">
      <summary>
        <para>A valid height resolution for use with the web camera.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Windows.WebCam.CameraParameters.cameraResolutionWidth">
      <summary>
        <para>A valid width resolution for use with the web camera.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Windows.WebCam.CameraParameters.frameRate">
      <summary>
        <para>The framerate at which to capture video.  This is only for use with VideoCapture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Windows.WebCam.CameraParameters.hologramOpacity">
      <summary>
        <para>The opacity of captured holograms.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Windows.WebCam.CameraParameters.pixelFormat">
      <summary>
        <para>The pixel format used to capture and record your image data.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Windows.WebCam.CapturePixelFormat">
      <summary>
        <para>The encoded image or video pixel format to use for PhotoCapture and VideoCapture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.WebCam.CapturePixelFormat.BGRA32">
      <summary>
        <para>8 bits per channel (blue, green, red, and alpha).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.WebCam.CapturePixelFormat.JPEG">
      <summary>
        <para>Encode photo in JPEG format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.WebCam.CapturePixelFormat.NV12">
      <summary>
        <para>8-bit Y plane followed by an interleaved U/V plane with 2x2 subsampling.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.WebCam.CapturePixelFormat.PNG">
      <summary>
        <para>Portable Network Graphics Format.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Windows.WebCam.PhotoCapture">
      <summary>
        <para>Captures a photo from the web camera and stores it in memory or on disk.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Windows.WebCam.PhotoCapture.CaptureResultType">
      <summary>
        <para>Contains the result of the capture request.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.WebCam.PhotoCapture.CaptureResultType.Success">
      <summary>
        <para>Specifies that the desired operation was successful.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.WebCam.PhotoCapture.CaptureResultType.UnknownError">
      <summary>
        <para>Specifies that an unknown error occurred.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Windows.WebCam.PhotoCapture.CreateAsync(UnityEngine.Windows.WebCam.PhotoCapture/OnCaptureResourceCreatedCallback)">
      <summary>
        <para>Asynchronously creates an instance of a PhotoCapture object that can be used to capture photos.</para>
      </summary>
      <param name="showHolograms">Will allow you to capture holograms in your photo.</param>
      <param name="onCreatedCallback">This callback will be invoked when the PhotoCapture instance is created and ready to be used.</param>
    </member>
    <member name="M:UnityEngine.Windows.WebCam.PhotoCapture.CreateAsync(System.Boolean,UnityEngine.Windows.WebCam.PhotoCapture/OnCaptureResourceCreatedCallback)">
      <summary>
        <para>Asynchronously creates an instance of a PhotoCapture object that can be used to capture photos.</para>
      </summary>
      <param name="showHolograms">Will allow you to capture holograms in your photo.</param>
      <param name="onCreatedCallback">This callback will be invoked when the PhotoCapture instance is created and ready to be used.</param>
    </member>
    <member name="M:UnityEngine.Windows.WebCam.PhotoCapture.Dispose">
      <summary>
        <para>Dispose must be called to shutdown the PhotoCapture instance.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Windows.WebCam.PhotoCapture.GetUnsafePointerToVideoDeviceController">
      <summary>
        <para>Provides a COM pointer to the native IVideoDeviceController.</para>
      </summary>
      <returns>
        <para>A native COM pointer to the IVideoDeviceController.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Windows.WebCam.PhotoCapture.OnCapturedToDiskCallback">
      <summary>
        <para>Called when a photo has been saved to the file system.</para>
      </summary>
      <param name="result">Indicates whether or not the photo was successfully saved to the file system.</param>
    </member>
    <member name="T:UnityEngine.Windows.WebCam.PhotoCapture.OnCapturedToMemoryCallback">
      <summary>
        <para>Called when a photo has been captured to memory.</para>
      </summary>
      <param name="result">Indicates whether or not the photo was successfully captured to memory.</param>
      <param name="photoCaptureFrame">Contains the target texture.  If available, the spatial information will be accessible through this structure as well.</param>
    </member>
    <member name="T:UnityEngine.Windows.WebCam.PhotoCapture.OnCaptureResourceCreatedCallback">
      <summary>
        <para>Called when a PhotoCapture resource has been created.</para>
      </summary>
      <param name="captureObject">The PhotoCapture instance.</param>
    </member>
    <member name="T:UnityEngine.Windows.WebCam.PhotoCapture.OnPhotoModeStartedCallback">
      <summary>
        <para>Called when photo mode has been started.</para>
      </summary>
      <param name="result">Indicates whether or not photo mode was successfully activated.</param>
    </member>
    <member name="T:UnityEngine.Windows.WebCam.PhotoCapture.OnPhotoModeStoppedCallback">
      <summary>
        <para>Called when photo mode has been stopped.</para>
      </summary>
      <param name="result">Indicates whether or not photo mode was successfully deactivated.</param>
    </member>
    <member name="T:UnityEngine.Windows.WebCam.PhotoCapture.PhotoCaptureResult">
      <summary>
        <para>A data container that contains the result information of a photo capture operation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.WebCam.PhotoCapture.PhotoCaptureResult.hResult">
      <summary>
        <para>The specific HResult value.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.WebCam.PhotoCapture.PhotoCaptureResult.resultType">
      <summary>
        <para>A generic result that indicates whether or not the PhotoCapture operation succeeded.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Windows.WebCam.PhotoCapture.PhotoCaptureResult.success">
      <summary>
        <para>Indicates whether or not the operation was successful.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Windows.WebCam.PhotoCapture.StartPhotoModeAsync(UnityEngine.Windows.WebCam.CameraParameters,UnityEngine.Windows.WebCam.PhotoCapture/OnPhotoModeStartedCallback)">
      <summary>
        <para>Asynchronously starts photo mode.</para>
      </summary>
      <param name="setupParams">The various settings that should be applied to the web camera.</param>
      <param name="onPhotoModeStartedCallback">This callback will be invoked once photo mode has been activated.</param>
    </member>
    <member name="M:UnityEngine.Windows.WebCam.PhotoCapture.StopPhotoModeAsync(UnityEngine.Windows.WebCam.PhotoCapture/OnPhotoModeStoppedCallback)">
      <summary>
        <para>Asynchronously stops photo mode.</para>
      </summary>
      <param name="onPhotoModeStoppedCallback">This callback will be invoked once photo mode has been deactivated.</param>
    </member>
    <member name="P:UnityEngine.Windows.WebCam.PhotoCapture.SupportedResolutions">
      <summary>
        <para>A list of all the supported device resolutions for taking pictures.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Windows.WebCam.PhotoCapture.TakePhotoAsync(System.String,UnityEngine.Windows.WebCam.PhotoCaptureFileOutputFormat,UnityEngine.Windows.WebCam.PhotoCapture/OnCapturedToDiskCallback)">
      <summary>
        <para>Asynchronously captures a photo from the web camera and saves it to disk.</para>
      </summary>
      <param name="filename">The location where the photo should be saved.  The filename must end with a png or jpg file extension.</param>
      <param name="fileOutputFormat">The encoding format that should be used.</param>
      <param name="onCapturedPhotoToDiskCallback">Invoked once the photo has been saved to disk.</param>
      <param name="onCapturedPhotoToMemoryCallback">Invoked once the photo has been copied to the target texture.</param>
    </member>
    <member name="M:UnityEngine.Windows.WebCam.PhotoCapture.TakePhotoAsync(UnityEngine.Windows.WebCam.PhotoCapture/OnCapturedToMemoryCallback)">
      <summary>
        <para>Asynchronously captures a photo from the web camera and saves it to disk.</para>
      </summary>
      <param name="filename">The location where the photo should be saved.  The filename must end with a png or jpg file extension.</param>
      <param name="fileOutputFormat">The encoding format that should be used.</param>
      <param name="onCapturedPhotoToDiskCallback">Invoked once the photo has been saved to disk.</param>
      <param name="onCapturedPhotoToMemoryCallback">Invoked once the photo has been copied to the target texture.</param>
    </member>
    <member name="T:UnityEngine.Windows.WebCam.PhotoCaptureFileOutputFormat">
      <summary>
        <para>Image Encoding Format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.WebCam.PhotoCaptureFileOutputFormat.JPG">
      <summary>
        <para>JPEG Encoding.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.WebCam.PhotoCaptureFileOutputFormat.PNG">
      <summary>
        <para>PNG Encoding.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Windows.WebCam.PhotoCaptureFrame">
      <summary>
        <para>Contains information captured from the web camera.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Windows.WebCam.PhotoCaptureFrame.dataLength">
      <summary>
        <para>The length of the raw IMFMediaBuffer which contains the image captured.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Windows.WebCam.PhotoCaptureFrame.hasLocationData">
      <summary>
        <para>Specifies whether or not spatial data was captured.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Windows.WebCam.PhotoCaptureFrame.pixelFormat">
      <summary>
        <para>The raw image data pixel format.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Windows.WebCam.PhotoCaptureFrame.CopyRawImageDataIntoBuffer(System.Collections.Generic.List`1&lt;System.Byte&gt;)">
      <summary>
        <para>Will copy the raw IMFMediaBuffer image data into a byte list.</para>
      </summary>
      <param name="byteBuffer">The destination byte list to which the raw captured image data will be copied to.</param>
    </member>
    <member name="M:UnityEngine.Windows.WebCam.PhotoCaptureFrame.Dispose">
      <summary>
        <para>Disposes the PhotoCaptureFrame and any resources it uses.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Windows.WebCam.PhotoCaptureFrame.GetUnsafePointerToBuffer">
      <summary>
        <para>Provides a COM pointer to the native IMFMediaBuffer that contains the image data.</para>
      </summary>
      <returns>
        <para>A native COM pointer to the IMFMediaBuffer which contains the image data.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Windows.WebCam.PhotoCaptureFrame.TryGetCameraToWorldMatrix(UnityEngine.Matrix4x4&amp;)">
      <summary>
        <para>This method will return the camera to world matrix at the time the photo was captured if location data if available.</para>
      </summary>
      <param name="cameraToWorldMatrix">A matrix to be populated by the Camera to world Matrix.</param>
      <returns>
        <para>True if a valid matrix is returned or false otherwise.  This will be false if the frame has no location data.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Windows.WebCam.PhotoCaptureFrame.TryGetProjectionMatrix(System.Single,System.Single,UnityEngine.Matrix4x4&amp;)">
      <summary>
        <para>This method will return the projection matrix at the time the photo was captured if location data if available.</para>
      </summary>
      <param name="nearClipPlane">The near clip plane distance.</param>
      <param name="farClipPlane">The far clip plane distance.</param>
      <param name="projectionMatrix">A matrix to be populated by the Projection Matrix.</param>
      <returns>
        <para>True if a valid matrix is returned or false otherwise.  This will be false if the frame has no location data.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Windows.WebCam.PhotoCaptureFrame.TryGetProjectionMatrix(UnityEngine.Matrix4x4&amp;)">
      <summary>
        <para>This method will return the projection matrix at the time the photo was captured if location data if available.</para>
      </summary>
      <param name="nearClipPlane">The near clip plane distance.</param>
      <param name="farClipPlane">The far clip plane distance.</param>
      <param name="projectionMatrix">A matrix to be populated by the Projection Matrix.</param>
      <returns>
        <para>True if a valid matrix is returned or false otherwise.  This will be false if the frame has no location data.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Windows.WebCam.PhotoCaptureFrame.UploadImageDataToTexture(UnityEngine.Texture2D)">
      <summary>
        <para>This method will copy the captured image data into a user supplied texture for use in Unity.</para>
      </summary>
      <param name="targetTexture">The target texture that the captured image data will be copied to.</param>
    </member>
    <member name="T:UnityEngine.Windows.WebCam.VideoCapture">
      <summary>
        <para>Records a video from the web camera directly to disk.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Windows.WebCam.VideoCapture.AudioState">
      <summary>
        <para>Specifies what audio sources should be recorded while recording the video.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.WebCam.VideoCapture.AudioState.ApplicationAndMicAudio">
      <summary>
        <para>Include both the application audio as well as the mic audio in the video recording.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.WebCam.VideoCapture.AudioState.ApplicationAudio">
      <summary>
        <para>Only include the application audio in the video recording.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.WebCam.VideoCapture.AudioState.MicAudio">
      <summary>
        <para>Only include the mic audio in the video recording.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.WebCam.VideoCapture.AudioState.None">
      <summary>
        <para>Do not include any audio in the video recording.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Windows.WebCam.VideoCapture.CaptureResultType">
      <summary>
        <para>Contains the result of the capture request.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.WebCam.VideoCapture.CaptureResultType.Success">
      <summary>
        <para>Specifies that the desired operation was successful.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.WebCam.VideoCapture.CaptureResultType.UnknownError">
      <summary>
        <para>Specifies that an unknown error occurred.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Windows.WebCam.VideoCapture.CreateAsync(UnityEngine.Windows.WebCam.VideoCapture/OnVideoCaptureResourceCreatedCallback)">
      <summary>
        <para>Asynchronously creates an instance of a VideoCapture object that can be used to record videos from the web camera to disk.</para>
      </summary>
      <param name="showHolograms">Allows capturing holograms in your video.
Note: Capturing holograms is currently disabled and this parameter is ignored.</param>
      <param name="onCreatedCallback">This callback will be invoked when the VideoCapture instance is created and ready to be used.</param>
    </member>
    <member name="M:UnityEngine.Windows.WebCam.VideoCapture.CreateAsync(System.Boolean,UnityEngine.Windows.WebCam.VideoCapture/OnVideoCaptureResourceCreatedCallback)">
      <summary>
        <para>Asynchronously creates an instance of a VideoCapture object that can be used to record videos from the web camera to disk.</para>
      </summary>
      <param name="showHolograms">Allows capturing holograms in your video.
Note: Capturing holograms is currently disabled and this parameter is ignored.</param>
      <param name="onCreatedCallback">This callback will be invoked when the VideoCapture instance is created and ready to be used.</param>
    </member>
    <member name="M:UnityEngine.Windows.WebCam.VideoCapture.Dispose">
      <summary>
        <para>You must call Dispose to shutdown the VideoCapture instance and release the native WinRT objects.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Windows.WebCam.VideoCapture.GetSupportedFrameRatesForResolution(UnityEngine.Resolution)">
      <summary>
        <para>Returns the supported frame rates at which a video can be recorded given a resolution.</para>
      </summary>
      <param name="resolution">A recording resolution.</param>
      <returns>
        <para>The frame rates at which the video can be recorded.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Windows.WebCam.VideoCapture.GetUnsafePointerToVideoDeviceController">
      <summary>
        <para>Provides a COM pointer to the native IVideoDeviceController.</para>
      </summary>
      <returns>
        <para>A native COM pointer to the IVideoDeviceController.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.Windows.WebCam.VideoCapture.IsRecording">
      <summary>
        <para>Indicates whether or not the VideoCapture instance is currently recording video.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Windows.WebCam.VideoCapture.OnStartedRecordingVideoCallback">
      <summary>
        <para>Called when the web camera begins recording the video.</para>
      </summary>
      <param name="result">Indicates whether or not video recording started successfully.</param>
    </member>
    <member name="T:UnityEngine.Windows.WebCam.VideoCapture.OnStoppedRecordingVideoCallback">
      <summary>
        <para>Called when the video recording has been saved to the file system.</para>
      </summary>
      <param name="result">Indicates whether or not video recording was saved successfully to the file system.</param>
    </member>
    <member name="T:UnityEngine.Windows.WebCam.VideoCapture.OnVideoCaptureResourceCreatedCallback">
      <summary>
        <para>Called when a VideoCapture resource has been created.</para>
      </summary>
      <param name="captureObject">The VideoCapture instance.</param>
    </member>
    <member name="T:UnityEngine.Windows.WebCam.VideoCapture.OnVideoModeStartedCallback">
      <summary>
        <para>Called when video mode has been started.</para>
      </summary>
      <param name="result">Indicates whether or not video mode was successfully activated.</param>
    </member>
    <member name="T:UnityEngine.Windows.WebCam.VideoCapture.OnVideoModeStoppedCallback">
      <summary>
        <para>Called when video mode has been stopped.</para>
      </summary>
      <param name="result">Indicates whether or not video mode was successfully deactivated.</param>
    </member>
    <member name="M:UnityEngine.Windows.WebCam.VideoCapture.StartRecordingAsync(System.String,UnityEngine.Windows.WebCam.VideoCapture/OnStartedRecordingVideoCallback)">
      <summary>
        <para>Asynchronously records a video from the web camera to the file system.</para>
      </summary>
      <param name="filename">The name of the video to be recorded to.</param>
      <param name="onStartedRecordingVideoCallback">Invoked as soon as the video recording begins.</param>
    </member>
    <member name="M:UnityEngine.Windows.WebCam.VideoCapture.StartVideoModeAsync(UnityEngine.Windows.WebCam.CameraParameters,UnityEngine.Windows.WebCam.VideoCapture/AudioState,UnityEngine.Windows.WebCam.VideoCapture/OnVideoModeStartedCallback)">
      <summary>
        <para>Asynchronously starts video mode.</para>
      </summary>
      <param name="setupParams">The various settings that should be applied to the web camera.</param>
      <param name="audioState">Indicates how audio should be recorded.</param>
      <param name="onVideoModeStartedCallback">This callback will be invoked once video mode has been activated.</param>
    </member>
    <member name="M:UnityEngine.Windows.WebCam.VideoCapture.StopRecordingAsync(UnityEngine.Windows.WebCam.VideoCapture/OnStoppedRecordingVideoCallback)">
      <summary>
        <para>Asynchronously stops recording a video from the web camera to the file system.</para>
      </summary>
      <param name="onStoppedRecordingVideoCallback">Invoked as soon as video recording has finished.</param>
    </member>
    <member name="M:UnityEngine.Windows.WebCam.VideoCapture.StopVideoModeAsync(UnityEngine.Windows.WebCam.VideoCapture/OnVideoModeStoppedCallback)">
      <summary>
        <para>Asynchronously stops video mode.</para>
      </summary>
      <param name="onVideoModeStoppedCallback">This callback will be invoked once video mode has been deactivated.</param>
    </member>
    <member name="P:UnityEngine.Windows.WebCam.VideoCapture.SupportedResolutions">
      <summary>
        <para>A list of all the supported device resolutions for recording videos.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Windows.WebCam.VideoCapture.VideoCaptureResult">
      <summary>
        <para>A data container that contains the result information of a video recording operation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.WebCam.VideoCapture.VideoCaptureResult.hResult">
      <summary>
        <para>The specific Windows HRESULT code.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.WebCam.VideoCapture.VideoCaptureResult.resultType">
      <summary>
        <para>A generic result that indicates whether or not the VideoCapture operation succeeded.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Windows.WebCam.VideoCapture.VideoCaptureResult.success">
      <summary>
        <para>Indicates whether or not the operation was successful.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Windows.WebCam.WebCam">
      <summary>
        <para>Contains general information about the current state of the web camera.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Windows.WebCam.WebCam.Mode">
      <summary>
        <para>Specifies what mode the Web Camera is currently in.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Windows.WebCam.WebCamMode">
      <summary>
        <para>Describes the active mode of the Web Camera resource.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.WebCam.WebCamMode.None">
      <summary>
        <para>Resource is not in use.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.WebCam.WebCamMode.PhotoMode">
      <summary>
        <para>Resource is in Photo Mode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Windows.WebCam.WebCamMode.VideoMode">
      <summary>
        <para>Resource is in Video Mode.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.WrapMode">
      <summary>
        <para>Determines how time is treated outside of the keyframed range of an AnimationClip or AnimationCurve.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.WrapMode.ClampForever">
      <summary>
        <para>Plays back the animation. When it reaches the end, it will keep playing the last frame and never stop playing.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.WrapMode.Default">
      <summary>
        <para>Reads the default repeat mode set higher up.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.WrapMode.Loop">
      <summary>
        <para>When time reaches the end of the animation clip, time will continue at the beginning.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.WrapMode.Once">
      <summary>
        <para>When time reaches the end of the animation clip, the clip will automatically stop playing and time will be reset to beginning of the clip.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.WrapMode.PingPong">
      <summary>
        <para>When time reaches the end of the animation clip, time will ping pong back between beginning and end.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.WSA.AppCallbackItem">
      <summary>
        <para>Delegate that can be invoked on specific thread.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.WSA.Application">
      <summary>
        <para>Provides essential methods related to Window Store application.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WSA.Application.advertisingIdentifier">
      <summary>
        <para>Advertising ID.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WSA.Application.arguments">
      <summary>
        <para>Arguments passed to application.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.WSA.Application.windowActivated(UnityEngine.WSA.WindowActivated)">
      <summary>
        <para>Fired when application window is activated.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="?:UnityEngine.WSA.Application.windowSizeChanged(UnityEngine.WSA.WindowSizeChanged)">
      <summary>
        <para>Fired when window size changes.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.WSA.Application.InvokeOnAppThread(UnityEngine.WSA.AppCallbackItem,System.Boolean)">
      <summary>
        <para>Executes callback item on application thread.</para>
      </summary>
      <param name="item">Item to execute.</param>
      <param name="waitUntilDone">Wait until item is executed.</param>
    </member>
    <member name="M:UnityEngine.WSA.Application.InvokeOnUIThread(UnityEngine.WSA.AppCallbackItem,System.Boolean)">
      <summary>
        <para>Executes callback item on UI thread.</para>
      </summary>
      <param name="item">Item to execute.</param>
      <param name="waitUntilDone">Wait until item is executed.</param>
    </member>
    <member name="M:UnityEngine.WSA.Application.RunningOnAppThread">
      <summary>
        <para>Returns true if you're running on application thread.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WSA.Application.RunningOnUIThread">
      <summary>
        <para>Returns true if you're running on UI thread.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.WSA.Cursor">
      <summary>
        <para>Cursor API for Windows Store Apps.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WSA.Cursor.SetCustomCursor(System.UInt32)">
      <summary>
        <para>Set a custom cursor.</para>
      </summary>
      <param name="id">The cursor resource id.</param>
    </member>
    <member name="T:UnityEngine.WSA.Folder">
      <summary>
        <para>List of accessible folders on Windows Store Apps.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.WSA.Launcher">
      <summary>
        <para>Class which is capable of launching user's default app for file type or a protocol. See also PlayerSettings where you can specify file or URI associations.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WSA.Launcher.LaunchFile(UnityEngine.WSA.Folder,System.String,System.Boolean)">
      <summary>
        <para>Launches the default app associated with specified file.</para>
      </summary>
      <param name="folder">Folder type where the file is located.</param>
      <param name="relativeFilePath">Relative file path inside the specified folder.</param>
      <param name="showWarning">Shows user a warning that application will be switched.</param>
    </member>
    <member name="M:UnityEngine.WSA.Launcher.LaunchFileWithPicker(System.String)">
      <summary>
        <para>Opens a dialog for picking the file.</para>
      </summary>
      <param name="fileExtension">File extension.</param>
    </member>
    <member name="M:UnityEngine.WSA.Launcher.LaunchUri(System.String,System.Boolean)">
      <summary>
        <para>Starts the default app associated with the URI scheme name for the specified URI, using the specified options.</para>
      </summary>
      <param name="uri">The URI.</param>
      <param name="showWarning">Displays a warning that the URI is potentially unsafe.</param>
    </member>
    <member name="T:UnityEngine.WSA.SecondaryTileData">
      <summary>
        <para>Defines the default look of secondary tile.
</para>
      </summary>
    </member>
    <member name="F:UnityEngine.WSA.SecondaryTileData.arguments">
      <summary>
        <para>Arguments to be passed for application when secondary tile is activated.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WSA.SecondaryTileData.backgroundColor">
      <summary>
        <para>Defines background color for secondary tile.
</para>
      </summary>
    </member>
    <member name="F:UnityEngine.WSA.SecondaryTileData.backgroundColorSet">
      <summary>
        <para>Defines, whether backgroundColor should be used.
</para>
      </summary>
    </member>
    <member name="F:UnityEngine.WSA.SecondaryTileData.displayName">
      <summary>
        <para>Display name for secondary tile.
</para>
      </summary>
    </member>
    <member name="F:UnityEngine.WSA.SecondaryTileData.foregroundText">
      <summary>
        <para>Defines the style for foreground text on a secondary tile.
</para>
      </summary>
    </member>
    <member name="F:UnityEngine.WSA.SecondaryTileData.lockScreenBadgeLogo">
      <summary>
        <para>Uri to logo, shown for secondary tile on lock screen.
</para>
      </summary>
    </member>
    <member name="F:UnityEngine.WSA.SecondaryTileData.lockScreenDisplayBadgeAndTileText">
      <summary>
        <para>Whether to show secondary tile on lock screen.
</para>
      </summary>
    </member>
    <member name="F:UnityEngine.WSA.SecondaryTileData.phoneticName">
      <summary>
        <para>Phonetic name for secondary tile.
</para>
      </summary>
    </member>
    <member name="F:UnityEngine.WSA.SecondaryTileData.roamingEnabled">
      <summary>
        <para>Defines whether secondary tile is copied to another device when application is installed by the same users account.
</para>
      </summary>
    </member>
    <member name="F:UnityEngine.WSA.SecondaryTileData.showNameOnSquare150x150Logo">
      <summary>
        <para>Defines whether the displayName should be shown on a medium secondary tile.
</para>
      </summary>
    </member>
    <member name="F:UnityEngine.WSA.SecondaryTileData.showNameOnSquare310x310Logo">
      <summary>
        <para>Defines whether the displayName should be shown on a large secondary tile.
</para>
      </summary>
    </member>
    <member name="F:UnityEngine.WSA.SecondaryTileData.showNameOnWide310x150Logo">
      <summary>
        <para>Defines whether the displayName should be shown on a wide secondary tile.
</para>
      </summary>
    </member>
    <member name="F:UnityEngine.WSA.SecondaryTileData.square150x150Logo">
      <summary>
        <para>Uri to the logo for medium size tile.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.WSA.SecondaryTileData.square30x30Logo">
      <summary>
        <para>Uri to the logo shown on tile
</para>
      </summary>
    </member>
    <member name="F:UnityEngine.WSA.SecondaryTileData.square310x310Logo">
      <summary>
        <para>Uri to the logo for large size tile.
</para>
      </summary>
    </member>
    <member name="F:UnityEngine.WSA.SecondaryTileData.square70x70Logo">
      <summary>
        <para>Uri to the logo for small size tile.
</para>
      </summary>
    </member>
    <member name="F:UnityEngine.WSA.SecondaryTileData.tileId">
      <summary>
        <para>Unique identifier within application for a secondary tile.
</para>
      </summary>
    </member>
    <member name="F:UnityEngine.WSA.SecondaryTileData.wide310x150Logo">
      <summary>
        <para>Uri to the logo for wide tile.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WSA.SecondaryTileData.#ctor(System.String,System.String)">
      <summary>
        <para>Constructor for SecondaryTileData, sets default values for all members.</para>
      </summary>
      <param name="id">Unique identifier for secondary tile.</param>
      <param name="displayName">A display name for a tile.</param>
    </member>
    <member name="T:UnityEngine.WSA.Tile">
      <summary>
        <para>Represents tile on Windows start screen
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WSA.Tile.exists">
      <summary>
        <para>Whether secondary tile is pinned to start screen.
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WSA.Tile.hasUserConsent">
      <summary>
        <para>Whether secondary tile was approved (pinned to start screen) or rejected by user.
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WSA.Tile.id">
      <summary>
        <para>A unique string, identifying secondary tile</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WSA.Tile.main">
      <summary>
        <para>Returns applications main tile
</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WSA.Tile.CreateOrUpdateSecondary(UnityEngine.WSA.SecondaryTileData)">
      <summary>
        <para>Creates new or updates existing secondary tile.</para>
      </summary>
      <param name="data">The data used to create or update secondary tile.</param>
      <param name="pos">The coordinates for a request to create new tile.</param>
      <param name="area">The area on the screen above which the request to create new tile will be displayed.</param>
      <returns>
        <para>New Tile object, that can be used for further work with the tile.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.WSA.Tile.CreateOrUpdateSecondary(UnityEngine.WSA.SecondaryTileData,UnityEngine.Vector2)">
      <summary>
        <para>Creates new or updates existing secondary tile.</para>
      </summary>
      <param name="data">The data used to create or update secondary tile.</param>
      <param name="pos">The coordinates for a request to create new tile.</param>
      <param name="area">The area on the screen above which the request to create new tile will be displayed.</param>
      <returns>
        <para>New Tile object, that can be used for further work with the tile.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.WSA.Tile.CreateOrUpdateSecondary(UnityEngine.WSA.SecondaryTileData,UnityEngine.Rect)">
      <summary>
        <para>Creates new or updates existing secondary tile.</para>
      </summary>
      <param name="data">The data used to create or update secondary tile.</param>
      <param name="pos">The coordinates for a request to create new tile.</param>
      <param name="area">The area on the screen above which the request to create new tile will be displayed.</param>
      <returns>
        <para>New Tile object, that can be used for further work with the tile.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.WSA.Tile.Delete">
      <summary>
        <para>Show a request to unpin secondary tile from start screen.</para>
      </summary>
      <param name="pos">The coordinates for a request to unpin tile.</param>
      <param name="area">The area on the screen above which the request to unpin tile will be displayed.</param>
    </member>
    <member name="M:UnityEngine.WSA.Tile.Delete(UnityEngine.Vector2)">
      <summary>
        <para>Show a request to unpin secondary tile from start screen.</para>
      </summary>
      <param name="pos">The coordinates for a request to unpin tile.</param>
      <param name="area">The area on the screen above which the request to unpin tile will be displayed.</param>
    </member>
    <member name="M:UnityEngine.WSA.Tile.Delete(UnityEngine.Rect)">
      <summary>
        <para>Show a request to unpin secondary tile from start screen.</para>
      </summary>
      <param name="pos">The coordinates for a request to unpin tile.</param>
      <param name="area">The area on the screen above which the request to unpin tile will be displayed.</param>
    </member>
    <member name="M:UnityEngine.WSA.Tile.DeleteSecondary(System.String)">
      <summary>
        <para>Show a request to unpin secondary tile from start screen.</para>
      </summary>
      <param name="tileId">An identifier for secondary tile.</param>
      <param name="pos">The coordinates for a request to unpin tile.</param>
      <param name="area">The area on the screen above which the request to unpin tile will be displayed.</param>
    </member>
    <member name="M:UnityEngine.WSA.Tile.DeleteSecondary(System.String,UnityEngine.Vector2)">
      <summary>
        <para>Show a request to unpin secondary tile from start screen.</para>
      </summary>
      <param name="tileId">An identifier for secondary tile.</param>
      <param name="pos">The coordinates for a request to unpin tile.</param>
      <param name="area">The area on the screen above which the request to unpin tile will be displayed.</param>
    </member>
    <member name="M:UnityEngine.WSA.Tile.DeleteSecondary(System.String,UnityEngine.Rect)">
      <summary>
        <para>Show a request to unpin secondary tile from start screen.</para>
      </summary>
      <param name="tileId">An identifier for secondary tile.</param>
      <param name="pos">The coordinates for a request to unpin tile.</param>
      <param name="area">The area on the screen above which the request to unpin tile will be displayed.</param>
    </member>
    <member name="M:UnityEngine.WSA.Tile.Exists(System.String)">
      <summary>
        <para>Whether secondary tile is pinned to start screen.</para>
      </summary>
      <param name="tileId">An identifier for secondary tile.</param>
    </member>
    <member name="M:UnityEngine.WSA.Tile.GetSecondaries">
      <summary>
        <para>Gets all secondary tiles.</para>
      </summary>
      <returns>
        <para>An array of Tile objects.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.WSA.Tile.GetSecondary(System.String)">
      <summary>
        <para>Returns the secondary tile, identified by tile id.</para>
      </summary>
      <param name="tileId">A tile identifier.</param>
      <returns>
        <para>A Tile object or null if secondary tile does not exist (not pinned to start screen and user request is complete).</para>
      </returns>
    </member>
    <member name="M:UnityEngine.WSA.Tile.GetTemplate(UnityEngine.WSA.TileTemplate)">
      <summary>
        <para>Get template XML for tile notification.</para>
      </summary>
      <param name="templ">A template identifier.</param>
      <returns>
        <para>String, which is an empty XML document to be filled and used for tile notification.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.WSA.Tile.PeriodicBadgeUpdate(System.String,System.Single)">
      <summary>
        <para>Starts periodic update of a  badge on a tile.
</para>
      </summary>
      <param name="uri">A remote location from where to retrieve tile update</param>
      <param name="interval">A time interval in minutes, will be rounded to a value, supported by the system</param>
    </member>
    <member name="M:UnityEngine.WSA.Tile.PeriodicUpdate(System.String,System.Single)">
      <summary>
        <para>Starts periodic update of a tile.
</para>
      </summary>
      <param name="uri">a remote location fromwhere to retrieve tile update</param>
      <param name="interval">a time interval in minutes, will be rounded to a value, supported by the system</param>
    </member>
    <member name="M:UnityEngine.WSA.Tile.RemoveBadge">
      <summary>
        <para>Remove badge from tile.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WSA.Tile.StopPeriodicBadgeUpdate">
      <summary>
        <para>Stops previously started periodic update of a tile.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WSA.Tile.StopPeriodicUpdate">
      <summary>
        <para>Stops previously started periodic update of a tile.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WSA.Tile.Update(System.String)">
      <summary>
        <para>Send a notification for tile (update tiles look).</para>
      </summary>
      <param name="xml">A string containing XML document for new tile look.</param>
      <param name="medium">An uri to 150x150 image, shown on medium tile.</param>
      <param name="wide">An uri to a 310x150 image to be shown on a wide tile (if such issupported).</param>
      <param name="large">An uri to a 310x310 image to be shown on a large tile (if such is supported).</param>
      <param name="text">A text to shown on a tile.</param>
    </member>
    <member name="M:UnityEngine.WSA.Tile.Update(System.String,System.String,System.String,System.String)">
      <summary>
        <para>Send a notification for tile (update tiles look).</para>
      </summary>
      <param name="xml">A string containing XML document for new tile look.</param>
      <param name="medium">An uri to 150x150 image, shown on medium tile.</param>
      <param name="wide">An uri to a 310x150 image to be shown on a wide tile (if such issupported).</param>
      <param name="large">An uri to a 310x310 image to be shown on a large tile (if such is supported).</param>
      <param name="text">A text to shown on a tile.</param>
    </member>
    <member name="M:UnityEngine.WSA.Tile.UpdateBadgeImage(System.String)">
      <summary>
        <para>Sets or updates badge on a tile to an image.</para>
      </summary>
      <param name="image">Image identifier.</param>
    </member>
    <member name="M:UnityEngine.WSA.Tile.UpdateBadgeNumber(System.Single)">
      <summary>
        <para>Set or update a badge on a tile to a number.</para>
      </summary>
      <param name="number">Number to be shown on a badge.</param>
    </member>
    <member name="T:UnityEngine.WSA.TileForegroundText">
      <summary>
        <para>Style for foreground text on a secondary tile.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.WSA.TileTemplate">
      <summary>
        <para>Templates for various tile styles.
</para>
      </summary>
    </member>
    <member name="T:UnityEngine.WSA.Toast">
      <summary>
        <para>Represents a toast notification in Windows Store Apps.
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WSA.Toast.activated">
      <summary>
        <para>true if toast was activated by user.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WSA.Toast.arguments">
      <summary>
        <para>Arguments to be passed for application when toast notification is activated.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WSA.Toast.dismissed">
      <summary>
        <para>true if toast notification was dismissed (for any reason).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WSA.Toast.dismissedByUser">
      <summary>
        <para>true if toast notification was explicitly dismissed by user.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WSA.Toast.Create(System.String)">
      <summary>
        <para>Create toast notification.</para>
      </summary>
      <param name="xml">XML document with tile data.</param>
      <param name="image">Uri to image to show on a toast, can be empty, in that case text-only notification will be shown.</param>
      <param name="text">A text to display on a toast notification.</param>
      <returns>
        <para>A toast object for further work with created notification or null, if creation of toast failed.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.WSA.Toast.Create(System.String,System.String)">
      <summary>
        <para>Create toast notification.</para>
      </summary>
      <param name="xml">XML document with tile data.</param>
      <param name="image">Uri to image to show on a toast, can be empty, in that case text-only notification will be shown.</param>
      <param name="text">A text to display on a toast notification.</param>
      <returns>
        <para>A toast object for further work with created notification or null, if creation of toast failed.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.WSA.Toast.GetTemplate(UnityEngine.WSA.ToastTemplate)">
      <summary>
        <para>Get template XML for toast notification.
</para>
      </summary>
      <param name="templ">A template identifier.</param>
      <returns>
        <para>string, which is an empty XML document to be filled and used for toast notification.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.WSA.Toast.Hide">
      <summary>
        <para>Hide displayed toast notification.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WSA.Toast.Show">
      <summary>
        <para>Show toast notification.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.WSA.ToastTemplate">
      <summary>
        <para>Templates for various toast styles.
</para>
      </summary>
    </member>
    <member name="T:UnityEngine.WSA.WindowActivated">
      <summary>
        <para>This event occurs when window completes activation or deactivation, it also fires up when you snap and unsnap the application.</para>
      </summary>
      <param name="state"></param>
    </member>
    <member name="T:UnityEngine.WSA.WindowActivationState">
      <summary>
        <para>Specifies the set of reasons that a windowActivated event was raised.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.WSA.WindowActivationState.CodeActivated">
      <summary>
        <para>The window was activated.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.WSA.WindowActivationState.Deactivated">
      <summary>
        <para>The window was deactivated.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.WSA.WindowActivationState.PointerActivated">
      <summary>
        <para>The window was activated by pointer interaction.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.WSA.WindowSizeChanged">
      <summary>
        <para>This event occurs when window rendering size changes.</para>
      </summary>
      <param name="width"></param>
      <param name="height"></param>
    </member>
    <member name="T:UnityEngine.YieldInstruction">
      <summary>
        <para>Base class for all yield instructions.</para>
      </summary>
    </member>
  </members>
</doc>
